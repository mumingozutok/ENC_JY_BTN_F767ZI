
LCD_Button_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007608  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08007800  08007800  00017800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a20  08007a20  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a28  08007a28  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a2c  08007a2c  00017a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08007a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000093c  20000054  08007a84  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000990  08007a84  00020990  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157d0  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a5e  00000000  00000000  00035852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  000392b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002983d  00000000  00000000  0003bb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181d2  00000000  00000000  0006534d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100503  00000000  00000000  0007d51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017da22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005540  00000000  00000000  0017da78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000054 	.word	0x20000054
 8000214:	00000000 	.word	0x00000000
 8000218:	080077e8 	.word	0x080077e8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000058 	.word	0x20000058
 8000234:	080077e8 	.word	0x080077e8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <initiate_input_channels>:
} Digital_Channel;

static Digital_Channel inputChannel[3];
static Digital_Channel outputChannel[3];

void initiate_input_channels(){
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	inputChannel[0].port = GPIOF;
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <initiate_input_channels+0x34>)
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <initiate_input_channels+0x38>)
 8000538:	601a      	str	r2, [r3, #0]
	inputChannel[0].pin = GPIO_PIN_3; //EXT3
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <initiate_input_channels+0x34>)
 800053c:	2208      	movs	r2, #8
 800053e:	605a      	str	r2, [r3, #4]

	inputChannel[1].port = GPIOF;
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <initiate_input_channels+0x34>)
 8000542:	4a09      	ldr	r2, [pc, #36]	; (8000568 <initiate_input_channels+0x38>)
 8000544:	609a      	str	r2, [r3, #8]
	inputChannel[1].pin = GPIO_PIN_5; //EXT5
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <initiate_input_channels+0x34>)
 8000548:	2220      	movs	r2, #32
 800054a:	60da      	str	r2, [r3, #12]

	inputChannel[2].port = GPIOF;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <initiate_input_channels+0x34>)
 800054e:	4a06      	ldr	r2, [pc, #24]	; (8000568 <initiate_input_channels+0x38>)
 8000550:	611a      	str	r2, [r3, #16]
	inputChannel[2].pin = GPIO_PIN_10; //EXT10
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <initiate_input_channels+0x34>)
 8000554:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000558:	615a      	str	r2, [r3, #20]
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	20000070 	.word	0x20000070
 8000568:	40021400 	.word	0x40021400

0800056c <initiate_output_channels>:

void initiate_output_channels(){
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	outputChannel[0].port = GPIOF;
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <initiate_output_channels+0x34>)
 8000572:	4a0c      	ldr	r2, [pc, #48]	; (80005a4 <initiate_output_channels+0x38>)
 8000574:	601a      	str	r2, [r3, #0]
	outputChannel[0].pin = GPIO_PIN_0;
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <initiate_output_channels+0x34>)
 8000578:	2201      	movs	r2, #1
 800057a:	605a      	str	r2, [r3, #4]

	outputChannel[1].port = GPIOF;
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <initiate_output_channels+0x34>)
 800057e:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <initiate_output_channels+0x38>)
 8000580:	609a      	str	r2, [r3, #8]
	outputChannel[1].pin = GPIO_PIN_2;
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <initiate_output_channels+0x34>)
 8000584:	2204      	movs	r2, #4
 8000586:	60da      	str	r2, [r3, #12]

	outputChannel[2].port = GPIOF;
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <initiate_output_channels+0x34>)
 800058a:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <initiate_output_channels+0x38>)
 800058c:	611a      	str	r2, [r3, #16]
	outputChannel[2].pin = GPIO_PIN_13;
 800058e:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <initiate_output_channels+0x34>)
 8000590:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000594:	615a      	str	r2, [r3, #20]
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	20000088 	.word	0x20000088
 80005a4:	40021400 	.word	0x40021400

080005a8 <hal_gpio_write_pin>:

uint8_t uart_rx_data;

//Leds are connected to: PF0-PF2-PF13
//Please write down GPIO output function in your hardware
void hal_gpio_write_pin(uint16_t chNum, uint8_t value){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	460a      	mov	r2, r1
 80005b2:	80fb      	strh	r3, [r7, #6]
 80005b4:	4613      	mov	r3, r2
 80005b6:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(outputChannel[chNum].port, outputChannel[chNum].pin, value);
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <hal_gpio_write_pin+0x38>)
 80005bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80005c0:	4618      	mov	r0, r3
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <hal_gpio_write_pin+0x38>)
 80005c6:	00db      	lsls	r3, r3, #3
 80005c8:	4413      	add	r3, r2
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	797a      	ldrb	r2, [r7, #5]
 80005d0:	4619      	mov	r1, r3
 80005d2:	f002 fb6f 	bl	8002cb4 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000088 	.word	0x20000088

080005e4 <hal_gpio_read_pin>:

uint8_t  hal_gpio_read_pin(uint32_t chNum){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	//return values >= 2, depicts error
	return HAL_GPIO_ReadPin(inputChannel[chNum].port, inputChannel[chNum].pin);
 80005ec:	4a09      	ldr	r2, [pc, #36]	; (8000614 <hal_gpio_read_pin+0x30>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80005f4:	4618      	mov	r0, r3
 80005f6:	4a07      	ldr	r2, [pc, #28]	; (8000614 <hal_gpio_read_pin+0x30>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	4413      	add	r3, r2
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	b29b      	uxth	r3, r3
 8000602:	4619      	mov	r1, r3
 8000604:	f002 fb3e 	bl	8002c84 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0

}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000070 	.word	0x20000070

08000618 <hal_get_tick>:

//Please write down "get system tick" function in your hardware
uint32_t hal_get_tick(){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800061c:	f000 ffa8 	bl	8001570 <HAL_GetTick>
 8000620:	4603      	mov	r3, r0
}
 8000622:	4618      	mov	r0, r3
 8000624:	bd80      	pop	{r7, pc}

08000626 <hal_init_tick>:

void /*__attribute__((weak))*/ hal_init_tick(){
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
	HAL_InitTick(0);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 ff5c 	bl	80014e8 <HAL_InitTick>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <init_comm_data_service>:

//Communication Channel Adaptation

//Please write down functions for your communication channel
//And put this function right after your initialisations
void init_comm_data_service(){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(ra.comm_huart, &uart_rx_data, 1);
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <init_comm_data_service+0x18>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	4904      	ldr	r1, [pc, #16]	; (8000650 <init_comm_data_service+0x1c>)
 8000640:	4618      	mov	r0, r3
 8000642:	f004 fe15 	bl	8005270 <HAL_UART_Receive_IT>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000000 	.word	0x20000000
 8000650:	200000f8 	.word	0x200000f8

08000654 <init_comm_timing_service>:

//Please write down functions for communication timing services
//And put this function right after your initialisations
void init_comm_timing_service(){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(ra.comm_htim);
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <init_comm_timing_service+0x1c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f003 fd23 	bl	80040a8 <HAL_TIM_Base_Start_IT>
	stop_comm_timer(ra.comm_htim);
 8000662:	4b03      	ldr	r3, [pc, #12]	; (8000670 <init_comm_timing_service+0x1c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f822 	bl	80006b0 <stop_comm_timer>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000000 	.word	0x20000000

08000674 <start_comm_timer>:

void start_comm_timer(TIM_HandleTypeDef* htim){
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f022 0201 	bic.w	r2, r2, #1
 800068a:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	; 0x24
	htim->Instance->CR1 |= 0x01; //Start Timer
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f042 0201 	orr.w	r2, r2, #1
 80006a2:	601a      	str	r2, [r3, #0]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <stop_comm_timer>:

void stop_comm_timer(TIM_HandleTypeDef* htim){
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f022 0201 	bic.w	r2, r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <HAL_UART_RxCpltCallback>:

//Callbacks
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &uart_rx_data, 1);
 80006e4:	2201      	movs	r2, #1
 80006e6:	4909      	ldr	r1, [pc, #36]	; (800070c <HAL_UART_RxCpltCallback+0x30>)
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f004 fdc1 	bl	8005270 <HAL_UART_Receive_IT>
	start_comm_timer(ra.comm_htim);
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_UART_RxCpltCallback+0x34>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ffbe 	bl	8000674 <start_comm_timer>

	//When new data received copy this data to the runtime buffers
	Runtime_CommDataService_NewData_Received(0, &uart_rx_data, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	4904      	ldr	r1, [pc, #16]	; (800070c <HAL_UART_RxCpltCallback+0x30>)
 80006fc:	2000      	movs	r0, #0
 80006fe:	f005 fffa 	bl	80066f6 <Runtime_CommDataService_NewData_Received>
	User_Callback_Function* ucf = get_ucf();
	if(ucf[MODBUS_UART_CALLBACK_FUNCTION_SLOT].f != 0){
		ucf[MODBUS_UART_CALLBACK_FUNCTION_SLOT].f(&uart_rx_data);
	}
	*/
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000f8 	.word	0x200000f8
 8000710:	20000000 	.word	0x20000000

08000714 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	if(htim == ra.comm_htim){
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	429a      	cmp	r2, r3
 8000724:	d107      	bne.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x22>
		stop_comm_timer(ra.comm_htim);
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffc0 	bl	80006b0 <stop_comm_timer>

		//External trigger makes runtime to process data
		//This trigging is needed for Modbus (3.5 Char)
		Runtime_CommDataService_Process_DataBuffer(0);
 8000730:	2000      	movs	r0, #0
 8000732:	f006 f80b 	bl	800674c <Runtime_CommDataService_Process_DataBuffer>
	}
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000000 	.word	0x20000000

08000744 <hal_modbus_uart_tx>:

//Modbus UART Transmit Functions
void /*__attribute__((weak))*/ hal_modbus_uart_tx(uint8_t* pData, uint16_t Size){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(ra.comm_huart, pData, Size);
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <hal_modbus_uart_tx+0x24>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	887a      	ldrh	r2, [r7, #2]
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	4618      	mov	r0, r3
 800075a:	f004 fd2d 	bl	80051b8 <HAL_UART_Transmit_IT>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000000 	.word	0x20000000

0800076c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <get_uniqueid>:

//-----------------------UNIQUE ID-----------------------------------------
void get_uniqueid(uint8_t* id, uint16_t len){
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
	uint32_t* buf = id;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	60fb      	str	r3, [r7, #12]
	buf[0] 	= (uint32_t) READ_REG(*((uint32_t *)UID_BASE));
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <get_uniqueid+0x38>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	601a      	str	r2, [r3, #0]
	buf[1] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x04U)));
 8000798:	4a08      	ldr	r2, [pc, #32]	; (80007bc <get_uniqueid+0x3c>)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3304      	adds	r3, #4
 800079e:	6812      	ldr	r2, [r2, #0]
 80007a0:	601a      	str	r2, [r3, #0]
	buf[2] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x14U)));
 80007a2:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <get_uniqueid+0x40>)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3308      	adds	r3, #8
 80007a8:	6812      	ldr	r2, [r2, #0]
 80007aa:	601a      	str	r2, [r3, #0]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	1ff0f420 	.word	0x1ff0f420
 80007bc:	1ff0f424 	.word	0x1ff0f424
 80007c0:	1ff0f434 	.word	0x1ff0f434

080007c4 <get_flash_memory_info>:


#define ADDR_FLASH_SECTOR_23     ((uint32_t)0x081E0000)
#define FLASH_MEMORY_SIZE (128*1024)

void get_flash_memory_info(uint32_t* start_addr, uint32_t* size){
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
	*start_addr = ADDR_FLASH_SECTOR_23;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <get_flash_memory_info+0x24>)
 80007d2:	601a      	str	r2, [r3, #0]
	*size = FLASH_MEMORY_SIZE;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007da:	601a      	str	r2, [r3, #0]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	081e0000 	.word	0x081e0000

080007ec <write_to_flash>:

uint8_t write_to_flash(uint8_t* p, uint32_t start_addr, uint16_t size)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	757b      	strb	r3, [r7, #21]
	uint16_t i;
	uint32_t data;

	HAL_FLASH_Unlock();
 80007fe:	f001 fe35 	bl	800246c <HAL_FLASH_Unlock>

	for (i = 0; i < size; i+=4) {
 8000802:	2300      	movs	r3, #0
 8000804:	82fb      	strh	r3, [r7, #22]
 8000806:	e01a      	b.n	800083e <write_to_flash+0x52>
                data = *(uint32_t*)(p+i);
 8000808:	8afb      	ldrh	r3, [r7, #22]
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4413      	add	r3, r2
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	613b      	str	r3, [r7, #16]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_addr + i, data) == HAL_OK) ret = 1;
 8000812:	8afa      	ldrh	r2, [r7, #22]
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	18d1      	adds	r1, r2, r3
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	461a      	mov	r2, r3
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	2002      	movs	r0, #2
 8000822:	f001 fdc7 	bl	80023b4 <HAL_FLASH_Program>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <write_to_flash+0x46>
 800082c:	2301      	movs	r3, #1
 800082e:	757b      	strb	r3, [r7, #21]
 8000830:	e002      	b.n	8000838 <write_to_flash+0x4c>
		else {
			ret = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	757b      	strb	r3, [r7, #21]
			break;
 8000836:	e006      	b.n	8000846 <write_to_flash+0x5a>
	for (i = 0; i < size; i+=4) {
 8000838:	8afb      	ldrh	r3, [r7, #22]
 800083a:	3304      	adds	r3, #4
 800083c:	82fb      	strh	r3, [r7, #22]
 800083e:	8afa      	ldrh	r2, [r7, #22]
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	429a      	cmp	r2, r3
 8000844:	d3e0      	bcc.n	8000808 <write_to_flash+0x1c>
		}
	}

	HAL_FLASH_Lock();
 8000846:	f001 fe33 	bl	80024b0 <HAL_FLASH_Lock>
}
 800084a:	bf00      	nop
 800084c:	4618      	mov	r0, r3
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <erase_flash>:

uint8_t erase_flash(uint32_t start_addr)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint32_t SectorError = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
    FLASH_EraseInitTypeDef EraseInitStruct;


	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000866:	f001 fe01 	bl	800246c <HAL_FLASH_Unlock>

	/* Erase the user Flash area
	(area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS         ;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.Sector = FLASH_SECTOR_23;
 8000872:	2317      	movs	r3, #23
 8000874:	617b      	str	r3, [r7, #20]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8000876:	f107 0220 	add.w	r2, r7, #32
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f001 ff55 	bl	8002730 <HAL_FLASHEx_Erase>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d003      	beq.n	8000894 <erase_flash+0x40>
	{
		ret = 1;
 800088c:	2301      	movs	r3, #1
 800088e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000892:	e002      	b.n	800089a <erase_flash+0x46>
	}

	else ret = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return ret;
 800089a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <initiate_runtime>:


void initiate_runtime()
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
	  init_comm_data_service();
 80008aa:	f7ff fec3 	bl	8000634 <init_comm_data_service>
	  init_comm_timing_service();
 80008ae:	f7ff fed1 	bl	8000654 <init_comm_timing_service>
	  initiate_input_channels();
 80008b2:	f7ff fe3d 	bl	8000530 <initiate_input_channels>
	  initiate_output_channels();
 80008b6:	f7ff fe59 	bl	800056c <initiate_output_channels>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}

080008be <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c2:	f000 fe04 	bl	80014ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f813 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ca:	f000 fa37 	bl	8000d3c <MX_GPIO_Init>
  MX_SPI1_Init();
 80008ce:	f000 f8fb 	bl	8000ac8 <MX_SPI1_Init>
  MX_DMA_Init();
 80008d2:	f000 fa15 	bl	8000d00 <MX_DMA_Init>
  MX_ADC1_Init();
 80008d6:	f000 f897 	bl	8000a08 <MX_ADC1_Init>
  MX_TIM4_Init();
 80008da:	f000 f933 	bl	8000b44 <MX_TIM4_Init>
  MX_UART7_Init();
 80008de:	f000 f9df 	bl	8000ca0 <MX_UART7_Init>
  MX_TIM6_Init();
 80008e2:	f000 f9a7 	bl	8000c34 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  initiate_runtime();
 80008e6:	f7ff ffde 	bl	80008a6 <initiate_runtime>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  mcCore_SM();
 80008ea:	f005 fdc3 	bl	8006474 <mcCore_SM>
 80008ee:	e7fc      	b.n	80008ea <main+0x2c>

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0b8      	sub	sp, #224	; 0xe0
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008fa:	2234      	movs	r2, #52	; 0x34
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f006 ff6a 	bl	80077d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2290      	movs	r2, #144	; 0x90
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f006 ff5b 	bl	80077d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <SystemClock_Config+0x110>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a36      	ldr	r2, [pc, #216]	; (8000a00 <SystemClock_Config+0x110>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <SystemClock_Config+0x110>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800093a:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <SystemClock_Config+0x114>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000942:	4a30      	ldr	r2, [pc, #192]	; (8000a04 <SystemClock_Config+0x114>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6013      	str	r3, [r2, #0]
 800094a:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <SystemClock_Config+0x114>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000956:	2302      	movs	r3, #2
 8000958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095c:	2301      	movs	r3, #1
 800095e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000962:	2310      	movs	r3, #16
 8000964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000968:	2302      	movs	r3, #2
 800096a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000974:	2308      	movs	r3, #8
 8000976:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 800097a:	2390      	movs	r3, #144	; 0x90
 800097c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000980:	2304      	movs	r3, #4
 8000982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000990:	4618      	mov	r0, r3
 8000992:	f002 f9db 	bl	8002d4c <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800099c:	f000 fb42 	bl	8001024 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	230f      	movs	r3, #15
 80009a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009c6:	2102      	movs	r1, #2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fc6d 	bl	80032a8 <HAL_RCC_ClockConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80009d4:	f000 fb26 	bl	8001024 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80009d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80009de:	2300      	movs	r3, #0
 80009e0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 fe34 	bl	8003654 <HAL_RCCEx_PeriphCLKConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x106>
  {
    Error_Handler();
 80009f2:	f000 fb17 	bl	8001024 <Error_Handler>
  }
}
 80009f6:	bf00      	nop
 80009f8:	37e0      	adds	r7, #224	; 0xe0
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000

08000a08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a1a:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a1c:	4a28      	ldr	r2, [pc, #160]	; (8000ac0 <MX_ADC1_Init+0xb8>)
 8000a1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a32:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a38:	4b20      	ldr	r3, [pc, #128]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a48:	4a1e      	ldr	r2, [pc, #120]	; (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a66:	4815      	ldr	r0, [pc, #84]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a68:	f000 fd8e 	bl	8001588 <HAL_ADC_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a72:	f000 fad7 	bl	8001024 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a76:	2303      	movs	r3, #3
 8000a78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000a88:	f000 fdc2 	bl	8001610 <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a92:	f000 fac7 	bl	8001024 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a96:	230a      	movs	r3, #10
 8000a98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_ADC1_Init+0xb4>)
 8000aa4:	f000 fdb4 	bl	8001610 <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000aae:	f000 fab9 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000021c 	.word	0x2000021c
 8000ac0:	40012000 	.word	0x40012000
 8000ac4:	0f000001 	.word	0x0f000001

08000ac8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <MX_SPI1_Init+0x78>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000adc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ae0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000ae4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ae8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b00:	2220      	movs	r2, #32
 8000b02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b24:	2208      	movs	r2, #8
 8000b26:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b2a:	f003 f9bb 	bl	8003ea4 <HAL_SPI_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000b34:	f000 fa76 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000314 	.word	0x20000314
 8000b40:	40013000 	.word	0x40013000

08000b44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08e      	sub	sp, #56	; 0x38
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
 8000b72:	615a      	str	r2, [r3, #20]
 8000b74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b76:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <MX_TIM4_Init+0xe8>)
 8000b78:	4a2d      	ldr	r2, [pc, #180]	; (8000c30 <MX_TIM4_Init+0xec>)
 8000b7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <MX_TIM4_Init+0xe8>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b82:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <MX_TIM4_Init+0xe8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 360;
 8000b88:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <MX_TIM4_Init+0xe8>)
 8000b8a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000b8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b90:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <MX_TIM4_Init+0xe8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b96:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <MX_TIM4_Init+0xe8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b9c:	4823      	ldr	r0, [pc, #140]	; (8000c2c <MX_TIM4_Init+0xe8>)
 8000b9e:	f003 fa2c 	bl	8003ffa <HAL_TIM_Base_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ba8:	f000 fa3c 	bl	8001024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481c      	ldr	r0, [pc, #112]	; (8000c2c <MX_TIM4_Init+0xe8>)
 8000bba:	f003 fd7d 	bl	80046b8 <HAL_TIM_ConfigClockSource>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000bc4:	f000 fa2e 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bc8:	4818      	ldr	r0, [pc, #96]	; (8000c2c <MX_TIM4_Init+0xe8>)
 8000bca:	f003 fae5 	bl	8004198 <HAL_TIM_PWM_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000bd4:	f000 fa26 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	4811      	ldr	r0, [pc, #68]	; (8000c2c <MX_TIM4_Init+0xe8>)
 8000be8:	f004 f9ec 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000bf2:	f000 fa17 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf6:	2360      	movs	r3, #96	; 0x60
 8000bf8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c06:	463b      	mov	r3, r7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4807      	ldr	r0, [pc, #28]	; (8000c2c <MX_TIM4_Init+0xe8>)
 8000c0e:	f003 fc43 	bl	8004498 <HAL_TIM_PWM_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000c18:	f000 fa04 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <MX_TIM4_Init+0xe8>)
 8000c1e:	f000 fb3d 	bl	800129c <HAL_TIM_MspPostInit>

}
 8000c22:	bf00      	nop
 8000c24:	3738      	adds	r7, #56	; 0x38
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000180 	.word	0x20000180
 8000c30:	40000800 	.word	0x40000800

08000c34 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_TIM6_Init+0x64>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <MX_TIM6_Init+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_TIM6_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_TIM6_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <MX_TIM6_Init+0x64>)
 8000c58:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c5c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_TIM6_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <MX_TIM6_Init+0x64>)
 8000c66:	f003 f9c8 	bl	8003ffa <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c70:	f000 f9d8 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_TIM6_Init+0x64>)
 8000c82:	f004 f99f 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c8c:	f000 f9ca 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200002c8 	.word	0x200002c8
 8000c9c:	40001000 	.word	0x40001000

08000ca0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_UART7_Init+0x58>)
 8000ca6:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <MX_UART7_Init+0x5c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_UART7_Init+0x58>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_UART7_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_UART7_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_UART7_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_UART7_Init+0x58>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_UART7_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_UART7_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_UART7_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_UART7_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_UART7_Init+0x58>)
 8000ce4:	f004 fa1a 	bl	800511c <HAL_UART_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000cee:	f000 f999 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000fc 	.word	0x200000fc
 8000cfc:	40007800 	.word	0x40007800

08000d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_DMA_Init+0x38>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <MX_DMA_Init+0x38>)
 8000d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_DMA_Init+0x38>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2038      	movs	r0, #56	; 0x38
 8000d24:	f000 ff93 	bl	8001c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d28:	2038      	movs	r0, #56	; 0x38
 8000d2a:	f000 ffac 	bl	8001c86 <HAL_NVIC_EnableIRQ>

}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d52:	4b72      	ldr	r3, [pc, #456]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a71      	ldr	r2, [pc, #452]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000d58:	f043 0320 	orr.w	r3, r3, #32
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b6f      	ldr	r3, [pc, #444]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0320 	and.w	r3, r3, #32
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6a:	4b6c      	ldr	r3, [pc, #432]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a6b      	ldr	r2, [pc, #428]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b69      	ldr	r3, [pc, #420]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	4b66      	ldr	r3, [pc, #408]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a65      	ldr	r2, [pc, #404]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b63      	ldr	r3, [pc, #396]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b60      	ldr	r3, [pc, #384]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a5f      	ldr	r2, [pc, #380]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b5d      	ldr	r3, [pc, #372]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b5a      	ldr	r3, [pc, #360]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a59      	ldr	r2, [pc, #356]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b57      	ldr	r3, [pc, #348]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dca:	4b54      	ldr	r3, [pc, #336]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a53      	ldr	r2, [pc, #332]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b51      	ldr	r3, [pc, #324]	; (8000f1c <MX_GPIO_Init+0x1e0>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LD4_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f242 0105 	movw	r1, #8197	; 0x2005
 8000de8:	484d      	ldr	r0, [pc, #308]	; (8000f20 <MX_GPIO_Init+0x1e4>)
 8000dea:	f001 ff63 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2110      	movs	r1, #16
 8000df2:	484c      	ldr	r0, [pc, #304]	; (8000f24 <MX_GPIO_Init+0x1e8>)
 8000df4:	f001 ff5e 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f244 0181 	movw	r1, #16513	; 0x4081
 8000dfe:	484a      	ldr	r0, [pc, #296]	; (8000f28 <MX_GPIO_Init+0x1ec>)
 8000e00:	f001 ff58 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000e0a:	4848      	ldr	r0, [pc, #288]	; (8000f2c <MX_GPIO_Init+0x1f0>)
 8000e0c:	f001 ff52 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD5_Pin|LD6_Pin;
 8000e10:	f242 0305 	movw	r3, #8197	; 0x2005
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	483d      	ldr	r0, [pc, #244]	; (8000f20 <MX_GPIO_Init+0x1e4>)
 8000e2a:	f001 fd7f 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF5 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10;
 8000e2e:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	4837      	ldr	r0, [pc, #220]	; (8000f20 <MX_GPIO_Init+0x1e4>)
 8000e44:	f001 fd72 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4831      	ldr	r0, [pc, #196]	; (8000f24 <MX_GPIO_Init+0x1e8>)
 8000e60:	f001 fd64 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : Joystick_Button_Pin */
  GPIO_InitStruct.Pin = Joystick_Button_Pin;
 8000e64:	2340      	movs	r3, #64	; 0x40
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e68:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <MX_GPIO_Init+0x1f4>)
 8000e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Joystick_Button_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	482b      	ldr	r0, [pc, #172]	; (8000f24 <MX_GPIO_Init+0x1e8>)
 8000e78:	f001 fd58 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e7c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	4619      	mov	r1, r3
 8000e94:	4824      	ldr	r0, [pc, #144]	; (8000f28 <MX_GPIO_Init+0x1ec>)
 8000e96:	f001 fd49 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8000e9a:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ea0:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <MX_GPIO_Init+0x1f8>)
 8000ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	4822      	ldr	r0, [pc, #136]	; (8000f38 <MX_GPIO_Init+0x1fc>)
 8000eb0:	f001 fd3c 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_GPIO_Init+0x1f4>)
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481c      	ldr	r0, [pc, #112]	; (8000f38 <MX_GPIO_Init+0x1fc>)
 8000ec8:	f001 fd30 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Key1_Pin LCD_Key2_Pin LCD_Key3_Pin LCD_Key0_Pin */
  GPIO_InitStruct.Pin = LCD_Key1_Pin|LCD_Key2_Pin|LCD_Key3_Pin|LCD_Key0_Pin;
 8000ecc:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4812      	ldr	r0, [pc, #72]	; (8000f2c <MX_GPIO_Init+0x1f0>)
 8000ee2:	f001 fd23 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ee6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	480b      	ldr	r0, [pc, #44]	; (8000f2c <MX_GPIO_Init+0x1f0>)
 8000f00:	f001 fd14 	bl	800292c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	2017      	movs	r0, #23
 8000f0a:	f000 fea0 	bl	8001c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f0e:	2017      	movs	r0, #23
 8000f10:	f000 feb9 	bl	8001c86 <HAL_NVIC_EnableIRQ>

}
 8000f14:	bf00      	nop
 8000f16:	3730      	adds	r7, #48	; 0x30
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40021400 	.word	0x40021400
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	10210000 	.word	0x10210000
 8000f34:	10310000 	.word	0x10310000
 8000f38:	40021800 	.word	0x40021800

08000f3c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	80fb      	strh	r3, [r7, #6]

	if(Encoder_button_time_start_memory_counter >= 8 ) Encoder_button_time_start_memory_counter = 0;
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b07      	cmp	r3, #7
 8000f4c:	d902      	bls.n	8000f54 <HAL_GPIO_EXTI_Callback+0x18>
 8000f4e:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
	if(joystick_button_time_start_memory_counter >= 8 ) joystick_button_time_start_memory_counter = 0;
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b07      	cmp	r3, #7
 8000f5a:	d902      	bls.n	8000f62 <HAL_GPIO_EXTI_Callback+0x26>
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	switch(GPIO_Pin)
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f68:	d031      	beq.n	8000fce <HAL_GPIO_EXTI_Callback+0x92>
 8000f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f6e:	dc32      	bgt.n	8000fd6 <HAL_GPIO_EXTI_Callback+0x9a>
 8000f70:	2b80      	cmp	r3, #128	; 0x80
 8000f72:	d01b      	beq.n	8000fac <HAL_GPIO_EXTI_Callback+0x70>
 8000f74:	2b80      	cmp	r3, #128	; 0x80
 8000f76:	dc2e      	bgt.n	8000fd6 <HAL_GPIO_EXTI_Callback+0x9a>
 8000f78:	2b20      	cmp	r3, #32
 8000f7a:	d002      	beq.n	8000f82 <HAL_GPIO_EXTI_Callback+0x46>
 8000f7c:	2b40      	cmp	r3, #64	; 0x40
 8000f7e:	d004      	beq.n	8000f8a <HAL_GPIO_EXTI_Callback+0x4e>
		break;
	case 256: // ENCODER_B
		change_flag(&ENC_B_flag);
		break;
	}
}
 8000f80:	e029      	b.n	8000fd6 <HAL_GPIO_EXTI_Callback+0x9a>
		change_flag(&ENC_A_flag);
 8000f82:	4819      	ldr	r0, [pc, #100]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000f84:	f000 f83c 	bl	8001000 <change_flag>
		break;
 8000f88:	e025      	b.n	8000fd6 <HAL_GPIO_EXTI_Callback+0x9a>
		change_flag(&joystick_button_flag);
 8000f8a:	4818      	ldr	r0, [pc, #96]	; (8000fec <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f8c:	f000 f838 	bl	8001000 <change_flag>
		joystick_button_time_start[joystick_button_time_start_memory_counter++] = HAL_GetTick();
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	b2d1      	uxtb	r1, r2
 8000f98:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f9a:	7011      	strb	r1, [r2, #0]
 8000f9c:	461c      	mov	r4, r3
 8000f9e:	f000 fae7 	bl	8001570 <HAL_GetTick>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000fa6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		break;
 8000faa:	e014      	b.n	8000fd6 <HAL_GPIO_EXTI_Callback+0x9a>
		change_flag(&ENC_BUTTON_flag);
 8000fac:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000fae:	f000 f827 	bl	8001000 <change_flag>
		Encoder_button_time_start[Encoder_button_time_start_memory_counter++] = HAL_GetTick();
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	b2d1      	uxtb	r1, r2
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000fbc:	7011      	strb	r1, [r2, #0]
 8000fbe:	461c      	mov	r4, r3
 8000fc0:	f000 fad6 	bl	8001570 <HAL_GetTick>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000fc8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		break;
 8000fcc:	e003      	b.n	8000fd6 <HAL_GPIO_EXTI_Callback+0x9a>
		change_flag(&ENC_B_flag);
 8000fce:	480b      	ldr	r0, [pc, #44]	; (8000ffc <HAL_GPIO_EXTI_Callback+0xc0>)
 8000fd0:	f000 f816 	bl	8001000 <change_flag>
		break;
 8000fd4:	bf00      	nop
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd90      	pop	{r4, r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000a5 	.word	0x200000a5
 8000fe4:	200000a1 	.word	0x200000a1
 8000fe8:	200000a2 	.word	0x200000a2
 8000fec:	200000a0 	.word	0x200000a0
 8000ff0:	200001cc 	.word	0x200001cc
 8000ff4:	200000a4 	.word	0x200000a4
 8000ff8:	200001f4 	.word	0x200001f4
 8000ffc:	200000a3 	.word	0x200000a3

08001000 <change_flag>:
void change_flag(uint8_t *flag)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if(*flag == 0)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <change_flag+0x16>
	{
		*flag = 1;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
	}
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800102c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001030:	4801      	ldr	r0, [pc, #4]	; (8001038 <Error_Handler+0x14>)
 8001032:	f001 fe58 	bl	8002ce6 <HAL_GPIO_TogglePin>
 8001036:	e7f9      	b.n	800102c <Error_Handler+0x8>
 8001038:	40020400 	.word	0x40020400

0800103c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_MspInit+0x44>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_MspInit+0x44>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_MspInit+0x44>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_MspInit+0x44>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_MspInit+0x44>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_MspInit+0x44>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a39      	ldr	r2, [pc, #228]	; (8001188 <HAL_ADC_MspInit+0x104>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d16b      	bne.n	800117e <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010a6:	4b39      	ldr	r3, [pc, #228]	; (800118c <HAL_ADC_MspInit+0x108>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a38      	ldr	r2, [pc, #224]	; (800118c <HAL_ADC_MspInit+0x108>)
 80010ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b36      	ldr	r3, [pc, #216]	; (800118c <HAL_ADC_MspInit+0x108>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	4b33      	ldr	r3, [pc, #204]	; (800118c <HAL_ADC_MspInit+0x108>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a32      	ldr	r2, [pc, #200]	; (800118c <HAL_ADC_MspInit+0x108>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <HAL_ADC_MspInit+0x108>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b2d      	ldr	r3, [pc, #180]	; (800118c <HAL_ADC_MspInit+0x108>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a2c      	ldr	r2, [pc, #176]	; (800118c <HAL_ADC_MspInit+0x108>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_ADC_MspInit+0x108>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010ee:	2301      	movs	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f2:	2303      	movs	r3, #3
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4823      	ldr	r0, [pc, #140]	; (8001190 <HAL_ADC_MspInit+0x10c>)
 8001102:	f001 fc13 	bl	800292c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001106:	2308      	movs	r3, #8
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110a:	2303      	movs	r3, #3
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	481e      	ldr	r0, [pc, #120]	; (8001194 <HAL_ADC_MspInit+0x110>)
 800111a:	f001 fc07 	bl	800292c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <HAL_ADC_MspInit+0x114>)
 8001120:	4a1e      	ldr	r2, [pc, #120]	; (800119c <HAL_ADC_MspInit+0x118>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_ADC_MspInit+0x114>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_ADC_MspInit+0x114>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_ADC_MspInit+0x114>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_ADC_MspInit+0x114>)
 8001138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800113c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_ADC_MspInit+0x114>)
 8001140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001144:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_ADC_MspInit+0x114>)
 8001148:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_ADC_MspInit+0x114>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_ADC_MspInit+0x114>)
 8001156:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800115a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_ADC_MspInit+0x114>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <HAL_ADC_MspInit+0x114>)
 8001164:	f000 fdaa 	bl	8001cbc <HAL_DMA_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800116e:	f7ff ff59 	bl	8001024 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a08      	ldr	r2, [pc, #32]	; (8001198 <HAL_ADC_MspInit+0x114>)
 8001176:	639a      	str	r2, [r3, #56]	; 0x38
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_ADC_MspInit+0x114>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40012000 	.word	0x40012000
 800118c:	40023800 	.word	0x40023800
 8001190:	40020800 	.word	0x40020800
 8001194:	40020000 	.word	0x40020000
 8001198:	20000268 	.word	0x20000268
 800119c:	40026410 	.word	0x40026410

080011a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_SPI_MspInit+0x7c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d127      	bne.n	8001212 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <HAL_SPI_MspInit+0x80>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a16      	ldr	r2, [pc, #88]	; (8001220 <HAL_SPI_MspInit+0x80>)
 80011c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_SPI_MspInit+0x80>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_SPI_MspInit+0x80>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a10      	ldr	r2, [pc, #64]	; (8001220 <HAL_SPI_MspInit+0x80>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_SPI_MspInit+0x80>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011f2:	23a0      	movs	r3, #160	; 0xa0
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001202:	2305      	movs	r3, #5
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <HAL_SPI_MspInit+0x84>)
 800120e:	f001 fb8d 	bl	800292c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	; 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40013000 	.word	0x40013000
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000

08001228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a16      	ldr	r2, [pc, #88]	; (8001290 <HAL_TIM_Base_MspInit+0x68>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d10c      	bne.n	8001254 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_TIM_Base_MspInit+0x6c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <HAL_TIM_Base_MspInit+0x6c>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <HAL_TIM_Base_MspInit+0x6c>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001252:	e018      	b.n	8001286 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_TIM_Base_MspInit+0x70>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d113      	bne.n	8001286 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_TIM_Base_MspInit+0x6c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <HAL_TIM_Base_MspInit+0x6c>)
 8001264:	f043 0310 	orr.w	r3, r3, #16
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_TIM_Base_MspInit+0x6c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2036      	movs	r0, #54	; 0x36
 800127c:	f000 fce7 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001280:	2036      	movs	r0, #54	; 0x36
 8001282:	f000 fd00 	bl	8001c86 <HAL_NVIC_EnableIRQ>
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40000800 	.word	0x40000800
 8001294:	40023800 	.word	0x40023800
 8001298:	40001000 	.word	0x40001000

0800129c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_TIM_MspPostInit+0x64>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d11b      	bne.n	80012f6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_TIM_MspPostInit+0x68>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <HAL_TIM_MspPostInit+0x68>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_TIM_MspPostInit+0x68>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = LCD_BackLight_Pin;
 80012d6:	2340      	movs	r3, #64	; 0x40
 80012d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BackLight_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_TIM_MspPostInit+0x6c>)
 80012f2:	f001 fb1b 	bl	800292c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40000800 	.word	0x40000800
 8001304:	40023800 	.word	0x40023800
 8001308:	40020400 	.word	0x40020400

0800130c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_UART_MspInit+0x8c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d12f      	bne.n	800138e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <HAL_UART_MspInit+0x90>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a1a      	ldr	r2, [pc, #104]	; (800139c <HAL_UART_MspInit+0x90>)
 8001334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_UART_MspInit+0x90>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_UART_MspInit+0x90>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a14      	ldr	r2, [pc, #80]	; (800139c <HAL_UART_MspInit+0x90>)
 800134c:	f043 0320 	orr.w	r3, r3, #32
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_UART_MspInit+0x90>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800135e:	23c0      	movs	r3, #192	; 0xc0
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800136e:	2308      	movs	r3, #8
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <HAL_UART_MspInit+0x94>)
 800137a:	f001 fad7 	bl	800292c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2052      	movs	r0, #82	; 0x52
 8001384:	f000 fc63 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001388:	2052      	movs	r0, #82	; 0x52
 800138a:	f000 fc7c 	bl	8001c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40007800 	.word	0x40007800
 800139c:	40023800 	.word	0x40023800
 80013a0:	40021400 	.word	0x40021400

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f000 f8aa 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80013fc:	2020      	movs	r0, #32
 80013fe:	f001 fc8d 	bl	8002d1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001402:	2040      	movs	r0, #64	; 0x40
 8001404:	f001 fc8a 	bl	8002d1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001408:	2080      	movs	r0, #128	; 0x80
 800140a:	f001 fc87 	bl	8002d1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800140e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001412:	f001 fc83 	bl	8002d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <TIM6_DAC_IRQHandler+0x10>)
 8001422:	f002 ff1a 	bl	800425a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200002c8 	.word	0x200002c8

08001430 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <DMA2_Stream0_IRQHandler+0x10>)
 8001436:	f000 fd81 	bl	8001f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000268 	.word	0x20000268

08001444 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <UART7_IRQHandler+0x10>)
 800144a:	f003 ff4f 	bl	80052ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200000fc 	.word	0x200000fc

08001458 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001482:	490e      	ldr	r1, [pc, #56]	; (80014bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001498:	4c0b      	ldr	r4, [pc, #44]	; (80014c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014a6:	f7ff ffd7 	bl	8001458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014aa:	f006 f963 	bl	8007774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ae:	f7ff fa06 	bl	80008be <main>
  bx  lr    
 80014b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80014c0:	08007a30 	.word	0x08007a30
  ldr r2, =_sbss
 80014c4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80014c8:	20000990 	.word	0x20000990

080014cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC_IRQHandler>

080014ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	2003      	movs	r0, #3
 80014d4:	f000 fbb0 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 f805 	bl	80014e8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80014de:	f7ff fdad 	bl	800103c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x58>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fbcb 	bl	8001ca2 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 fb93 	bl	8001c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <HAL_InitTick+0x5c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000008 	.word	0x20000008
 8001540:	20000010 	.word	0x20000010
 8001544:	2000000c 	.word	0x2000000c

08001548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000010 	.word	0x20000010
 800156c:	20000378 	.word	0x20000378

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000378 	.word	0x20000378

08001588 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e031      	b.n	8001602 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fd6c 	bl	8001084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d116      	bne.n	80015f4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_ADC_Init+0x84>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	f043 0202 	orr.w	r2, r3, #2
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f964 	bl	80018a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f023 0303 	bic.w	r3, r3, #3
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40
 80015f2:	e001      	b.n	80015f8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	ffffeefd 	.word	0xffffeefd

08001610 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1c>
 8001628:	2302      	movs	r3, #2
 800162a:	e12a      	b.n	8001882 <HAL_ADC_ConfigChannel+0x272>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b09      	cmp	r3, #9
 800163a:	d93a      	bls.n	80016b2 <HAL_ADC_ConfigChannel+0xa2>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001644:	d035      	beq.n	80016b2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68d9      	ldr	r1, [r3, #12]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	3b1e      	subs	r3, #30
 800165c:	2207      	movs	r2, #7
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	400a      	ands	r2, r1
 800166a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a87      	ldr	r2, [pc, #540]	; (8001890 <HAL_ADC_ConfigChannel+0x280>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d10a      	bne.n	800168c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68d9      	ldr	r1, [r3, #12]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	061a      	lsls	r2, r3, #24
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800168a:	e035      	b.n	80016f8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68d9      	ldr	r1, [r3, #12]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4403      	add	r3, r0
 80016a4:	3b1e      	subs	r3, #30
 80016a6:	409a      	lsls	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b0:	e022      	b.n	80016f8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6919      	ldr	r1, [r3, #16]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	2207      	movs	r2, #7
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43da      	mvns	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	400a      	ands	r2, r1
 80016d4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6919      	ldr	r1, [r3, #16]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	4603      	mov	r3, r0
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4403      	add	r3, r0
 80016ee:	409a      	lsls	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b06      	cmp	r3, #6
 80016fe:	d824      	bhi.n	800174a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	3b05      	subs	r3, #5
 8001712:	221f      	movs	r2, #31
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43da      	mvns	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	400a      	ands	r2, r1
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	3b05      	subs	r3, #5
 800173c:	fa00 f203 	lsl.w	r2, r0, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	635a      	str	r2, [r3, #52]	; 0x34
 8001748:	e04c      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b0c      	cmp	r3, #12
 8001750:	d824      	bhi.n	800179c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b23      	subs	r3, #35	; 0x23
 8001764:	221f      	movs	r2, #31
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	400a      	ands	r2, r1
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	3b23      	subs	r3, #35	; 0x23
 800178e:	fa00 f203 	lsl.w	r2, r0, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	631a      	str	r2, [r3, #48]	; 0x30
 800179a:	e023      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	3b41      	subs	r3, #65	; 0x41
 80017ae:	221f      	movs	r2, #31
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43da      	mvns	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	400a      	ands	r2, r1
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	3b41      	subs	r3, #65	; 0x41
 80017d8:	fa00 f203 	lsl.w	r2, r0, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2a      	ldr	r2, [pc, #168]	; (8001894 <HAL_ADC_ConfigChannel+0x284>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10a      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1f4>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017f6:	d105      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80017f8:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_ADC_ConfigChannel+0x288>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a26      	ldr	r2, [pc, #152]	; (8001898 <HAL_ADC_ConfigChannel+0x288>)
 80017fe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001802:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a22      	ldr	r2, [pc, #136]	; (8001894 <HAL_ADC_ConfigChannel+0x284>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d109      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x212>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b12      	cmp	r3, #18
 8001814:	d105      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_ADC_ConfigChannel+0x288>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a1f      	ldr	r2, [pc, #124]	; (8001898 <HAL_ADC_ConfigChannel+0x288>)
 800181c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001820:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a1b      	ldr	r2, [pc, #108]	; (8001894 <HAL_ADC_ConfigChannel+0x284>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d125      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x268>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a17      	ldr	r2, [pc, #92]	; (8001890 <HAL_ADC_ConfigChannel+0x280>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d003      	beq.n	800183e <HAL_ADC_ConfigChannel+0x22e>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b11      	cmp	r3, #17
 800183c:	d11c      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_ADC_ConfigChannel+0x288>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4a15      	ldr	r2, [pc, #84]	; (8001898 <HAL_ADC_ConfigChannel+0x288>)
 8001844:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001848:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a10      	ldr	r2, [pc, #64]	; (8001890 <HAL_ADC_ConfigChannel+0x280>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d111      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_ADC_ConfigChannel+0x28c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <HAL_ADC_ConfigChannel+0x290>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0c9a      	lsrs	r2, r3, #18
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800186a:	e002      	b.n	8001872 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3b01      	subs	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f9      	bne.n	800186c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	10000012 	.word	0x10000012
 8001894:	40012000 	.word	0x40012000
 8001898:	40012300 	.word	0x40012300
 800189c:	20000008 	.word	0x20000008
 80018a0:	431bde83 	.word	0x431bde83

080018a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80018ac:	4b78      	ldr	r3, [pc, #480]	; (8001a90 <ADC_Init+0x1ec>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a77      	ldr	r2, [pc, #476]	; (8001a90 <ADC_Init+0x1ec>)
 80018b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80018b6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80018b8:	4b75      	ldr	r3, [pc, #468]	; (8001a90 <ADC_Init+0x1ec>)
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4973      	ldr	r1, [pc, #460]	; (8001a90 <ADC_Init+0x1ec>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	021a      	lsls	r2, r3, #8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800191a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6899      	ldr	r1, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	4a58      	ldr	r2, [pc, #352]	; (8001a94 <ADC_Init+0x1f0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d022      	beq.n	800197e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001946:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6899      	ldr	r1, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6899      	ldr	r1, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	e00f      	b.n	800199e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800198c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800199c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0202 	bic.w	r2, r2, #2
 80019ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6899      	ldr	r1, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	005a      	lsls	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01b      	beq.n	8001a04 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6859      	ldr	r1, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	3b01      	subs	r3, #1
 80019f8:	035a      	lsls	r2, r3, #13
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	e007      	b.n	8001a14 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	051a      	lsls	r2, r3, #20
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6899      	ldr	r1, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a56:	025a      	lsls	r2, r3, #9
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6899      	ldr	r1, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	029a      	lsls	r2, r3, #10
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	609a      	str	r2, [r3, #8]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40012300 	.word	0x40012300
 8001a94:	0f000001 	.word	0x0f000001

08001a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	60d3      	str	r3, [r2, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00
 8001adc:	05fa0000 	.word	0x05fa0000

08001ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0307 	and.w	r3, r3, #7
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	db0b      	blt.n	8001b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	f003 021f 	and.w	r2, r3, #31
 8001b14:	4907      	ldr	r1, [pc, #28]	; (8001b34 <__NVIC_EnableIRQ+0x38>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e100 	.word	0xe000e100

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c04:	d301      	bcc.n	8001c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00f      	b.n	8001c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <SysTick_Config+0x40>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c12:	210f      	movs	r1, #15
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f7ff ff8e 	bl	8001b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <SysTick_Config+0x40>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <SysTick_Config+0x40>)
 8001c24:	2207      	movs	r2, #7
 8001c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	e000e010 	.word	0xe000e010

08001c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff29 	bl	8001a98 <__NVIC_SetPriorityGrouping>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c60:	f7ff ff3e 	bl	8001ae0 <__NVIC_GetPriorityGrouping>
 8001c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	6978      	ldr	r0, [r7, #20]
 8001c6c:	f7ff ff8e 	bl	8001b8c <NVIC_EncodePriority>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff5d 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff31 	bl	8001afc <__NVIC_EnableIRQ>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffa2 	bl	8001bf4 <SysTick_Config>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff fc52 	bl	8001570 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e099      	b.n	8001e0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf8:	e00f      	b.n	8001d1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cfa:	f7ff fc39 	bl	8001570 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	d908      	bls.n	8001d1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2203      	movs	r2, #3
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e078      	b.n	8001e0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1e8      	bne.n	8001cfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <HAL_DMA_Init+0x158>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d107      	bne.n	8001d84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f023 0307 	bic.w	r3, r3, #7
 8001d9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d117      	bne.n	8001dde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00e      	beq.n	8001dde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fa7b 	bl	80022bc <DMA_CheckFifoParam>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2240      	movs	r2, #64	; 0x40
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e016      	b.n	8001e0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fa32 	bl	8002250 <DMA_CalcBaseAndBitshift>
 8001dec:	4603      	mov	r3, r0
 8001dee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	223f      	movs	r2, #63	; 0x3f
 8001df6:	409a      	lsls	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	e010803f 	.word	0xe010803f

08001e18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e26:	f7ff fba3 	bl	8001570 <HAL_GetTick>
 8001e2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d008      	beq.n	8001e4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2280      	movs	r2, #128	; 0x80
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e052      	b.n	8001ef0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0216 	bic.w	r2, r2, #22
 8001e58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d103      	bne.n	8001e7a <HAL_DMA_Abort+0x62>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0208 	bic.w	r2, r2, #8
 8001e88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0201 	bic.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9a:	e013      	b.n	8001ec4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e9c:	f7ff fb68 	bl	8001570 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d90c      	bls.n	8001ec4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2220      	movs	r2, #32
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2203      	movs	r2, #3
 8001ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e015      	b.n	8001ef0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1e4      	bne.n	8001e9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed6:	223f      	movs	r2, #63	; 0x3f
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d004      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00c      	b.n	8001f30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2205      	movs	r2, #5
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0201 	bic.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001f48:	4b92      	ldr	r3, [pc, #584]	; (8002194 <HAL_DMA_IRQHandler+0x258>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a92      	ldr	r2, [pc, #584]	; (8002198 <HAL_DMA_IRQHandler+0x25c>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0a9b      	lsrs	r3, r3, #10
 8001f54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	2208      	movs	r2, #8
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01a      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d013      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0204 	bic.w	r2, r2, #4
 8001f8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	2208      	movs	r2, #8
 8001f96:	409a      	lsls	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	2201      	movs	r2, #1
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d012      	beq.n	8001fde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	2201      	movs	r2, #1
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	f043 0202 	orr.w	r2, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d012      	beq.n	8002014 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00b      	beq.n	8002014 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	2204      	movs	r2, #4
 8002002:	409a      	lsls	r2, r3
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	f043 0204 	orr.w	r2, r3, #4
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	2210      	movs	r2, #16
 800201a:	409a      	lsls	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d043      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d03c      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	2210      	movs	r2, #16
 8002038:	409a      	lsls	r2, r3
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d018      	beq.n	800207e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d108      	bne.n	800206c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d024      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4798      	blx	r3
 800206a:	e01f      	b.n	80020ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01b      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
 800207c:	e016      	b.n	80020ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0208 	bic.w	r2, r2, #8
 800209a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	2220      	movs	r2, #32
 80020b2:	409a      	lsls	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 808e 	beq.w	80021da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8086 	beq.w	80021da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	2220      	movs	r2, #32
 80020d4:	409a      	lsls	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d136      	bne.n	8002154 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0216 	bic.w	r2, r2, #22
 80020f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002104:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d103      	bne.n	8002116 <HAL_DMA_IRQHandler+0x1da>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0208 	bic.w	r2, r2, #8
 8002124:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	223f      	movs	r2, #63	; 0x3f
 800212c:	409a      	lsls	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002146:	2b00      	cmp	r3, #0
 8002148:	d07d      	beq.n	8002246 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
        }
        return;
 8002152:	e078      	b.n	8002246 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01c      	beq.n	800219c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d108      	bne.n	8002182 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	2b00      	cmp	r3, #0
 8002176:	d030      	beq.n	80021da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
 8002180:	e02b      	b.n	80021da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	2b00      	cmp	r3, #0
 8002188:	d027      	beq.n	80021da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	4798      	blx	r3
 8002192:	e022      	b.n	80021da <HAL_DMA_IRQHandler+0x29e>
 8002194:	20000008 	.word	0x20000008
 8002198:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10f      	bne.n	80021ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0210 	bic.w	r2, r2, #16
 80021b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d032      	beq.n	8002248 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d022      	beq.n	8002234 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2205      	movs	r2, #5
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0201 	bic.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3301      	adds	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	429a      	cmp	r2, r3
 8002210:	d307      	bcc.n	8002222 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f2      	bne.n	8002206 <HAL_DMA_IRQHandler+0x2ca>
 8002220:	e000      	b.n	8002224 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002222:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
 8002244:	e000      	b.n	8002248 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002246:	bf00      	nop
    }
  }
}
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop

08002250 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	3b10      	subs	r3, #16
 8002260:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <DMA_CalcBaseAndBitshift+0x60>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <DMA_CalcBaseAndBitshift+0x64>)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d908      	bls.n	8002290 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <DMA_CalcBaseAndBitshift+0x68>)
 8002286:	4013      	ands	r3, r2
 8002288:	1d1a      	adds	r2, r3, #4
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	659a      	str	r2, [r3, #88]	; 0x58
 800228e:	e006      	b.n	800229e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <DMA_CalcBaseAndBitshift+0x68>)
 8002298:	4013      	ands	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	aaaaaaab 	.word	0xaaaaaaab
 80022b4:	08007818 	.word	0x08007818
 80022b8:	fffffc00 	.word	0xfffffc00

080022bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d11f      	bne.n	8002316 <DMA_CheckFifoParam+0x5a>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d856      	bhi.n	800238a <DMA_CheckFifoParam+0xce>
 80022dc:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <DMA_CheckFifoParam+0x28>)
 80022de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e2:	bf00      	nop
 80022e4:	080022f5 	.word	0x080022f5
 80022e8:	08002307 	.word	0x08002307
 80022ec:	080022f5 	.word	0x080022f5
 80022f0:	0800238b 	.word	0x0800238b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d046      	beq.n	800238e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002304:	e043      	b.n	800238e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800230e:	d140      	bne.n	8002392 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002314:	e03d      	b.n	8002392 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800231e:	d121      	bne.n	8002364 <DMA_CheckFifoParam+0xa8>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d837      	bhi.n	8002396 <DMA_CheckFifoParam+0xda>
 8002326:	a201      	add	r2, pc, #4	; (adr r2, 800232c <DMA_CheckFifoParam+0x70>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	0800233d 	.word	0x0800233d
 8002330:	08002343 	.word	0x08002343
 8002334:	0800233d 	.word	0x0800233d
 8002338:	08002355 	.word	0x08002355
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
      break;
 8002340:	e030      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d025      	beq.n	800239a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002352:	e022      	b.n	800239a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800235c:	d11f      	bne.n	800239e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002362:	e01c      	b.n	800239e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d903      	bls.n	8002372 <DMA_CheckFifoParam+0xb6>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d003      	beq.n	8002378 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002370:	e018      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
      break;
 8002376:	e015      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00e      	beq.n	80023a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      break;
 8002388:	e00b      	b.n	80023a2 <DMA_CheckFifoParam+0xe6>
      break;
 800238a:	bf00      	nop
 800238c:	e00a      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      break;
 800238e:	bf00      	nop
 8002390:	e008      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002392:	bf00      	nop
 8002394:	e006      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002396:	bf00      	nop
 8002398:	e004      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
 800239c:	e002      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800239e:	bf00      	nop
 80023a0:	e000      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      break;
 80023a2:	bf00      	nop
    }
  } 
  
  return status; 
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop

080023b4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023c6:	4b27      	ldr	r3, [pc, #156]	; (8002464 <HAL_FLASH_Program+0xb0>)
 80023c8:	7d1b      	ldrb	r3, [r3, #20]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_FLASH_Program+0x1e>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e043      	b.n	800245a <HAL_FLASH_Program+0xa6>
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_FLASH_Program+0xb0>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023dc:	f000 f878 	bl	80024d0 <FLASH_WaitForLastOperation>
 80023e0:	4603      	mov	r3, r0
 80023e2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d133      	bne.n	8002452 <HAL_FLASH_Program+0x9e>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d823      	bhi.n	8002438 <HAL_FLASH_Program+0x84>
 80023f0:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <HAL_FLASH_Program+0x44>)
 80023f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	08002409 	.word	0x08002409
 80023fc:	08002415 	.word	0x08002415
 8002400:	08002421 	.word	0x08002421
 8002404:	0800242d 	.word	0x0800242d
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8002408:	783b      	ldrb	r3, [r7, #0]
 800240a:	4619      	mov	r1, r3
 800240c:	68b8      	ldr	r0, [r7, #8]
 800240e:	f000 f921 	bl	8002654 <FLASH_Program_Byte>
        break;
 8002412:	e012      	b.n	800243a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002414:	883b      	ldrh	r3, [r7, #0]
 8002416:	4619      	mov	r1, r3
 8002418:	68b8      	ldr	r0, [r7, #8]
 800241a:	f000 f8f5 	bl	8002608 <FLASH_Program_HalfWord>
        break;
 800241e:	e00c      	b.n	800243a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	68b8      	ldr	r0, [r7, #8]
 8002426:	f000 f8c9 	bl	80025bc <FLASH_Program_Word>
        break;
 800242a:	e006      	b.n	800243a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 800242c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002430:	68b8      	ldr	r0, [r7, #8]
 8002432:	f000 f88d 	bl	8002550 <FLASH_Program_DoubleWord>
        break;
 8002436:	e000      	b.n	800243a <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8002438:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800243a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800243e:	f000 f847 	bl	80024d0 <FLASH_WaitForLastOperation>
 8002442:	4603      	mov	r3, r0
 8002444:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_FLASH_Program+0xb4>)
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	4a07      	ldr	r2, [pc, #28]	; (8002468 <HAL_FLASH_Program+0xb4>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <HAL_FLASH_Program+0xb0>)
 8002454:	2200      	movs	r2, #0
 8002456:	751a      	strb	r2, [r3, #20]

  return status;
 8002458:	7dfb      	ldrb	r3, [r7, #23]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000037c 	.word	0x2000037c
 8002468:	40023c00 	.word	0x40023c00

0800246c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_FLASH_Unlock+0x38>)
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	da0b      	bge.n	8002496 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_FLASH_Unlock+0x38>)
 8002480:	4a09      	ldr	r2, [pc, #36]	; (80024a8 <HAL_FLASH_Unlock+0x3c>)
 8002482:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_FLASH_Unlock+0x38>)
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_FLASH_Unlock+0x40>)
 8002488:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_FLASH_Unlock+0x38>)
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	da01      	bge.n	8002496 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002496:	79fb      	ldrb	r3, [r7, #7]
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40023c00 	.word	0x40023c00
 80024a8:	45670123 	.word	0x45670123
 80024ac:	cdef89ab 	.word	0xcdef89ab

080024b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_FLASH_Lock+0x1c>)
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_FLASH_Lock+0x1c>)
 80024ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024be:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40023c00 	.word	0x40023c00

080024d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80024dc:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <FLASH_WaitForLastOperation+0x78>)
 80024de:	2200      	movs	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80024e2:	f7ff f845 	bl	8001570 <HAL_GetTick>
 80024e6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80024e8:	e010      	b.n	800250c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d00c      	beq.n	800250c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <FLASH_WaitForLastOperation+0x38>
 80024f8:	f7ff f83a 	bl	8001570 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d201      	bcs.n	800250c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e019      	b.n	8002540 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <FLASH_WaitForLastOperation+0x7c>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1e8      	bne.n	80024ea <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <FLASH_WaitForLastOperation+0x7c>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002524:	f000 f8ba 	bl	800269c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e009      	b.n	8002540 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <FLASH_WaitForLastOperation+0x7c>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <FLASH_WaitForLastOperation+0x7c>)
 800253a:	2201      	movs	r2, #1
 800253c:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
  
}  
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	2000037c 	.word	0x2000037c
 800254c:	40023c00 	.word	0x40023c00

08002550 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <FLASH_Program_DoubleWord+0x68>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	4a15      	ldr	r2, [pc, #84]	; (80025b8 <FLASH_Program_DoubleWord+0x68>)
 8002562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002566:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <FLASH_Program_DoubleWord+0x68>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <FLASH_Program_DoubleWord+0x68>)
 800256e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002572:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <FLASH_Program_DoubleWord+0x68>)
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <FLASH_Program_DoubleWord+0x68>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002586:	f3bf 8f6f 	isb	sy
}
 800258a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800258c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	000a      	movs	r2, r1
 800259a:	2300      	movs	r3, #0
 800259c:	68f9      	ldr	r1, [r7, #12]
 800259e:	3104      	adds	r1, #4
 80025a0:	4613      	mov	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80025a4:	f3bf 8f4f 	dsb	sy
}
 80025a8:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023c00 	.word	0x40023c00

080025bc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <FLASH_Program_Word+0x48>)
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <FLASH_Program_Word+0x48>)
 80025cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <FLASH_Program_Word+0x48>)
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <FLASH_Program_Word+0x48>)
 80025d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <FLASH_Program_Word+0x48>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <FLASH_Program_Word+0x48>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80025f0:	f3bf 8f4f 	dsb	sy
}
 80025f4:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40023c00 	.word	0x40023c00

08002608 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <FLASH_Program_HalfWord+0x48>)
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <FLASH_Program_HalfWord+0x48>)
 800261a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <FLASH_Program_HalfWord+0x48>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <FLASH_Program_HalfWord+0x48>)
 8002626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <FLASH_Program_HalfWord+0x48>)
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <FLASH_Program_HalfWord+0x48>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800263e:	f3bf 8f4f 	dsb	sy
}
 8002642:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40023c00 	.word	0x40023c00

08002654 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <FLASH_Program_Byte+0x44>)
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	4a0c      	ldr	r2, [pc, #48]	; (8002698 <FLASH_Program_Byte+0x44>)
 8002666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <FLASH_Program_Byte+0x44>)
 800266e:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <FLASH_Program_Byte+0x44>)
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <FLASH_Program_Byte+0x44>)
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	4a07      	ldr	r2, [pc, #28]	; (8002698 <FLASH_Program_Byte+0x44>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002686:	f3bf 8f4f 	dsb	sy
}
 800268a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	40023c00 	.word	0x40023c00

0800269c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80026a0:	4b21      	ldr	r3, [pc, #132]	; (8002728 <FLASH_SetErrorCode+0x8c>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80026ac:	4b1f      	ldr	r3, [pc, #124]	; (800272c <FLASH_SetErrorCode+0x90>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f043 0320 	orr.w	r3, r3, #32
 80026b4:	4a1d      	ldr	r2, [pc, #116]	; (800272c <FLASH_SetErrorCode+0x90>)
 80026b6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <FLASH_SetErrorCode+0x8c>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <FLASH_SetErrorCode+0x90>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f043 0310 	orr.w	r3, r3, #16
 80026cc:	4a17      	ldr	r2, [pc, #92]	; (800272c <FLASH_SetErrorCode+0x90>)
 80026ce:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <FLASH_SetErrorCode+0x8c>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <FLASH_SetErrorCode+0x90>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f043 0308 	orr.w	r3, r3, #8
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <FLASH_SetErrorCode+0x90>)
 80026e6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <FLASH_SetErrorCode+0x8c>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <FLASH_SetErrorCode+0x90>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	4a0b      	ldr	r2, [pc, #44]	; (800272c <FLASH_SetErrorCode+0x90>)
 80026fe:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <FLASH_SetErrorCode+0x8c>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <FLASH_SetErrorCode+0x90>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	4a05      	ldr	r2, [pc, #20]	; (800272c <FLASH_SetErrorCode+0x90>)
 8002716:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <FLASH_SetErrorCode+0x8c>)
 800271a:	22f2      	movs	r2, #242	; 0xf2
 800271c:	60da      	str	r2, [r3, #12]
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40023c00 	.word	0x40023c00
 800272c:	2000037c 	.word	0x2000037c

08002730 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002742:	4b30      	ldr	r3, [pc, #192]	; (8002804 <HAL_FLASHEx_Erase+0xd4>)
 8002744:	7d1b      	ldrb	r3, [r3, #20]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_FLASHEx_Erase+0x1e>
 800274a:	2302      	movs	r3, #2
 800274c:	e056      	b.n	80027fc <HAL_FLASHEx_Erase+0xcc>
 800274e:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <HAL_FLASHEx_Erase+0xd4>)
 8002750:	2201      	movs	r2, #1
 8002752:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002754:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002758:	f7ff feba 	bl	80024d0 <FLASH_WaitForLastOperation>
 800275c:	4603      	mov	r3, r0
 800275e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d146      	bne.n	80027f4 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d115      	bne.n	80027a2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4619      	mov	r1, r3
 8002782:	4610      	mov	r0, r2
 8002784:	f000 f844 	bl	8002810 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002788:	f24c 3050 	movw	r0, #50000	; 0xc350
 800278c:	f7ff fea0 	bl	80024d0 <FLASH_WaitForLastOperation>
 8002790:	4603      	mov	r3, r0
 8002792:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <HAL_FLASHEx_Erase+0xd8>)
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	491b      	ldr	r1, [pc, #108]	; (8002808 <HAL_FLASHEx_Erase+0xd8>)
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <HAL_FLASHEx_Erase+0xdc>)
 800279c:	4013      	ands	r3, r2
 800279e:	610b      	str	r3, [r1, #16]
 80027a0:	e028      	b.n	80027f4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	e01c      	b.n	80027e4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	4619      	mov	r1, r3
 80027b2:	68b8      	ldr	r0, [r7, #8]
 80027b4:	f000 f868 	bl	8002888 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027bc:	f7ff fe88 	bl	80024d0 <FLASH_WaitForLastOperation>
 80027c0:	4603      	mov	r3, r0
 80027c2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <HAL_FLASHEx_Erase+0xd8>)
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <HAL_FLASHEx_Erase+0xd8>)
 80027ca:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80027ce:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	601a      	str	r2, [r3, #0]
          break;
 80027dc:	e00a      	b.n	80027f4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	3301      	adds	r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4413      	add	r3, r2
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d3da      	bcc.n	80027aa <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_FLASHEx_Erase+0xd4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	751a      	strb	r2, [r3, #20]

  return status;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	2000037c 	.word	0x2000037c
 8002808:	40023c00 	.word	0x40023c00
 800280c:	ffff7ffb 	.word	0xffff7ffb

08002810 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	6039      	str	r1, [r7, #0]
 800281a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <FLASH_MassErase+0x74>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <FLASH_MassErase+0x74>)
 8002822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002826:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b03      	cmp	r3, #3
 800282c:	d107      	bne.n	800283e <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <FLASH_MassErase+0x74>)
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	4914      	ldr	r1, [pc, #80]	; (8002884 <FLASH_MassErase+0x74>)
 8002834:	f248 0304 	movw	r3, #32772	; 0x8004
 8002838:	4313      	orrs	r3, r2
 800283a:	610b      	str	r3, [r1, #16]
 800283c:	e00f      	b.n	800285e <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d106      	bne.n	8002852 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <FLASH_MassErase+0x74>)
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <FLASH_MassErase+0x74>)
 800284a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284e:	6113      	str	r3, [r2, #16]
 8002850:	e005      	b.n	800285e <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <FLASH_MassErase+0x74>)
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <FLASH_MassErase+0x74>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <FLASH_MassErase+0x74>)
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	4313      	orrs	r3, r2
 8002868:	4a06      	ldr	r2, [pc, #24]	; (8002884 <FLASH_MassErase+0x74>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002870:	f3bf 8f4f 	dsb	sy
}
 8002874:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40023c00 	.word	0x40023c00

08002888 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	e010      	b.n	80028c6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d103      	bne.n	80028b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80028aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e009      	b.n	80028c6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d103      	bne.n	80028c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80028b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	e002      	b.n	80028c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80028c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028c4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0b      	cmp	r3, #11
 80028ca:	d902      	bls.n	80028d2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3304      	adds	r3, #4
 80028d0:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <FLASH_Erase_Sector+0xa0>)
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	4a14      	ldr	r2, [pc, #80]	; (8002928 <FLASH_Erase_Sector+0xa0>)
 80028d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <FLASH_Erase_Sector+0xa0>)
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	4911      	ldr	r1, [pc, #68]	; (8002928 <FLASH_Erase_Sector+0xa0>)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <FLASH_Erase_Sector+0xa0>)
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	4a0e      	ldr	r2, [pc, #56]	; (8002928 <FLASH_Erase_Sector+0xa0>)
 80028f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <FLASH_Erase_Sector+0xa0>)
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4313      	orrs	r3, r2
 8002900:	4a09      	ldr	r2, [pc, #36]	; (8002928 <FLASH_Erase_Sector+0xa0>)
 8002902:	f043 0302 	orr.w	r3, r3, #2
 8002906:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <FLASH_Erase_Sector+0xa0>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	4a06      	ldr	r2, [pc, #24]	; (8002928 <FLASH_Erase_Sector+0xa0>)
 800290e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002912:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002914:	f3bf 8f4f 	dsb	sy
}
 8002918:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40023c00 	.word	0x40023c00

0800292c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	e175      	b.n	8002c38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800294c:	2201      	movs	r2, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	f040 8164 	bne.w	8002c32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d00b      	beq.n	800298a <HAL_GPIO_Init+0x5e>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d007      	beq.n	800298a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800297e:	2b11      	cmp	r3, #17
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b12      	cmp	r3, #18
 8002988:	d130      	bne.n	80029ec <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2203      	movs	r2, #3
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 0201 	and.w	r2, r3, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x100>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b12      	cmp	r3, #18
 8002a2a:	d123      	bne.n	8002a74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	08da      	lsrs	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3208      	adds	r2, #8
 8002a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	08da      	lsrs	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3208      	adds	r2, #8
 8002a6e:	69b9      	ldr	r1, [r7, #24]
 8002a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0203 	and.w	r2, r3, #3
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80be 	beq.w	8002c32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	4b66      	ldr	r3, [pc, #408]	; (8002c50 <HAL_GPIO_Init+0x324>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	4a65      	ldr	r2, [pc, #404]	; (8002c50 <HAL_GPIO_Init+0x324>)
 8002abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac2:	4b63      	ldr	r3, [pc, #396]	; (8002c50 <HAL_GPIO_Init+0x324>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ace:	4a61      	ldr	r2, [pc, #388]	; (8002c54 <HAL_GPIO_Init+0x328>)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a58      	ldr	r2, [pc, #352]	; (8002c58 <HAL_GPIO_Init+0x32c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d037      	beq.n	8002b6a <HAL_GPIO_Init+0x23e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a57      	ldr	r2, [pc, #348]	; (8002c5c <HAL_GPIO_Init+0x330>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d031      	beq.n	8002b66 <HAL_GPIO_Init+0x23a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a56      	ldr	r2, [pc, #344]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d02b      	beq.n	8002b62 <HAL_GPIO_Init+0x236>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a55      	ldr	r2, [pc, #340]	; (8002c64 <HAL_GPIO_Init+0x338>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d025      	beq.n	8002b5e <HAL_GPIO_Init+0x232>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a54      	ldr	r2, [pc, #336]	; (8002c68 <HAL_GPIO_Init+0x33c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01f      	beq.n	8002b5a <HAL_GPIO_Init+0x22e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a53      	ldr	r2, [pc, #332]	; (8002c6c <HAL_GPIO_Init+0x340>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d019      	beq.n	8002b56 <HAL_GPIO_Init+0x22a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a52      	ldr	r2, [pc, #328]	; (8002c70 <HAL_GPIO_Init+0x344>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_GPIO_Init+0x226>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a51      	ldr	r2, [pc, #324]	; (8002c74 <HAL_GPIO_Init+0x348>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00d      	beq.n	8002b4e <HAL_GPIO_Init+0x222>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a50      	ldr	r2, [pc, #320]	; (8002c78 <HAL_GPIO_Init+0x34c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <HAL_GPIO_Init+0x21e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4f      	ldr	r2, [pc, #316]	; (8002c7c <HAL_GPIO_Init+0x350>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_GPIO_Init+0x21a>
 8002b42:	2309      	movs	r3, #9
 8002b44:	e012      	b.n	8002b6c <HAL_GPIO_Init+0x240>
 8002b46:	230a      	movs	r3, #10
 8002b48:	e010      	b.n	8002b6c <HAL_GPIO_Init+0x240>
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	e00e      	b.n	8002b6c <HAL_GPIO_Init+0x240>
 8002b4e:	2307      	movs	r3, #7
 8002b50:	e00c      	b.n	8002b6c <HAL_GPIO_Init+0x240>
 8002b52:	2306      	movs	r3, #6
 8002b54:	e00a      	b.n	8002b6c <HAL_GPIO_Init+0x240>
 8002b56:	2305      	movs	r3, #5
 8002b58:	e008      	b.n	8002b6c <HAL_GPIO_Init+0x240>
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x240>
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e004      	b.n	8002b6c <HAL_GPIO_Init+0x240>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_Init+0x240>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_GPIO_Init+0x240>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	f002 0203 	and.w	r2, r2, #3
 8002b72:	0092      	lsls	r2, r2, #2
 8002b74:	4093      	lsls	r3, r2
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b7c:	4935      	ldr	r1, [pc, #212]	; (8002c54 <HAL_GPIO_Init+0x328>)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	3302      	adds	r3, #2
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <HAL_GPIO_Init+0x354>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bae:	4a34      	ldr	r2, [pc, #208]	; (8002c80 <HAL_GPIO_Init+0x354>)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bb4:	4b32      	ldr	r3, [pc, #200]	; (8002c80 <HAL_GPIO_Init+0x354>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd8:	4a29      	ldr	r2, [pc, #164]	; (8002c80 <HAL_GPIO_Init+0x354>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bde:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <HAL_GPIO_Init+0x354>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c02:	4a1f      	ldr	r2, [pc, #124]	; (8002c80 <HAL_GPIO_Init+0x354>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c08:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <HAL_GPIO_Init+0x354>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <HAL_GPIO_Init+0x354>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3301      	adds	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b0f      	cmp	r3, #15
 8002c3c:	f67f ae86 	bls.w	800294c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3724      	adds	r7, #36	; 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40013800 	.word	0x40013800
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40020800 	.word	0x40020800
 8002c64:	40020c00 	.word	0x40020c00
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40021400 	.word	0x40021400
 8002c70:	40021800 	.word	0x40021800
 8002c74:	40021c00 	.word	0x40021c00
 8002c78:	40022000 	.word	0x40022000
 8002c7c:	40022400 	.word	0x40022400
 8002c80:	40013c00 	.word	0x40013c00

08002c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	e001      	b.n	8002ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc4:	787b      	ldrb	r3, [r7, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002cd0:	e003      	b.n	8002cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	041a      	lsls	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cf8:	887a      	ldrh	r2, [r7, #2]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	041a      	lsls	r2, r3, #16
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	887b      	ldrh	r3, [r7, #2]
 8002d06:	400b      	ands	r3, r1
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d006      	beq.n	8002d40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe f8fe 	bl	8000f3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40013c00 	.word	0x40013c00

08002d4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d54:	2300      	movs	r3, #0
 8002d56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e29b      	b.n	800329a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8087 	beq.w	8002e7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d70:	4b96      	ldr	r3, [pc, #600]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d00c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7c:	4b93      	ldr	r3, [pc, #588]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d112      	bne.n	8002dae <HAL_RCC_OscConfig+0x62>
 8002d88:	4b90      	ldr	r3, [pc, #576]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d94:	d10b      	bne.n	8002dae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d96:	4b8d      	ldr	r3, [pc, #564]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06c      	beq.n	8002e7c <HAL_RCC_OscConfig+0x130>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d168      	bne.n	8002e7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e275      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x7a>
 8002db8:	4b84      	ldr	r3, [pc, #528]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a83      	ldr	r2, [pc, #524]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e02e      	b.n	8002e24 <HAL_RCC_OscConfig+0xd8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x9c>
 8002dce:	4b7f      	ldr	r3, [pc, #508]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7e      	ldr	r2, [pc, #504]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b7c      	ldr	r3, [pc, #496]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7b      	ldr	r2, [pc, #492]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e01d      	b.n	8002e24 <HAL_RCC_OscConfig+0xd8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCC_OscConfig+0xc0>
 8002df2:	4b76      	ldr	r3, [pc, #472]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a75      	ldr	r2, [pc, #468]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b73      	ldr	r3, [pc, #460]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a72      	ldr	r2, [pc, #456]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCC_OscConfig+0xd8>
 8002e0c:	4b6f      	ldr	r3, [pc, #444]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6e      	ldr	r2, [pc, #440]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b6c      	ldr	r3, [pc, #432]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6b      	ldr	r2, [pc, #428]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fba0 	bl	8001570 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe fb9c 	bl	8001570 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e229      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0xe8>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe fb8c 	bl	8001570 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fe fb88 	bl	8001570 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e215      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	4b57      	ldr	r3, [pc, #348]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x110>
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d069      	beq.n	8002f5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e8a:	4b50      	ldr	r3, [pc, #320]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e96:	4b4d      	ldr	r3, [pc, #308]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d11c      	bne.n	8002edc <HAL_RCC_OscConfig+0x190>
 8002ea2:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d116      	bne.n	8002edc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eae:	4b47      	ldr	r3, [pc, #284]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x17a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e1e9      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b41      	ldr	r3, [pc, #260]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	493d      	ldr	r1, [pc, #244]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	e040      	b.n	8002f5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d023      	beq.n	8002f2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee4:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a38      	ldr	r2, [pc, #224]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fb3e 	bl	8001570 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7fe fb3a 	bl	8001570 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e1c7      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f16:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4929      	ldr	r1, [pc, #164]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
 8002f2a:	e018      	b.n	8002f5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a26      	ldr	r2, [pc, #152]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe fb1a 	bl	8001570 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f40:	f7fe fb16 	bl	8001570 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e1a3      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d038      	beq.n	8002fdc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d019      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f72:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f76:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7e:	f7fe faf7 	bl	8001570 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f86:	f7fe faf3 	bl	8001570 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e180      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x23a>
 8002fa4:	e01a      	b.n	8002fdc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002faa:	4a08      	ldr	r2, [pc, #32]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb2:	f7fe fadd 	bl	8001570 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fba:	f7fe fad9 	bl	8001570 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d903      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e166      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
 8002fcc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd0:	4b92      	ldr	r3, [pc, #584]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8002fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1ee      	bne.n	8002fba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80a4 	beq.w	8003132 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fea:	4b8c      	ldr	r3, [pc, #560]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10d      	bne.n	8003012 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	4b89      	ldr	r3, [pc, #548]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	4a88      	ldr	r2, [pc, #544]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8002ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003000:	6413      	str	r3, [r2, #64]	; 0x40
 8003002:	4b86      	ldr	r3, [pc, #536]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300e:	2301      	movs	r3, #1
 8003010:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003012:	4b83      	ldr	r3, [pc, #524]	; (8003220 <HAL_RCC_OscConfig+0x4d4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d118      	bne.n	8003050 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800301e:	4b80      	ldr	r3, [pc, #512]	; (8003220 <HAL_RCC_OscConfig+0x4d4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7f      	ldr	r2, [pc, #508]	; (8003220 <HAL_RCC_OscConfig+0x4d4>)
 8003024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302a:	f7fe faa1 	bl	8001570 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003032:	f7fe fa9d 	bl	8001570 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b64      	cmp	r3, #100	; 0x64
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e12a      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003044:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_RCC_OscConfig+0x4d4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d106      	bne.n	8003066 <HAL_RCC_OscConfig+0x31a>
 8003058:	4b70      	ldr	r3, [pc, #448]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	4a6f      	ldr	r2, [pc, #444]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6713      	str	r3, [r2, #112]	; 0x70
 8003064:	e02d      	b.n	80030c2 <HAL_RCC_OscConfig+0x376>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x33c>
 800306e:	4b6b      	ldr	r3, [pc, #428]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	4a6a      	ldr	r2, [pc, #424]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	6713      	str	r3, [r2, #112]	; 0x70
 800307a:	4b68      	ldr	r3, [pc, #416]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	4a67      	ldr	r2, [pc, #412]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003080:	f023 0304 	bic.w	r3, r3, #4
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
 8003086:	e01c      	b.n	80030c2 <HAL_RCC_OscConfig+0x376>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b05      	cmp	r3, #5
 800308e:	d10c      	bne.n	80030aa <HAL_RCC_OscConfig+0x35e>
 8003090:	4b62      	ldr	r3, [pc, #392]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003094:	4a61      	ldr	r2, [pc, #388]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003096:	f043 0304 	orr.w	r3, r3, #4
 800309a:	6713      	str	r3, [r2, #112]	; 0x70
 800309c:	4b5f      	ldr	r3, [pc, #380]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	4a5e      	ldr	r2, [pc, #376]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6713      	str	r3, [r2, #112]	; 0x70
 80030a8:	e00b      	b.n	80030c2 <HAL_RCC_OscConfig+0x376>
 80030aa:	4b5c      	ldr	r3, [pc, #368]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	4a5b      	ldr	r2, [pc, #364]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6713      	str	r3, [r2, #112]	; 0x70
 80030b6:	4b59      	ldr	r3, [pc, #356]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	4a58      	ldr	r2, [pc, #352]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 80030bc:	f023 0304 	bic.w	r3, r3, #4
 80030c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d015      	beq.n	80030f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fe fa51 	bl	8001570 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe fa4d 	bl	8001570 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e0d8      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e8:	4b4c      	ldr	r3, [pc, #304]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ee      	beq.n	80030d2 <HAL_RCC_OscConfig+0x386>
 80030f4:	e014      	b.n	8003120 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fe fa3b 	bl	8001570 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe fa37 	bl	8001570 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	; 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0c2      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003114:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ee      	bne.n	80030fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d105      	bne.n	8003132 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003126:	4b3d      	ldr	r3, [pc, #244]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a3c      	ldr	r2, [pc, #240]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 800312c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80ae 	beq.w	8003298 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800313c:	4b37      	ldr	r3, [pc, #220]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d06d      	beq.n	8003224 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d14b      	bne.n	80031e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003150:	4b32      	ldr	r3, [pc, #200]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a31      	ldr	r2, [pc, #196]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800315a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fa08 	bl	8001570 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7fe fa04 	bl	8001570 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e091      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	4b29      	ldr	r3, [pc, #164]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	019b      	lsls	r3, r3, #6
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	3b01      	subs	r3, #1
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	071b      	lsls	r3, r3, #28
 80031ae:	491b      	ldr	r1, [pc, #108]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a18      	ldr	r2, [pc, #96]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 80031ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe f9d6 	bl	8001570 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fe f9d2 	bl	8001570 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e05f      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x47c>
 80031e6:	e057      	b.n	8003298 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0b      	ldr	r2, [pc, #44]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 80031ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fe f9bc 	bl	8001570 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fe f9b8 	bl	8001570 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e045      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320e:	4b03      	ldr	r3, [pc, #12]	; (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x4b0>
 800321a:	e03d      	b.n	8003298 <HAL_RCC_OscConfig+0x54c>
 800321c:	40023800 	.word	0x40023800
 8003220:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003224:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <HAL_RCC_OscConfig+0x558>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d030      	beq.n	8003294 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d129      	bne.n	8003294 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324a:	429a      	cmp	r2, r3
 800324c:	d122      	bne.n	8003294 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003254:	4013      	ands	r3, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800325a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800325c:	4293      	cmp	r3, r2
 800325e:	d119      	bne.n	8003294 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	3b01      	subs	r3, #1
 800326e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d10f      	bne.n	8003294 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d107      	bne.n	8003294 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800

080032a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0d0      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c0:	4b6a      	ldr	r3, [pc, #424]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d910      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b67      	ldr	r3, [pc, #412]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 020f 	bic.w	r2, r3, #15
 80032d6:	4965      	ldr	r1, [pc, #404]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	4b63      	ldr	r3, [pc, #396]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0b8      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003308:	4b59      	ldr	r3, [pc, #356]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a58      	ldr	r2, [pc, #352]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800330e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003312:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003320:	4b53      	ldr	r3, [pc, #332]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a52      	ldr	r2, [pc, #328]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800332a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800332c:	4b50      	ldr	r3, [pc, #320]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	494d      	ldr	r1, [pc, #308]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d040      	beq.n	80033cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d115      	bne.n	800338a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e07f      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	4b41      	ldr	r3, [pc, #260]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e073      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e06b      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338a:	4b39      	ldr	r3, [pc, #228]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f023 0203 	bic.w	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4936      	ldr	r1, [pc, #216]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339c:	f7fe f8e8 	bl	8001570 <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a4:	f7fe f8e4 	bl	8001570 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e053      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 020c 	and.w	r2, r3, #12
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d1eb      	bne.n	80033a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033cc:	4b27      	ldr	r3, [pc, #156]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d210      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b24      	ldr	r3, [pc, #144]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 020f 	bic.w	r2, r3, #15
 80033e2:	4922      	ldr	r1, [pc, #136]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b20      	ldr	r3, [pc, #128]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e032      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003408:	4b19      	ldr	r3, [pc, #100]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4916      	ldr	r1, [pc, #88]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	490e      	ldr	r1, [pc, #56]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800343a:	f000 f821 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 800343e:	4602      	mov	r2, r0
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	490a      	ldr	r1, [pc, #40]	; (8003474 <HAL_RCC_ClockConfig+0x1cc>)
 800344c:	5ccb      	ldrb	r3, [r1, r3]
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	4a09      	ldr	r2, [pc, #36]	; (8003478 <HAL_RCC_ClockConfig+0x1d0>)
 8003454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003456:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_ClockConfig+0x1d4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe f844 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023c00 	.word	0x40023c00
 8003470:	40023800 	.word	0x40023800
 8003474:	08007800 	.word	0x08007800
 8003478:	20000008 	.word	0x20000008
 800347c:	2000000c 	.word	0x2000000c

08003480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003480:	b5b0      	push	{r4, r5, r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003486:	2100      	movs	r1, #0
 8003488:	6079      	str	r1, [r7, #4]
 800348a:	2100      	movs	r1, #0
 800348c:	60f9      	str	r1, [r7, #12]
 800348e:	2100      	movs	r1, #0
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003492:	2100      	movs	r1, #0
 8003494:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003496:	4952      	ldr	r1, [pc, #328]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003498:	6889      	ldr	r1, [r1, #8]
 800349a:	f001 010c 	and.w	r1, r1, #12
 800349e:	2908      	cmp	r1, #8
 80034a0:	d00d      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x3e>
 80034a2:	2908      	cmp	r1, #8
 80034a4:	f200 8094 	bhi.w	80035d0 <HAL_RCC_GetSysClockFreq+0x150>
 80034a8:	2900      	cmp	r1, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0x32>
 80034ac:	2904      	cmp	r1, #4
 80034ae:	d003      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x38>
 80034b0:	e08e      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b2:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80034b4:	60bb      	str	r3, [r7, #8]
      break;
 80034b6:	e08e      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034b8:	4b4b      	ldr	r3, [pc, #300]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80034ba:	60bb      	str	r3, [r7, #8]
      break;
 80034bc:	e08b      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034be:	4948      	ldr	r1, [pc, #288]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80034c0:	6849      	ldr	r1, [r1, #4]
 80034c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80034c6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034c8:	4945      	ldr	r1, [pc, #276]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80034ca:	6849      	ldr	r1, [r1, #4]
 80034cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80034d0:	2900      	cmp	r1, #0
 80034d2:	d024      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d4:	4942      	ldr	r1, [pc, #264]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80034d6:	6849      	ldr	r1, [r1, #4]
 80034d8:	0989      	lsrs	r1, r1, #6
 80034da:	4608      	mov	r0, r1
 80034dc:	f04f 0100 	mov.w	r1, #0
 80034e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80034e4:	f04f 0500 	mov.w	r5, #0
 80034e8:	ea00 0204 	and.w	r2, r0, r4
 80034ec:	ea01 0305 	and.w	r3, r1, r5
 80034f0:	493d      	ldr	r1, [pc, #244]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80034f2:	fb01 f003 	mul.w	r0, r1, r3
 80034f6:	2100      	movs	r1, #0
 80034f8:	fb01 f102 	mul.w	r1, r1, r2
 80034fc:	1844      	adds	r4, r0, r1
 80034fe:	493a      	ldr	r1, [pc, #232]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003500:	fba2 0101 	umull	r0, r1, r2, r1
 8003504:	1863      	adds	r3, r4, r1
 8003506:	4619      	mov	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	461a      	mov	r2, r3
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	f7fc fe92 	bl	8000238 <__aeabi_uldivmod>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4613      	mov	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	e04a      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351e:	4b30      	ldr	r3, [pc, #192]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	099b      	lsrs	r3, r3, #6
 8003524:	461a      	mov	r2, r3
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800352e:	f04f 0100 	mov.w	r1, #0
 8003532:	ea02 0400 	and.w	r4, r2, r0
 8003536:	ea03 0501 	and.w	r5, r3, r1
 800353a:	4620      	mov	r0, r4
 800353c:	4629      	mov	r1, r5
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	014b      	lsls	r3, r1, #5
 8003548:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800354c:	0142      	lsls	r2, r0, #5
 800354e:	4610      	mov	r0, r2
 8003550:	4619      	mov	r1, r3
 8003552:	1b00      	subs	r0, r0, r4
 8003554:	eb61 0105 	sbc.w	r1, r1, r5
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	018b      	lsls	r3, r1, #6
 8003562:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003566:	0182      	lsls	r2, r0, #6
 8003568:	1a12      	subs	r2, r2, r0
 800356a:	eb63 0301 	sbc.w	r3, r3, r1
 800356e:	f04f 0000 	mov.w	r0, #0
 8003572:	f04f 0100 	mov.w	r1, #0
 8003576:	00d9      	lsls	r1, r3, #3
 8003578:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800357c:	00d0      	lsls	r0, r2, #3
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	1912      	adds	r2, r2, r4
 8003584:	eb45 0303 	adc.w	r3, r5, r3
 8003588:	f04f 0000 	mov.w	r0, #0
 800358c:	f04f 0100 	mov.w	r1, #0
 8003590:	0299      	lsls	r1, r3, #10
 8003592:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003596:	0290      	lsls	r0, r2, #10
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	f7fc fe46 	bl	8000238 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4613      	mov	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	0c1b      	lsrs	r3, r3, #16
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	3301      	adds	r3, #1
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	60bb      	str	r3, [r7, #8]
      break;
 80035ce:	e002      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80035d2:	60bb      	str	r3, [r7, #8]
      break;
 80035d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d6:	68bb      	ldr	r3, [r7, #8]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bdb0      	pop	{r4, r5, r7, pc}
 80035e0:	40023800 	.word	0x40023800
 80035e4:	00f42400 	.word	0x00f42400
 80035e8:	017d7840 	.word	0x017d7840

080035ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000008 	.word	0x20000008

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff0 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	08007810 	.word	0x08007810

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003630:	f7ff ffdc 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0b5b      	lsrs	r3, r3, #13
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	; (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	08007810 	.word	0x08007810

08003654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d012      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800367c:	4b69      	ldr	r3, [pc, #420]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a68      	ldr	r2, [pc, #416]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003682:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003686:	6093      	str	r3, [r2, #8]
 8003688:	4b66      	ldr	r3, [pc, #408]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003690:	4964      	ldr	r1, [pc, #400]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800369e:	2301      	movs	r3, #1
 80036a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d017      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036ae:	4b5d      	ldr	r3, [pc, #372]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036bc:	4959      	ldr	r1, [pc, #356]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036cc:	d101      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80036da:	2301      	movs	r3, #1
 80036dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d017      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036ea:	4b4e      	ldr	r3, [pc, #312]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	494a      	ldr	r1, [pc, #296]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003708:	d101      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003716:	2301      	movs	r3, #1
 8003718:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003726:	2301      	movs	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 808b 	beq.w	800384e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	4a39      	ldr	r2, [pc, #228]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	6413      	str	r3, [r2, #64]	; 0x40
 8003744:	4b37      	ldr	r3, [pc, #220]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003750:	4b35      	ldr	r3, [pc, #212]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a34      	ldr	r2, [pc, #208]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375c:	f7fd ff08 	bl	8001570 <HAL_GetTick>
 8003760:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003764:	f7fd ff04 	bl	8001570 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e38f      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003776:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003782:	4b28      	ldr	r3, [pc, #160]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d035      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	429a      	cmp	r2, r3
 800379e:	d02e      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037a0:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037aa:	4b1e      	ldr	r3, [pc, #120]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037b6:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037c2:	4a18      	ldr	r2, [pc, #96]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037c8:	4b16      	ldr	r3, [pc, #88]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d114      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fd fecc 	bl	8001570 <HAL_GetTick>
 80037d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037da:	e00a      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037dc:	f7fd fec8 	bl	8001570 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e351      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0ee      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380a:	d111      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800381a:	400b      	ands	r3, r1
 800381c:	4901      	ldr	r1, [pc, #4]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
 8003822:	e00b      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000
 800382c:	0ffffcff 	.word	0x0ffffcff
 8003830:	4bb3      	ldr	r3, [pc, #716]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4ab2      	ldr	r2, [pc, #712]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003836:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800383a:	6093      	str	r3, [r2, #8]
 800383c:	4bb0      	ldr	r3, [pc, #704]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800383e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003848:	49ad      	ldr	r1, [pc, #692]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384a:	4313      	orrs	r3, r2
 800384c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	d010      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800385a:	4ba9      	ldr	r3, [pc, #676]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003860:	4aa7      	ldr	r2, [pc, #668]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003866:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800386a:	4ba5      	ldr	r3, [pc, #660]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	49a2      	ldr	r1, [pc, #648]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003888:	4b9d      	ldr	r3, [pc, #628]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003896:	499a      	ldr	r1, [pc, #616]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038aa:	4b95      	ldr	r3, [pc, #596]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b8:	4991      	ldr	r1, [pc, #580]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038cc:	4b8c      	ldr	r3, [pc, #560]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038da:	4989      	ldr	r1, [pc, #548]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ee:	4b84      	ldr	r3, [pc, #528]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	4980      	ldr	r1, [pc, #512]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003910:	4b7b      	ldr	r3, [pc, #492]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	4978      	ldr	r1, [pc, #480]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003932:	4b73      	ldr	r3, [pc, #460]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f023 020c 	bic.w	r2, r3, #12
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003940:	496f      	ldr	r1, [pc, #444]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003954:	4b6a      	ldr	r3, [pc, #424]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	4967      	ldr	r1, [pc, #412]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003976:	4b62      	ldr	r3, [pc, #392]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003984:	495e      	ldr	r1, [pc, #376]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003998:	4b59      	ldr	r3, [pc, #356]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	4956      	ldr	r1, [pc, #344]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039ba:	4b51      	ldr	r3, [pc, #324]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	494d      	ldr	r1, [pc, #308]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039dc:	4b48      	ldr	r3, [pc, #288]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	4945      	ldr	r1, [pc, #276]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039fe:	4b40      	ldr	r3, [pc, #256]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0c:	493c      	ldr	r1, [pc, #240]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a20:	4b37      	ldr	r3, [pc, #220]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2e:	4934      	ldr	r1, [pc, #208]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d011      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a50:	492b      	ldr	r1, [pc, #172]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a60:	d101      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a82:	4b1f      	ldr	r3, [pc, #124]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a90:	491b      	ldr	r1, [pc, #108]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003aa4:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab4:	4912      	ldr	r1, [pc, #72]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad8:	4909      	ldr	r1, [pc, #36]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00f      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aec:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	e002      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800
 8003b04:	4986      	ldr	r1, [pc, #536]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00b      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b18:	4b81      	ldr	r3, [pc, #516]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b28:	497d      	ldr	r1, [pc, #500]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d006      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80d6 	beq.w	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b44:	4b76      	ldr	r3, [pc, #472]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a75      	ldr	r2, [pc, #468]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b50:	f7fd fd0e 	bl	8001570 <HAL_GetTick>
 8003b54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b58:	f7fd fd0a 	bl	8001570 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e195      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b6a:	4b6d      	ldr	r3, [pc, #436]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d021      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d11d      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b8a:	4b65      	ldr	r3, [pc, #404]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b98:	4b61      	ldr	r3, [pc, #388]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9e:	0e1b      	lsrs	r3, r3, #24
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	019a      	lsls	r2, r3, #6
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	041b      	lsls	r3, r3, #16
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	071b      	lsls	r3, r3, #28
 8003bbe:	4958      	ldr	r1, [pc, #352]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d02e      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf0:	d129      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bf2:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c00:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c06:	0f1b      	lsrs	r3, r3, #28
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	019a      	lsls	r2, r3, #6
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	061b      	lsls	r3, r3, #24
 8003c20:	431a      	orrs	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	071b      	lsls	r3, r3, #28
 8003c26:	493e      	ldr	r1, [pc, #248]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c2e:	4b3c      	ldr	r3, [pc, #240]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c34:	f023 021f 	bic.w	r2, r3, #31
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	4938      	ldr	r1, [pc, #224]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01d      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c52:	4b33      	ldr	r3, [pc, #204]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c58:	0e1b      	lsrs	r3, r3, #24
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c60:	4b2f      	ldr	r3, [pc, #188]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c66:	0f1b      	lsrs	r3, r3, #28
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	019a      	lsls	r2, r3, #6
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	041b      	lsls	r3, r3, #16
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	061b      	lsls	r3, r3, #24
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	071b      	lsls	r3, r3, #28
 8003c86:	4926      	ldr	r1, [pc, #152]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d011      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	019a      	lsls	r2, r3, #6
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	071b      	lsls	r3, r3, #28
 8003cb6:	491a      	ldr	r1, [pc, #104]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cbe:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cca:	f7fd fc51 	bl	8001570 <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cd2:	f7fd fc4d 	bl	8001570 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b64      	cmp	r3, #100	; 0x64
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0d8      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	f040 80ce 	bne.w	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cf8:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d04:	f7fd fc34 	bl	8001570 <HAL_GetTick>
 8003d08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d0c:	f7fd fc30 	bl	8001570 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d904      	bls.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0bb      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d24:	4b5e      	ldr	r3, [pc, #376]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d30:	d0ec      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d02e      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d12a      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d5a:	4b51      	ldr	r3, [pc, #324]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d68:	4b4d      	ldr	r3, [pc, #308]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6e:	0f1b      	lsrs	r3, r3, #28
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	019a      	lsls	r2, r3, #6
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	061b      	lsls	r3, r3, #24
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	071b      	lsls	r3, r3, #28
 8003d8e:	4944      	ldr	r1, [pc, #272]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d96:	4b42      	ldr	r3, [pc, #264]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	3b01      	subs	r3, #1
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	493d      	ldr	r1, [pc, #244]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d022      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc4:	d11d      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dc6:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	0e1b      	lsrs	r3, r3, #24
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dd4:	4b32      	ldr	r3, [pc, #200]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	0f1b      	lsrs	r3, r3, #28
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	019a      	lsls	r2, r3, #6
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	041b      	lsls	r3, r3, #16
 8003dee:	431a      	orrs	r2, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	061b      	lsls	r3, r3, #24
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	071b      	lsls	r3, r3, #28
 8003dfa:	4929      	ldr	r1, [pc, #164]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d028      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e0e:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	0e1b      	lsrs	r3, r3, #24
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e1c:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	0c1b      	lsrs	r3, r3, #16
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	019a      	lsls	r2, r3, #6
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	041b      	lsls	r3, r3, #16
 8003e34:	431a      	orrs	r2, r3
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	061b      	lsls	r3, r3, #24
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	071b      	lsls	r3, r3, #28
 8003e42:	4917      	ldr	r1, [pc, #92]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	4911      	ldr	r1, [pc, #68]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e60:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6c:	f7fd fb80 	bl	8001570 <HAL_GetTick>
 8003e70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e74:	f7fd fb7c 	bl	8001570 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e007      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e86:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e92:	d1ef      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e09d      	b.n	8003ff2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d108      	bne.n	8003ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ec6:	d009      	beq.n	8003edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61da      	str	r2, [r3, #28]
 8003ece:	e005      	b.n	8003edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd f952 	bl	80011a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f1c:	d902      	bls.n	8003f24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	e002      	b.n	8003f2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f32:	d007      	beq.n	8003f44 <HAL_SPI_Init+0xa0>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f3c:	d002      	beq.n	8003f44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f86:	ea42 0103 	orr.w	r1, r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	0c1b      	lsrs	r3, r3, #16
 8003fa0:	f003 0204 	and.w	r2, r3, #4
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003fc0:	ea42 0103 	orr.w	r1, r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e049      	b.n	80040a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7fd f901 	bl	8001228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2202      	movs	r2, #2
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f000 fc2b 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d001      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e054      	b.n	800416a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a26      	ldr	r2, [pc, #152]	; (8004178 <HAL_TIM_Base_Start_IT+0xd0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d022      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x80>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ea:	d01d      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x80>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a22      	ldr	r2, [pc, #136]	; (800417c <HAL_TIM_Base_Start_IT+0xd4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d018      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x80>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a21      	ldr	r2, [pc, #132]	; (8004180 <HAL_TIM_Base_Start_IT+0xd8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x80>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1f      	ldr	r2, [pc, #124]	; (8004184 <HAL_TIM_Base_Start_IT+0xdc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00e      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x80>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1e      	ldr	r2, [pc, #120]	; (8004188 <HAL_TIM_Base_Start_IT+0xe0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d009      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x80>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1c      	ldr	r2, [pc, #112]	; (800418c <HAL_TIM_Base_Start_IT+0xe4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x80>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1b      	ldr	r2, [pc, #108]	; (8004190 <HAL_TIM_Base_Start_IT+0xe8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d115      	bne.n	8004154 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_TIM_Base_Start_IT+0xec>)
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b06      	cmp	r3, #6
 8004138:	d015      	beq.n	8004166 <HAL_TIM_Base_Start_IT+0xbe>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d011      	beq.n	8004166 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004152:	e008      	b.n	8004166 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	e000      	b.n	8004168 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004166:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000
 800417c:	40000400 	.word	0x40000400
 8004180:	40000800 	.word	0x40000800
 8004184:	40000c00 	.word	0x40000c00
 8004188:	40010400 	.word	0x40010400
 800418c:	40014000 	.word	0x40014000
 8004190:	40001800 	.word	0x40001800
 8004194:	00010007 	.word	0x00010007

08004198 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e049      	b.n	800423e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f841 	bl	8004246 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f000 fb5c 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b02      	cmp	r3, #2
 800426e:	d122      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d11b      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f06f 0202 	mvn.w	r2, #2
 8004286:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fadb 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 80042a2:	e005      	b.n	80042b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 facd 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fade 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d122      	bne.n	800430a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d11b      	bne.n	800430a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f06f 0204 	mvn.w	r2, #4
 80042da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fab1 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 80042f6:	e005      	b.n	8004304 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 faa3 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fab4 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b08      	cmp	r3, #8
 8004316:	d122      	bne.n	800435e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b08      	cmp	r3, #8
 8004324:	d11b      	bne.n	800435e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f06f 0208 	mvn.w	r2, #8
 800432e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2204      	movs	r2, #4
 8004334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fa87 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 800434a:	e005      	b.n	8004358 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fa79 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa8a 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b10      	cmp	r3, #16
 800436a:	d122      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b10      	cmp	r3, #16
 8004378:	d11b      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f06f 0210 	mvn.w	r2, #16
 8004382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2208      	movs	r2, #8
 8004388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fa5d 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 800439e:	e005      	b.n	80043ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fa4f 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fa60 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d10e      	bne.n	80043de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d107      	bne.n	80043de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f06f 0201 	mvn.w	r2, #1
 80043d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fc f99b 	bl	8000714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e8:	2b80      	cmp	r3, #128	; 0x80
 80043ea:	d10e      	bne.n	800440a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f6:	2b80      	cmp	r3, #128	; 0x80
 80043f8:	d107      	bne.n	800440a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fe75 	bl	80050f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004418:	d10e      	bne.n	8004438 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004424:	2b80      	cmp	r3, #128	; 0x80
 8004426:	d107      	bne.n	8004438 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fe68 	bl	8005108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004442:	2b40      	cmp	r3, #64	; 0x40
 8004444:	d10e      	bne.n	8004464 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004450:	2b40      	cmp	r3, #64	; 0x40
 8004452:	d107      	bne.n	8004464 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800445c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa0e 	bl	8004880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b20      	cmp	r3, #32
 8004470:	d10e      	bne.n	8004490 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b20      	cmp	r3, #32
 800447e:	d107      	bne.n	8004490 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0220 	mvn.w	r2, #32
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fe28 	bl	80050e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e0fd      	b.n	80046ae <HAL_TIM_PWM_ConfigChannel+0x216>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b14      	cmp	r3, #20
 80044be:	f200 80f0 	bhi.w	80046a2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80044c2:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80044c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c8:	0800451d 	.word	0x0800451d
 80044cc:	080046a3 	.word	0x080046a3
 80044d0:	080046a3 	.word	0x080046a3
 80044d4:	080046a3 	.word	0x080046a3
 80044d8:	0800455d 	.word	0x0800455d
 80044dc:	080046a3 	.word	0x080046a3
 80044e0:	080046a3 	.word	0x080046a3
 80044e4:	080046a3 	.word	0x080046a3
 80044e8:	0800459f 	.word	0x0800459f
 80044ec:	080046a3 	.word	0x080046a3
 80044f0:	080046a3 	.word	0x080046a3
 80044f4:	080046a3 	.word	0x080046a3
 80044f8:	080045df 	.word	0x080045df
 80044fc:	080046a3 	.word	0x080046a3
 8004500:	080046a3 	.word	0x080046a3
 8004504:	080046a3 	.word	0x080046a3
 8004508:	08004621 	.word	0x08004621
 800450c:	080046a3 	.word	0x080046a3
 8004510:	080046a3 	.word	0x080046a3
 8004514:	080046a3 	.word	0x080046a3
 8004518:	08004661 	.word	0x08004661
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fa56 	bl	80049d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0208 	orr.w	r2, r2, #8
 8004536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0204 	bic.w	r2, r2, #4
 8004546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6999      	ldr	r1, [r3, #24]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	619a      	str	r2, [r3, #24]
      break;
 800455a:	e0a3      	b.n	80046a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 faa8 	bl	8004ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6999      	ldr	r1, [r3, #24]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	021a      	lsls	r2, r3, #8
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	619a      	str	r2, [r3, #24]
      break;
 800459c:	e082      	b.n	80046a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 faff 	bl	8004ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0208 	orr.w	r2, r2, #8
 80045b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0204 	bic.w	r2, r2, #4
 80045c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69d9      	ldr	r1, [r3, #28]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	61da      	str	r2, [r3, #28]
      break;
 80045dc:	e062      	b.n	80046a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fb55 	bl	8004c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69d9      	ldr	r1, [r3, #28]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	021a      	lsls	r2, r3, #8
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	61da      	str	r2, [r3, #28]
      break;
 800461e:	e041      	b.n	80046a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fb8c 	bl	8004d44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0208 	orr.w	r2, r2, #8
 800463a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0204 	bic.w	r2, r2, #4
 800464a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800465e:	e021      	b.n	80046a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fbbe 	bl	8004de8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800467a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800468a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	021a      	lsls	r2, r3, #8
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046a0:	e000      	b.n	80046a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80046a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop

080046b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_TIM_ConfigClockSource+0x18>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e0b3      	b.n	8004838 <HAL_TIM_ConfigClockSource+0x180>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4b55      	ldr	r3, [pc, #340]	; (8004840 <HAL_TIM_ConfigClockSource+0x188>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004708:	d03e      	beq.n	8004788 <HAL_TIM_ConfigClockSource+0xd0>
 800470a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470e:	f200 8087 	bhi.w	8004820 <HAL_TIM_ConfigClockSource+0x168>
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004716:	f000 8085 	beq.w	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 800471a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471e:	d87f      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x168>
 8004720:	2b70      	cmp	r3, #112	; 0x70
 8004722:	d01a      	beq.n	800475a <HAL_TIM_ConfigClockSource+0xa2>
 8004724:	2b70      	cmp	r3, #112	; 0x70
 8004726:	d87b      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x168>
 8004728:	2b60      	cmp	r3, #96	; 0x60
 800472a:	d050      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x116>
 800472c:	2b60      	cmp	r3, #96	; 0x60
 800472e:	d877      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x168>
 8004730:	2b50      	cmp	r3, #80	; 0x50
 8004732:	d03c      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0xf6>
 8004734:	2b50      	cmp	r3, #80	; 0x50
 8004736:	d873      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x168>
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d058      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x136>
 800473c:	2b40      	cmp	r3, #64	; 0x40
 800473e:	d86f      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x168>
 8004740:	2b30      	cmp	r3, #48	; 0x30
 8004742:	d064      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x156>
 8004744:	2b30      	cmp	r3, #48	; 0x30
 8004746:	d86b      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x168>
 8004748:	2b20      	cmp	r3, #32
 800474a:	d060      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x156>
 800474c:	2b20      	cmp	r3, #32
 800474e:	d867      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x168>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d05c      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x156>
 8004754:	2b10      	cmp	r3, #16
 8004756:	d05a      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004758:	e062      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6899      	ldr	r1, [r3, #8]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f000 fc0b 	bl	8004f84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800477c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	609a      	str	r2, [r3, #8]
      break;
 8004786:	e04e      	b.n	8004826 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6899      	ldr	r1, [r3, #8]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f000 fbf4 	bl	8004f84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047aa:	609a      	str	r2, [r3, #8]
      break;
 80047ac:	e03b      	b.n	8004826 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6859      	ldr	r1, [r3, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f000 fb68 	bl	8004e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2150      	movs	r1, #80	; 0x50
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fbc1 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 80047cc:	e02b      	b.n	8004826 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6859      	ldr	r1, [r3, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	461a      	mov	r2, r3
 80047dc:	f000 fb87 	bl	8004eee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2160      	movs	r1, #96	; 0x60
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fbb1 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 80047ec:	e01b      	b.n	8004826 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 fb48 	bl	8004e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2140      	movs	r1, #64	; 0x40
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fba1 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 800480c:	e00b      	b.n	8004826 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f000 fb98 	bl	8004f4e <TIM_ITRx_SetConfig>
        break;
 800481e:	e002      	b.n	8004826 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004824:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	fffeff88 	.word	0xfffeff88

08004844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d00f      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3d      	ldr	r2, [pc, #244]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00b      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d007      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3b      	ldr	r2, [pc, #236]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3a      	ldr	r2, [pc, #232]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d108      	bne.n	80048e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2f      	ldr	r2, [pc, #188]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d02b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f4:	d027      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d023      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01f      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a29      	ldr	r2, [pc, #164]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d017      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a28      	ldr	r2, [pc, #160]	; (80049bc <TIM_Base_SetConfig+0x128>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a27      	ldr	r2, [pc, #156]	; (80049c0 <TIM_Base_SetConfig+0x12c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00f      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <TIM_Base_SetConfig+0x130>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a25      	ldr	r2, [pc, #148]	; (80049c8 <TIM_Base_SetConfig+0x134>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a24      	ldr	r2, [pc, #144]	; (80049cc <TIM_Base_SetConfig+0x138>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a23      	ldr	r2, [pc, #140]	; (80049d0 <TIM_Base_SetConfig+0x13c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d108      	bne.n	8004958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_Base_SetConfig+0xf8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0c      	ldr	r2, [pc, #48]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d103      	bne.n	8004994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	615a      	str	r2, [r3, #20]
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	40001800 	.word	0x40001800
 80049cc:	40001c00 	.word	0x40001c00
 80049d0:	40002000 	.word	0x40002000

080049d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f023 0201 	bic.w	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4b2b      	ldr	r3, [pc, #172]	; (8004aac <TIM_OC1_SetConfig+0xd8>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 0302 	bic.w	r3, r3, #2
 8004a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a21      	ldr	r2, [pc, #132]	; (8004ab0 <TIM_OC1_SetConfig+0xdc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_OC1_SetConfig+0x64>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <TIM_OC1_SetConfig+0xe0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d10c      	bne.n	8004a52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f023 0308 	bic.w	r3, r3, #8
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f023 0304 	bic.w	r3, r3, #4
 8004a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a16      	ldr	r2, [pc, #88]	; (8004ab0 <TIM_OC1_SetConfig+0xdc>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d003      	beq.n	8004a62 <TIM_OC1_SetConfig+0x8e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <TIM_OC1_SetConfig+0xe0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d111      	bne.n	8004a86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	fffeff8f 	.word	0xfffeff8f
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40010400 	.word	0x40010400

08004ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f023 0210 	bic.w	r2, r3, #16
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4b2e      	ldr	r3, [pc, #184]	; (8004b9c <TIM_OC2_SetConfig+0xe4>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f023 0320 	bic.w	r3, r3, #32
 8004b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a23      	ldr	r2, [pc, #140]	; (8004ba0 <TIM_OC2_SetConfig+0xe8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_OC2_SetConfig+0x68>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a22      	ldr	r2, [pc, #136]	; (8004ba4 <TIM_OC2_SetConfig+0xec>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d10d      	bne.n	8004b3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a18      	ldr	r2, [pc, #96]	; (8004ba0 <TIM_OC2_SetConfig+0xe8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d003      	beq.n	8004b4c <TIM_OC2_SetConfig+0x94>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a17      	ldr	r2, [pc, #92]	; (8004ba4 <TIM_OC2_SetConfig+0xec>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d113      	bne.n	8004b74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	feff8fff 	.word	0xfeff8fff
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40010400 	.word	0x40010400

08004ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4b2d      	ldr	r3, [pc, #180]	; (8004c88 <TIM_OC3_SetConfig+0xe0>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0303 	bic.w	r3, r3, #3
 8004bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <TIM_OC3_SetConfig+0xe4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d003      	beq.n	8004c0e <TIM_OC3_SetConfig+0x66>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a21      	ldr	r2, [pc, #132]	; (8004c90 <TIM_OC3_SetConfig+0xe8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d10d      	bne.n	8004c2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a17      	ldr	r2, [pc, #92]	; (8004c8c <TIM_OC3_SetConfig+0xe4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d003      	beq.n	8004c3a <TIM_OC3_SetConfig+0x92>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a16      	ldr	r2, [pc, #88]	; (8004c90 <TIM_OC3_SetConfig+0xe8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d113      	bne.n	8004c62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	621a      	str	r2, [r3, #32]
}
 8004c7c:	bf00      	nop
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	fffeff8f 	.word	0xfffeff8f
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40010400 	.word	0x40010400

08004c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <TIM_OC4_SetConfig+0xa4>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	031b      	lsls	r3, r3, #12
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a13      	ldr	r2, [pc, #76]	; (8004d3c <TIM_OC4_SetConfig+0xa8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_OC4_SetConfig+0x68>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <TIM_OC4_SetConfig+0xac>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d109      	bne.n	8004d10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	019b      	lsls	r3, r3, #6
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	feff8fff 	.word	0xfeff8fff
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	40010400 	.word	0x40010400

08004d44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <TIM_OC5_SetConfig+0x98>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	041b      	lsls	r3, r3, #16
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a12      	ldr	r2, [pc, #72]	; (8004de0 <TIM_OC5_SetConfig+0x9c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_OC5_SetConfig+0x5e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a11      	ldr	r2, [pc, #68]	; (8004de4 <TIM_OC5_SetConfig+0xa0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d109      	bne.n	8004db6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	621a      	str	r2, [r3, #32]
}
 8004dd0:	bf00      	nop
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	fffeff8f 	.word	0xfffeff8f
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40010400 	.word	0x40010400

08004de8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <TIM_OC6_SetConfig+0x9c>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	051b      	lsls	r3, r3, #20
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a13      	ldr	r2, [pc, #76]	; (8004e88 <TIM_OC6_SetConfig+0xa0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_OC6_SetConfig+0x60>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <TIM_OC6_SetConfig+0xa4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d109      	bne.n	8004e5c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	029b      	lsls	r3, r3, #10
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	feff8fff 	.word	0xfeff8fff
 8004e88:	40010000 	.word	0x40010000
 8004e8c:	40010400 	.word	0x40010400

08004e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f023 0201 	bic.w	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f023 030a 	bic.w	r3, r3, #10
 8004ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b087      	sub	sp, #28
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0210 	bic.w	r2, r3, #16
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	031b      	lsls	r3, r3, #12
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f043 0307 	orr.w	r3, r3, #7
 8004f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	609a      	str	r2, [r3, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	021a      	lsls	r2, r3, #8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	609a      	str	r2, [r3, #8]
}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e06d      	b.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a30      	ldr	r2, [pc, #192]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a2f      	ldr	r2, [pc, #188]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d108      	bne.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005016:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a20      	ldr	r2, [pc, #128]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d022      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504e:	d01d      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1d      	ldr	r2, [pc, #116]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d018      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1a      	ldr	r2, [pc, #104]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00e      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d009      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a15      	ldr	r2, [pc, #84]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d10c      	bne.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005092:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40010400 	.word	0x40010400
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40001800 	.word	0x40001800

080050e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e040      	b.n	80051b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fc f8e4 	bl	800130c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	; 0x24
 8005148:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fae6 	bl	800572c <UART_SetConfig>
 8005160:	4603      	mov	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e022      	b.n	80051b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fd3c 	bl	8005bf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fdc3 	bl	8005d34 <UART_CheckIdleState>
 80051ae:	4603      	mov	r3, r0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	4613      	mov	r3, r2
 80051c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d145      	bne.n	800525a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <HAL_UART_Transmit_IT+0x22>
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e03e      	b.n	800525c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_UART_Transmit_IT+0x34>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e037      	b.n	800525c <HAL_UART_Transmit_IT+0xa4>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	88fa      	ldrh	r2, [r7, #6]
 80051fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	88fa      	ldrh	r2, [r7, #6]
 8005206:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2221      	movs	r2, #33	; 0x21
 800521c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005226:	d107      	bne.n	8005238 <HAL_UART_Transmit_IT+0x80>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d103      	bne.n	8005238 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a0d      	ldr	r2, [pc, #52]	; (8005268 <HAL_UART_Transmit_IT+0xb0>)
 8005234:	669a      	str	r2, [r3, #104]	; 0x68
 8005236:	e002      	b.n	800523e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a0c      	ldr	r2, [pc, #48]	; (800526c <HAL_UART_Transmit_IT+0xb4>)
 800523c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005254:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	e000      	b.n	800525c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800525a:	2302      	movs	r3, #2
  }
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	080060cd 	.word	0x080060cd
 800526c:	0800605b 	.word	0x0800605b

08005270 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	4613      	mov	r3, r2
 800527c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005282:	2b20      	cmp	r3, #32
 8005284:	d12c      	bne.n	80052e0 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <HAL_UART_Receive_IT+0x22>
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e025      	b.n	80052e2 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_UART_Receive_IT+0x34>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e01e      	b.n	80052e2 <HAL_UART_Receive_IT+0x72>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80052ce:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	461a      	mov	r2, r3
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 fdf2 	bl	8005ec0 <UART_Start_Receive_IT>
 80052dc:	4603      	mov	r3, r0
 80052de:	e000      	b.n	80052e2 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80052e0:	2302      	movs	r3, #2
  }
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005312:	4013      	ands	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d113      	bne.n	8005344 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00e      	beq.n	8005344 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d009      	beq.n	8005344 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 81cc 	beq.w	80056d2 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	4798      	blx	r3
      }
      return;
 8005342:	e1c6      	b.n	80056d2 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 80e3 	beq.w	8005512 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d105      	bne.n	8005362 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4ba5      	ldr	r3, [pc, #660]	; (80055f0 <HAL_UART_IRQHandler+0x304>)
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 80d8 	beq.w	8005512 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d010      	beq.n	800538e <HAL_UART_IRQHandler+0xa2>
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2201      	movs	r2, #1
 800537c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005384:	f043 0201 	orr.w	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d010      	beq.n	80053ba <HAL_UART_IRQHandler+0xce>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00b      	beq.n	80053ba <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2202      	movs	r2, #2
 80053a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b0:	f043 0204 	orr.w	r2, r3, #4
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d010      	beq.n	80053e6 <HAL_UART_IRQHandler+0xfa>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00b      	beq.n	80053e6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2204      	movs	r2, #4
 80053d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053dc:	f043 0202 	orr.w	r2, r3, #2
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d015      	beq.n	800541c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d104      	bne.n	8005404 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2208      	movs	r2, #8
 800540a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005412:	f043 0208 	orr.w	r2, r3, #8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005422:	2b00      	cmp	r3, #0
 8005424:	d011      	beq.n	800544a <HAL_UART_IRQHandler+0x15e>
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00c      	beq.n	800544a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005438:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005440:	f043 0220 	orr.w	r2, r3, #32
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8140 	beq.w	80056d6 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00c      	beq.n	800547a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005480:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b40      	cmp	r3, #64	; 0x40
 800548e:	d004      	beq.n	800549a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005496:	2b00      	cmp	r3, #0
 8005498:	d031      	beq.n	80054fe <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fd98 	bl	8005fd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d123      	bne.n	80054f6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d013      	beq.n	80054ee <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ca:	4a4a      	ldr	r2, [pc, #296]	; (80055f4 <HAL_UART_IRQHandler+0x308>)
 80054cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fc fd10 	bl	8001ef8 <HAL_DMA_Abort_IT>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d017      	beq.n	800550e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80054e8:	4610      	mov	r0, r2
 80054ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ec:	e00f      	b.n	800550e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f8fc 	bl	80056ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f4:	e00b      	b.n	800550e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f8f8 	bl	80056ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	e007      	b.n	800550e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f8f4 	bl	80056ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800550c:	e0e3      	b.n	80056d6 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550e:	bf00      	nop
    return;
 8005510:	e0e1      	b.n	80056d6 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005516:	2b01      	cmp	r3, #1
 8005518:	f040 80a7 	bne.w	800566a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f003 0310 	and.w	r3, r3, #16
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 80a1 	beq.w	800566a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 809b 	beq.w	800566a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2210      	movs	r2, #16
 800553a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b40      	cmp	r3, #64	; 0x40
 8005548:	d156      	bne.n	80055f8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005554:	893b      	ldrh	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 80bf 	beq.w	80056da <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005562:	893a      	ldrh	r2, [r7, #8]
 8005564:	429a      	cmp	r2, r3
 8005566:	f080 80b8 	bcs.w	80056da <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	893a      	ldrh	r2, [r7, #8]
 800556e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557c:	d02a      	beq.n	80055d4 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800558c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0201 	bic.w	r2, r2, #1
 800559c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ac:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0210 	bic.w	r2, r2, #16
 80055c8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fc fc22 	bl	8001e18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f889 	bl	8005700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055ee:	e074      	b.n	80056da <HAL_UART_IRQHandler+0x3ee>
 80055f0:	04000120 	.word	0x04000120
 80055f4:	0800602f 	.word	0x0800602f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005604:	b29b      	uxth	r3, r3
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d063      	beq.n	80056de <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8005616:	897b      	ldrh	r3, [r7, #10]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d060      	beq.n	80056de <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800562a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0210 	bic.w	r2, r2, #16
 800565c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800565e:	897b      	ldrh	r3, [r7, #10]
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f84c 	bl	8005700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005668:	e039      	b.n	80056de <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00d      	beq.n	8005690 <HAL_UART_IRQHandler+0x3a4>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005686:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f845 	bl	8005718 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800568e:	e029      	b.n	80056e4 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00d      	beq.n	80056b6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d008      	beq.n	80056b6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01a      	beq.n	80056e2 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	4798      	blx	r3
    }
    return;
 80056b4:	e015      	b.n	80056e2 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d011      	beq.n	80056e4 <HAL_UART_IRQHandler+0x3f8>
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00c      	beq.n	80056e4 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fd3c 	bl	8006148 <UART_EndTransmit_IT>
    return;
 80056d0:	e008      	b.n	80056e4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80056d2:	bf00      	nop
 80056d4:	e006      	b.n	80056e4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80056d6:	bf00      	nop
 80056d8:	e004      	b.n	80056e4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80056da:	bf00      	nop
 80056dc:	e002      	b.n	80056e4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80056de:	bf00      	nop
 80056e0:	e000      	b.n	80056e4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80056e2:	bf00      	nop
  }

}
 80056e4:	3720      	adds	r7, #32
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop

080056ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4ba7      	ldr	r3, [pc, #668]	; (80059f4 <UART_SetConfig+0x2c8>)
 8005758:	4013      	ands	r3, r2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6812      	ldr	r2, [r2, #0]
 800575e:	6979      	ldr	r1, [r7, #20]
 8005760:	430b      	orrs	r3, r1
 8005762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	430a      	orrs	r2, r1
 800579c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a95      	ldr	r2, [pc, #596]	; (80059f8 <UART_SetConfig+0x2cc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d120      	bne.n	80057ea <UART_SetConfig+0xbe>
 80057a8:	4b94      	ldr	r3, [pc, #592]	; (80059fc <UART_SetConfig+0x2d0>)
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d816      	bhi.n	80057e4 <UART_SetConfig+0xb8>
 80057b6:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <UART_SetConfig+0x90>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	080057cd 	.word	0x080057cd
 80057c0:	080057d9 	.word	0x080057d9
 80057c4:	080057d3 	.word	0x080057d3
 80057c8:	080057df 	.word	0x080057df
 80057cc:	2301      	movs	r3, #1
 80057ce:	77fb      	strb	r3, [r7, #31]
 80057d0:	e14f      	b.n	8005a72 <UART_SetConfig+0x346>
 80057d2:	2302      	movs	r3, #2
 80057d4:	77fb      	strb	r3, [r7, #31]
 80057d6:	e14c      	b.n	8005a72 <UART_SetConfig+0x346>
 80057d8:	2304      	movs	r3, #4
 80057da:	77fb      	strb	r3, [r7, #31]
 80057dc:	e149      	b.n	8005a72 <UART_SetConfig+0x346>
 80057de:	2308      	movs	r3, #8
 80057e0:	77fb      	strb	r3, [r7, #31]
 80057e2:	e146      	b.n	8005a72 <UART_SetConfig+0x346>
 80057e4:	2310      	movs	r3, #16
 80057e6:	77fb      	strb	r3, [r7, #31]
 80057e8:	e143      	b.n	8005a72 <UART_SetConfig+0x346>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a84      	ldr	r2, [pc, #528]	; (8005a00 <UART_SetConfig+0x2d4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d132      	bne.n	800585a <UART_SetConfig+0x12e>
 80057f4:	4b81      	ldr	r3, [pc, #516]	; (80059fc <UART_SetConfig+0x2d0>)
 80057f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fa:	f003 030c 	and.w	r3, r3, #12
 80057fe:	2b0c      	cmp	r3, #12
 8005800:	d828      	bhi.n	8005854 <UART_SetConfig+0x128>
 8005802:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <UART_SetConfig+0xdc>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	0800583d 	.word	0x0800583d
 800580c:	08005855 	.word	0x08005855
 8005810:	08005855 	.word	0x08005855
 8005814:	08005855 	.word	0x08005855
 8005818:	08005849 	.word	0x08005849
 800581c:	08005855 	.word	0x08005855
 8005820:	08005855 	.word	0x08005855
 8005824:	08005855 	.word	0x08005855
 8005828:	08005843 	.word	0x08005843
 800582c:	08005855 	.word	0x08005855
 8005830:	08005855 	.word	0x08005855
 8005834:	08005855 	.word	0x08005855
 8005838:	0800584f 	.word	0x0800584f
 800583c:	2300      	movs	r3, #0
 800583e:	77fb      	strb	r3, [r7, #31]
 8005840:	e117      	b.n	8005a72 <UART_SetConfig+0x346>
 8005842:	2302      	movs	r3, #2
 8005844:	77fb      	strb	r3, [r7, #31]
 8005846:	e114      	b.n	8005a72 <UART_SetConfig+0x346>
 8005848:	2304      	movs	r3, #4
 800584a:	77fb      	strb	r3, [r7, #31]
 800584c:	e111      	b.n	8005a72 <UART_SetConfig+0x346>
 800584e:	2308      	movs	r3, #8
 8005850:	77fb      	strb	r3, [r7, #31]
 8005852:	e10e      	b.n	8005a72 <UART_SetConfig+0x346>
 8005854:	2310      	movs	r3, #16
 8005856:	77fb      	strb	r3, [r7, #31]
 8005858:	e10b      	b.n	8005a72 <UART_SetConfig+0x346>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a69      	ldr	r2, [pc, #420]	; (8005a04 <UART_SetConfig+0x2d8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d120      	bne.n	80058a6 <UART_SetConfig+0x17a>
 8005864:	4b65      	ldr	r3, [pc, #404]	; (80059fc <UART_SetConfig+0x2d0>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800586e:	2b30      	cmp	r3, #48	; 0x30
 8005870:	d013      	beq.n	800589a <UART_SetConfig+0x16e>
 8005872:	2b30      	cmp	r3, #48	; 0x30
 8005874:	d814      	bhi.n	80058a0 <UART_SetConfig+0x174>
 8005876:	2b20      	cmp	r3, #32
 8005878:	d009      	beq.n	800588e <UART_SetConfig+0x162>
 800587a:	2b20      	cmp	r3, #32
 800587c:	d810      	bhi.n	80058a0 <UART_SetConfig+0x174>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <UART_SetConfig+0x15c>
 8005882:	2b10      	cmp	r3, #16
 8005884:	d006      	beq.n	8005894 <UART_SetConfig+0x168>
 8005886:	e00b      	b.n	80058a0 <UART_SetConfig+0x174>
 8005888:	2300      	movs	r3, #0
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e0f1      	b.n	8005a72 <UART_SetConfig+0x346>
 800588e:	2302      	movs	r3, #2
 8005890:	77fb      	strb	r3, [r7, #31]
 8005892:	e0ee      	b.n	8005a72 <UART_SetConfig+0x346>
 8005894:	2304      	movs	r3, #4
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e0eb      	b.n	8005a72 <UART_SetConfig+0x346>
 800589a:	2308      	movs	r3, #8
 800589c:	77fb      	strb	r3, [r7, #31]
 800589e:	e0e8      	b.n	8005a72 <UART_SetConfig+0x346>
 80058a0:	2310      	movs	r3, #16
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e0e5      	b.n	8005a72 <UART_SetConfig+0x346>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a57      	ldr	r2, [pc, #348]	; (8005a08 <UART_SetConfig+0x2dc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d120      	bne.n	80058f2 <UART_SetConfig+0x1c6>
 80058b0:	4b52      	ldr	r3, [pc, #328]	; (80059fc <UART_SetConfig+0x2d0>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058ba:	2bc0      	cmp	r3, #192	; 0xc0
 80058bc:	d013      	beq.n	80058e6 <UART_SetConfig+0x1ba>
 80058be:	2bc0      	cmp	r3, #192	; 0xc0
 80058c0:	d814      	bhi.n	80058ec <UART_SetConfig+0x1c0>
 80058c2:	2b80      	cmp	r3, #128	; 0x80
 80058c4:	d009      	beq.n	80058da <UART_SetConfig+0x1ae>
 80058c6:	2b80      	cmp	r3, #128	; 0x80
 80058c8:	d810      	bhi.n	80058ec <UART_SetConfig+0x1c0>
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <UART_SetConfig+0x1a8>
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d006      	beq.n	80058e0 <UART_SetConfig+0x1b4>
 80058d2:	e00b      	b.n	80058ec <UART_SetConfig+0x1c0>
 80058d4:	2300      	movs	r3, #0
 80058d6:	77fb      	strb	r3, [r7, #31]
 80058d8:	e0cb      	b.n	8005a72 <UART_SetConfig+0x346>
 80058da:	2302      	movs	r3, #2
 80058dc:	77fb      	strb	r3, [r7, #31]
 80058de:	e0c8      	b.n	8005a72 <UART_SetConfig+0x346>
 80058e0:	2304      	movs	r3, #4
 80058e2:	77fb      	strb	r3, [r7, #31]
 80058e4:	e0c5      	b.n	8005a72 <UART_SetConfig+0x346>
 80058e6:	2308      	movs	r3, #8
 80058e8:	77fb      	strb	r3, [r7, #31]
 80058ea:	e0c2      	b.n	8005a72 <UART_SetConfig+0x346>
 80058ec:	2310      	movs	r3, #16
 80058ee:	77fb      	strb	r3, [r7, #31]
 80058f0:	e0bf      	b.n	8005a72 <UART_SetConfig+0x346>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a45      	ldr	r2, [pc, #276]	; (8005a0c <UART_SetConfig+0x2e0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d125      	bne.n	8005948 <UART_SetConfig+0x21c>
 80058fc:	4b3f      	ldr	r3, [pc, #252]	; (80059fc <UART_SetConfig+0x2d0>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800590a:	d017      	beq.n	800593c <UART_SetConfig+0x210>
 800590c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005910:	d817      	bhi.n	8005942 <UART_SetConfig+0x216>
 8005912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005916:	d00b      	beq.n	8005930 <UART_SetConfig+0x204>
 8005918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591c:	d811      	bhi.n	8005942 <UART_SetConfig+0x216>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <UART_SetConfig+0x1fe>
 8005922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005926:	d006      	beq.n	8005936 <UART_SetConfig+0x20a>
 8005928:	e00b      	b.n	8005942 <UART_SetConfig+0x216>
 800592a:	2300      	movs	r3, #0
 800592c:	77fb      	strb	r3, [r7, #31]
 800592e:	e0a0      	b.n	8005a72 <UART_SetConfig+0x346>
 8005930:	2302      	movs	r3, #2
 8005932:	77fb      	strb	r3, [r7, #31]
 8005934:	e09d      	b.n	8005a72 <UART_SetConfig+0x346>
 8005936:	2304      	movs	r3, #4
 8005938:	77fb      	strb	r3, [r7, #31]
 800593a:	e09a      	b.n	8005a72 <UART_SetConfig+0x346>
 800593c:	2308      	movs	r3, #8
 800593e:	77fb      	strb	r3, [r7, #31]
 8005940:	e097      	b.n	8005a72 <UART_SetConfig+0x346>
 8005942:	2310      	movs	r3, #16
 8005944:	77fb      	strb	r3, [r7, #31]
 8005946:	e094      	b.n	8005a72 <UART_SetConfig+0x346>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a30      	ldr	r2, [pc, #192]	; (8005a10 <UART_SetConfig+0x2e4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d125      	bne.n	800599e <UART_SetConfig+0x272>
 8005952:	4b2a      	ldr	r3, [pc, #168]	; (80059fc <UART_SetConfig+0x2d0>)
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800595c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005960:	d017      	beq.n	8005992 <UART_SetConfig+0x266>
 8005962:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005966:	d817      	bhi.n	8005998 <UART_SetConfig+0x26c>
 8005968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800596c:	d00b      	beq.n	8005986 <UART_SetConfig+0x25a>
 800596e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005972:	d811      	bhi.n	8005998 <UART_SetConfig+0x26c>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <UART_SetConfig+0x254>
 8005978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597c:	d006      	beq.n	800598c <UART_SetConfig+0x260>
 800597e:	e00b      	b.n	8005998 <UART_SetConfig+0x26c>
 8005980:	2301      	movs	r3, #1
 8005982:	77fb      	strb	r3, [r7, #31]
 8005984:	e075      	b.n	8005a72 <UART_SetConfig+0x346>
 8005986:	2302      	movs	r3, #2
 8005988:	77fb      	strb	r3, [r7, #31]
 800598a:	e072      	b.n	8005a72 <UART_SetConfig+0x346>
 800598c:	2304      	movs	r3, #4
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	e06f      	b.n	8005a72 <UART_SetConfig+0x346>
 8005992:	2308      	movs	r3, #8
 8005994:	77fb      	strb	r3, [r7, #31]
 8005996:	e06c      	b.n	8005a72 <UART_SetConfig+0x346>
 8005998:	2310      	movs	r3, #16
 800599a:	77fb      	strb	r3, [r7, #31]
 800599c:	e069      	b.n	8005a72 <UART_SetConfig+0x346>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a1c      	ldr	r2, [pc, #112]	; (8005a14 <UART_SetConfig+0x2e8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d137      	bne.n	8005a18 <UART_SetConfig+0x2ec>
 80059a8:	4b14      	ldr	r3, [pc, #80]	; (80059fc <UART_SetConfig+0x2d0>)
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80059b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059b6:	d017      	beq.n	80059e8 <UART_SetConfig+0x2bc>
 80059b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059bc:	d817      	bhi.n	80059ee <UART_SetConfig+0x2c2>
 80059be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c2:	d00b      	beq.n	80059dc <UART_SetConfig+0x2b0>
 80059c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c8:	d811      	bhi.n	80059ee <UART_SetConfig+0x2c2>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <UART_SetConfig+0x2aa>
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d2:	d006      	beq.n	80059e2 <UART_SetConfig+0x2b6>
 80059d4:	e00b      	b.n	80059ee <UART_SetConfig+0x2c2>
 80059d6:	2300      	movs	r3, #0
 80059d8:	77fb      	strb	r3, [r7, #31]
 80059da:	e04a      	b.n	8005a72 <UART_SetConfig+0x346>
 80059dc:	2302      	movs	r3, #2
 80059de:	77fb      	strb	r3, [r7, #31]
 80059e0:	e047      	b.n	8005a72 <UART_SetConfig+0x346>
 80059e2:	2304      	movs	r3, #4
 80059e4:	77fb      	strb	r3, [r7, #31]
 80059e6:	e044      	b.n	8005a72 <UART_SetConfig+0x346>
 80059e8:	2308      	movs	r3, #8
 80059ea:	77fb      	strb	r3, [r7, #31]
 80059ec:	e041      	b.n	8005a72 <UART_SetConfig+0x346>
 80059ee:	2310      	movs	r3, #16
 80059f0:	77fb      	strb	r3, [r7, #31]
 80059f2:	e03e      	b.n	8005a72 <UART_SetConfig+0x346>
 80059f4:	efff69f3 	.word	0xefff69f3
 80059f8:	40011000 	.word	0x40011000
 80059fc:	40023800 	.word	0x40023800
 8005a00:	40004400 	.word	0x40004400
 8005a04:	40004800 	.word	0x40004800
 8005a08:	40004c00 	.word	0x40004c00
 8005a0c:	40005000 	.word	0x40005000
 8005a10:	40011400 	.word	0x40011400
 8005a14:	40007800 	.word	0x40007800
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a71      	ldr	r2, [pc, #452]	; (8005be4 <UART_SetConfig+0x4b8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d125      	bne.n	8005a6e <UART_SetConfig+0x342>
 8005a22:	4b71      	ldr	r3, [pc, #452]	; (8005be8 <UART_SetConfig+0x4bc>)
 8005a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a30:	d017      	beq.n	8005a62 <UART_SetConfig+0x336>
 8005a32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a36:	d817      	bhi.n	8005a68 <UART_SetConfig+0x33c>
 8005a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a3c:	d00b      	beq.n	8005a56 <UART_SetConfig+0x32a>
 8005a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a42:	d811      	bhi.n	8005a68 <UART_SetConfig+0x33c>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <UART_SetConfig+0x324>
 8005a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a4c:	d006      	beq.n	8005a5c <UART_SetConfig+0x330>
 8005a4e:	e00b      	b.n	8005a68 <UART_SetConfig+0x33c>
 8005a50:	2300      	movs	r3, #0
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e00d      	b.n	8005a72 <UART_SetConfig+0x346>
 8005a56:	2302      	movs	r3, #2
 8005a58:	77fb      	strb	r3, [r7, #31]
 8005a5a:	e00a      	b.n	8005a72 <UART_SetConfig+0x346>
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	e007      	b.n	8005a72 <UART_SetConfig+0x346>
 8005a62:	2308      	movs	r3, #8
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	e004      	b.n	8005a72 <UART_SetConfig+0x346>
 8005a68:	2310      	movs	r3, #16
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e001      	b.n	8005a72 <UART_SetConfig+0x346>
 8005a6e:	2310      	movs	r3, #16
 8005a70:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a7a:	d15b      	bne.n	8005b34 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005a7c:	7ffb      	ldrb	r3, [r7, #31]
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d827      	bhi.n	8005ad2 <UART_SetConfig+0x3a6>
 8005a82:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <UART_SetConfig+0x35c>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005aad 	.word	0x08005aad
 8005a8c:	08005ab5 	.word	0x08005ab5
 8005a90:	08005abd 	.word	0x08005abd
 8005a94:	08005ad3 	.word	0x08005ad3
 8005a98:	08005ac3 	.word	0x08005ac3
 8005a9c:	08005ad3 	.word	0x08005ad3
 8005aa0:	08005ad3 	.word	0x08005ad3
 8005aa4:	08005ad3 	.word	0x08005ad3
 8005aa8:	08005acb 	.word	0x08005acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aac:	f7fd fdaa 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8005ab0:	61b8      	str	r0, [r7, #24]
        break;
 8005ab2:	e013      	b.n	8005adc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ab4:	f7fd fdba 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8005ab8:	61b8      	str	r0, [r7, #24]
        break;
 8005aba:	e00f      	b.n	8005adc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005abc:	4b4b      	ldr	r3, [pc, #300]	; (8005bec <UART_SetConfig+0x4c0>)
 8005abe:	61bb      	str	r3, [r7, #24]
        break;
 8005ac0:	e00c      	b.n	8005adc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ac2:	f7fd fcdd 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 8005ac6:	61b8      	str	r0, [r7, #24]
        break;
 8005ac8:	e008      	b.n	8005adc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ace:	61bb      	str	r3, [r7, #24]
        break;
 8005ad0:	e004      	b.n	8005adc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	77bb      	strb	r3, [r7, #30]
        break;
 8005ada:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d074      	beq.n	8005bcc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	005a      	lsls	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	441a      	add	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b0f      	cmp	r3, #15
 8005afe:	d916      	bls.n	8005b2e <UART_SetConfig+0x402>
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b06:	d212      	bcs.n	8005b2e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f023 030f 	bic.w	r3, r3, #15
 8005b10:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	085b      	lsrs	r3, r3, #1
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	89fb      	ldrh	r3, [r7, #14]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	89fa      	ldrh	r2, [r7, #14]
 8005b2a:	60da      	str	r2, [r3, #12]
 8005b2c:	e04e      	b.n	8005bcc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	77bb      	strb	r3, [r7, #30]
 8005b32:	e04b      	b.n	8005bcc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b34:	7ffb      	ldrb	r3, [r7, #31]
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d827      	bhi.n	8005b8a <UART_SetConfig+0x45e>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <UART_SetConfig+0x414>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005b6d 	.word	0x08005b6d
 8005b48:	08005b75 	.word	0x08005b75
 8005b4c:	08005b8b 	.word	0x08005b8b
 8005b50:	08005b7b 	.word	0x08005b7b
 8005b54:	08005b8b 	.word	0x08005b8b
 8005b58:	08005b8b 	.word	0x08005b8b
 8005b5c:	08005b8b 	.word	0x08005b8b
 8005b60:	08005b83 	.word	0x08005b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b64:	f7fd fd4e 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8005b68:	61b8      	str	r0, [r7, #24]
        break;
 8005b6a:	e013      	b.n	8005b94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b6c:	f7fd fd5e 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8005b70:	61b8      	str	r0, [r7, #24]
        break;
 8005b72:	e00f      	b.n	8005b94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b74:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <UART_SetConfig+0x4c0>)
 8005b76:	61bb      	str	r3, [r7, #24]
        break;
 8005b78:	e00c      	b.n	8005b94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7a:	f7fd fc81 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 8005b7e:	61b8      	str	r0, [r7, #24]
        break;
 8005b80:	e008      	b.n	8005b94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b86:	61bb      	str	r3, [r7, #24]
        break;
 8005b88:	e004      	b.n	8005b94 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	77bb      	strb	r3, [r7, #30]
        break;
 8005b92:	bf00      	nop
    }

    if (pclk != 0U)
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d018      	beq.n	8005bcc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	085a      	lsrs	r2, r3, #1
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	441a      	add	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b0f      	cmp	r3, #15
 8005bb4:	d908      	bls.n	8005bc8 <UART_SetConfig+0x49c>
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bbc:	d204      	bcs.n	8005bc8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	60da      	str	r2, [r3, #12]
 8005bc6:	e001      	b.n	8005bcc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005bd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	40007c00 	.word	0x40007c00
 8005be8:	40023800 	.word	0x40023800
 8005bec:	00f42400 	.word	0x00f42400

08005bf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00a      	beq.n	8005c1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01a      	beq.n	8005d06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cee:	d10a      	bne.n	8005d06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	605a      	str	r2, [r3, #4]
  }
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d44:	f7fb fc14 	bl	8001570 <HAL_GetTick>
 8005d48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d10e      	bne.n	8005d76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f82d 	bl	8005dc6 <UART_WaitOnFlagUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e023      	b.n	8005dbe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d10e      	bne.n	8005da2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f817 	bl	8005dc6 <UART_WaitOnFlagUntilTimeout>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e00d      	b.n	8005dbe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	603b      	str	r3, [r7, #0]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd6:	e05e      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d05a      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de0:	f7fb fbc6 	bl	8001570 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d302      	bcc.n	8005df6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d11b      	bne.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0201 	bic.w	r2, r2, #1
 8005e14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e043      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d02c      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4a:	d124      	bne.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e64:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0201 	bic.w	r2, r2, #1
 8005e74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e00f      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d091      	beq.n	8005dd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	88fa      	ldrh	r2, [r7, #6]
 8005ed8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef2:	d10e      	bne.n	8005f12 <UART_Start_Receive_IT+0x52>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d105      	bne.n	8005f08 <UART_Start_Receive_IT+0x48>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005f02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f06:	e02d      	b.n	8005f64 <UART_Start_Receive_IT+0xa4>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	22ff      	movs	r2, #255	; 0xff
 8005f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f10:	e028      	b.n	8005f64 <UART_Start_Receive_IT+0xa4>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10d      	bne.n	8005f36 <UART_Start_Receive_IT+0x76>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d104      	bne.n	8005f2c <UART_Start_Receive_IT+0x6c>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f2a:	e01b      	b.n	8005f64 <UART_Start_Receive_IT+0xa4>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	227f      	movs	r2, #127	; 0x7f
 8005f30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f34:	e016      	b.n	8005f64 <UART_Start_Receive_IT+0xa4>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f3e:	d10d      	bne.n	8005f5c <UART_Start_Receive_IT+0x9c>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d104      	bne.n	8005f52 <UART_Start_Receive_IT+0x92>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	227f      	movs	r2, #127	; 0x7f
 8005f4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f50:	e008      	b.n	8005f64 <UART_Start_Receive_IT+0xa4>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	223f      	movs	r2, #63	; 0x3f
 8005f56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f5a:	e003      	b.n	8005f64 <UART_Start_Receive_IT+0xa4>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2222      	movs	r2, #34	; 0x22
 8005f70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f042 0201 	orr.w	r2, r2, #1
 8005f80:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8a:	d107      	bne.n	8005f9c <UART_Start_Receive_IT+0xdc>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d103      	bne.n	8005f9c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4a0c      	ldr	r2, [pc, #48]	; (8005fc8 <UART_Start_Receive_IT+0x108>)
 8005f98:	665a      	str	r2, [r3, #100]	; 0x64
 8005f9a:	e002      	b.n	8005fa2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4a0b      	ldr	r2, [pc, #44]	; (8005fcc <UART_Start_Receive_IT+0x10c>)
 8005fa0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005fb8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	0800624f 	.word	0x0800624f
 8005fcc:	0800617b 	.word	0x0800617b

08005fd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fe6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0201 	bic.w	r2, r2, #1
 8005ff6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d107      	bne.n	8006010 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0210 	bic.w	r2, r2, #16
 800600e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff fb4d 	bl	80056ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006066:	2b21      	cmp	r3, #33	; 0x21
 8006068:	d12a      	bne.n	80060c0 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d110      	bne.n	8006098 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006084:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006094:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006096:	e013      	b.n	80060c0 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609c:	781a      	ldrb	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060d8:	2b21      	cmp	r3, #33	; 0x21
 80060da:	d12f      	bne.n	800613c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d110      	bne.n	800610a <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060f6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006106:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006108:	e018      	b.n	800613c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800611e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006124:	1c9a      	adds	r2, r3, #2
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	b29a      	uxth	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800613c:	bf00      	nop
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800615e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fa fafd 	bl	800076c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006188:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800618e:	2b22      	cmp	r3, #34	; 0x22
 8006190:	d151      	bne.n	8006236 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800619a:	89bb      	ldrh	r3, [r7, #12]
 800619c:	b2d9      	uxtb	r1, r3
 800619e:	89fb      	ldrh	r3, [r7, #14]
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a6:	400a      	ands	r2, r1
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d138      	bne.n	8006246 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061e2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0201 	bic.w	r2, r2, #1
 80061f2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006204:	2b01      	cmp	r3, #1
 8006206:	d10f      	bne.n	8006228 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0210 	bic.w	r2, r2, #16
 8006216:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff fa6d 	bl	8005700 <HAL_UARTEx_RxEventCallback>
 8006226:	e002      	b.n	800622e <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7fa fa57 	bl	80006dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006234:	e007      	b.n	8006246 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	699a      	ldr	r2, [r3, #24]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0208 	orr.w	r2, r2, #8
 8006244:	619a      	str	r2, [r3, #24]
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800625c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006262:	2b22      	cmp	r3, #34	; 0x22
 8006264:	d151      	bne.n	800630a <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006272:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006274:	89ba      	ldrh	r2, [r7, #12]
 8006276:	89fb      	ldrh	r3, [r7, #14]
 8006278:	4013      	ands	r3, r2
 800627a:	b29a      	uxth	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006284:	1c9a      	adds	r2, r3, #2
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d138      	bne.n	800631a <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062b6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0201 	bic.w	r2, r2, #1
 80062c6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d10f      	bne.n	80062fc <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0210 	bic.w	r2, r2, #16
 80062ea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff fa03 	bl	8005700 <HAL_UARTEx_RxEventCallback>
 80062fa:	e002      	b.n	8006302 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7fa f9ed 	bl	80006dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006308:	e007      	b.n	800631a <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	699a      	ldr	r2, [r3, #24]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0208 	orr.w	r2, r2, #8
 8006318:	619a      	str	r2, [r3, #24]
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <get_paramAddrTable>:

s_FBTable fbTable; //table holding function blocks
s_FBTable* get_fbTable(){return &fbTable;}

s_Param paramAddrTable; //parameters pointing function block in/out arguments
s_Param* get_paramAddrTable(){return &paramAddrTable;}
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
 8006328:	4b02      	ldr	r3, [pc, #8]	; (8006334 <get_paramAddrTable+0x10>)
 800632a:	4618      	mov	r0, r3
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	2000049c 	.word	0x2000049c

08006338 <writeToFBTable>:
}
*/

//general functions

uint8_t writeToFBTable(void* callback, uint8_t startParamIndex){
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
	uint8_t fb_index = fbTable.length;
 8006344:	4b0d      	ldr	r3, [pc, #52]	; (800637c <writeToFBTable+0x44>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	73fb      	strb	r3, [r7, #15]
	fbTable.fb[fb_index].callback = callback;
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	490b      	ldr	r1, [pc, #44]	; (800637c <writeToFBTable+0x44>)
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	440b      	add	r3, r1
 8006354:	609a      	str	r2, [r3, #8]
	fbTable.fb[fb_index].param_start_index = startParamIndex;
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	4a08      	ldr	r2, [pc, #32]	; (800637c <writeToFBTable+0x44>)
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	4413      	add	r3, r2
 800635e:	78fa      	ldrb	r2, [r7, #3]
 8006360:	711a      	strb	r2, [r3, #4]
	fbTable.length++;
 8006362:	4b06      	ldr	r3, [pc, #24]	; (800637c <writeToFBTable+0x44>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b04      	ldr	r3, [pc, #16]	; (800637c <writeToFBTable+0x44>)
 800636c:	701a      	strb	r2, [r3, #0]
	return fb_index;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	20000398 	.word	0x20000398

08006380 <createParameter>:

uint32_t createParameter(int32_t init_val){
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	paramAddrTable.value[paramAddrTable.currentIndex] = init_val;
 8006388:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <createParameter+0x48>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	4a0e      	ldr	r2, [pc, #56]	; (80063c8 <createParameter+0x48>)
 800638e:	3380      	adds	r3, #128	; 0x80
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	605a      	str	r2, [r3, #4]
	paramAddrTable.addr[paramAddrTable.currentIndex] = paramAddrTable.currentIndex;
 8006398:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <createParameter+0x48>)
 800639a:	781a      	ldrb	r2, [r3, #0]
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <createParameter+0x48>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	4611      	mov	r1, r2
 80063a2:	4a09      	ldr	r2, [pc, #36]	; (80063c8 <createParameter+0x48>)
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	6059      	str	r1, [r3, #4]
	paramAddrTable.currentIndex++;
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <createParameter+0x48>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	3301      	adds	r3, #1
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <createParameter+0x48>)
 80063b4:	701a      	strb	r2, [r3, #0]
	return paramAddrTable.currentIndex-1;
 80063b6:	4b04      	ldr	r3, [pc, #16]	; (80063c8 <createParameter+0x48>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	3b01      	subs	r3, #1
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	2000049c 	.word	0x2000049c

080063cc <make_connection>:

void make_connection(uint32_t dest_port_i, uint32_t src_port_i)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
	paramAddrTable.addr[dest_port_i] = paramAddrTable.addr[src_port_i] ;
 80063d6:	4a08      	ldr	r2, [pc, #32]	; (80063f8 <make_connection+0x2c>)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	4905      	ldr	r1, [pc, #20]	; (80063f8 <make_connection+0x2c>)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	440b      	add	r3, r1
 80063e8:	605a      	str	r2, [r3, #4]
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	2000049c 	.word	0x2000049c

080063fc <initiate_mccore>:

void initiate_mccore(){
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
	fbTable.length = 0;
 8006400:	4b06      	ldr	r3, [pc, #24]	; (800641c <initiate_mccore+0x20>)
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
	paramAddrTable.currentIndex = 0;
 8006406:	4b06      	ldr	r3, [pc, #24]	; (8006420 <initiate_mccore+0x24>)
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
	read_persistent_data_structure();
 800640c:	f000 f8a6 	bl	800655c <read_persistent_data_structure>
	init_uniqueid();
 8006410:	f000 f92e 	bl	8006670 <init_uniqueid>
	init_deployment_ch();
 8006414:	f000 fea8 	bl	8007168 <init_deployment_ch>
}
 8006418:	bf00      	nop
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20000398 	.word	0x20000398
 8006420:	2000049c 	.word	0x2000049c

08006424 <initiate_circuit>:

void initiate_circuit(){
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
	hal_init_tick();
 8006428:	f7fa f8fd 	bl	8000626 <hal_init_tick>
}
 800642c:	bf00      	nop
 800642e:	bd80      	pop	{r7, pc}

08006430 <run_one_cycle>:

void run_one_cycle(){
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
	//get inputs
	//run the input related function blocks

	//process inputs
	//run the processing related input blocks
	for(uint8_t i= 0;i<fbTable.length;i++){
 8006436:	2300      	movs	r3, #0
 8006438:	71fb      	strb	r3, [r7, #7]
 800643a:	e00e      	b.n	800645a <run_one_cycle+0x2a>
		(*fbTable.fb[i].callback)((uint8_t)fbTable.fb[i].param_start_index);
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	4a0c      	ldr	r2, [pc, #48]	; (8006470 <run_one_cycle+0x40>)
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	4413      	add	r3, r2
 8006444:	689a      	ldr	r2, [r3, #8]
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	4909      	ldr	r1, [pc, #36]	; (8006470 <run_one_cycle+0x40>)
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	440b      	add	r3, r1
 800644e:	791b      	ldrb	r3, [r3, #4]
 8006450:	4618      	mov	r0, r3
 8006452:	4790      	blx	r2
	for(uint8_t i= 0;i<fbTable.length;i++){
 8006454:	79fb      	ldrb	r3, [r7, #7]
 8006456:	3301      	adds	r3, #1
 8006458:	71fb      	strb	r3, [r7, #7]
 800645a:	4b05      	ldr	r3, [pc, #20]	; (8006470 <run_one_cycle+0x40>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	79fa      	ldrb	r2, [r7, #7]
 8006460:	429a      	cmp	r2, r3
 8006462:	d3eb      	bcc.n	800643c <run_one_cycle+0xc>
	}

	//refresh outputs
	//run the output related function blocks
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000398 	.word	0x20000398

08006474 <mcCore_SM>:

void mcCore_SM()
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
	static uint8_t mcCore_state = ST_MCCORE_INIT;//ST_MCCORE_TEST;//ST_MCCORE_TEST;//
	switch (mcCore_state){
 8006478:	4b22      	ldr	r3, [pc, #136]	; (8006504 <mcCore_SM+0x90>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b05      	cmp	r3, #5
 800647e:	d83e      	bhi.n	80064fe <mcCore_SM+0x8a>
 8006480:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <mcCore_SM+0x14>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	080064a1 	.word	0x080064a1
 800648c:	080064cb 	.word	0x080064cb
 8006490:	080064ff 	.word	0x080064ff
 8006494:	080064ad 	.word	0x080064ad
 8006498:	080064eb 	.word	0x080064eb
 800649c:	080064f7 	.word	0x080064f7
		case ST_MCCORE_INIT:
			initiate_mccore(); //kill all the program memory
 80064a0:	f7ff ffac 	bl	80063fc <initiate_mccore>
			mcCore_state = ST_WAIT_RUN;
 80064a4:	4b17      	ldr	r3, [pc, #92]	; (8006504 <mcCore_SM+0x90>)
 80064a6:	2203      	movs	r2, #3
 80064a8:	701a      	strb	r2, [r3, #0]
			break;
 80064aa:	e028      	b.n	80064fe <mcCore_SM+0x8a>

		case ST_WAIT_RUN: //wait for the deployment finish and run cmd arrival
			if(Parser(get_deployment_ch()) == CMD_RUN){
 80064ac:	f000 fe3a 	bl	8007124 <get_deployment_ch>
 80064b0:	4603      	mov	r3, r0
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fdc2 	bl	800703c <Parser>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b67      	cmp	r3, #103	; 0x67
 80064bc:	d11e      	bne.n	80064fc <mcCore_SM+0x88>
				initiate_circuit();
 80064be:	f7ff ffb1 	bl	8006424 <initiate_circuit>
				mcCore_state = ST_MCCORE_RUN;
 80064c2:	4b10      	ldr	r3, [pc, #64]	; (8006504 <mcCore_SM+0x90>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80064c8:	e018      	b.n	80064fc <mcCore_SM+0x88>

		case ST_MCCORE_RUN:
			if(Parser(get_deployment_ch()) == CMD_KILL){ //when running if KILL cmd received go to the initial state
 80064ca:	f000 fe2b 	bl	8007124 <get_deployment_ch>
 80064ce:	4603      	mov	r3, r0
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 fdb3 	bl	800703c <Parser>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b68      	cmp	r3, #104	; 0x68
 80064da:	d103      	bne.n	80064e4 <mcCore_SM+0x70>
				mcCore_state = ST_MCCORE_INIT;
 80064dc:	4b09      	ldr	r3, [pc, #36]	; (8006504 <mcCore_SM+0x90>)
 80064de:	2200      	movs	r2, #0
 80064e0:	701a      	strb	r2, [r3, #0]
				run_one_cycle();
				//burdaki zamanı ölç
				//delta
				//bu deltaları kullanıcıya logla
			}
			break;
 80064e2:	e00c      	b.n	80064fe <mcCore_SM+0x8a>
				run_one_cycle();
 80064e4:	f7ff ffa4 	bl	8006430 <run_one_cycle>
			break;
 80064e8:	e009      	b.n	80064fe <mcCore_SM+0x8a>

		case ST_MCCORE_TEST:
			create_test_circuit();
 80064ea:	f000 f895 	bl	8006618 <create_test_circuit>
			mcCore_state = ST_MCCORE_TEST_RUN;
 80064ee:	4b05      	ldr	r3, [pc, #20]	; (8006504 <mcCore_SM+0x90>)
 80064f0:	2205      	movs	r2, #5
 80064f2:	701a      	strb	r2, [r3, #0]
			break;
 80064f4:	e003      	b.n	80064fe <mcCore_SM+0x8a>

		case ST_MCCORE_TEST_RUN:
			run_one_cycle();
 80064f6:	f7ff ff9b 	bl	8006430 <run_one_cycle>
			break;
 80064fa:	e000      	b.n	80064fe <mcCore_SM+0x8a>
			break;
 80064fc:	bf00      	nop
	}
}
 80064fe:	bf00      	nop
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	200000a6 	.word	0x200000a6

08006508 <get_gpd>:

enum gpd_type {CONS, ATOM, FUNC, LAMBDA}; //for feature use

Global_Persistent_Data gpd;

Global_Persistent_Data* get_gpd(){return &gpd;}
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
 800650c:	4b02      	ldr	r3, [pc, #8]	; (8006518 <get_gpd+0x10>)
 800650e:	4618      	mov	r0, r3
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	200008a0 	.word	0x200008a0

0800651c <init_persistent_data_structure>:

void init_persistent_data_structure(){
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
	gpd.baudrate = 0; //0->115200, 1-->57600, 2-->38400, 3-->19200, 4-->9600
 8006522:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <init_persistent_data_structure+0x3c>)
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]
	gpd.modbus_slave_address = 101;
 8006528:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <init_persistent_data_structure+0x3c>)
 800652a:	2265      	movs	r2, #101	; 0x65
 800652c:	605a      	str	r2, [r3, #4]

	for(uint16_t i;i<MODBUS_PERSISTENT_DATA;i++){
 800652e:	e008      	b.n	8006542 <init_persistent_data_structure+0x26>
		gpd.modbus_persistent_data[i] = 0;
 8006530:	88fb      	ldrh	r3, [r7, #6]
 8006532:	4a09      	ldr	r2, [pc, #36]	; (8006558 <init_persistent_data_structure+0x3c>)
 8006534:	3302      	adds	r3, #2
 8006536:	2100      	movs	r1, #0
 8006538:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint16_t i;i<MODBUS_PERSISTENT_DATA;i++){
 800653c:	88fb      	ldrh	r3, [r7, #6]
 800653e:	3301      	adds	r3, #1
 8006540:	80fb      	strh	r3, [r7, #6]
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	2b07      	cmp	r3, #7
 8006546:	d9f3      	bls.n	8006530 <init_persistent_data_structure+0x14>
	}
}
 8006548:	bf00      	nop
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	200008a0 	.word	0x200008a0

0800655c <read_persistent_data_structure>:

uint8_t read_persistent_data_structure(){
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
	void* fb = get_flash_data();
 8006562:	f000 fecf 	bl	8007304 <get_flash_data>
 8006566:	6138      	str	r0, [r7, #16]
	//copy the flash contents to the gpd
	uint8_t* p_flash = (uint8_t*)fb + FLASHBLOCK_HEADER_SIZE;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	3308      	adds	r3, #8
 800656c:	60fb      	str	r3, [r7, #12]
	uint8_t* p_gpd = (uint8_t*)get_gpd();
 800656e:	f7ff ffcb 	bl	8006508 <get_gpd>
 8006572:	60b8      	str	r0, [r7, #8]
	uint8_t ret = 0;
 8006574:	2300      	movs	r3, #0
 8006576:	75fb      	strb	r3, [r7, #23]

	init_persistent_data_structure();
 8006578:	f7ff ffd0 	bl	800651c <init_persistent_data_structure>

	if(((Flash_Block*)fb)->length == sizeof(Global_Persistent_Data)){
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	2b28      	cmp	r3, #40	; 0x28
 8006582:	d108      	bne.n	8006596 <read_persistent_data_structure+0x3a>
		memcpy(p_gpd, p_flash, ((Flash_Block*)fb)->length);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	461a      	mov	r2, r3
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	68b8      	ldr	r0, [r7, #8]
 800658e:	f001 f915 	bl	80077bc <memcpy>
		ret = 1;
 8006592:	2301      	movs	r3, #1
 8006594:	75fb      	strb	r3, [r7, #23]
	}

	//transfer the modbus and user contents of the gpd to the modbus and fb registers
	uint16_t* modbus_data = get_Modbus_Buf_Holding_Registers_40001();
 8006596:	f000 f903 	bl	80067a0 <get_Modbus_Buf_Holding_Registers_40001>
 800659a:	4603      	mov	r3, r0
 800659c:	607b      	str	r3, [r7, #4]
	for(uint16_t i = 0;i<MODBUS_PERSISTENT_DATA;i++){
 800659e:	2300      	movs	r3, #0
 80065a0:	82bb      	strh	r3, [r7, #20]
 80065a2:	e00e      	b.n	80065c2 <read_persistent_data_structure+0x66>
		modbus_data[i+8] = (uint16_t )gpd.modbus_persistent_data[i];
 80065a4:	8abb      	ldrh	r3, [r7, #20]
 80065a6:	4a0b      	ldr	r2, [pc, #44]	; (80065d4 <read_persistent_data_structure+0x78>)
 80065a8:	3302      	adds	r3, #2
 80065aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065ae:	8abb      	ldrh	r3, [r7, #20]
 80065b0:	3308      	adds	r3, #8
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	4413      	add	r3, r2
 80065b8:	b28a      	uxth	r2, r1
 80065ba:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0;i<MODBUS_PERSISTENT_DATA;i++){
 80065bc:	8abb      	ldrh	r3, [r7, #20]
 80065be:	3301      	adds	r3, #1
 80065c0:	82bb      	strh	r3, [r7, #20]
 80065c2:	8abb      	ldrh	r3, [r7, #20]
 80065c4:	2b07      	cmp	r3, #7
 80065c6:	d9ed      	bls.n	80065a4 <read_persistent_data_structure+0x48>
	}

	return ret;
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	200008a0 	.word	0x200008a0

080065d8 <write_persistent_data_structure>:

uint8_t write_persistent_data_structure(){
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0
	write_flash_data((uint8_t*)&gpd, sizeof(gpd));
 80065dc:	2128      	movs	r1, #40	; 0x28
 80065de:	4803      	ldr	r0, [pc, #12]	; (80065ec <write_persistent_data_structure+0x14>)
 80065e0:	f000 fe5c 	bl	800729c <write_flash_data>
}
 80065e4:	bf00      	nop
 80065e6:	4618      	mov	r0, r3
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	200008a0 	.word	0x200008a0

080065f0 <Record_To_Modbus_GPD>:

void Record_To_Modbus_GPD(uint8_t index, uint32_t datum){
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	4603      	mov	r3, r0
 80065f8:	6039      	str	r1, [r7, #0]
 80065fa:	71fb      	strb	r3, [r7, #7]
	gpd.modbus_persistent_data[index] = datum;
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	4905      	ldr	r1, [pc, #20]	; (8006614 <Record_To_Modbus_GPD+0x24>)
 8006600:	3302      	adds	r3, #2
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	200008a0 	.word	0x200008a0

08006618 <create_test_circuit>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_inc.h"

void create_test_circuit()
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b090      	sub	sp, #64	; 0x40
 800661c:	af00      	add	r7, sp, #0
	type_fb_cycle fb_cyc1 = create_fb_cycle(1000);
 800661e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006622:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fc10 	bl	8006e4c <create_fb_cycle>
	type_fb_outputpin ld1   = create_fb_outputpin(12); //GPIO-12
 800662c:	f107 0320 	add.w	r3, r7, #32
 8006630:	210c      	movs	r1, #12
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fc98 	bl	8006f68 <create_fb_outputpin>

	type_fb_cycle fb_cyc2 = create_fb_cycle(1000);
 8006638:	f107 0310 	add.w	r3, r7, #16
 800663c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fc03 	bl	8006e4c <create_fb_cycle>
	type_fb_outputpin ld2   = create_fb_outputpin(8); //GPIO-12
 8006646:	463b      	mov	r3, r7
 8006648:	2108      	movs	r1, #8
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fc8c 	bl	8006f68 <create_fb_outputpin>

	make_connection(ld1.fp.output, fb_cyc1.fp.output);
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006654:	4611      	mov	r1, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff feb8 	bl	80063cc <make_connection>
	make_connection(ld2.fp.output, fb_cyc2.fp.output);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4611      	mov	r1, r2
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff feb2 	bl	80063cc <make_connection>


}
 8006668:	bf00      	nop
 800666a:	3740      	adds	r7, #64	; 0x40
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <init_uniqueid>:
#include "modbus_slave.h"
#include "adaptor.h"

#define UID_LEN 16

void init_uniqueid(){
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
	uint8_t uniqueid[UID_LEN];
	//clear uniqueid buffer
	for(uint8_t i = 0;i<UID_LEN;i++){
 8006676:	2300      	movs	r3, #0
 8006678:	75fb      	strb	r3, [r7, #23]
 800667a:	e009      	b.n	8006690 <init_uniqueid+0x20>
		uniqueid[i] = 0;
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	f107 0218 	add.w	r2, r7, #24
 8006682:	4413      	add	r3, r2
 8006684:	2200      	movs	r2, #0
 8006686:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(uint8_t i = 0;i<UID_LEN;i++){
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	3301      	adds	r3, #1
 800668e:	75fb      	strb	r3, [r7, #23]
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	2b0f      	cmp	r3, #15
 8006694:	d9f2      	bls.n	800667c <init_uniqueid+0xc>
	}
	//read unique id from the adaptor function
	get_uniqueid(uniqueid, UID_LEN);
 8006696:	463b      	mov	r3, r7
 8006698:	2110      	movs	r1, #16
 800669a:	4618      	mov	r0, r3
 800669c:	f7fa f870 	bl	8000780 <get_uniqueid>

	//copy this value to the memory place where mapped to a modbus read only input registers
	uint8_t* modbus_p = (uint8_t*) get_Modbus_Buf_Input_Registers_30001();
 80066a0:	f000 f888 	bl	80067b4 <get_Modbus_Buf_Input_Registers_30001>
 80066a4:	6138      	str	r0, [r7, #16]

	for(uint8_t i= 0; i<UID_LEN;i++){
 80066a6:	2300      	movs	r3, #0
 80066a8:	75bb      	strb	r3, [r7, #22]
 80066aa:	e00c      	b.n	80066c6 <init_uniqueid+0x56>
		modbus_p[i] = uniqueid[i];
 80066ac:	7dba      	ldrb	r2, [r7, #22]
 80066ae:	7dbb      	ldrb	r3, [r7, #22]
 80066b0:	6939      	ldr	r1, [r7, #16]
 80066b2:	440b      	add	r3, r1
 80066b4:	f107 0118 	add.w	r1, r7, #24
 80066b8:	440a      	add	r2, r1
 80066ba:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80066be:	701a      	strb	r2, [r3, #0]
	for(uint8_t i= 0; i<UID_LEN;i++){
 80066c0:	7dbb      	ldrb	r3, [r7, #22]
 80066c2:	3301      	adds	r3, #1
 80066c4:	75bb      	strb	r3, [r7, #22]
 80066c6:	7dbb      	ldrb	r3, [r7, #22]
 80066c8:	2b0f      	cmp	r3, #15
 80066ca:	d9ef      	bls.n	80066ac <init_uniqueid+0x3c>
	}
}
 80066cc:	bf00      	nop
 80066ce:	bf00      	nop
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <Channel_Mapping>:
 */
#include "stdint.h"
#include "deployment.h"
#include "comm_service.h"

Communication_Ch* Channel_Mapping(uint32_t channel){
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
	Communication_Ch* comm_ch;

	//channel mappings
	if(channel == 0){
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <Channel_Mapping+0x16>
		comm_ch = get_deployment_ch();
 80066e4:	f000 fd1e 	bl	8007124 <get_deployment_ch>
 80066e8:	4603      	mov	r3, r0
 80066ea:	60fb      	str	r3, [r7, #12]
	}
	return comm_ch;
 80066ec:	68fb      	ldr	r3, [r7, #12]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <Runtime_CommDataService_NewData_Received>:

void Runtime_CommDataService_NewData_Received(uint32_t channel, uint8_t* buf, uint32_t len)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b086      	sub	sp, #24
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	607a      	str	r2, [r7, #4]
	Communication_Ch* comm_ch = Channel_Mapping(channel);
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7ff ffe7 	bl	80066d6 <Channel_Mapping>
 8006708:	6138      	str	r0, [r7, #16]

	//put data to the channel buffer
	for(uint32_t i= 0;i<len;i++)
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	e014      	b.n	800673a <Runtime_CommDataService_NewData_Received+0x44>
	if(comm_ch->rx_data_cntr < CH_RX_DATA_BUF_LEN){ //parse edilmeyi bekleyen bir data varsa üzerine yazma.
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	795b      	ldrb	r3, [r3, #5]
 8006714:	2b3f      	cmp	r3, #63	; 0x3f
 8006716:	d80d      	bhi.n	8006734 <Runtime_CommDataService_NewData_Received+0x3e>
		comm_ch->rx_data_buf[comm_ch->rx_data_cntr++] = buf[i];
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	441a      	add	r2, r3
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	795b      	ldrb	r3, [r3, #5]
 8006722:	1c59      	adds	r1, r3, #1
 8006724:	b2c8      	uxtb	r0, r1
 8006726:	6939      	ldr	r1, [r7, #16]
 8006728:	7148      	strb	r0, [r1, #5]
 800672a:	4619      	mov	r1, r3
 800672c:	7812      	ldrb	r2, [r2, #0]
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	440b      	add	r3, r1
 8006732:	719a      	strb	r2, [r3, #6]
	for(uint32_t i= 0;i<len;i++)
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	3301      	adds	r3, #1
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	429a      	cmp	r2, r3
 8006740:	d3e6      	bcc.n	8006710 <Runtime_CommDataService_NewData_Received+0x1a>
	}
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <Runtime_CommDataService_Process_DataBuffer>:

uint8_t Runtime_CommDataService_Process_DataBuffer(uint32_t channel)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	Communication_Ch* comm_ch = Channel_Mapping(channel);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff ffbe 	bl	80066d6 <Channel_Mapping>
 800675a:	60f8      	str	r0, [r7, #12]
	if(comm_ch->rx_data_cntr < 2) {
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	795b      	ldrb	r3, [r3, #5]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d803      	bhi.n	800676c <Runtime_CommDataService_Process_DataBuffer+0x20>
		comm_ch->rx_data_cntr = 0;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	715a      	strb	r2, [r3, #5]
 800676a:	e013      	b.n	8006794 <Runtime_CommDataService_Process_DataBuffer+0x48>
	}
	else if(comm_ch->data_validity_check_callback()  == 0) {
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006770:	4798      	blx	r3
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10b      	bne.n	8006790 <Runtime_CommDataService_Process_DataBuffer+0x44>
		comm_ch->fdata_ready = 1;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		comm_ch->process_callback(channel);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
		comm_ch->rx_data_cntr = 0;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	715a      	strb	r2, [r3, #5]
 800678e:	e001      	b.n	8006794 <Runtime_CommDataService_Process_DataBuffer+0x48>
	}
	else{
		return 1;
 8006790:	2301      	movs	r3, #1
 8006792:	e000      	b.n	8006796 <Runtime_CommDataService_Process_DataBuffer+0x4a>
	}

	return 0;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <get_Modbus_Buf_Holding_Registers_40001>:
//uint8_t Modbus_Buf_Discrete_Inputs_10001; //todo: implement
uint16_t Modbus_Buf_Input_Registers_30001[MODBUS_INPUT_REGISTER_COUNT]; //todo: implement
uint16_t Modbus_Buf_Holding_Registers_40001[MODBUS_HOLDING_REGISTER_COUNT];
Modbus_Slave_Responce_Data resp_data;

uint16_t* get_Modbus_Buf_Holding_Registers_40001(){return Modbus_Buf_Holding_Registers_40001;}
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	4b02      	ldr	r3, [pc, #8]	; (80067b0 <get_Modbus_Buf_Holding_Registers_40001+0x10>)
 80067a6:	4618      	mov	r0, r3
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	200008f0 	.word	0x200008f0

080067b4 <get_Modbus_Buf_Input_Registers_30001>:
uint16_t* get_Modbus_Buf_Input_Registers_30001(){return Modbus_Buf_Input_Registers_30001;}
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	4b02      	ldr	r3, [pc, #8]	; (80067c4 <get_Modbus_Buf_Input_Registers_30001+0x10>)
 80067ba:	4618      	mov	r0, r3
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	20000910 	.word	0x20000910

080067c8 <get_MODBUS_SLAVE_ADDR>:

uint8_t MODBUS_SLAVE_ADDR  = 0x01;
uint8_t* get_MODBUS_SLAVE_ADDR(){return &MODBUS_SLAVE_ADDR;}
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	4b02      	ldr	r3, [pc, #8]	; (80067d8 <get_MODBUS_SLAVE_ADDR+0x10>)
 80067ce:	4618      	mov	r0, r3
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	20000011 	.word	0x20000011

080067dc <get_low_byte>:

uint8_t get_low_byte(uint16_t word){
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)(word & 0xFF);
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	b2db      	uxtb	r3, r3
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <get_hi_byte>:

uint8_t get_hi_byte(uint16_t word){
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	4603      	mov	r3, r0
 80067fe:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)((word>>8) & 0xFF);
 8006800:	88fb      	ldrh	r3, [r7, #6]
 8006802:	0a1b      	lsrs	r3, r3, #8
 8006804:	b29b      	uxth	r3, r3
 8006806:	b2db      	uxtb	r3, r3
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <modbus_byte2word>:

uint16_t modbus_byte2word(uint8_t* p){
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	return ((p[0] << 8) + p[1]);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	b29b      	uxth	r3, r3
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	b29a      	uxth	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3301      	adds	r3, #1
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	4413      	add	r3, r2
 8006830:	b29b      	uxth	r3, r3
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
	...

08006840 <modbus_slave_prep_resp_data>:
}

void modbus_slave_prep_resp_data(Modbus_Slave_Responce_Data* resp_data,
									uint8_t function,
									uint16_t register_addr,
									uint16_t register_qty){
 8006840:	b590      	push	{r4, r7, lr}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	4608      	mov	r0, r1
 800684a:	4611      	mov	r1, r2
 800684c:	461a      	mov	r2, r3
 800684e:	4603      	mov	r3, r0
 8006850:	72fb      	strb	r3, [r7, #11]
 8006852:	460b      	mov	r3, r1
 8006854:	813b      	strh	r3, [r7, #8]
 8006856:	4613      	mov	r3, r2
 8006858:	80fb      	strh	r3, [r7, #6]
	uint16_t i;

	uint16_t register_addr_0 = register_addr-1; //40001 means register 0
 800685a:	893b      	ldrh	r3, [r7, #8]
 800685c:	3b01      	subs	r3, #1
 800685e:	82bb      	strh	r3, [r7, #20]

	resp_data->index = 0;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	resp_data->buf[resp_data->index++] = MODBUS_SLAVE_ADDR; //Slave address
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	b2d1      	uxtb	r1, r2
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8006878:	461a      	mov	r2, r3
 800687a:	4b7d      	ldr	r3, [pc, #500]	; (8006a70 <modbus_slave_prep_resp_data+0x230>)
 800687c:	7819      	ldrb	r1, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	5499      	strb	r1, [r3, r2]
	resp_data->buf[resp_data->index++] = function; //Function
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	b2d1      	uxtb	r1, r2
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8006892:	4619      	mov	r1, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	7afa      	ldrb	r2, [r7, #11]
 8006898:	545a      	strb	r2, [r3, r1]
	if(function == MODBUS_READ_HOLDING_REGISTER){
 800689a:	7afb      	ldrb	r3, [r7, #11]
 800689c:	2b03      	cmp	r3, #3
 800689e:	d14a      	bne.n	8006936 <modbus_slave_prep_resp_data+0xf6>
		resp_data->buf[resp_data->index++] = register_qty*2;
 80068a0:	88fb      	ldrh	r3, [r7, #6]
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80068aa:	1c59      	adds	r1, r3, #1
 80068ac:	b2c8      	uxtb	r0, r1
 80068ae:	68f9      	ldr	r1, [r7, #12]
 80068b0:	f881 0026 	strb.w	r0, [r1, #38]	; 0x26
 80068b4:	4619      	mov	r1, r3
 80068b6:	0053      	lsls	r3, r2, #1
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	545a      	strb	r2, [r3, r1]
		for(i = 0;i<register_qty;i++){
 80068be:	2300      	movs	r3, #0
 80068c0:	82fb      	strh	r3, [r7, #22]
 80068c2:	e033      	b.n	800692c <modbus_slave_prep_resp_data+0xec>
			if(register_addr_0+i <= MODBUS_HOLDING_REGISTER_COUNT) {
 80068c4:	8aba      	ldrh	r2, [r7, #20]
 80068c6:	8afb      	ldrh	r3, [r7, #22]
 80068c8:	4413      	add	r3, r2
 80068ca:	2b10      	cmp	r3, #16
 80068cc:	dc2b      	bgt.n	8006926 <modbus_slave_prep_resp_data+0xe6>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 80068ce:	8aba      	ldrh	r2, [r7, #20]
 80068d0:	8afb      	ldrh	r3, [r7, #22]
 80068d2:	4413      	add	r3, r2
 80068d4:	4a67      	ldr	r2, [pc, #412]	; (8006a74 <modbus_slave_prep_resp_data+0x234>)
 80068d6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	b2d0      	uxtb	r0, r2
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 80068ea:	461c      	mov	r4, r3
 80068ec:	4608      	mov	r0, r1
 80068ee:	f7ff ff82 	bl	80067f6 <get_hi_byte>
 80068f2:	4603      	mov	r3, r0
 80068f4:	461a      	mov	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	551a      	strb	r2, [r3, r4]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 80068fa:	8aba      	ldrh	r2, [r7, #20]
 80068fc:	8afb      	ldrh	r3, [r7, #22]
 80068fe:	4413      	add	r3, r2
 8006900:	4a5c      	ldr	r2, [pc, #368]	; (8006a74 <modbus_slave_prep_resp_data+0x234>)
 8006902:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	b2d0      	uxtb	r0, r2
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 8006916:	461c      	mov	r4, r3
 8006918:	4608      	mov	r0, r1
 800691a:	f7ff ff5f 	bl	80067dc <get_low_byte>
 800691e:	4603      	mov	r3, r0
 8006920:	461a      	mov	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	551a      	strb	r2, [r3, r4]
		for(i = 0;i<register_qty;i++){
 8006926:	8afb      	ldrh	r3, [r7, #22]
 8006928:	3301      	adds	r3, #1
 800692a:	82fb      	strh	r3, [r7, #22]
 800692c:	8afa      	ldrh	r2, [r7, #22]
 800692e:	88fb      	ldrh	r3, [r7, #6]
 8006930:	429a      	cmp	r2, r3
 8006932:	d3c7      	bcc.n	80068c4 <modbus_slave_prep_resp_data+0x84>
 8006934:	e0e9      	b.n	8006b0a <modbus_slave_prep_resp_data+0x2ca>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_READ_INPUT_REGISTER){
 8006936:	7afb      	ldrb	r3, [r7, #11]
 8006938:	2b04      	cmp	r3, #4
 800693a:	d14a      	bne.n	80069d2 <modbus_slave_prep_resp_data+0x192>
		resp_data->buf[resp_data->index++] = register_qty*2;
 800693c:	88fb      	ldrh	r3, [r7, #6]
 800693e:	b2da      	uxtb	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006946:	1c59      	adds	r1, r3, #1
 8006948:	b2c8      	uxtb	r0, r1
 800694a:	68f9      	ldr	r1, [r7, #12]
 800694c:	f881 0026 	strb.w	r0, [r1, #38]	; 0x26
 8006950:	4619      	mov	r1, r3
 8006952:	0053      	lsls	r3, r2, #1
 8006954:	b2da      	uxtb	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	545a      	strb	r2, [r3, r1]
		for(i = 0;i<register_qty;i++){
 800695a:	2300      	movs	r3, #0
 800695c:	82fb      	strh	r3, [r7, #22]
 800695e:	e033      	b.n	80069c8 <modbus_slave_prep_resp_data+0x188>
			if(register_addr_0+i <= MODBUS_INPUT_REGISTER_COUNT) {
 8006960:	8aba      	ldrh	r2, [r7, #20]
 8006962:	8afb      	ldrh	r3, [r7, #22]
 8006964:	4413      	add	r3, r2
 8006966:	2b10      	cmp	r3, #16
 8006968:	dc2b      	bgt.n	80069c2 <modbus_slave_prep_resp_data+0x182>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 800696a:	8aba      	ldrh	r2, [r7, #20]
 800696c:	8afb      	ldrh	r3, [r7, #22]
 800696e:	4413      	add	r3, r2
 8006970:	4a41      	ldr	r2, [pc, #260]	; (8006a78 <modbus_slave_prep_resp_data+0x238>)
 8006972:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	b2d0      	uxtb	r0, r2
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 8006986:	461c      	mov	r4, r3
 8006988:	4608      	mov	r0, r1
 800698a:	f7ff ff34 	bl	80067f6 <get_hi_byte>
 800698e:	4603      	mov	r3, r0
 8006990:	461a      	mov	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	551a      	strb	r2, [r3, r4]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 8006996:	8aba      	ldrh	r2, [r7, #20]
 8006998:	8afb      	ldrh	r3, [r7, #22]
 800699a:	4413      	add	r3, r2
 800699c:	4a36      	ldr	r2, [pc, #216]	; (8006a78 <modbus_slave_prep_resp_data+0x238>)
 800699e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	b2d0      	uxtb	r0, r2
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 80069b2:	461c      	mov	r4, r3
 80069b4:	4608      	mov	r0, r1
 80069b6:	f7ff ff11 	bl	80067dc <get_low_byte>
 80069ba:	4603      	mov	r3, r0
 80069bc:	461a      	mov	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	551a      	strb	r2, [r3, r4]
		for(i = 0;i<register_qty;i++){
 80069c2:	8afb      	ldrh	r3, [r7, #22]
 80069c4:	3301      	adds	r3, #1
 80069c6:	82fb      	strh	r3, [r7, #22]
 80069c8:	8afa      	ldrh	r2, [r7, #22]
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d3c7      	bcc.n	8006960 <modbus_slave_prep_resp_data+0x120>
 80069d0:	e09b      	b.n	8006b0a <modbus_slave_prep_resp_data+0x2ca>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_WRITE_SINGLE_REGISTER){
 80069d2:	7afb      	ldrb	r3, [r7, #11]
 80069d4:	2b06      	cmp	r3, #6
 80069d6:	d151      	bne.n	8006a7c <modbus_slave_prep_resp_data+0x23c>
		resp_data->buf[resp_data->index++] = get_hi_byte(register_addr);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	b2d1      	uxtb	r1, r2
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 80069e8:	461c      	mov	r4, r3
 80069ea:	893b      	ldrh	r3, [r7, #8]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff ff02 	bl	80067f6 <get_hi_byte>
 80069f2:	4603      	mov	r3, r0
 80069f4:	461a      	mov	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_addr);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	b2d1      	uxtb	r1, r2
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8006a0a:	461c      	mov	r4, r3
 8006a0c:	893b      	ldrh	r3, [r7, #8]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff fee4 	bl	80067dc <get_low_byte>
 8006a14:	4603      	mov	r3, r0
 8006a16:	461a      	mov	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 8006a1c:	8abb      	ldrh	r3, [r7, #20]
 8006a1e:	4a15      	ldr	r2, [pc, #84]	; (8006a74 <modbus_slave_prep_resp_data+0x234>)
 8006a20:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	b2d0      	uxtb	r0, r2
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 8006a34:	461c      	mov	r4, r3
 8006a36:	4608      	mov	r0, r1
 8006a38:	f7ff fedd 	bl	80067f6 <get_hi_byte>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	461a      	mov	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 8006a44:	8abb      	ldrh	r3, [r7, #20]
 8006a46:	4a0b      	ldr	r2, [pc, #44]	; (8006a74 <modbus_slave_prep_resp_data+0x234>)
 8006a48:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	b2d0      	uxtb	r0, r2
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 8006a5c:	461c      	mov	r4, r3
 8006a5e:	4608      	mov	r0, r1
 8006a60:	f7ff febc 	bl	80067dc <get_low_byte>
 8006a64:	4603      	mov	r3, r0
 8006a66:	461a      	mov	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	551a      	strb	r2, [r3, r4]
 8006a6c:	e04d      	b.n	8006b0a <modbus_slave_prep_resp_data+0x2ca>
 8006a6e:	bf00      	nop
 8006a70:	20000011 	.word	0x20000011
 8006a74:	200008f0 	.word	0x200008f0
 8006a78:	20000910 	.word	0x20000910
	}

	else if(function == MODBUS_WRITE_MULTIPLE_REGISTER){
 8006a7c:	7afb      	ldrb	r3, [r7, #11]
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d143      	bne.n	8006b0a <modbus_slave_prep_resp_data+0x2ca>
		resp_data->buf[resp_data->index++] = get_hi_byte(register_addr);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	b2d1      	uxtb	r1, r2
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8006a92:	461c      	mov	r4, r3
 8006a94:	893b      	ldrh	r3, [r7, #8]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff fead 	bl	80067f6 <get_hi_byte>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_addr);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	b2d1      	uxtb	r1, r2
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8006ab4:	461c      	mov	r4, r3
 8006ab6:	893b      	ldrh	r3, [r7, #8]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff fe8f 	bl	80067dc <get_low_byte>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_hi_byte(register_qty);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	b2d1      	uxtb	r1, r2
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8006ad6:	461c      	mov	r4, r3
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff fe8b 	bl	80067f6 <get_hi_byte>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_qty);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	b2d1      	uxtb	r1, r2
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8006af8:	461c      	mov	r4, r3
 8006afa:	88fb      	ldrh	r3, [r7, #6]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff fe6d 	bl	80067dc <get_low_byte>
 8006b02:	4603      	mov	r3, r0
 8006b04:	461a      	mov	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	551a      	strb	r2, [r3, r4]
	}

	//todo: crc
	uint16_t crc = CRC16(resp_data->buf, resp_data->index);
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f000 f8fc 	bl	8006d14 <CRC16>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	827b      	strh	r3, [r7, #18]

	resp_data->buf[resp_data->index++] = get_low_byte(crc);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	b2d1      	uxtb	r1, r2
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8006b30:	461c      	mov	r4, r3
 8006b32:	8a7b      	ldrh	r3, [r7, #18]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff fe51 	bl	80067dc <get_low_byte>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	551a      	strb	r2, [r3, r4]
	resp_data->buf[resp_data->index++] = get_hi_byte(crc);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	b2d1      	uxtb	r1, r2
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8006b52:	461c      	mov	r4, r3
 8006b54:	8a7b      	ldrh	r3, [r7, #18]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff fe4d 	bl	80067f6 <get_hi_byte>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	551a      	strb	r2, [r3, r4]

	resp_data->len = resp_data->index;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8006b70:	bf00      	nop
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd90      	pop	{r4, r7, pc}

08006b78 <modbus_slave_tx>:

void modbus_slave_tx(Modbus_Slave_Responce_Data* resp_data){
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	hal_modbus_uart_tx(resp_data->buf, resp_data->len);
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f7f9 fdda 	bl	8000744 <hal_modbus_uart_tx>
}
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <modbus_slave_rx>:

uint8_t modbus_slave_rx(uint32_t channel){
 8006b98:	b590      	push	{r4, r7, lr}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
	uint16_t register_addr = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	82bb      	strh	r3, [r7, #20]
	uint16_t register_val = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	827b      	strh	r3, [r7, #18]
	uint16_t register_qty = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	823b      	strh	r3, [r7, #16]

	uint16_t starting_addr = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	81fb      	strh	r3, [r7, #14]
	uint16_t quantity_of_register = 0;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	81bb      	strh	r3, [r7, #12]
	uint8_t gpd_recorded = 0;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	75fb      	strb	r3, [r7, #23]

	Communication_Ch* ch = Channel_Mapping(channel);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff fd8c 	bl	80066d6 <Channel_Mapping>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	60bb      	str	r3, [r7, #8]

	//todo: crc check

	if(ch->rx_data_buf[0] == MODBUS_SLAVE_ADDR){
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	799a      	ldrb	r2, [r3, #6]
 8006bc6:	4b4f      	ldr	r3, [pc, #316]	; (8006d04 <modbus_slave_rx+0x16c>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	f040 8093 	bne.w	8006cf6 <modbus_slave_rx+0x15e>
		register_addr = modbus_byte2word(&ch->rx_data_buf[2]);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff fe1d 	bl	8006814 <modbus_byte2word>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	82bb      	strh	r3, [r7, #20]
		register_qty = modbus_byte2word(&ch->rx_data_buf[4]);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	330a      	adds	r3, #10
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff fe16 	bl	8006814 <modbus_byte2word>
 8006be8:	4603      	mov	r3, r0
 8006bea:	823b      	strh	r3, [r7, #16]
		starting_addr = register_addr - 1;
 8006bec:	8abb      	ldrh	r3, [r7, #20]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	81fb      	strh	r3, [r7, #14]

		if(ch->rx_data_buf[1] == MODBUS_WRITE_SINGLE_REGISTER){
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	79db      	ldrb	r3, [r3, #7]
 8006bf6:	2b06      	cmp	r3, #6
 8006bf8:	d11f      	bne.n	8006c3a <modbus_slave_rx+0xa2>
			//todo: need to save parameter to flash
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 8006bfa:	89fb      	ldrh	r3, [r7, #14]
 8006bfc:	2b0f      	cmp	r3, #15
 8006bfe:	d85b      	bhi.n	8006cb8 <modbus_slave_rx+0x120>
				Modbus_Buf_Holding_Registers_40001[starting_addr] = modbus_byte2word(&ch->rx_data_buf[4]);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	330a      	adds	r3, #10
 8006c04:	89fc      	ldrh	r4, [r7, #14]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff fe04 	bl	8006814 <modbus_byte2word>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	461a      	mov	r2, r3
 8006c10:	4b3d      	ldr	r3, [pc, #244]	; (8006d08 <modbus_slave_rx+0x170>)
 8006c12:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

				if(starting_addr > 7) {
 8006c16:	89fb      	ldrh	r3, [r7, #14]
 8006c18:	2b07      	cmp	r3, #7
 8006c1a:	d94d      	bls.n	8006cb8 <modbus_slave_rx+0x120>
					Record_To_Modbus_GPD(starting_addr-8, Modbus_Buf_Holding_Registers_40001[starting_addr]);
 8006c1c:	89fb      	ldrh	r3, [r7, #14]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	3b08      	subs	r3, #8
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	89fb      	ldrh	r3, [r7, #14]
 8006c26:	4938      	ldr	r1, [pc, #224]	; (8006d08 <modbus_slave_rx+0x170>)
 8006c28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	f7ff fcde 	bl	80065f0 <Record_To_Modbus_GPD>
					write_persistent_data_structure();
 8006c34:	f7ff fcd0 	bl	80065d8 <write_persistent_data_structure>
 8006c38:	e03e      	b.n	8006cb8 <modbus_slave_rx+0x120>
				}
			}
		}

		else if(ch->rx_data_buf[1] == MODBUS_WRITE_MULTIPLE_REGISTER){
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	79db      	ldrb	r3, [r3, #7]
 8006c3e:	2b10      	cmp	r3, #16
 8006c40:	d13a      	bne.n	8006cb8 <modbus_slave_rx+0x120>
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 8006c42:	89fb      	ldrh	r3, [r7, #14]
 8006c44:	2b0f      	cmp	r3, #15
 8006c46:	d837      	bhi.n	8006cb8 <modbus_slave_rx+0x120>
				for(uint8_t i = 0;i<register_qty;i++){
 8006c48:	2300      	movs	r3, #0
 8006c4a:	75bb      	strb	r3, [r7, #22]
 8006c4c:	e02a      	b.n	8006ca4 <modbus_slave_rx+0x10c>
					Modbus_Buf_Holding_Registers_40001[starting_addr+i] = modbus_byte2word(&ch->rx_data_buf[7+i*2]);
 8006c4e:	7dbb      	ldrb	r3, [r7, #22]
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	3307      	adds	r3, #7
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	4413      	add	r3, r2
 8006c58:	1d99      	adds	r1, r3, #6
 8006c5a:	89fa      	ldrh	r2, [r7, #14]
 8006c5c:	7dbb      	ldrb	r3, [r7, #22]
 8006c5e:	18d4      	adds	r4, r2, r3
 8006c60:	4608      	mov	r0, r1
 8006c62:	f7ff fdd7 	bl	8006814 <modbus_byte2word>
 8006c66:	4603      	mov	r3, r0
 8006c68:	461a      	mov	r2, r3
 8006c6a:	4b27      	ldr	r3, [pc, #156]	; (8006d08 <modbus_slave_rx+0x170>)
 8006c6c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
					if((starting_addr+i) > 7) {
 8006c70:	89fa      	ldrh	r2, [r7, #14]
 8006c72:	7dbb      	ldrb	r3, [r7, #22]
 8006c74:	4413      	add	r3, r2
 8006c76:	2b07      	cmp	r3, #7
 8006c78:	dd11      	ble.n	8006c9e <modbus_slave_rx+0x106>
						//If modbus write targetted to upper 8 register,
						//since they are persistent registers record them to gdb
						Record_To_Modbus_GPD(starting_addr+i-8, Modbus_Buf_Holding_Registers_40001[starting_addr+i]);
 8006c7a:	89fb      	ldrh	r3, [r7, #14]
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	7dbb      	ldrb	r3, [r7, #22]
 8006c80:	4413      	add	r3, r2
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	3b08      	subs	r3, #8
 8006c86:	b2d8      	uxtb	r0, r3
 8006c88:	89fa      	ldrh	r2, [r7, #14]
 8006c8a:	7dbb      	ldrb	r3, [r7, #22]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	4a1e      	ldr	r2, [pc, #120]	; (8006d08 <modbus_slave_rx+0x170>)
 8006c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c94:	4619      	mov	r1, r3
 8006c96:	f7ff fcab 	bl	80065f0 <Record_To_Modbus_GPD>
						gpd_recorded = 1;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	75fb      	strb	r3, [r7, #23]
				for(uint8_t i = 0;i<register_qty;i++){
 8006c9e:	7dbb      	ldrb	r3, [r7, #22]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	75bb      	strb	r3, [r7, #22]
 8006ca4:	7dbb      	ldrb	r3, [r7, #22]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	8a3a      	ldrh	r2, [r7, #16]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d8cf      	bhi.n	8006c4e <modbus_slave_rx+0xb6>
					}
				}

				if(gpd_recorded){
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <modbus_slave_rx+0x120>
					//after multiple write finished record persistent data at once.
					write_persistent_data_structure();
 8006cb4:	f7ff fc90 	bl	80065d8 <write_persistent_data_structure>
		}

		else if(ch->rx_data_buf[1] == MODBUS_READ_HOLDING_REGISTER){
		}

		switch(ch->rx_data_buf[1]){
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	79db      	ldrb	r3, [r3, #7]
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	bf8c      	ite	hi
 8006cc0:	2201      	movhi	r2, #1
 8006cc2:	2200      	movls	r2, #0
 8006cc4:	b2d2      	uxtb	r2, r2
 8006cc6:	2a00      	cmp	r2, #0
 8006cc8:	d116      	bne.n	8006cf8 <modbus_slave_rx+0x160>
 8006cca:	2201      	movs	r2, #1
 8006ccc:	409a      	lsls	r2, r3
 8006cce:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <modbus_slave_rx+0x174>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	bf14      	ite	ne
 8006cd6:	2301      	movne	r3, #1
 8006cd8:	2300      	moveq	r3, #0
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <modbus_slave_rx+0x160>
			case MODBUS_WRITE_SINGLE_REGISTER:
			case MODBUS_WRITE_MULTIPLE_REGISTER:
			case MODBUS_READ_HOLDING_REGISTER:
			case MODBUS_READ_INPUT_REGISTER:
				//fill the responce structure
				modbus_slave_prep_resp_data(&resp_data,
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	79d9      	ldrb	r1, [r3, #7]
 8006ce4:	8a3b      	ldrh	r3, [r7, #16]
 8006ce6:	8aba      	ldrh	r2, [r7, #20]
 8006ce8:	4809      	ldr	r0, [pc, #36]	; (8006d10 <modbus_slave_rx+0x178>)
 8006cea:	f7ff fda9 	bl	8006840 <modbus_slave_prep_resp_data>
												ch->rx_data_buf[1],
													register_addr,
														register_qty);

				//initiate_tx
				modbus_slave_tx(&resp_data);
 8006cee:	4808      	ldr	r0, [pc, #32]	; (8006d10 <modbus_slave_rx+0x178>)
 8006cf0:	f7ff ff42 	bl	8006b78 <modbus_slave_tx>
				break;
 8006cf4:	e000      	b.n	8006cf8 <modbus_slave_rx+0x160>
		}
	}
 8006cf6:	bf00      	nop
	return 0;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd90      	pop	{r4, r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20000011 	.word	0x20000011
 8006d08:	200008f0 	.word	0x200008f0
 8006d0c:	00010058 	.word	0x00010058
 8006d10:	200008c8 	.word	0x200008c8

08006d14 <CRC16>:

uint16_t CRC16 (const uint8_t *nData, uint16_t wLength)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	807b      	strh	r3, [r7, #2]
   0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
   0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

uint8_t nTemp;
uint16_t wCRCWord = 0xFFFF;
 8006d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d24:	81fb      	strh	r3, [r7, #14]

   while (wLength--)
 8006d26:	e011      	b.n	8006d4c <CRC16+0x38>
   {
      nTemp = *nData++ ^ wCRCWord;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	781a      	ldrb	r2, [r3, #0]
 8006d30:	89fb      	ldrh	r3, [r7, #14]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	4053      	eors	r3, r2
 8006d36:	737b      	strb	r3, [r7, #13]
      wCRCWord >>= 8;
 8006d38:	89fb      	ldrh	r3, [r7, #14]
 8006d3a:	0a1b      	lsrs	r3, r3, #8
 8006d3c:	81fb      	strh	r3, [r7, #14]
      wCRCWord  ^= wCRCTable[nTemp];
 8006d3e:	7b7b      	ldrb	r3, [r7, #13]
 8006d40:	4a08      	ldr	r2, [pc, #32]	; (8006d64 <CRC16+0x50>)
 8006d42:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006d46:	89fb      	ldrh	r3, [r7, #14]
 8006d48:	4053      	eors	r3, r2
 8006d4a:	81fb      	strh	r3, [r7, #14]
   while (wLength--)
 8006d4c:	887b      	ldrh	r3, [r7, #2]
 8006d4e:	1e5a      	subs	r2, r3, #1
 8006d50:	807a      	strh	r2, [r7, #2]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e8      	bne.n	8006d28 <CRC16+0x14>
   }
   return wCRCWord;
 8006d56:	89fb      	ldrh	r3, [r7, #14]
} // End: CRC16
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	08007820 	.word	0x08007820

08006d68 <fb_cycle_parser>:
#include "fb_cycle.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_cycle_parser(uint8_t* p){
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6178      	str	r0, [r7, #20]
	uint32_t period = (uint32_t) p[0] << 24 | p[1] << 16 | p[2] <<8 | p[3];
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	061b      	lsls	r3, r3, #24
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	3201      	adds	r2, #1
 8006d7a:	7812      	ldrb	r2, [r2, #0]
 8006d7c:	0412      	lsls	r2, r2, #16
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	3202      	adds	r2, #2
 8006d84:	7812      	ldrb	r2, [r2, #0]
 8006d86:	0212      	lsls	r2, r2, #8
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	3203      	adds	r2, #3
 8006d8e:	7812      	ldrb	r2, [r2, #0]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	61fb      	str	r3, [r7, #28]
	create_fb_cycle(period);
 8006d94:	463b      	mov	r3, r7
 8006d96:	69f9      	ldr	r1, [r7, #28]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f857 	bl	8006e4c <create_fb_cycle>
	return 1;
 8006d9e:	2301      	movs	r3, #1
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3720      	adds	r7, #32
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <fb_cycle>:

void fb_cycle(uint8_t p){
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8006db2:	f7ff fab7 	bl	8006324 <get_paramAddrTable>
 8006db6:	6178      	str	r0, [r7, #20]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p]];
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	3380      	adds	r3, #128	; 0x80
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	3304      	adds	r3, #4
 8006dcc:	613b      	str	r3, [r7, #16]
	int32_t* dt = &pAddrTable->value[pAddrTable->addr[p+1]];
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	3380      	adds	r3, #128	; 0x80
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	4413      	add	r3, r2
 8006de2:	3304      	adds	r3, #4
 8006de4:	60fb      	str	r3, [r7, #12]
	int32_t* cycle_counter = &pAddrTable->value[pAddrTable->addr[p+2]];
 8006de6:	79fb      	ldrb	r3, [r7, #7]
 8006de8:	3302      	adds	r3, #2
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	3380      	adds	r3, #128	; 0x80
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4413      	add	r3, r2
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	60bb      	str	r3, [r7, #8]

	//get cycle_counter
	if(*cycle_counter == 0xFFFFFFFF) //initial value
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e06:	d104      	bne.n	8006e12 <fb_cycle+0x6a>
	{
		*cycle_counter = hal_get_tick();
 8006e08:	f7f9 fc06 	bl	8000618 <hal_get_tick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	601a      	str	r2, [r3, #0]
	}

	if(hal_get_tick() >= (*cycle_counter +  *dt)){
 8006e12:	f7f9 fc01 	bl	8000618 <hal_get_tick>
 8006e16:	4601      	mov	r1, r0
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4413      	add	r3, r2
 8006e22:	4299      	cmp	r1, r3
 8006e24:	db0e      	blt.n	8006e44 <fb_cycle+0x9c>
		*output = ! *output ;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	bf0c      	ite	eq
 8006e2e:	2301      	moveq	r3, #1
 8006e30:	2300      	movne	r3, #0
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	461a      	mov	r2, r3
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	601a      	str	r2, [r3, #0]
		*cycle_counter = hal_get_tick();
 8006e3a:	f7f9 fbed 	bl	8000618 <hal_get_tick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	601a      	str	r2, [r3, #0]
	}
}
 8006e44:	bf00      	nop
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <create_fb_cycle>:

type_fb_cycle create_fb_cycle(uint32_t period){
 8006e4c:	b590      	push	{r4, r7, lr}
 8006e4e:	b089      	sub	sp, #36	; 0x24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
	type_fb_cycle fb;

	s_Param* pAddrTable = get_paramAddrTable();
 8006e56:	f7ff fa65 	bl	8006324 <get_paramAddrTable>
 8006e5a:	61f8      	str	r0, [r7, #28]

	fb.startParamIndex = pAddrTable->currentIndex;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	737b      	strb	r3, [r7, #13]

	fb.fp.output = createParameter(0); //output
 8006e62:	2000      	movs	r0, #0
 8006e64:	f7ff fa8c 	bl	8006380 <createParameter>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	613b      	str	r3, [r7, #16]
	fb.fp.dt = createParameter(period); //dt
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff fa86 	bl	8006380 <createParameter>
 8006e74:	4603      	mov	r3, r0
 8006e76:	61bb      	str	r3, [r7, #24]
	fb.fp.cycle_counter = createParameter(0xFFFFFFFF); //cycle_counter
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	f7ff fa80 	bl	8006380 <createParameter>
 8006e80:	4603      	mov	r3, r0
 8006e82:	617b      	str	r3, [r7, #20]

	fb.fb_index = writeToFBTable(fb_cycle, fb.startParamIndex);
 8006e84:	7b7b      	ldrb	r3, [r7, #13]
 8006e86:	4619      	mov	r1, r3
 8006e88:	4807      	ldr	r0, [pc, #28]	; (8006ea8 <create_fb_cycle+0x5c>)
 8006e8a:	f7ff fa55 	bl	8006338 <writeToFBTable>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	733b      	strb	r3, [r7, #12]

	return fb;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	461c      	mov	r4, r3
 8006e96:	f107 030c 	add.w	r3, r7, #12
 8006e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	3724      	adds	r7, #36	; 0x24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd90      	pop	{r4, r7, pc}
 8006ea8:	08006da9 	.word	0x08006da9

08006eac <fb_output_pin_parser>:
#include "fb_outputpin.h"
#include "adaptor.h"


//output fb
uint8_t fb_output_pin_parser(uint8_t* p){
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6178      	str	r0, [r7, #20]
	uint8_t pinNum = p[0];
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	77fb      	strb	r3, [r7, #31]
	create_fb_outputpin(pinNum);
 8006eba:	463b      	mov	r3, r7
 8006ebc:	7ffa      	ldrb	r2, [r7, #31]
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 f851 	bl	8006f68 <create_fb_outputpin>
	return 1;
 8006ec6:	2301      	movs	r3, #1
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3720      	adds	r7, #32
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <fb_outputpin>:

void fb_outputpin(uint8_t p){
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8006eda:	f7ff fa23 	bl	8006324 <get_paramAddrTable>
 8006ede:	6178      	str	r0, [r7, #20]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p]];
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	3380      	adds	r3, #128	; 0x80
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	613b      	str	r3, [r7, #16]
	int32_t* pin = &pAddrTable->value[pAddrTable->addr[p+1]];
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	3380      	adds	r3, #128	; 0x80
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4413      	add	r3, r2
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	60fb      	str	r3, [r7, #12]
	int32_t* lastVal = &pAddrTable->value[pAddrTable->addr[p+2]];
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	3302      	adds	r3, #2
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	3380      	adds	r3, #128	; 0x80
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	4413      	add	r3, r2
 8006f22:	3304      	adds	r3, #4
 8006f24:	60bb      	str	r3, [r7, #8]

	//uint16_t pin_val = (uint16_t) (1<<*pin);

	if ( *output != *lastVal){
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d015      	beq.n	8006f5e <fb_outputpin+0x8e>
		*lastVal = *output;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	601a      	str	r2, [r3, #0]
		if(*output >1) *output = 1;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	dd02      	ble.n	8006f48 <fb_outputpin+0x78>
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2201      	movs	r2, #1
 8006f46:	601a      	str	r2, [r3, #0]

		hal_gpio_write_pin((uint16_t)*pin, (uint8_t)*output);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	4619      	mov	r1, r3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	f7f9 fb25 	bl	80005a8 <hal_gpio_write_pin>
	}
}
 8006f5e:	bf00      	nop
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <create_fb_outputpin>:

type_fb_outputpin create_fb_outputpin(uint8_t pinNum){
 8006f68:	b590      	push	{r4, r7, lr}
 8006f6a:	b089      	sub	sp, #36	; 0x24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
	type_fb_outputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 8006f74:	f7ff f9d6 	bl	8006324 <get_paramAddrTable>
 8006f78:	61f8      	str	r0, [r7, #28]

	fb.startParamIndex = pAddrTable->currentIndex;
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	737b      	strb	r3, [r7, #13]

	fb.fp.output = createParameter(0); //output
 8006f80:	2000      	movs	r0, #0
 8006f82:	f7ff f9fd 	bl	8006380 <createParameter>
 8006f86:	4603      	mov	r3, r0
 8006f88:	613b      	str	r3, [r7, #16]
	fb.fp.pinNum = createParameter(pinNum); //pin
 8006f8a:	78fb      	ldrb	r3, [r7, #3]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff f9f7 	bl	8006380 <createParameter>
 8006f92:	4603      	mov	r3, r0
 8006f94:	617b      	str	r3, [r7, #20]
	fb.fp.lastVal = createParameter(0); //pin
 8006f96:	2000      	movs	r0, #0
 8006f98:	f7ff f9f2 	bl	8006380 <createParameter>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	61bb      	str	r3, [r7, #24]


	fb.fb_index = writeToFBTable(fb_outputpin, fb.startParamIndex);
 8006fa0:	7b7b      	ldrb	r3, [r7, #13]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4807      	ldr	r0, [pc, #28]	; (8006fc4 <create_fb_outputpin+0x5c>)
 8006fa6:	f7ff f9c7 	bl	8006338 <writeToFBTable>
 8006faa:	4603      	mov	r3, r0
 8006fac:	733b      	strb	r3, [r7, #12]
	return fb;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	461c      	mov	r4, r3
 8006fb2:	f107 030c 	add.w	r3, r7, #12
 8006fb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006fb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	3724      	adds	r7, #36	; 0x24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd90      	pop	{r4, r7, pc}
 8006fc4:	08006ed1 	.word	0x08006ed1

08006fc8 <parser_create_connection>:
		0,
		0,
		0
};

uint8_t parser_create_connection(uint8_t* p){
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
	make_connection(p[0], p[1]); //dest,src
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4610      	mov	r0, r2
 8006fe0:	f7ff f9f4 	bl	80063cc <make_connection>
	return 1;
 8006fe4:	2301      	movs	r3, #1
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <parser_addwatch>:

uint8_t parser_addwatch(uint8_t* p){
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
	addWatch(p[0]);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 f998 	bl	8007330 <addWatch>
	return 0;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <parser_removewatch>:

uint8_t parser_removewatch(uint8_t* p){
 800700a:	b580      	push	{r7, lr}
 800700c:	b082      	sub	sp, #8
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
	removeWatch(p[0]);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	4618      	mov	r0, r3
 8007018:	f000 f9a8 	bl	800736c <removeWatch>
	return 0;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <parser_monitor>:

uint8_t parser_monitor(uint8_t* p){
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
	monitor();
 800702e:	f000 f9db 	bl	80073e8 <monitor>
	return 0;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <Parser>:

uint8_t Parser(Communication_Ch* dep_ch){
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0, addr = 0;
 8007044:	2300      	movs	r3, #0
 8007046:	73fb      	strb	r3, [r7, #15]
 8007048:	2300      	movs	r3, #0
 800704a:	73bb      	strb	r3, [r7, #14]
	uint8_t modbus_slave_addr = *get_MODBUS_SLAVE_ADDR();
 800704c:	f7ff fbbc 	bl	80067c8 <get_MODBUS_SLAVE_ADDR>
 8007050:	4603      	mov	r3, r0
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	737b      	strb	r3, [r7, #13]
	if(dep_ch->fdata_ready){
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800705c:	2b00      	cmp	r3, #0
 800705e:	d05a      	beq.n	8007116 <Parser+0xda>
		addr = dep_ch->rx_data_buf[0];
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	799b      	ldrb	r3, [r3, #6]
 8007064:	73bb      	strb	r3, [r7, #14]
		if (addr != modbus_slave_addr) return 0;
 8007066:	7bba      	ldrb	r2, [r7, #14]
 8007068:	7b7b      	ldrb	r3, [r7, #13]
 800706a:	429a      	cmp	r2, r3
 800706c:	d001      	beq.n	8007072 <Parser+0x36>
 800706e:	2300      	movs	r3, #0
 8007070:	e052      	b.n	8007118 <Parser+0xdc>
		cmd = dep_ch->rx_data_buf[1]; //function
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	79db      	ldrb	r3, [r3, #7]
 8007076:	73fb      	strb	r3, [r7, #15]
		switch (cmd)
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	3b65      	subs	r3, #101	; 0x65
 800707c:	2b06      	cmp	r3, #6
 800707e:	d838      	bhi.n	80070f2 <Parser+0xb6>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <Parser+0x4c>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070a5 	.word	0x080070a5
 800708c:	080070c3 	.word	0x080070c3
 8007090:	08007105 	.word	0x08007105
 8007094:	08007105 	.word	0x08007105
 8007098:	080070cf 	.word	0x080070cf
 800709c:	080070e7 	.word	0x080070e7
 80070a0:	080070db 	.word	0x080070db
		{
		case CMD_CREATE_FB: //FBTYPE-PARAMS
			if(dep_ch->rx_data_buf[2]<FB_PARSERS_SIZE){
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	7a1b      	ldrb	r3, [r3, #8]
 80070a8:	2b0f      	cmp	r3, #15
 80070aa:	d82d      	bhi.n	8007108 <Parser+0xcc>
				fb_parsers[dep_ch->rx_data_buf[2]](&(dep_ch->rx_data_buf[3]));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7a1b      	ldrb	r3, [r3, #8]
 80070b0:	461a      	mov	r2, r3
 80070b2:	4b1b      	ldr	r3, [pc, #108]	; (8007120 <Parser+0xe4>)
 80070b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	3209      	adds	r2, #9
 80070bc:	4610      	mov	r0, r2
 80070be:	4798      	blx	r3
			}
			break;
 80070c0:	e022      	b.n	8007108 <Parser+0xcc>
		case CMD_CREATE_CONN: //DEST-SRC
			parser_create_connection(&(dep_ch->rx_data_buf[2]));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	3308      	adds	r3, #8
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7ff ff7e 	bl	8006fc8 <parser_create_connection>
			break;
 80070cc:	e01d      	b.n	800710a <Parser+0xce>
			break;
		case CMD_KILL:
			break;

		case CMD_ADDWATCH:
			parser_addwatch(&(dep_ch->rx_data_buf[2]));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3308      	adds	r3, #8
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff ff8b 	bl	8006fee <parser_addwatch>
			break;
 80070d8:	e017      	b.n	800710a <Parser+0xce>

		case CMD_REMOVEWATCH:
			parser_removewatch(&(dep_ch->rx_data_buf[2]));
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3308      	adds	r3, #8
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff ff93 	bl	800700a <parser_removewatch>
			break;
 80070e4:	e011      	b.n	800710a <Parser+0xce>

		case CMD_MONITOR:
			parser_monitor(&(dep_ch->rx_data_buf[2]));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3308      	adds	r3, #8
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff ff9b 	bl	8007026 <parser_monitor>
			break;
 80070f0:	e00b      	b.n	800710a <Parser+0xce>

		default:
			dep_ch->data_error_counter++;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80070f8:	3301      	adds	r3, #1
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8007102:	e002      	b.n	800710a <Parser+0xce>
			break;
 8007104:	bf00      	nop
 8007106:	e000      	b.n	800710a <Parser+0xce>
			break;
 8007108:	bf00      	nop
		}

		dep_ch->fdata_ready = 0; //data process finished and ready for new data.
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		return cmd;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	e000      	b.n	8007118 <Parser+0xdc>
	}

	else{
		return 0; //no new deployment data
 8007116:	2300      	movs	r3, #0
	}
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20000014 	.word	0x20000014

08007124 <get_deployment_ch>:
#include "modbus_slave.h"
#include "deployment.h"

Communication_Ch deployment_ch = {.fdata_ready=0,.rx_data_cntr=0};

Communication_Ch* get_deployment_ch(){
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
	return &deployment_ch;
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <get_deployment_ch+0x10>)
}
 800712a:	4618      	mov	r0, r3
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	200000a8 	.word	0x200000a8

08007138 <deployment_data_validity_check>:

uint8_t deployment_data_validity_check()
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
	if(deployment_ch.rx_data_cntr <2) {
 800713c:	4b09      	ldr	r3, [pc, #36]	; (8007164 <deployment_data_validity_check+0x2c>)
 800713e:	795b      	ldrb	r3, [r3, #5]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d809      	bhi.n	8007158 <deployment_data_validity_check+0x20>
		deployment_ch.data_error_counter = deployment_ch.data_error_counter + 1;
 8007144:	4b07      	ldr	r3, [pc, #28]	; (8007164 <deployment_data_validity_check+0x2c>)
 8007146:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800714a:	3301      	adds	r3, #1
 800714c:	b2da      	uxtb	r2, r3
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <deployment_data_validity_check+0x2c>)
 8007150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		return 1;
 8007154:	2301      	movs	r3, #1
 8007156:	e000      	b.n	800715a <deployment_data_validity_check+0x22>
	}
	else{
		return 0;
 8007158:	2300      	movs	r3, #0
	}
}
 800715a:	4618      	mov	r0, r3
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	200000a8 	.word	0x200000a8

08007168 <init_deployment_ch>:

void init_deployment_ch(){
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
	deployment_ch.process_callback = modbus_slave_rx;
 800716c:	4b05      	ldr	r3, [pc, #20]	; (8007184 <init_deployment_ch+0x1c>)
 800716e:	4a06      	ldr	r2, [pc, #24]	; (8007188 <init_deployment_ch+0x20>)
 8007170:	649a      	str	r2, [r3, #72]	; 0x48
	deployment_ch.data_validity_check_callback = deployment_data_validity_check;
 8007172:	4b04      	ldr	r3, [pc, #16]	; (8007184 <init_deployment_ch+0x1c>)
 8007174:	4a05      	ldr	r2, [pc, #20]	; (800718c <init_deployment_ch+0x24>)
 8007176:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007178:	bf00      	nop
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	200000a8 	.word	0x200000a8
 8007188:	08006b99 	.word	0x08006b99
 800718c:	08007139 	.word	0x08007139

08007190 <check_for_available_memory>:

#include "stdint.h"
#include "fcb.h"


static uint8_t check_for_available_memory(uint32_t start_addr, uint32_t datalen){
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
	uint32_t mem_start, mem_end, mem_size;
	get_flash_memory_info(&mem_start, &mem_size);
 800719a:	f107 020c 	add.w	r2, r7, #12
 800719e:	f107 0310 	add.w	r3, r7, #16
 80071a2:	4611      	mov	r1, r2
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7f9 fb0d 	bl	80007c4 <get_flash_memory_info>
	mem_end = mem_start+ mem_size;
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]

	if(mem_end < start_addr+FLASHBLOCK_HEADER_SIZE+datalen){
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	4413      	add	r3, r2
 80071b8:	3308      	adds	r3, #8
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d201      	bcs.n	80071c4 <check_for_available_memory+0x34>
		return 0; //no available memory
 80071c0:	2300      	movs	r3, #0
 80071c2:	e000      	b.n	80071c6 <check_for_available_memory+0x36>
	}

	return 1;
 80071c4:	2301      	movs	r3, #1
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <write_flash_block>:

static uint32_t write_flash_block(uint32_t start_addr, uint8_t* data, uint32_t datalen)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
	//first control for the available space if there is no space then return error
	if(check_for_available_memory(start_addr, datalen) == 1){
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f7ff ffd6 	bl	8007190 <check_for_available_memory>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d116      	bne.n	8007218 <write_flash_block+0x48>
		Flash_Block fb = {.block_start_marker1= BLOCK_START_MAGIC1, .length = datalen};
 80071ea:	4b0e      	ldr	r3, [pc, #56]	; (8007224 <write_flash_block+0x54>)
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	617b      	str	r3, [r7, #20]

		//write header
		write_to_flash((uint8_t*) (&fb), start_addr, FLASHBLOCK_HEADER_SIZE);
 80071f2:	f107 0310 	add.w	r3, r7, #16
 80071f6:	2208      	movs	r2, #8
 80071f8:	68f9      	ldr	r1, [r7, #12]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7f9 faf6 	bl	80007ec <write_to_flash>

		//write data
		write_to_flash(data, start_addr+FLASHBLOCK_HEADER_SIZE, datalen);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3308      	adds	r3, #8
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	4619      	mov	r1, r3
 8007208:	68b8      	ldr	r0, [r7, #8]
 800720a:	f7f9 faef 	bl	80007ec <write_to_flash>

		return start_addr+FLASHBLOCK_HEADER_SIZE+datalen; //return the finish address of the block
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4413      	add	r3, r2
 8007214:	3308      	adds	r3, #8
 8007216:	e000      	b.n	800721a <write_flash_block+0x4a>
	}

	return 0; //no available memory
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	01234567 	.word	0x01234567

08007228 <get_current_address>:

//search all flash to find the end of record
//last record: when doing search if you need the address of the last record function returns this value from the last_record
static Get_Current_Addr_Data get_current_address(uint32_t start_address, uint32_t memory_size){
 8007228:	b480      	push	{r7}
 800722a:	b08b      	sub	sp, #44	; 0x2c
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
	uint32_t* pflash_data;
	uint32_t flashptr, inc = 1;
 8007234:	2301      	movs	r3, #1
 8007236:	623b      	str	r3, [r7, #32]
	Flash_Block* temp_fb = (Flash_Block*) start_address;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	61fb      	str	r3, [r7, #28]
	Get_Current_Addr_Data ret;

	ret.last_record_fb = temp_fb; //If there is no record at flash to initiate last record
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	617b      	str	r3, [r7, #20]

	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
 8007244:	e010      	b.n	8007268 <get_current_address+0x40>
	{
		temp_fb = (Flash_Block*) flashptr;
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	61fb      	str	r3, [r7, #28]

		if(temp_fb->block_start_marker1 ==BLOCK_START_MAGIC1){
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a12      	ldr	r2, [pc, #72]	; (8007298 <get_current_address+0x70>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d110      	bne.n	8007276 <get_current_address+0x4e>
			inc = temp_fb->length + FLASHBLOCK_HEADER_SIZE;
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	3308      	adds	r3, #8
 800725a:	623b      	str	r3, [r7, #32]
			ret.last_record_fb = temp_fb;
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	617b      	str	r3, [r7, #20]
	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 8007260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	4413      	add	r3, r2
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4413      	add	r3, r2
 800726e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007270:	429a      	cmp	r2, r3
 8007272:	d3e8      	bcc.n	8007246 <get_current_address+0x1e>
 8007274:	e000      	b.n	8007278 <get_current_address+0x50>
		}
		else{
			break;
 8007276:	bf00      	nop
		}
	}
	ret.flash_pointer = flashptr;
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	61bb      	str	r3, [r7, #24]

	return ret;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	461a      	mov	r2, r3
 8007280:	f107 0314 	add.w	r3, r7, #20
 8007284:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007288:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	372c      	adds	r7, #44	; 0x2c
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	01234567 	.word	0x01234567

0800729c <write_flash_data>:

uint32_t write_flash_data(uint8_t* data, uint32_t length){
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
	uint32_t mem_start_address, mem_size;

	//Its very important length to be multiply of 4
	if(length%4 != 0) return 0;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <write_flash_data+0x18>
 80072b0:	2300      	movs	r3, #0
 80072b2:	e023      	b.n	80072fc <write_flash_data+0x60>

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size);
 80072b4:	f107 0210 	add.w	r2, r7, #16
 80072b8:	f107 0314 	add.w	r3, r7, #20
 80072bc:	4611      	mov	r1, r2
 80072be:	4618      	mov	r0, r3
 80072c0:	f7f9 fa80 	bl	80007c4 <get_flash_memory_info>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);
 80072c4:	6979      	ldr	r1, [r7, #20]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	f107 0308 	add.w	r3, r7, #8
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff ffab 	bl	8007228 <get_current_address>

	if(check_for_available_memory(lastrecord_info.flash_pointer, length) == 0){
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff ff5a 	bl	8007190 <check_for_available_memory>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d105      	bne.n	80072ee <write_flash_data+0x52>
		erase_flash(mem_start_address);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7f9 fab5 	bl	8000854 <erase_flash>
		lastrecord_info.flash_pointer = mem_start_address;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	60fb      	str	r3, [r7, #12]
	}

	//write data to flash and return current flash pointer address
	return write_flash_block(lastrecord_info.flash_pointer, data, length);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff ff6b 	bl	80071d0 <write_flash_block>
 80072fa:	4603      	mov	r3, r0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <get_flash_data>:

Flash_Block* get_flash_data(){
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
	uint32_t mem_start_address, mem_size;

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size);
 800730a:	f107 0208 	add.w	r2, r7, #8
 800730e:	f107 030c 	add.w	r3, r7, #12
 8007312:	4611      	mov	r1, r2
 8007314:	4618      	mov	r0, r3
 8007316:	f7f9 fa55 	bl	80007c4 <get_flash_memory_info>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);
 800731a:	68f9      	ldr	r1, [r7, #12]
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	463b      	mov	r3, r7
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff ff81 	bl	8007228 <get_current_address>

	return lastrecord_info.last_record_fb;
 8007326:	683b      	ldr	r3, [r7, #0]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <addWatch>:
		watchList.data[i] = 0;
	}
}

void addWatch(uint8_t index)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	71fb      	strb	r3, [r7, #7]
	if(watchList.index < MAX_WATCH_COUNT){
 800733a:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <addWatch+0x38>)
 800733c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007340:	2b09      	cmp	r3, #9
 8007342:	d80b      	bhi.n	800735c <addWatch+0x2c>
		watchList.data[watchList.index++] = index;
 8007344:	4b08      	ldr	r3, [pc, #32]	; (8007368 <addWatch+0x38>)
 8007346:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	b2d1      	uxtb	r1, r2
 800734e:	4a06      	ldr	r2, [pc, #24]	; (8007368 <addWatch+0x38>)
 8007350:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 8007354:	4619      	mov	r1, r3
 8007356:	4a04      	ldr	r2, [pc, #16]	; (8007368 <addWatch+0x38>)
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	5453      	strb	r3, [r2, r1]
	}
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	20000930 	.word	0x20000930

0800736c <removeWatch>:

void removeWatch(uint8_t index)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	71fb      	strb	r3, [r7, #7]
	uint8_t tempWatchList[MAX_WATCH_COUNT] = {0};
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	f107 0310 	add.w	r3, r7, #16
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 0;i<MAX_WATCH_COUNT;i++) tempWatchList[i] = watchList.data[i];
 8007384:	2300      	movs	r3, #0
 8007386:	75fb      	strb	r3, [r7, #23]
 8007388:	e00b      	b.n	80073a2 <removeWatch+0x36>
 800738a:	7dfa      	ldrb	r2, [r7, #23]
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	4915      	ldr	r1, [pc, #84]	; (80073e4 <removeWatch+0x78>)
 8007390:	5c8a      	ldrb	r2, [r1, r2]
 8007392:	f107 0118 	add.w	r1, r7, #24
 8007396:	440b      	add	r3, r1
 8007398:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	3301      	adds	r3, #1
 80073a0:	75fb      	strb	r3, [r7, #23]
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	d9f0      	bls.n	800738a <removeWatch+0x1e>

	for(uint8_t i = index;i<watchList.index;i++){
 80073a8:	79fb      	ldrb	r3, [r7, #7]
 80073aa:	75bb      	strb	r3, [r7, #22]
 80073ac:	e00c      	b.n	80073c8 <removeWatch+0x5c>
		watchList.data[i] = tempWatchList[i+1];
 80073ae:	7dbb      	ldrb	r3, [r7, #22]
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	7dbb      	ldrb	r3, [r7, #22]
 80073b4:	f107 0118 	add.w	r1, r7, #24
 80073b8:	440a      	add	r2, r1
 80073ba:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 80073be:	4a09      	ldr	r2, [pc, #36]	; (80073e4 <removeWatch+0x78>)
 80073c0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = index;i<watchList.index;i++){
 80073c2:	7dbb      	ldrb	r3, [r7, #22]
 80073c4:	3301      	adds	r3, #1
 80073c6:	75bb      	strb	r3, [r7, #22]
 80073c8:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <removeWatch+0x78>)
 80073ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073ce:	7dba      	ldrb	r2, [r7, #22]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d3ec      	bcc.n	80073ae <removeWatch+0x42>
	}
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	20000930 	.word	0x20000930

080073e8 <monitor>:

void monitor()
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
	uint8_t dma_i = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	73fb      	strb	r3, [r7, #15]
	s_Param* pAddrTable = get_paramAddrTable();
 80073f2:	f7fe ff97 	bl	8006324 <get_paramAddrTable>
 80073f6:	60b8      	str	r0, [r7, #8]

	if(watchList.index == 0) return; //no watches at the list
 80073f8:	4b19      	ldr	r3, [pc, #100]	; (8007460 <monitor+0x78>)
 80073fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d02a      	beq.n	8007458 <monitor+0x70>

		for(uint8_t i = 0;i<watchList.index;i++){
 8007402:	2300      	movs	r3, #0
 8007404:	73bb      	strb	r3, [r7, #14]
 8007406:	e01a      	b.n	800743e <monitor+0x56>
			watchList.dmaBuffer[dma_i++] = watchList.data[i]; //first put the index of data
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	4a15      	ldr	r2, [pc, #84]	; (8007460 <monitor+0x78>)
 800740c:	5cd2      	ldrb	r2, [r2, r3]
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	1c59      	adds	r1, r3, #1
 8007412:	73f9      	strb	r1, [r7, #15]
 8007414:	4611      	mov	r1, r2
 8007416:	4a12      	ldr	r2, [pc, #72]	; (8007460 <monitor+0x78>)
 8007418:	3302      	adds	r3, #2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	6059      	str	r1, [r3, #4]
			uint32_t value = pAddrTable->addr[0];
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	607b      	str	r3, [r7, #4]
			watchList.dmaBuffer[dma_i++] = value;
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	73fa      	strb	r2, [r7, #15]
 800742c:	4a0c      	ldr	r2, [pc, #48]	; (8007460 <monitor+0x78>)
 800742e:	3302      	adds	r3, #2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	605a      	str	r2, [r3, #4]
		for(uint8_t i = 0;i<watchList.index;i++){
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	3301      	adds	r3, #1
 800743c:	73bb      	strb	r3, [r7, #14]
 800743e:	4b08      	ldr	r3, [pc, #32]	; (8007460 <monitor+0x78>)
 8007440:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007444:	7bba      	ldrb	r2, [r7, #14]
 8007446:	429a      	cmp	r2, r3
 8007448:	d3de      	bcc.n	8007408 <monitor+0x20>
		}
		//HAL_UART_Transmit_IT(&huart1, (uint8_t*)(watchList.dmaBuffer), dma_i*4);
		hal_modbus_uart_tx((uint8_t*)(watchList.dmaBuffer), dma_i*4);
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4619      	mov	r1, r3
 8007450:	4804      	ldr	r0, [pc, #16]	; (8007464 <monitor+0x7c>)
 8007452:	f7f9 f977 	bl	8000744 <hal_modbus_uart_tx>
 8007456:	e000      	b.n	800745a <monitor+0x72>
	if(watchList.index == 0) return; //no watches at the list
 8007458:	bf00      	nop
}
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20000930 	.word	0x20000930
 8007464:	2000093c 	.word	0x2000093c

08007468 <fb_inputpin_parser>:

/*--------------------------------------------------------------------------------------
						Function Block Functions
----------------------------------------------------------------------------------------*/

uint8_t fb_inputpin_parser(uint8_t* p){
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	6178      	str	r0, [r7, #20]
	uint8_t chNum = p[0];
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	77fb      	strb	r3, [r7, #31]
	uint8_t mode = p[1];
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	785b      	ldrb	r3, [r3, #1]
 800747a:	77bb      	strb	r3, [r7, #30]
	create_fb_inputpin(chNum, mode);
 800747c:	463b      	mov	r3, r7
 800747e:	7fba      	ldrb	r2, [r7, #30]
 8007480:	7ff9      	ldrb	r1, [r7, #31]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f830 	bl	80074e8 <create_fb_inputpin>
	return 1;
 8007488:	2301      	movs	r3, #1
}
 800748a:	4618      	mov	r0, r3
 800748c:	3720      	adds	r7, #32
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <fb_inputpin>:

void fb_inputpin(uint8_t p){
 8007492:	b580      	push	{r7, lr}
 8007494:	b086      	sub	sp, #24
 8007496:	af00      	add	r7, sp, #0
 8007498:	4603      	mov	r3, r0
 800749a:	71fb      	strb	r3, [r7, #7]

	s_Param* pAddrTable = get_paramAddrTable();
 800749c:	f7fe ff42 	bl	8006324 <get_paramAddrTable>
 80074a0:	6178      	str	r0, [r7, #20]
	int32_t* input = &pAddrTable->value[pAddrTable->addr[p]];
 80074a2:	79fb      	ldrb	r3, [r7, #7]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	3380      	adds	r3, #128	; 0x80
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	4413      	add	r3, r2
 80074b4:	3304      	adds	r3, #4
 80074b6:	613b      	str	r3, [r7, #16]
	int32_t* chNum = &pAddrTable->value[pAddrTable->addr[p+1]];
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	3301      	adds	r3, #1
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	3380      	adds	r3, #128	; 0x80
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	4413      	add	r3, r2
 80074cc:	3304      	adds	r3, #4
 80074ce:	60fb      	str	r3, [r7, #12]

	*input =  hal_gpio_read_pin((uint32_t)*chNum);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7f9 f885 	bl	80005e4 <hal_gpio_read_pin>
 80074da:	4602      	mov	r2, r0
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	601a      	str	r2, [r3, #0]
}
 80074e0:	bf00      	nop
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <create_fb_inputpin>:


type_fb_inputpin create_fb_inputpin(uint8_t chNum, uint8_t mode){
 80074e8:	b590      	push	{r4, r7, lr}
 80074ea:	b089      	sub	sp, #36	; 0x24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
 80074f4:	4613      	mov	r3, r2
 80074f6:	70bb      	strb	r3, [r7, #2]
	type_fb_inputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 80074f8:	f7fe ff14 	bl	8006324 <get_paramAddrTable>
 80074fc:	61f8      	str	r0, [r7, #28]

	fb.startParamIndex = pAddrTable->currentIndex;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	737b      	strb	r3, [r7, #13]

	fb.fp.input = createParameter(0); //input
 8007504:	2000      	movs	r0, #0
 8007506:	f7fe ff3b 	bl	8006380 <createParameter>
 800750a:	4603      	mov	r3, r0
 800750c:	613b      	str	r3, [r7, #16]
	fb.fp.chNum = createParameter(chNum); //pin
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	4618      	mov	r0, r3
 8007512:	f7fe ff35 	bl	8006380 <createParameter>
 8007516:	4603      	mov	r3, r0
 8007518:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(0);
 800751a:	2000      	movs	r0, #0
 800751c:	f7fe ff30 	bl	8006380 <createParameter>
 8007520:	4603      	mov	r3, r0
 8007522:	61bb      	str	r3, [r7, #24]


	fb.fb_index = writeToFBTable(fb_inputpin, fb.startParamIndex);
 8007524:	7b7b      	ldrb	r3, [r7, #13]
 8007526:	4619      	mov	r1, r3
 8007528:	4807      	ldr	r0, [pc, #28]	; (8007548 <create_fb_inputpin+0x60>)
 800752a:	f7fe ff05 	bl	8006338 <writeToFBTable>
 800752e:	4603      	mov	r3, r0
 8007530:	733b      	strb	r3, [r7, #12]

	return fb;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	461c      	mov	r4, r3
 8007536:	f107 030c 	add.w	r3, r7, #12
 800753a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800753c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	3724      	adds	r7, #36	; 0x24
 8007544:	46bd      	mov	sp, r7
 8007546:	bd90      	pop	{r4, r7, pc}
 8007548:	08007493 	.word	0x08007493

0800754c <fb_modbus_slave_parser>:
#include "mcCore.h"
#include "modbus_slave.h"
#include "fb_modbus_slave.h"

//cyclic event fb
uint8_t fb_modbus_slave_parser(uint8_t* p){
 800754c:	b580      	push	{r7, lr}
 800754e:	b08e      	sub	sp, #56	; 0x38
 8007550:	af00      	add	r7, sp, #0
 8007552:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t addr = p[0];
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	637b      	str	r3, [r7, #52]	; 0x34
	create_fb_modbus_slave(addr);
 800755a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755c:	b2da      	uxtb	r2, r3
 800755e:	463b      	mov	r3, r7
 8007560:	4611      	mov	r1, r2
 8007562:	4618      	mov	r0, r3
 8007564:	f000 f8b6 	bl	80076d4 <create_fb_modbus_slave>
	return 1;
 8007568:	2301      	movs	r3, #1
}
 800756a:	4618      	mov	r0, r3
 800756c:	3738      	adds	r7, #56	; 0x38
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <fb_modbus_slave>:

void fb_modbus_slave(uint8_t p){
 8007572:	b580      	push	{r7, lr}
 8007574:	b08c      	sub	sp, #48	; 0x30
 8007576:	af00      	add	r7, sp, #0
 8007578:	4603      	mov	r3, r0
 800757a:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800757c:	f7fe fed2 	bl	8006324 <get_paramAddrTable>
 8007580:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t* rd0 = &pAddrTable->value[pAddrTable->addr[p]];
 8007582:	79fb      	ldrb	r3, [r7, #7]
 8007584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	3380      	adds	r3, #128	; 0x80
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007592:	4413      	add	r3, r2
 8007594:	3304      	adds	r3, #4
 8007596:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t* rd1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	3301      	adds	r3, #1
 800759c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	3380      	adds	r3, #128	; 0x80
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075aa:	4413      	add	r3, r2
 80075ac:	3304      	adds	r3, #4
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t* rd2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 80075b0:	79fb      	ldrb	r3, [r7, #7]
 80075b2:	3302      	adds	r3, #2
 80075b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	3380      	adds	r3, #128	; 0x80
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075c2:	4413      	add	r3, r2
 80075c4:	3304      	adds	r3, #4
 80075c6:	623b      	str	r3, [r7, #32]
	uint32_t* rd3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 80075c8:	79fb      	ldrb	r3, [r7, #7]
 80075ca:	3303      	adds	r3, #3
 80075cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	3380      	adds	r3, #128	; 0x80
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075da:	4413      	add	r3, r2
 80075dc:	3304      	adds	r3, #4
 80075de:	61fb      	str	r3, [r7, #28]

	int32_t* wr0 = &pAddrTable->value[pAddrTable->addr[p+4]];
 80075e0:	79fb      	ldrb	r3, [r7, #7]
 80075e2:	3304      	adds	r3, #4
 80075e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	3380      	adds	r3, #128	; 0x80
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075f2:	4413      	add	r3, r2
 80075f4:	3304      	adds	r3, #4
 80075f6:	61bb      	str	r3, [r7, #24]
	int32_t* wr1 = &pAddrTable->value[pAddrTable->addr[p+5]];
 80075f8:	79fb      	ldrb	r3, [r7, #7]
 80075fa:	3305      	adds	r3, #5
 80075fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	3380      	adds	r3, #128	; 0x80
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800760a:	4413      	add	r3, r2
 800760c:	3304      	adds	r3, #4
 800760e:	617b      	str	r3, [r7, #20]
	int32_t* wr2 = &pAddrTable->value[pAddrTable->addr[p+6]];
 8007610:	79fb      	ldrb	r3, [r7, #7]
 8007612:	3306      	adds	r3, #6
 8007614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	3380      	adds	r3, #128	; 0x80
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007622:	4413      	add	r3, r2
 8007624:	3304      	adds	r3, #4
 8007626:	613b      	str	r3, [r7, #16]
	int32_t* wr3 = &pAddrTable->value[pAddrTable->addr[p+7]];
 8007628:	79fb      	ldrb	r3, [r7, #7]
 800762a:	3307      	adds	r3, #7
 800762c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	3380      	adds	r3, #128	; 0x80
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800763a:	4413      	add	r3, r2
 800763c:	3304      	adds	r3, #4
 800763e:	60fb      	str	r3, [r7, #12]


	uint16_t* modbus_holding_reg = get_Modbus_Buf_Holding_Registers_40001();
 8007640:	f7ff f8ae 	bl	80067a0 <get_Modbus_Buf_Holding_Registers_40001>
 8007644:	4603      	mov	r3, r0
 8007646:	60bb      	str	r3, [r7, #8]

	*rd0 = modbus_holding_reg[0];
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	601a      	str	r2, [r3, #0]
	*rd1 = modbus_holding_reg[1];
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	3302      	adds	r3, #2
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	601a      	str	r2, [r3, #0]
	*rd2 = modbus_holding_reg[2];
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	3304      	adds	r3, #4
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	601a      	str	r2, [r3, #0]
	*rd3 = modbus_holding_reg[3];
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	3306      	adds	r3, #6
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	601a      	str	r2, [r3, #0]

	if(*wr0 != -1){
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	d004      	beq.n	800768a <fb_modbus_slave+0x118>
		modbus_holding_reg[0] = *wr0;
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	b29a      	uxth	r2, r3
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	801a      	strh	r2, [r3, #0]
	}

	if(*wr1 != -1){
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007692:	d005      	beq.n	80076a0 <fb_modbus_slave+0x12e>
		modbus_holding_reg[1] = *wr1;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	3302      	adds	r3, #2
 800769c:	b292      	uxth	r2, r2
 800769e:	801a      	strh	r2, [r3, #0]
	}

	if(*wr2 != -1){
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a8:	d005      	beq.n	80076b6 <fb_modbus_slave+0x144>
		modbus_holding_reg[2] = *wr2;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	3304      	adds	r3, #4
 80076b2:	b292      	uxth	r2, r2
 80076b4:	801a      	strh	r2, [r3, #0]
	}

	if(*wr3 != -1){
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076be:	d005      	beq.n	80076cc <fb_modbus_slave+0x15a>
		modbus_holding_reg[3] = *wr3;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	3306      	adds	r3, #6
 80076c8:	b292      	uxth	r2, r2
 80076ca:	801a      	strh	r2, [r3, #0]
	}
}
 80076cc:	bf00      	nop
 80076ce:	3730      	adds	r7, #48	; 0x30
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <create_fb_modbus_slave>:

type_fb_modbus_slave create_fb_modbus_slave(uint8_t addr){
 80076d4:	b5b0      	push	{r4, r5, r7, lr}
 80076d6:	b08c      	sub	sp, #48	; 0x30
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	70fb      	strb	r3, [r7, #3]
	type_fb_modbus_slave fb;

	s_Param* pAddrTable = get_paramAddrTable();
 80076e0:	f7fe fe20 	bl	8006324 <get_paramAddrTable>
 80076e4:	62f8      	str	r0, [r7, #44]	; 0x2c
	//uint8_t* p_modbus_slave_addr = get_MODBUS_SLAVE_ADDR();
	//if(addr > 1) *p_modbus_slave_addr = addr; //addr is set to 1 default, if something comes greater than 1, than new addr set to this new value

	fb.startParamIndex = pAddrTable->currentIndex;
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	727b      	strb	r3, [r7, #9]

	fb.fp.rd0 = createParameter(0);
 80076ec:	2000      	movs	r0, #0
 80076ee:	f7fe fe47 	bl	8006380 <createParameter>
 80076f2:	4603      	mov	r3, r0
 80076f4:	60fb      	str	r3, [r7, #12]
	fb.fp.rd1 = createParameter(0);
 80076f6:	2000      	movs	r0, #0
 80076f8:	f7fe fe42 	bl	8006380 <createParameter>
 80076fc:	4603      	mov	r3, r0
 80076fe:	613b      	str	r3, [r7, #16]
	fb.fp.rd2 = createParameter(0);
 8007700:	2000      	movs	r0, #0
 8007702:	f7fe fe3d 	bl	8006380 <createParameter>
 8007706:	4603      	mov	r3, r0
 8007708:	617b      	str	r3, [r7, #20]
	fb.fp.rd3 = createParameter(0);
 800770a:	2000      	movs	r0, #0
 800770c:	f7fe fe38 	bl	8006380 <createParameter>
 8007710:	4603      	mov	r3, r0
 8007712:	61bb      	str	r3, [r7, #24]
	fb.fp.wr0 = createParameter(-1); //means no connection
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	f7fe fe32 	bl	8006380 <createParameter>
 800771c:	4603      	mov	r3, r0
 800771e:	61fb      	str	r3, [r7, #28]
	fb.fp.wr1 = createParameter(-1);
 8007720:	f04f 30ff 	mov.w	r0, #4294967295
 8007724:	f7fe fe2c 	bl	8006380 <createParameter>
 8007728:	4603      	mov	r3, r0
 800772a:	623b      	str	r3, [r7, #32]
	fb.fp.wr2 = createParameter(-1);
 800772c:	f04f 30ff 	mov.w	r0, #4294967295
 8007730:	f7fe fe26 	bl	8006380 <createParameter>
 8007734:	4603      	mov	r3, r0
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.wr3 = createParameter(-1);
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	f7fe fe20 	bl	8006380 <createParameter>
 8007740:	4603      	mov	r3, r0
 8007742:	62bb      	str	r3, [r7, #40]	; 0x28

	fb.fb_index = writeToFBTable(fb_modbus_slave, fb.startParamIndex);
 8007744:	7a7b      	ldrb	r3, [r7, #9]
 8007746:	4619      	mov	r1, r3
 8007748:	4809      	ldr	r0, [pc, #36]	; (8007770 <create_fb_modbus_slave+0x9c>)
 800774a:	f7fe fdf5 	bl	8006338 <writeToFBTable>
 800774e:	4603      	mov	r3, r0
 8007750:	723b      	strb	r3, [r7, #8]

	return fb;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	461d      	mov	r5, r3
 8007756:	f107 0408 	add.w	r4, r7, #8
 800775a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800775c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800775e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	602b      	str	r3, [r5, #0]
}
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	3730      	adds	r7, #48	; 0x30
 800776a:	46bd      	mov	sp, r7
 800776c:	bdb0      	pop	{r4, r5, r7, pc}
 800776e:	bf00      	nop
 8007770:	08007573 	.word	0x08007573

08007774 <__libc_init_array>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	4d0d      	ldr	r5, [pc, #52]	; (80077ac <__libc_init_array+0x38>)
 8007778:	4c0d      	ldr	r4, [pc, #52]	; (80077b0 <__libc_init_array+0x3c>)
 800777a:	1b64      	subs	r4, r4, r5
 800777c:	10a4      	asrs	r4, r4, #2
 800777e:	2600      	movs	r6, #0
 8007780:	42a6      	cmp	r6, r4
 8007782:	d109      	bne.n	8007798 <__libc_init_array+0x24>
 8007784:	4d0b      	ldr	r5, [pc, #44]	; (80077b4 <__libc_init_array+0x40>)
 8007786:	4c0c      	ldr	r4, [pc, #48]	; (80077b8 <__libc_init_array+0x44>)
 8007788:	f000 f82e 	bl	80077e8 <_init>
 800778c:	1b64      	subs	r4, r4, r5
 800778e:	10a4      	asrs	r4, r4, #2
 8007790:	2600      	movs	r6, #0
 8007792:	42a6      	cmp	r6, r4
 8007794:	d105      	bne.n	80077a2 <__libc_init_array+0x2e>
 8007796:	bd70      	pop	{r4, r5, r6, pc}
 8007798:	f855 3b04 	ldr.w	r3, [r5], #4
 800779c:	4798      	blx	r3
 800779e:	3601      	adds	r6, #1
 80077a0:	e7ee      	b.n	8007780 <__libc_init_array+0xc>
 80077a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a6:	4798      	blx	r3
 80077a8:	3601      	adds	r6, #1
 80077aa:	e7f2      	b.n	8007792 <__libc_init_array+0x1e>
 80077ac:	08007a28 	.word	0x08007a28
 80077b0:	08007a28 	.word	0x08007a28
 80077b4:	08007a28 	.word	0x08007a28
 80077b8:	08007a2c 	.word	0x08007a2c

080077bc <memcpy>:
 80077bc:	440a      	add	r2, r1
 80077be:	4291      	cmp	r1, r2
 80077c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80077c4:	d100      	bne.n	80077c8 <memcpy+0xc>
 80077c6:	4770      	bx	lr
 80077c8:	b510      	push	{r4, lr}
 80077ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077d2:	4291      	cmp	r1, r2
 80077d4:	d1f9      	bne.n	80077ca <memcpy+0xe>
 80077d6:	bd10      	pop	{r4, pc}

080077d8 <memset>:
 80077d8:	4402      	add	r2, r0
 80077da:	4603      	mov	r3, r0
 80077dc:	4293      	cmp	r3, r2
 80077de:	d100      	bne.n	80077e2 <memset+0xa>
 80077e0:	4770      	bx	lr
 80077e2:	f803 1b01 	strb.w	r1, [r3], #1
 80077e6:	e7f9      	b.n	80077dc <memset+0x4>

080077e8 <_init>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	bf00      	nop
 80077ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ee:	bc08      	pop	{r3}
 80077f0:	469e      	mov	lr, r3
 80077f2:	4770      	bx	lr

080077f4 <_fini>:
 80077f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f6:	bf00      	nop
 80077f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fa:	bc08      	pop	{r3}
 80077fc:	469e      	mov	lr, r3
 80077fe:	4770      	bx	lr
