
LCD_button_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006418  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006610  08006610  00016610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066a4  080066a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080066a4  080066a4  000166a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066ac  080066ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066ac  080066ac  000166ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080066b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000000c  080066c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080066c0  00020290  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001395b  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265b  00000000  00000000  00033995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00035ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00037168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bb8  00000000  00000000  000381f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013daf  00000000  00000000  00060db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102252  00000000  00000000  00074b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176db1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac8  00000000  00000000  00176e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080065f8 	.word	0x080065f8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080065f8 	.word	0x080065f8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <drawPixel>:
#include "stdlib.h"



void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]
 800053a:	460b      	mov	r3, r1
 800053c:	80bb      	strh	r3, [r7, #4]
 800053e:	4613      	mov	r3, r2
 8000540:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	88b9      	ldrh	r1, [r7, #4]
 8000546:	887a      	ldrh	r2, [r7, #2]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fb41 	bl	8000bd0 <ST7735_DrawPixel>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000556:	b590      	push	{r4, r7, lr}
 8000558:	b085      	sub	sp, #20
 800055a:	af02      	add	r7, sp, #8
 800055c:	4604      	mov	r4, r0
 800055e:	4608      	mov	r0, r1
 8000560:	4611      	mov	r1, r2
 8000562:	461a      	mov	r2, r3
 8000564:	4623      	mov	r3, r4
 8000566:	80fb      	strh	r3, [r7, #6]
 8000568:	4603      	mov	r3, r0
 800056a:	80bb      	strh	r3, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	807b      	strh	r3, [r7, #2]
 8000570:	4613      	mov	r3, r2
 8000572:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000574:	88f8      	ldrh	r0, [r7, #6]
 8000576:	88b9      	ldrh	r1, [r7, #4]
 8000578:	887a      	ldrh	r2, [r7, #2]
 800057a:	883c      	ldrh	r4, [r7, #0]
 800057c:	8b3b      	ldrh	r3, [r7, #24]
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	4623      	mov	r3, r4
 8000582:	f000 fb63 	bl	8000c4c <ST7735_FillRectangle>
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bd90      	pop	{r4, r7, pc}

0800058e <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	4603      	mov	r3, r0
 8000596:	80fb      	strh	r3, [r7, #6]
 8000598:	460b      	mov	r3, r1
 800059a:	80bb      	strh	r3, [r7, #4]
 800059c:	4613      	mov	r3, r2
 800059e:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 80005a0:	887a      	ldrh	r2, [r7, #2]
 80005a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80005a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ffc0 	bl	8000530 <drawPixel>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b089      	sub	sp, #36	; 0x24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4604      	mov	r4, r0
 80005c0:	4608      	mov	r0, r1
 80005c2:	4611      	mov	r1, r2
 80005c4:	461a      	mov	r2, r3
 80005c6:	4623      	mov	r3, r4
 80005c8:	80fb      	strh	r3, [r7, #6]
 80005ca:	4603      	mov	r3, r0
 80005cc:	80bb      	strh	r3, [r7, #4]
 80005ce:	460b      	mov	r3, r1
 80005d0:	807b      	strh	r3, [r7, #2]
 80005d2:	4613      	mov	r3, r2
 80005d4:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80005d6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80005da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005e4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005e8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80005ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005f0:	1acb      	subs	r3, r1, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	bfb8      	it	lt
 80005f6:	425b      	neglt	r3, r3
 80005f8:	429a      	cmp	r2, r3
 80005fa:	bfcc      	ite	gt
 80005fc:	2301      	movgt	r3, #1
 80005fe:	2300      	movle	r3, #0
 8000600:	b2db      	uxtb	r3, r3
 8000602:	837b      	strh	r3, [r7, #26]
    if (steep) {
 8000604:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00b      	beq.n	8000624 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 800060c:	88fb      	ldrh	r3, [r7, #6]
 800060e:	833b      	strh	r3, [r7, #24]
 8000610:	88bb      	ldrh	r3, [r7, #4]
 8000612:	80fb      	strh	r3, [r7, #6]
 8000614:	8b3b      	ldrh	r3, [r7, #24]
 8000616:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	82fb      	strh	r3, [r7, #22]
 800061c:	883b      	ldrh	r3, [r7, #0]
 800061e:	807b      	strh	r3, [r7, #2]
 8000620:	8afb      	ldrh	r3, [r7, #22]
 8000622:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8000624:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000628:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800062c:	429a      	cmp	r2, r3
 800062e:	dd0b      	ble.n	8000648 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8000630:	88fb      	ldrh	r3, [r7, #6]
 8000632:	82bb      	strh	r3, [r7, #20]
 8000634:	887b      	ldrh	r3, [r7, #2]
 8000636:	80fb      	strh	r3, [r7, #6]
 8000638:	8abb      	ldrh	r3, [r7, #20]
 800063a:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 800063c:	88bb      	ldrh	r3, [r7, #4]
 800063e:	827b      	strh	r3, [r7, #18]
 8000640:	883b      	ldrh	r3, [r7, #0]
 8000642:	80bb      	strh	r3, [r7, #4]
 8000644:	8a7b      	ldrh	r3, [r7, #18]
 8000646:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000648:	887a      	ldrh	r2, [r7, #2]
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	b29b      	uxth	r3, r3
 8000650:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8000652:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000656:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	bfb8      	it	lt
 8000660:	425b      	neglt	r3, r3
 8000662:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8000664:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000668:	2b00      	cmp	r3, #0
 800066a:	da00      	bge.n	800066e <writeLine+0xb6>
 800066c:	3301      	adds	r3, #1
 800066e:	105b      	asrs	r3, r3, #1
 8000670:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8000672:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000676:	f9b7 3000 	ldrsh.w	r3, [r7]
 800067a:	429a      	cmp	r2, r3
 800067c:	da02      	bge.n	8000684 <writeLine+0xcc>
        ystep = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	83bb      	strh	r3, [r7, #28]
 8000682:	e031      	b.n	80006e8 <writeLine+0x130>
    } else {
        ystep = -1;
 8000684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000688:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 800068a:	e02d      	b.n	80006e8 <writeLine+0x130>
        if (steep) {
 800068c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d008      	beq.n	80006a6 <writeLine+0xee>
            writePixel(y0, x0, color);
 8000694:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000696:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800069a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff75 	bl	800058e <writePixel>
 80006a4:	e007      	b.n	80006b6 <writeLine+0xfe>
        } else {
            writePixel(x0, y0, color);
 80006a6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80006a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80006ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff6c 	bl	800058e <writePixel>
        }
        err -= dy;
 80006b6:	8bfa      	ldrh	r2, [r7, #30]
 80006b8:	89fb      	ldrh	r3, [r7, #14]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	b29b      	uxth	r3, r3
 80006be:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 80006c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	da09      	bge.n	80006dc <writeLine+0x124>
            y0 += ystep;
 80006c8:	88ba      	ldrh	r2, [r7, #4]
 80006ca:	8bbb      	ldrh	r3, [r7, #28]
 80006cc:	4413      	add	r3, r2
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80006d2:	8bfa      	ldrh	r2, [r7, #30]
 80006d4:	8a3b      	ldrh	r3, [r7, #16]
 80006d6:	4413      	add	r3, r2
 80006d8:	b29b      	uxth	r3, r3
 80006da:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 80006dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	3301      	adds	r3, #1
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	80fb      	strh	r3, [r7, #6]
 80006e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	ddcb      	ble.n	800068c <writeLine+0xd4>
        }
    }
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3724      	adds	r7, #36	; 0x24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd90      	pop	{r4, r7, pc}

080006fe <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80006fe:	b590      	push	{r4, r7, lr}
 8000700:	b085      	sub	sp, #20
 8000702:	af02      	add	r7, sp, #8
 8000704:	4604      	mov	r4, r0
 8000706:	4608      	mov	r0, r1
 8000708:	4611      	mov	r1, r2
 800070a:	461a      	mov	r2, r3
 800070c:	4623      	mov	r3, r4
 800070e:	80fb      	strh	r3, [r7, #6]
 8000710:	4603      	mov	r3, r0
 8000712:	80bb      	strh	r3, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	807b      	strh	r3, [r7, #2]
 8000718:	4613      	mov	r3, r2
 800071a:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 800071c:	88ba      	ldrh	r2, [r7, #4]
 800071e:	887b      	ldrh	r3, [r7, #2]
 8000720:	4413      	add	r3, r2
 8000722:	b29b      	uxth	r3, r3
 8000724:	3b01      	subs	r3, #1
 8000726:	b29b      	uxth	r3, r3
 8000728:	b21c      	sxth	r4, r3
 800072a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800072e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000732:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000736:	883b      	ldrh	r3, [r7, #0]
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	4623      	mov	r3, r4
 800073c:	f7ff ff3c 	bl	80005b8 <writeLine>
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bd90      	pop	{r4, r7, pc}

08000748 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b085      	sub	sp, #20
 800074c:	af02      	add	r7, sp, #8
 800074e:	4604      	mov	r4, r0
 8000750:	4608      	mov	r0, r1
 8000752:	4611      	mov	r1, r2
 8000754:	461a      	mov	r2, r3
 8000756:	4623      	mov	r3, r4
 8000758:	80fb      	strh	r3, [r7, #6]
 800075a:	4603      	mov	r3, r0
 800075c:	80bb      	strh	r3, [r7, #4]
 800075e:	460b      	mov	r3, r1
 8000760:	807b      	strh	r3, [r7, #2]
 8000762:	4613      	mov	r3, r2
 8000764:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8000766:	88fa      	ldrh	r2, [r7, #6]
 8000768:	887b      	ldrh	r3, [r7, #2]
 800076a:	4413      	add	r3, r2
 800076c:	b29b      	uxth	r3, r3
 800076e:	3b01      	subs	r3, #1
 8000770:	b29b      	uxth	r3, r3
 8000772:	b21a      	sxth	r2, r3
 8000774:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000778:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800077c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000780:	883b      	ldrh	r3, [r7, #0]
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	4623      	mov	r3, r4
 8000786:	f7ff ff17 	bl	80005b8 <writeLine>
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	bd90      	pop	{r4, r7, pc}

08000792 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000792:	b590      	push	{r4, r7, lr}
 8000794:	b087      	sub	sp, #28
 8000796:	af02      	add	r7, sp, #8
 8000798:	4604      	mov	r4, r0
 800079a:	4608      	mov	r0, r1
 800079c:	4611      	mov	r1, r2
 800079e:	461a      	mov	r2, r3
 80007a0:	4623      	mov	r3, r4
 80007a2:	80fb      	strh	r3, [r7, #6]
 80007a4:	4603      	mov	r3, r0
 80007a6:	80bb      	strh	r3, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	807b      	strh	r3, [r7, #2]
 80007ac:	4613      	mov	r3, r2
 80007ae:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 80007b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d11a      	bne.n	80007f2 <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80007bc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dd05      	ble.n	80007d4 <drawLine+0x42>
 80007c8:	88bb      	ldrh	r3, [r7, #4]
 80007ca:	81bb      	strh	r3, [r7, #12]
 80007cc:	883b      	ldrh	r3, [r7, #0]
 80007ce:	80bb      	strh	r3, [r7, #4]
 80007d0:	89bb      	ldrh	r3, [r7, #12]
 80007d2:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80007d4:	883a      	ldrh	r2, [r7, #0]
 80007d6:	88bb      	ldrh	r3, [r7, #4]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	b29b      	uxth	r3, r3
 80007dc:	3301      	adds	r3, #1
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b21a      	sxth	r2, r3
 80007e2:	8c3b      	ldrh	r3, [r7, #32]
 80007e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007e8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007ec:	f7ff ff87 	bl	80006fe <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 80007f0:	e02d      	b.n	800084e <drawLine+0xbc>
    } else if(y0 == y1){
 80007f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d11a      	bne.n	8000834 <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80007fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000802:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000806:	429a      	cmp	r2, r3
 8000808:	dd05      	ble.n	8000816 <drawLine+0x84>
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	81fb      	strh	r3, [r7, #14]
 800080e:	887b      	ldrh	r3, [r7, #2]
 8000810:	80fb      	strh	r3, [r7, #6]
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8000816:	887a      	ldrh	r2, [r7, #2]
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b29b      	uxth	r3, r3
 800081e:	3301      	adds	r3, #1
 8000820:	b29b      	uxth	r3, r3
 8000822:	b21a      	sxth	r2, r3
 8000824:	8c3b      	ldrh	r3, [r7, #32]
 8000826:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800082a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800082e:	f7ff ff8b 	bl	8000748 <drawFastHLine>
}
 8000832:	e00c      	b.n	800084e <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 8000834:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000838:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800083c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000840:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000844:	8c3b      	ldrh	r3, [r7, #32]
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	4623      	mov	r3, r4
 800084a:	f7ff feb5 	bl	80005b8 <writeLine>
}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	bd90      	pop	{r4, r7, pc}
	...

08000858 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af02      	add	r7, sp, #8
 800085e:	4603      	mov	r3, r0
 8000860:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <fillScreen+0x2c>)
 8000864:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <fillScreen+0x30>)
 800086a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	460b      	mov	r3, r1
 8000874:	2100      	movs	r1, #0
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fe6d 	bl	8000556 <fillRect>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000054 	.word	0x20000054
 8000888:	20000058 	.word	0x20000058

0800088c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2110      	movs	r1, #16
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <ST7735_Select+0x14>)
 8000896:	f002 fcbd 	bl	8003214 <HAL_GPIO_WritePin>
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40020000 	.word	0x40020000

080008a4 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2110      	movs	r1, #16
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <ST7735_Unselect+0x14>)
 80008ae:	f002 fcb1 	bl	8003214 <HAL_GPIO_WritePin>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40020000 	.word	0x40020000

080008bc <ST7735_Reset>:

void ST7735_Reset()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <ST7735_Reset+0x28>)
 80008c8:	f002 fca4 	bl	8003214 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80008cc:	2005      	movs	r0, #5
 80008ce:	f001 f985 	bl	8001bdc <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <ST7735_Reset+0x28>)
 80008da:	f002 fc9b 	bl	8003214 <HAL_GPIO_WritePin>
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40020800 	.word	0x40020800

080008e8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f8:	4806      	ldr	r0, [pc, #24]	; (8000914 <ST7735_WriteCommand+0x2c>)
 80008fa:	f002 fc8b 	bl	8003214 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80008fe:	1df9      	adds	r1, r7, #7
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
 8000904:	2201      	movs	r2, #1
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <ST7735_WriteCommand+0x30>)
 8000908:	f003 fe27 	bl	800455a <HAL_SPI_Transmit>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40020800 	.word	0x40020800
 8000918:	20000228 	.word	0x20000228

0800091c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092c:	4807      	ldr	r0, [pc, #28]	; (800094c <ST7735_WriteData+0x30>)
 800092e:	f002 fc71 	bl	8003214 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b29a      	uxth	r2, r3
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <ST7735_WriteData+0x34>)
 800093e:	f003 fe0c 	bl	800455a <HAL_SPI_Transmit>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40020800 	.word	0x40020800
 8000950:	20000228 	.word	0x20000228

08000954 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000966:	e034      	b.n	80009d2 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ffb7 	bl	80008e8 <ST7735_WriteCommand>

        numArgs = *addr++;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000984:	7abb      	ldrb	r3, [r7, #10]
 8000986:	b29b      	uxth	r3, r3
 8000988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800098e:	7abb      	ldrb	r3, [r7, #10]
 8000990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000994:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000996:	7abb      	ldrb	r3, [r7, #10]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d008      	beq.n	80009ae <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800099c:	7abb      	ldrb	r3, [r7, #10]
 800099e:	4619      	mov	r1, r3
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ffbb 	bl	800091c <ST7735_WriteData>
            addr += numArgs;
 80009a6:	7abb      	ldrb	r3, [r7, #10]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80009ae:	89bb      	ldrh	r3, [r7, #12]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00e      	beq.n	80009d2 <DisplayInit+0x7e>
            ms = *addr++;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80009be:	89bb      	ldrh	r3, [r7, #12]
 80009c0:	2bff      	cmp	r3, #255	; 0xff
 80009c2:	d102      	bne.n	80009ca <DisplayInit+0x76>
 80009c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009c8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80009ca:	89bb      	ldrh	r3, [r7, #12]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 f905 	bl	8001bdc <HAL_Delay>
    while(numCommands--) {
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	1e5a      	subs	r2, r3, #1
 80009d6:	73fa      	strb	r2, [r7, #15]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1c5      	bne.n	8000968 <DisplayInit+0x14>
        }
    }
}
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4604      	mov	r4, r0
 80009f0:	4608      	mov	r0, r1
 80009f2:	4611      	mov	r1, r2
 80009f4:	461a      	mov	r2, r3
 80009f6:	4623      	mov	r3, r4
 80009f8:	71fb      	strb	r3, [r7, #7]
 80009fa:	4603      	mov	r3, r0
 80009fc:	71bb      	strb	r3, [r7, #6]
 80009fe:	460b      	mov	r3, r1
 8000a00:	717b      	strb	r3, [r7, #5]
 8000a02:	4613      	mov	r3, r2
 8000a04:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000a06:	202a      	movs	r0, #42	; 0x2a
 8000a08:	f7ff ff6e 	bl	80008e8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	733b      	strb	r3, [r7, #12]
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <ST7735_SetAddressWindow+0x88>)
 8000a12:	781a      	ldrb	r2, [r3, #0]
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4413      	add	r3, r2
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	737b      	strb	r3, [r7, #13]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73bb      	strb	r3, [r7, #14]
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <ST7735_SetAddressWindow+0x88>)
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	797b      	ldrb	r3, [r7, #5]
 8000a26:	4413      	add	r3, r2
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2104      	movs	r1, #4
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff72 	bl	800091c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000a38:	202b      	movs	r0, #43	; 0x2b
 8000a3a:	f7ff ff55 	bl	80008e8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <ST7735_SetAddressWindow+0x8c>)
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	79bb      	ldrb	r3, [r7, #6]
 8000a44:	4413      	add	r3, r2
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <ST7735_SetAddressWindow+0x8c>)
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	793b      	ldrb	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	2104      	movs	r1, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff5d 	bl	800091c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000a62:	202c      	movs	r0, #44	; 0x2c
 8000a64:	f7ff ff40 	bl	80008e8 <ST7735_WriteCommand>
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	2000004c 	.word	0x2000004c
 8000a74:	20000050 	.word	0x20000050

08000a78 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000a82:	f7ff ff03 	bl	800088c <ST7735_Select>
    ST7735_Reset();
 8000a86:	f7ff ff19 	bl	80008bc <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <ST7735_Init+0x44>)
 8000a8c:	f7ff ff62 	bl	8000954 <DisplayInit>
    DisplayInit(init_cmds2);
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <ST7735_Init+0x48>)
 8000a92:	f7ff ff5f 	bl	8000954 <DisplayInit>
    DisplayInit(init_cmds3);
 8000a96:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <ST7735_Init+0x4c>)
 8000a98:	f7ff ff5c 	bl	8000954 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <ST7735_Init+0x50>)
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <ST7735_Init+0x54>)
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f810 	bl	8000ad0 <ST7735_SetRotation>
    ST7735_Unselect();
 8000ab0:	f7ff fef8 	bl	80008a4 <ST7735_Unselect>

}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	08006610 	.word	0x08006610
 8000ac0:	08006648 	.word	0x08006648
 8000ac4:	08006658 	.word	0x08006658
 8000ac8:	2000004d 	.word	0x2000004d
 8000acc:	20000051 	.word	0x20000051

08000ad0 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <ST7735_SetRotation+0xe4>)
 8000ae8:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000aea:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <ST7735_SetRotation+0xe4>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d84e      	bhi.n	8000b90 <ST7735_SetRotation+0xc0>
 8000af2:	a201      	add	r2, pc, #4	; (adr r2, 8000af8 <ST7735_SetRotation+0x28>)
 8000af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af8:	08000b09 	.word	0x08000b09
 8000afc:	08000b2b 	.word	0x08000b2b
 8000b00:	08000b4d 	.word	0x08000b4d
 8000b04:	08000b6f 	.word	0x08000b6f
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000b08:	23c0      	movs	r3, #192	; 0xc0
 8000b0a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <ST7735_SetRotation+0xe8>)
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <ST7735_SetRotation+0xec>)
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <ST7735_SetRotation+0xf0>)
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <ST7735_SetRotation+0xf4>)
 8000b1e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <ST7735_SetRotation+0xf8>)
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <ST7735_SetRotation+0xfc>)
 8000b26:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000b28:	e032      	b.n	8000b90 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000b2a:	23a0      	movs	r3, #160	; 0xa0
 8000b2c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000b2e:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <ST7735_SetRotation+0xec>)
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000b34:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <ST7735_SetRotation+0xe8>)
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <ST7735_SetRotation+0xf0>)
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <ST7735_SetRotation+0xfc>)
 8000b40:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <ST7735_SetRotation+0xf8>)
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <ST7735_SetRotation+0xf4>)
 8000b48:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000b4a:	e021      	b.n	8000b90 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <ST7735_SetRotation+0xe8>)
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <ST7735_SetRotation+0xec>)
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <ST7735_SetRotation+0xf0>)
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <ST7735_SetRotation+0xf4>)
 8000b62:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <ST7735_SetRotation+0xf8>)
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <ST7735_SetRotation+0xfc>)
 8000b6a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000b6c:	e010      	b.n	8000b90 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000b6e:	2360      	movs	r3, #96	; 0x60
 8000b70:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <ST7735_SetRotation+0xec>)
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <ST7735_SetRotation+0xe8>)
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <ST7735_SetRotation+0xf0>)
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <ST7735_SetRotation+0xfc>)
 8000b84:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <ST7735_SetRotation+0xf8>)
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <ST7735_SetRotation+0xf4>)
 8000b8c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000b8e:	bf00      	nop
  }
  ST7735_Select();
 8000b90:	f7ff fe7c 	bl	800088c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000b94:	2036      	movs	r0, #54	; 0x36
 8000b96:	f7ff fea7 	bl	80008e8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000b9a:	f107 030f 	add.w	r3, r7, #15
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff febb 	bl	800091c <ST7735_WriteData>
  ST7735_Unselect();
 8000ba6:	f7ff fe7d 	bl	80008a4 <ST7735_Unselect>
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000052 	.word	0x20000052
 8000bb8:	20000058 	.word	0x20000058
 8000bbc:	20000054 	.word	0x20000054
 8000bc0:	2000004d 	.word	0x2000004d
 8000bc4:	2000004c 	.word	0x2000004c
 8000bc8:	20000051 	.word	0x20000051
 8000bcc:	20000050 	.word	0x20000050

08000bd0 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	80bb      	strh	r3, [r7, #4]
 8000bde:	4613      	mov	r3, r2
 8000be0:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <ST7735_DrawPixel+0x74>)
 8000be6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bea:	4293      	cmp	r3, r2
 8000bec:	da26      	bge.n	8000c3c <ST7735_DrawPixel+0x6c>
 8000bee:	88bb      	ldrh	r3, [r7, #4]
 8000bf0:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <ST7735_DrawPixel+0x78>)
 8000bf2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	da20      	bge.n	8000c3c <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 8000bfa:	f7ff fe47 	bl	800088c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	b2d8      	uxtb	r0, r3
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	b2d9      	uxtb	r1, r3
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	88bb      	ldrh	r3, [r7, #4]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	3301      	adds	r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	f7ff fee7 	bl	80009e8 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	733b      	strb	r3, [r7, #12]
 8000c24:	887b      	ldrh	r3, [r7, #2]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe73 	bl	800091c <ST7735_WriteData>

    ST7735_Unselect();
 8000c36:	f7ff fe35 	bl	80008a4 <ST7735_Unselect>
 8000c3a:	e000      	b.n	8000c3e <ST7735_DrawPixel+0x6e>
        return;
 8000c3c:	bf00      	nop
}
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000054 	.word	0x20000054
 8000c48:	20000058 	.word	0x20000058

08000c4c <ST7735_FillRectangle>:

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80bb      	strh	r3, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
 8000c66:	4613      	mov	r3, r2
 8000c68:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	4a38      	ldr	r2, [pc, #224]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c72:	4293      	cmp	r3, r2
 8000c74:	da67      	bge.n	8000d46 <ST7735_FillRectangle+0xfa>
 8000c76:	88bb      	ldrh	r3, [r7, #4]
 8000c78:	4a36      	ldr	r2, [pc, #216]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000c7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	da61      	bge.n	8000d46 <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 8000c82:	88fa      	ldrh	r2, [r7, #6]
 8000c84:	887b      	ldrh	r3, [r7, #2]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a31      	ldr	r2, [pc, #196]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	dd06      	ble.n	8000ca0 <ST7735_FillRectangle+0x54>
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <ST7735_FillRectangle+0x104>)
 8000c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000ca0:	88ba      	ldrh	r2, [r7, #4]
 8000ca2:	883b      	ldrh	r3, [r7, #0]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a2b      	ldr	r2, [pc, #172]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000ca8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000cac:	4293      	cmp	r3, r2
 8000cae:	dd06      	ble.n	8000cbe <ST7735_FillRectangle+0x72>
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <ST7735_FillRectangle+0x108>)
 8000cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000cbe:	f7ff fde5 	bl	800088c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	b2d8      	uxtb	r0, r3
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	b2d9      	uxtb	r1, r3
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	b2dc      	uxtb	r4, r3
 8000cda:	88bb      	ldrh	r3, [r7, #4]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	883b      	ldrh	r3, [r7, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4622      	mov	r2, r4
 8000cec:	f7ff fe7c 	bl	80009e8 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000cf0:	8c3b      	ldrh	r3, [r7, #32]
 8000cf2:	0a1b      	lsrs	r3, r3, #8
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	733b      	strb	r3, [r7, #12]
 8000cfa:	8c3b      	ldrh	r3, [r7, #32]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d06:	4814      	ldr	r0, [pc, #80]	; (8000d58 <ST7735_FillRectangle+0x10c>)
 8000d08:	f002 fa84 	bl	8003214 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000d0c:	883b      	ldrh	r3, [r7, #0]
 8000d0e:	80bb      	strh	r3, [r7, #4]
 8000d10:	e013      	b.n	8000d3a <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	e00a      	b.n	8000d2e <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000d18:	f107 010c 	add.w	r1, r7, #12
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	2202      	movs	r2, #2
 8000d22:	480e      	ldr	r0, [pc, #56]	; (8000d5c <ST7735_FillRectangle+0x110>)
 8000d24:	f003 fc19 	bl	800455a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f1      	bne.n	8000d18 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8000d34:	88bb      	ldrh	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	80bb      	strh	r3, [r7, #4]
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1e8      	bne.n	8000d12 <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 8000d40:	f7ff fdb0 	bl	80008a4 <ST7735_Unselect>
 8000d44:	e000      	b.n	8000d48 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 8000d46:	bf00      	nop
}
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd90      	pop	{r4, r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000054 	.word	0x20000054
 8000d54:	20000058 	.word	0x20000058
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	20000228 	.word	0x20000228

08000d60 <ST7735_FillScreen>:
//------------ST7735_FillScreen------------
// Fill the screen with the given color.
// Requires 40,971 bytes of transmission
// Input: color 16-bit color, which can be produced by ST7735_Color565()
// Output: none
void ST7735_FillScreen(uint16_t color) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af02      	add	r7, sp, #8
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, _width, _height, color);  // original
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <ST7735_FillScreen+0x30>)
 8000d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <ST7735_FillScreen+0x34>)
 8000d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d78:	b299      	uxth	r1, r3
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	2100      	movs	r1, #0
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff ff62 	bl	8000c4c <ST7735_FillRectangle>
//  screen is actually 129 by 161 pixels, x 0 to 128, y goes from 0 to 160
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000054 	.word	0x20000054
 8000d94:	20000058 	.word	0x20000058

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9e:	f000 fec0 	bl	8001b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da2:	f000 f919 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da6:	f000 fb07 	bl	80013b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000daa:	f000 fa01 	bl	80011b0 <MX_SPI1_Init>
  MX_DMA_Init();
 8000dae:	f000 fae5 	bl	800137c <MX_DMA_Init>
  MX_ADC1_Init();
 8000db2:	f000 f99d 	bl	80010f0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000db6:	f000 fa39 	bl	800122c <MX_TIM4_Init>
  MX_UART7_Init();
 8000dba:	f000 faaf 	bl	800131c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(0);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fe5a 	bl	8000a78 <ST7735_Init>
  fillScreen(BLACK);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f7ff fd47 	bl	8000858 <fillScreen>
  //
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&value_adc, 2);
 8000dca:	2202      	movs	r2, #2
 8000dcc:	496d      	ldr	r1, [pc, #436]	; (8000f84 <main+0x1ec>)
 8000dce:	486e      	ldr	r0, [pc, #440]	; (8000f88 <main+0x1f0>)
 8000dd0:	f000 ff6c 	bl	8001cac <HAL_ADC_Start_DMA>
  // LCD start grafik
  ST7735_FillScreen(BLACK);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff ffc3 	bl	8000d60 <ST7735_FillScreen>
  drawLine(56, 64, 72, 64, WHITE);
 8000dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2340      	movs	r3, #64	; 0x40
 8000de2:	2248      	movs	r2, #72	; 0x48
 8000de4:	2140      	movs	r1, #64	; 0x40
 8000de6:	2038      	movs	r0, #56	; 0x38
 8000de8:	f7ff fcd3 	bl	8000792 <drawLine>
  drawLine(64, 56, 64, 72, WHITE);
 8000dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2348      	movs	r3, #72	; 0x48
 8000df4:	2240      	movs	r2, #64	; 0x40
 8000df6:	2138      	movs	r1, #56	; 0x38
 8000df8:	2040      	movs	r0, #64	; 0x40
 8000dfa:	f7ff fcca 	bl	8000792 <drawLine>
  //
  start = HAL_GetTick();
 8000dfe:	f000 fee1 	bl	8001bc4 <HAL_GetTick>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a61      	ldr	r2, [pc, #388]	; (8000f8c <main+0x1f4>)
 8000e06:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN 3 */
	  // joystick

	  /////////////////// joystick yönleri
	  if(adc_flag==1)
 8000e08:	4b61      	ldr	r3, [pc, #388]	; (8000f90 <main+0x1f8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d107      	bne.n	8000e20 <main+0x88>
	  	  {
	  		  adc_flag = 0;
 8000e10:	4b5f      	ldr	r3, [pc, #380]	; (8000f90 <main+0x1f8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
	  		  /*
	  		  ST7735_FillScreen(BLACK);
	  		  drawLine((value_adc[1]/delta)-8, (value_adc[0]/delta), (value_adc[1]/delta)+8, (value_adc[0]/delta), WHITE);
	  		  drawLine((value_adc[1]/delta), (value_adc[0]/delta)-8, (value_adc[1]/delta), (value_adc[0]/delta)+8, WHITE);
	  		  */
	  		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&value_adc, 2);
 8000e16:	2202      	movs	r2, #2
 8000e18:	495a      	ldr	r1, [pc, #360]	; (8000f84 <main+0x1ec>)
 8000e1a:	485b      	ldr	r0, [pc, #364]	; (8000f88 <main+0x1f0>)
 8000e1c:	f000 ff46 	bl	8001cac <HAL_ADC_Start_DMA>
	  	  }
	  ////////////Joystick Button
	  if(joystick_button_flag == 1)
 8000e20:	4b5c      	ldr	r3, [pc, #368]	; (8000f94 <main+0x1fc>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d121      	bne.n	8000e6c <main+0xd4>
	  {
		  joystick_button_signal_finish = (HAL_GetTick() - joystick_button_time_start[joystick_button_time_start_memory_counter-1]);
 8000e28:	f000 fecc 	bl	8001bc4 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	4b5a      	ldr	r3, [pc, #360]	; (8000f98 <main+0x200>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	4959      	ldr	r1, [pc, #356]	; (8000f9c <main+0x204>)
 8000e36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	4a58      	ldr	r2, [pc, #352]	; (8000fa0 <main+0x208>)
 8000e3e:	6013      	str	r3, [r2, #0]
		  if(joystick_button_signal_finish > bounce_time)
 8000e40:	4b57      	ldr	r3, [pc, #348]	; (8000fa0 <main+0x208>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d90f      	bls.n	8000e6c <main+0xd4>
		  {
			  __NOP();
 8000e4c:	bf00      	nop
			  joystick_button_time_start_memory_counter = 0;
 8000e4e:	4b52      	ldr	r3, [pc, #328]	; (8000f98 <main+0x200>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
			  memset(joystick_button_time_start, 0, sizeof(joystick_button_time_start));
 8000e54:	2228      	movs	r2, #40	; 0x28
 8000e56:	2100      	movs	r1, #0
 8000e58:	4850      	ldr	r0, [pc, #320]	; (8000f9c <main+0x204>)
 8000e5a:	f005 fbc5 	bl	80065e8 <memset>
			  joystick_button_flag = 0;
 8000e5e:	4b4d      	ldr	r3, [pc, #308]	; (8000f94 <main+0x1fc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000e64:	2101      	movs	r1, #1
 8000e66:	484f      	ldr	r0, [pc, #316]	; (8000fa4 <main+0x20c>)
 8000e68:	f002 f9ed 	bl	8003246 <HAL_GPIO_TogglePin>

		  }
	  }
	  ////////////Encoder Button
	  if(ENC_BUTTON_flag == 1)
 8000e6c:	4b4e      	ldr	r3, [pc, #312]	; (8000fa8 <main+0x210>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d121      	bne.n	8000eb8 <main+0x120>
	  {
		  Encoder_button_signal_finish = (HAL_GetTick() - Encoder_button_time_start[Encoder_button_time_start_memory_counter-1]);
 8000e74:	f000 fea6 	bl	8001bc4 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	4b4c      	ldr	r3, [pc, #304]	; (8000fac <main+0x214>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	494b      	ldr	r1, [pc, #300]	; (8000fb0 <main+0x218>)
 8000e82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	4a4a      	ldr	r2, [pc, #296]	; (8000fb4 <main+0x21c>)
 8000e8a:	6013      	str	r3, [r2, #0]
		  if(Encoder_button_signal_finish > bounce_time)
 8000e8c:	4b49      	ldr	r3, [pc, #292]	; (8000fb4 <main+0x21c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d90f      	bls.n	8000eb8 <main+0x120>
		  {
			  Encoder_button_time_start_memory_counter = 0;
 8000e98:	4b44      	ldr	r3, [pc, #272]	; (8000fac <main+0x214>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
			  memset(Encoder_button_time_start, 0, sizeof(Encoder_button_time_start));
 8000e9e:	2228      	movs	r2, #40	; 0x28
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4843      	ldr	r0, [pc, #268]	; (8000fb0 <main+0x218>)
 8000ea4:	f005 fba0 	bl	80065e8 <memset>
			  ENC_BUTTON_flag = 0;
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <main+0x210>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	483c      	ldr	r0, [pc, #240]	; (8000fa4 <main+0x20c>)
 8000eb2:	f002 f9c8 	bl	8003246 <HAL_GPIO_TogglePin>
			  __NOP();
 8000eb6:	bf00      	nop
		  }
	  }
	  ////////////Encoder A
	  if(ENC_A_flag == 1)
 8000eb8:	4b3f      	ldr	r3, [pc, #252]	; (8000fb8 <main+0x220>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d110      	bne.n	8000ee2 <main+0x14a>
	  {
		  ENC_A_flag = 0;
 8000ec0:	4b3d      	ldr	r3, [pc, #244]	; (8000fb8 <main+0x220>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
		  if(HAL_GPIO_ReadPin(ENCODER_A_GPIO_Port, ENCODER_A_Pin) ==  GPIO_PIN_SET)
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	483c      	ldr	r0, [pc, #240]	; (8000fbc <main+0x224>)
 8000eca:	f002 f98b 	bl	80031e4 <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d103      	bne.n	8000edc <main+0x144>
		  {
			  ENC_State = 1;
 8000ed4:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <main+0x228>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e002      	b.n	8000ee2 <main+0x14a>
		  }
		  else
		  {
			  ENC_State = 0;
 8000edc:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <main+0x228>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  ////////////Encoder B
	  if(ENC_B_flag == 1)
 8000ee2:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <main+0x22c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d121      	bne.n	8000f2e <main+0x196>
	  {
		  ENC_B_flag = 0;
 8000eea:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <main+0x22c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
		  if(ENC_State == 1)
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <main+0x228>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d11a      	bne.n	8000f2e <main+0x196>
		  {
			  if(HAL_GPIO_ReadPin(ENCODER_B_GPIO_Port, ENCODER_B_Pin) ==  GPIO_PIN_SET)
 8000ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efc:	482f      	ldr	r0, [pc, #188]	; (8000fbc <main+0x224>)
 8000efe:	f002 f971 	bl	80031e4 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d109      	bne.n	8000f1c <main+0x184>
			  {
				  if(ENC_Counter < 255)
 8000f08:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <main+0x230>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2bfe      	cmp	r3, #254	; 0xfe
 8000f0e:	d80e      	bhi.n	8000f2e <main+0x196>
					  ENC_Counter++;
 8000f10:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <main+0x230>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4a2c      	ldr	r2, [pc, #176]	; (8000fc8 <main+0x230>)
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	e008      	b.n	8000f2e <main+0x196>
			  }
			  else
			  {
				  if(ENC_Counter > 0)
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <main+0x230>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <main+0x196>
					ENC_Counter--;
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <main+0x230>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <main+0x230>)
 8000f2c:	6013      	str	r3, [r2, #0]
			  }
		  }
	  }
	  ///
	  finish = HAL_GetTick();
 8000f2e:	f000 fe49 	bl	8001bc4 <HAL_GetTick>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a25      	ldr	r2, [pc, #148]	; (8000fcc <main+0x234>)
 8000f36:	6013      	str	r3, [r2, #0]
	  if((finish - start) > 500)
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <main+0x234>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <main+0x1f4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f46:	d909      	bls.n	8000f5c <main+0x1c4>
	  {
		  start = HAL_GetTick();
 8000f48:	f000 fe3c 	bl	8001bc4 <HAL_GetTick>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <main+0x1f4>)
 8000f50:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_13);
 8000f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f56:	481e      	ldr	r0, [pc, #120]	; (8000fd0 <main+0x238>)
 8000f58:	f002 f975 	bl	8003246 <HAL_GPIO_TogglePin>
	  }
	  if(HAL_GPIO_ReadPin(GPIOC,LCD_Key1_Pin)==1)
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	481d      	ldr	r0, [pc, #116]	; (8000fd4 <main+0x23c>)
 8000f60:	f002 f940 	bl	80031e4 <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d105      	bne.n	8000f76 <main+0x1de>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2,GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	4818      	ldr	r0, [pc, #96]	; (8000fd0 <main+0x238>)
 8000f70:	f002 f950 	bl	8003214 <HAL_GPIO_WritePin>
 8000f74:	e748      	b.n	8000e08 <main+0x70>
	  else
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2,GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <main+0x238>)
 8000f7c:	f002 f94a 	bl	8003214 <HAL_GPIO_WritePin>
	  if(adc_flag==1)
 8000f80:	e742      	b.n	8000e08 <main+0x70>
 8000f82:	bf00      	nop
 8000f84:	200001c4 	.word	0x200001c4
 8000f88:	2000017c 	.word	0x2000017c
 8000f8c:	20000028 	.word	0x20000028
 8000f90:	20000038 	.word	0x20000038
 8000f94:	20000030 	.word	0x20000030
 8000f98:	20000031 	.word	0x20000031
 8000f9c:	2000012c 	.word	0x2000012c
 8000fa0:	20000034 	.word	0x20000034
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	2000003b 	.word	0x2000003b
 8000fac:	2000003c 	.word	0x2000003c
 8000fb0:	20000154 	.word	0x20000154
 8000fb4:	20000040 	.word	0x20000040
 8000fb8:	20000039 	.word	0x20000039
 8000fbc:	40021800 	.word	0x40021800
 8000fc0:	20000044 	.word	0x20000044
 8000fc4:	2000003a 	.word	0x2000003a
 8000fc8:	20000048 	.word	0x20000048
 8000fcc:	2000002c 	.word	0x2000002c
 8000fd0:	40021400 	.word	0x40021400
 8000fd4:	40020800 	.word	0x40020800

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0b8      	sub	sp, #224	; 0xe0
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fe2:	2234      	movs	r2, #52	; 0x34
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f005 fafe 	bl	80065e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	2290      	movs	r2, #144	; 0x90
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f005 faef 	bl	80065e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <SystemClock_Config+0x110>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a36      	ldr	r2, [pc, #216]	; (80010e8 <SystemClock_Config+0x110>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <SystemClock_Config+0x110>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001022:	4b32      	ldr	r3, [pc, #200]	; (80010ec <SystemClock_Config+0x114>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800102a:	4a30      	ldr	r2, [pc, #192]	; (80010ec <SystemClock_Config+0x114>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <SystemClock_Config+0x114>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	2301      	movs	r3, #1
 8001046:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104a:	2310      	movs	r3, #16
 800104c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001050:	2302      	movs	r3, #2
 8001052:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 800105c:	2308      	movs	r3, #8
 800105e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001062:	2390      	movs	r3, #144	; 0x90
 8001064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001068:	2304      	movs	r3, #4
 800106a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800106e:	2302      	movs	r3, #2
 8001070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001078:	4618      	mov	r0, r3
 800107a:	f002 f917 	bl	80032ac <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001084:	f000 fb1c 	bl	80016c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108e:	2302      	movs	r3, #2
 8001090:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800109a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010ae:	2102      	movs	r1, #2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 fba9 	bl	8003808 <HAL_RCC_ClockConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80010bc:	f000 fb00 	bl	80016c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 fd70 	bl	8003bb4 <HAL_RCCEx_PeriphCLKConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x106>
  {
    Error_Handler();
 80010da:	f000 faf1 	bl	80016c0 <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	37e0      	adds	r7, #224	; 0xe0
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <MX_ADC1_Init+0xb8>)
 8001106:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MX_ADC1_Init+0xb4>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001116:	2201      	movs	r2, #1
 8001118:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_ADC1_Init+0xb4>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_ADC1_Init+0xb4>)
 800112a:	2200      	movs	r2, #0
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <MX_ADC1_Init+0xbc>)
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_ADC1_Init+0xb4>)
 800113c:	2202      	movs	r2, #2
 800113e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_ADC1_Init+0xb4>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800114e:	4815      	ldr	r0, [pc, #84]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001150:	f000 fd68 	bl	8001c24 <HAL_ADC_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800115a:	f000 fab1 	bl	80016c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800115e:	2303      	movs	r3, #3
 8001160:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001162:	2301      	movs	r3, #1
 8001164:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001166:	2301      	movs	r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001170:	f000 feaa 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800117a:	f000 faa1 	bl	80016c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800117e:	230a      	movs	r3, #10
 8001180:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001182:	2302      	movs	r3, #2
 8001184:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_ADC1_Init+0xb4>)
 800118c:	f000 fe9c 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001196:	f000 fa93 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000017c 	.word	0x2000017c
 80011a8:	40012000 	.word	0x40012000
 80011ac:	0f000001 	.word	0x0f000001

080011b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_SPI1_Init+0x74>)
 80011b6:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <MX_SPI1_Init+0x78>)
 80011b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_SPI1_Init+0x74>)
 80011bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_SPI1_Init+0x74>)
 80011c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_SPI1_Init+0x74>)
 80011cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_SPI1_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_SPI1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_SPI1_Init+0x74>)
 80011e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_SPI1_Init+0x74>)
 80011e8:	2220      	movs	r2, #32
 80011ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <MX_SPI1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_SPI1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_SPI1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_SPI1_Init+0x74>)
 8001200:	2207      	movs	r2, #7
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_SPI1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_SPI1_Init+0x74>)
 800120c:	2208      	movs	r2, #8
 800120e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_SPI1_Init+0x74>)
 8001212:	f003 f8f7 	bl	8004404 <HAL_SPI_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800121c:	f000 fa50 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000228 	.word	0x20000228
 8001228:	40013000 	.word	0x40013000

0800122c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	; 0x38
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
 800125a:	615a      	str	r2, [r3, #20]
 800125c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800125e:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <MX_TIM4_Init+0xe8>)
 8001260:	4a2d      	ldr	r2, [pc, #180]	; (8001318 <MX_TIM4_Init+0xec>)
 8001262:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 8001264:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <MX_TIM4_Init+0xe8>)
 8001266:	2204      	movs	r2, #4
 8001268:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <MX_TIM4_Init+0xe8>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 360;
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <MX_TIM4_Init+0xe8>)
 8001272:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001276:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <MX_TIM4_Init+0xe8>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b25      	ldr	r3, [pc, #148]	; (8001314 <MX_TIM4_Init+0xe8>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001284:	4823      	ldr	r0, [pc, #140]	; (8001314 <MX_TIM4_Init+0xe8>)
 8001286:	f003 fc37 	bl	8004af8 <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001290:	f000 fa16 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800129a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129e:	4619      	mov	r1, r3
 80012a0:	481c      	ldr	r0, [pc, #112]	; (8001314 <MX_TIM4_Init+0xe8>)
 80012a2:	f003 fdf1 	bl	8004e88 <HAL_TIM_ConfigClockSource>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80012ac:	f000 fa08 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012b0:	4818      	ldr	r0, [pc, #96]	; (8001314 <MX_TIM4_Init+0xe8>)
 80012b2:	f003 fc78 	bl	8004ba6 <HAL_TIM_PWM_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80012bc:	f000 fa00 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4811      	ldr	r0, [pc, #68]	; (8001314 <MX_TIM4_Init+0xe8>)
 80012d0:	f004 fa38 	bl	8005744 <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80012da:	f000 f9f1 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012de:	2360      	movs	r3, #96	; 0x60
 80012e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4807      	ldr	r0, [pc, #28]	; (8001314 <MX_TIM4_Init+0xe8>)
 80012f6:	f003 fcb7 	bl	8004c68 <HAL_TIM_PWM_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001300:	f000 f9de 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <MX_TIM4_Init+0xe8>)
 8001306:	f000 fafd 	bl	8001904 <HAL_TIM_MspPostInit>

}
 800130a:	bf00      	nop
 800130c:	3738      	adds	r7, #56	; 0x38
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200000e0 	.word	0x200000e0
 8001318:	40000800 	.word	0x40000800

0800131c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_UART7_Init+0x58>)
 8001322:	4a15      	ldr	r2, [pc, #84]	; (8001378 <MX_UART7_Init+0x5c>)
 8001324:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <MX_UART7_Init+0x58>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_UART7_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_UART7_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_UART7_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_UART7_Init+0x58>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <MX_UART7_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_UART7_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <MX_UART7_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_UART7_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_UART7_Init+0x58>)
 8001360:	f004 fa7e 	bl	8005860 <HAL_UART_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800136a:	f000 f9a9 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000005c 	.word	0x2000005c
 8001378:	40007800 	.word	0x40007800

0800137c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_DMA_Init+0x38>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <MX_DMA_Init+0x38>)
 8001388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_DMA_Init+0x38>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2038      	movs	r0, #56	; 0x38
 80013a0:	f001 f933 	bl	800260a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013a4:	2038      	movs	r0, #56	; 0x38
 80013a6:	f001 f94c 	bl	8002642 <HAL_NVIC_EnableIRQ>

}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ce:	4b72      	ldr	r3, [pc, #456]	; (8001598 <MX_GPIO_Init+0x1e0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a71      	ldr	r2, [pc, #452]	; (8001598 <MX_GPIO_Init+0x1e0>)
 80013d4:	f043 0320 	orr.w	r3, r3, #32
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b6f      	ldr	r3, [pc, #444]	; (8001598 <MX_GPIO_Init+0x1e0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0320 	and.w	r3, r3, #32
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	4b6c      	ldr	r3, [pc, #432]	; (8001598 <MX_GPIO_Init+0x1e0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a6b      	ldr	r2, [pc, #428]	; (8001598 <MX_GPIO_Init+0x1e0>)
 80013ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b69      	ldr	r3, [pc, #420]	; (8001598 <MX_GPIO_Init+0x1e0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b66      	ldr	r3, [pc, #408]	; (8001598 <MX_GPIO_Init+0x1e0>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a65      	ldr	r2, [pc, #404]	; (8001598 <MX_GPIO_Init+0x1e0>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b63      	ldr	r3, [pc, #396]	; (8001598 <MX_GPIO_Init+0x1e0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b60      	ldr	r3, [pc, #384]	; (8001598 <MX_GPIO_Init+0x1e0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a5f      	ldr	r2, [pc, #380]	; (8001598 <MX_GPIO_Init+0x1e0>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b5d      	ldr	r3, [pc, #372]	; (8001598 <MX_GPIO_Init+0x1e0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b5a      	ldr	r3, [pc, #360]	; (8001598 <MX_GPIO_Init+0x1e0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a59      	ldr	r2, [pc, #356]	; (8001598 <MX_GPIO_Init+0x1e0>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b57      	ldr	r3, [pc, #348]	; (8001598 <MX_GPIO_Init+0x1e0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001446:	4b54      	ldr	r3, [pc, #336]	; (8001598 <MX_GPIO_Init+0x1e0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a53      	ldr	r2, [pc, #332]	; (8001598 <MX_GPIO_Init+0x1e0>)
 800144c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b51      	ldr	r3, [pc, #324]	; (8001598 <MX_GPIO_Init+0x1e0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LD4_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f242 0105 	movw	r1, #8197	; 0x2005
 8001464:	484d      	ldr	r0, [pc, #308]	; (800159c <MX_GPIO_Init+0x1e4>)
 8001466:	f001 fed5 	bl	8003214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2110      	movs	r1, #16
 800146e:	484c      	ldr	r0, [pc, #304]	; (80015a0 <MX_GPIO_Init+0x1e8>)
 8001470:	f001 fed0 	bl	8003214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	f244 0181 	movw	r1, #16513	; 0x4081
 800147a:	484a      	ldr	r0, [pc, #296]	; (80015a4 <MX_GPIO_Init+0x1ec>)
 800147c:	f001 feca 	bl	8003214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001486:	4848      	ldr	r0, [pc, #288]	; (80015a8 <MX_GPIO_Init+0x1f0>)
 8001488:	f001 fec4 	bl	8003214 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD5_Pin|LD6_Pin;
 800148c:	f242 0305 	movw	r3, #8197	; 0x2005
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	483d      	ldr	r0, [pc, #244]	; (800159c <MX_GPIO_Init+0x1e4>)
 80014a6:	f001 fcf1 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF5 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10;
 80014aa:	f44f 6385 	mov.w	r3, #1064	; 0x428
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	4837      	ldr	r0, [pc, #220]	; (800159c <MX_GPIO_Init+0x1e4>)
 80014c0:	f001 fce4 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c4:	2310      	movs	r3, #16
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	4831      	ldr	r0, [pc, #196]	; (80015a0 <MX_GPIO_Init+0x1e8>)
 80014dc:	f001 fcd6 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Joystick_Button_Pin */
  GPIO_InitStruct.Pin = Joystick_Button_Pin;
 80014e0:	2340      	movs	r3, #64	; 0x40
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e4:	4b31      	ldr	r3, [pc, #196]	; (80015ac <MX_GPIO_Init+0x1f4>)
 80014e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Joystick_Button_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	482b      	ldr	r0, [pc, #172]	; (80015a0 <MX_GPIO_Init+0x1e8>)
 80014f4:	f001 fcca 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80014f8:	f244 0381 	movw	r3, #16513	; 0x4081
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4619      	mov	r1, r3
 8001510:	4824      	ldr	r0, [pc, #144]	; (80015a4 <MX_GPIO_Init+0x1ec>)
 8001512:	f001 fcbb 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001516:	f44f 7390 	mov.w	r3, #288	; 0x120
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <MX_GPIO_Init+0x1f8>)
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	4822      	ldr	r0, [pc, #136]	; (80015b4 <MX_GPIO_Init+0x1fc>)
 800152c:	f001 fcae 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_GPIO_Init+0x1f4>)
 8001536:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	481c      	ldr	r0, [pc, #112]	; (80015b4 <MX_GPIO_Init+0x1fc>)
 8001544:	f001 fca2 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Key1_Pin LCD_Key2_Pin LCD_Key3_Pin LCD_Key0_Pin */
  GPIO_InitStruct.Pin = LCD_Key1_Pin|LCD_Key2_Pin|LCD_Key3_Pin|LCD_Key0_Pin;
 8001548:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001552:	2301      	movs	r3, #1
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	4812      	ldr	r0, [pc, #72]	; (80015a8 <MX_GPIO_Init+0x1f0>)
 800155e:	f001 fc95 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001562:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	480b      	ldr	r0, [pc, #44]	; (80015a8 <MX_GPIO_Init+0x1f0>)
 800157c:	f001 fc86 	bl	8002e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2017      	movs	r0, #23
 8001586:	f001 f840 	bl	800260a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800158a:	2017      	movs	r0, #23
 800158c:	f001 f859 	bl	8002642 <HAL_NVIC_EnableIRQ>

}
 8001590:	bf00      	nop
 8001592:	3730      	adds	r7, #48	; 0x30
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	40021400 	.word	0x40021400
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020800 	.word	0x40020800
 80015ac:	10210000 	.word	0x10210000
 80015b0:	10310000 	.word	0x10310000
 80015b4:	40021800 	.word	0x40021800

080015b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	80fb      	strh	r3, [r7, #6]

	if(Encoder_button_time_start_memory_counter >= 8 ) Encoder_button_time_start_memory_counter = 0;
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <HAL_GPIO_EXTI_Callback+0xa4>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b07      	cmp	r3, #7
 80015c8:	d902      	bls.n	80015d0 <HAL_GPIO_EXTI_Callback+0x18>
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <HAL_GPIO_EXTI_Callback+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
	if(joystick_button_time_start_memory_counter >= 8 ) joystick_button_time_start_memory_counter = 0;
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_GPIO_EXTI_Callback+0xa8>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b07      	cmp	r3, #7
 80015d6:	d902      	bls.n	80015de <HAL_GPIO_EXTI_Callback+0x26>
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_GPIO_EXTI_Callback+0xa8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
	switch(GPIO_Pin)
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015e4:	d031      	beq.n	800164a <HAL_GPIO_EXTI_Callback+0x92>
 80015e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015ea:	dc32      	bgt.n	8001652 <HAL_GPIO_EXTI_Callback+0x9a>
 80015ec:	2b80      	cmp	r3, #128	; 0x80
 80015ee:	d01b      	beq.n	8001628 <HAL_GPIO_EXTI_Callback+0x70>
 80015f0:	2b80      	cmp	r3, #128	; 0x80
 80015f2:	dc2e      	bgt.n	8001652 <HAL_GPIO_EXTI_Callback+0x9a>
 80015f4:	2b20      	cmp	r3, #32
 80015f6:	d002      	beq.n	80015fe <HAL_GPIO_EXTI_Callback+0x46>
 80015f8:	2b40      	cmp	r3, #64	; 0x40
 80015fa:	d004      	beq.n	8001606 <HAL_GPIO_EXTI_Callback+0x4e>
		break;
	case 256: // ENCODER_B
		change_flag(&ENC_B_flag);
		break;
	}
}
 80015fc:	e029      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x9a>
		change_flag(&ENC_A_flag);
 80015fe:	4819      	ldr	r0, [pc, #100]	; (8001664 <HAL_GPIO_EXTI_Callback+0xac>)
 8001600:	f000 f83c 	bl	800167c <change_flag>
		break;
 8001604:	e025      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x9a>
		change_flag(&joystick_button_flag);
 8001606:	4818      	ldr	r0, [pc, #96]	; (8001668 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001608:	f000 f838 	bl	800167c <change_flag>
		joystick_button_time_start[joystick_button_time_start_memory_counter++] = HAL_GetTick();
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_GPIO_EXTI_Callback+0xa8>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	b2d1      	uxtb	r1, r2
 8001614:	4a12      	ldr	r2, [pc, #72]	; (8001660 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001616:	7011      	strb	r1, [r2, #0]
 8001618:	461c      	mov	r4, r3
 800161a:	f000 fad3 	bl	8001bc4 <HAL_GetTick>
 800161e:	4603      	mov	r3, r0
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001622:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		break;
 8001626:	e014      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x9a>
		change_flag(&ENC_BUTTON_flag);
 8001628:	4811      	ldr	r0, [pc, #68]	; (8001670 <HAL_GPIO_EXTI_Callback+0xb8>)
 800162a:	f000 f827 	bl	800167c <change_flag>
		Encoder_button_time_start[Encoder_button_time_start_memory_counter++] = HAL_GetTick();
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	b2d1      	uxtb	r1, r2
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001638:	7011      	strb	r1, [r2, #0]
 800163a:	461c      	mov	r4, r3
 800163c:	f000 fac2 	bl	8001bc4 <HAL_GetTick>
 8001640:	4603      	mov	r3, r0
 8001642:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001644:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		break;
 8001648:	e003      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x9a>
		change_flag(&ENC_B_flag);
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <HAL_GPIO_EXTI_Callback+0xc0>)
 800164c:	f000 f816 	bl	800167c <change_flag>
		break;
 8001650:	bf00      	nop
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}
 800165a:	bf00      	nop
 800165c:	2000003c 	.word	0x2000003c
 8001660:	20000031 	.word	0x20000031
 8001664:	20000039 	.word	0x20000039
 8001668:	20000030 	.word	0x20000030
 800166c:	2000012c 	.word	0x2000012c
 8001670:	2000003b 	.word	0x2000003b
 8001674:	20000154 	.word	0x20000154
 8001678:	2000003a 	.word	0x2000003a

0800167c <change_flag>:
void change_flag(uint8_t *flag)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	if(*flag == 0)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <change_flag+0x16>
	{
		*flag = 1;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
	}
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	adc_flag = 1;
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <HAL_ADC_ConvCpltCallback+0x1c>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000038 	.word	0x20000038

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80016c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016cc:	4801      	ldr	r0, [pc, #4]	; (80016d4 <Error_Handler+0x14>)
 80016ce:	f001 fdba 	bl	8003246 <HAL_GPIO_TogglePin>
 80016d2:	e7f9      	b.n	80016c8 <Error_Handler+0x8>
 80016d4:	40020400 	.word	0x40020400

080016d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_MspInit+0x44>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_MspInit+0x44>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_MspInit+0x44>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_MspInit+0x44>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_MspInit+0x44>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_MspInit+0x44>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a39      	ldr	r2, [pc, #228]	; (8001824 <HAL_ADC_MspInit+0x104>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d16b      	bne.n	800181a <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_ADC_MspInit+0x108>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a38      	ldr	r2, [pc, #224]	; (8001828 <HAL_ADC_MspInit+0x108>)
 8001748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b36      	ldr	r3, [pc, #216]	; (8001828 <HAL_ADC_MspInit+0x108>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175a:	4b33      	ldr	r3, [pc, #204]	; (8001828 <HAL_ADC_MspInit+0x108>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a32      	ldr	r2, [pc, #200]	; (8001828 <HAL_ADC_MspInit+0x108>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <HAL_ADC_MspInit+0x108>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_ADC_MspInit+0x108>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a2c      	ldr	r2, [pc, #176]	; (8001828 <HAL_ADC_MspInit+0x108>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <HAL_ADC_MspInit+0x108>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800178a:	2301      	movs	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178e:	2303      	movs	r3, #3
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	4823      	ldr	r0, [pc, #140]	; (800182c <HAL_ADC_MspInit+0x10c>)
 800179e:	f001 fb75 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017a2:	2308      	movs	r3, #8
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a6:	2303      	movs	r3, #3
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	481e      	ldr	r0, [pc, #120]	; (8001830 <HAL_ADC_MspInit+0x110>)
 80017b6:	f001 fb69 	bl	8002e8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <HAL_ADC_MspInit+0x114>)
 80017bc:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <HAL_ADC_MspInit+0x118>)
 80017be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <HAL_ADC_MspInit+0x114>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_ADC_MspInit+0x114>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_ADC_MspInit+0x114>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_ADC_MspInit+0x114>)
 80017d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <HAL_ADC_MspInit+0x114>)
 80017dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_ADC_MspInit+0x114>)
 80017e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_ADC_MspInit+0x114>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_ADC_MspInit+0x114>)
 80017f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_ADC_MspInit+0x114>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <HAL_ADC_MspInit+0x114>)
 8001800:	f000 ff3a 	bl	8002678 <HAL_DMA_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800180a:	f7ff ff59 	bl	80016c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a08      	ldr	r2, [pc, #32]	; (8001834 <HAL_ADC_MspInit+0x114>)
 8001812:	639a      	str	r2, [r3, #56]	; 0x38
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_ADC_MspInit+0x114>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	; 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40012000 	.word	0x40012000
 8001828:	40023800 	.word	0x40023800
 800182c:	40020800 	.word	0x40020800
 8001830:	40020000 	.word	0x40020000
 8001834:	200001c8 	.word	0x200001c8
 8001838:	40026410 	.word	0x40026410

0800183c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_SPI_MspInit+0x7c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d127      	bne.n	80018ae <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_SPI_MspInit+0x80>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a16      	ldr	r2, [pc, #88]	; (80018bc <HAL_SPI_MspInit+0x80>)
 8001864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_SPI_MspInit+0x80>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_SPI_MspInit+0x80>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a10      	ldr	r2, [pc, #64]	; (80018bc <HAL_SPI_MspInit+0x80>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_SPI_MspInit+0x80>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800188e:	23a0      	movs	r3, #160	; 0xa0
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800189e:	2305      	movs	r3, #5
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <HAL_SPI_MspInit+0x84>)
 80018aa:	f001 faef 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40013000 	.word	0x40013000
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000

080018c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_TIM_Base_MspInit+0x38>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d10b      	bne.n	80018ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_TIM_Base_MspInit+0x3c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_TIM_Base_MspInit+0x3c>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_TIM_Base_MspInit+0x3c>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40000800 	.word	0x40000800
 8001900:	40023800 	.word	0x40023800

08001904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a11      	ldr	r2, [pc, #68]	; (8001968 <HAL_TIM_MspPostInit+0x64>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d11b      	bne.n	800195e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_TIM_MspPostInit+0x68>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_TIM_MspPostInit+0x68>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_TIM_MspPostInit+0x68>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = LCD_BackLight_Pin;
 800193e:	2340      	movs	r3, #64	; 0x40
 8001940:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800194e:	2302      	movs	r3, #2
 8001950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BackLight_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	4619      	mov	r1, r3
 8001958:	4805      	ldr	r0, [pc, #20]	; (8001970 <HAL_TIM_MspPostInit+0x6c>)
 800195a:	f001 fa97 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40000800 	.word	0x40000800
 800196c:	40023800 	.word	0x40023800
 8001970:	40020400 	.word	0x40020400

08001974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1b      	ldr	r2, [pc, #108]	; (8001a00 <HAL_UART_MspInit+0x8c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d12f      	bne.n	80019f6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_UART_MspInit+0x90>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a1a      	ldr	r2, [pc, #104]	; (8001a04 <HAL_UART_MspInit+0x90>)
 800199c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_UART_MspInit+0x90>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_UART_MspInit+0x90>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <HAL_UART_MspInit+0x90>)
 80019b4:	f043 0320 	orr.w	r3, r3, #32
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_UART_MspInit+0x90>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019c6:	23c0      	movs	r3, #192	; 0xc0
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80019d6:	2308      	movs	r3, #8
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4809      	ldr	r0, [pc, #36]	; (8001a08 <HAL_UART_MspInit+0x94>)
 80019e2:	f001 fa53 	bl	8002e8c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	2052      	movs	r0, #82	; 0x52
 80019ec:	f000 fe0d 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80019f0:	2052      	movs	r0, #82	; 0x52
 80019f2:	f000 fe26 	bl	8002642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3728      	adds	r7, #40	; 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40007800 	.word	0x40007800
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40021400 	.word	0x40021400

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <NMI_Handler+0x4>

08001a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <MemManage_Handler+0x4>

08001a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a58:	f000 f8a0 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001a64:	2020      	movs	r0, #32
 8001a66:	f001 fc09 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001a6a:	2040      	movs	r0, #64	; 0x40
 8001a6c:	f001 fc06 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a70:	2080      	movs	r0, #128	; 0x80
 8001a72:	f001 fc03 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a76:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a7a:	f001 fbff 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <DMA2_Stream0_IRQHandler+0x10>)
 8001a8a:	f000 ff95 	bl	80029b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200001c8 	.word	0x200001c8

08001a98 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <UART7_IRQHandler+0x10>)
 8001a9e:	f003 ff2d 	bl	80058fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	2000005c 	.word	0x2000005c

08001aac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ad6:	490e      	ldr	r1, [pc, #56]	; (8001b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aec:	4c0b      	ldr	r4, [pc, #44]	; (8001b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001afa:	f7ff ffd7 	bl	8001aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afe:	f004 fd4f 	bl	80065a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b02:	f7ff f949 	bl	8000d98 <main>
  bx  lr    
 8001b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b14:	080066b4 	.word	0x080066b4
  ldr r2, =_sbss
 8001b18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b1c:	20000290 	.word	0x20000290

08001b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC_IRQHandler>

08001b22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b26:	2003      	movs	r0, #3
 8001b28:	f000 fd64 	bl	80025f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f000 f805 	bl	8001b3c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b32:	f7ff fdd1 	bl	80016d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 fd7f 	bl	800265e <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 fd47 	bl	800260a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20000008 	.word	0x20000008
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	2000028c 	.word	0x2000028c

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000028c 	.word	0x2000028c

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff ffee 	bl	8001bc4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_Delay+0x44>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000008 	.word	0x20000008

08001c24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e031      	b.n	8001c9e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fd6c 	bl	8001720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_ADC_Init+0x84>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	f043 0202 	orr.w	r2, r3, #2
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fa72 	bl	800215c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f023 0303 	bic.w	r3, r3, #3
 8001c86:	f043 0201 	orr.w	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c8e:	e001      	b.n	8001c94 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	ffffeefd 	.word	0xffffeefd

08001cac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_Start_DMA+0x1e>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e0d4      	b.n	8001e74 <HAL_ADC_Start_DMA+0x1c8>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d018      	beq.n	8001d12 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001cf0:	4b62      	ldr	r3, [pc, #392]	; (8001e7c <HAL_ADC_Start_DMA+0x1d0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a62      	ldr	r2, [pc, #392]	; (8001e80 <HAL_ADC_Start_DMA+0x1d4>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0c9a      	lsrs	r2, r3, #18
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001d04:	e002      	b.n	8001d0c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f9      	bne.n	8001d06 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	f040 809c 	bne.w	8001e5a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d26:	4b57      	ldr	r3, [pc, #348]	; (8001e84 <HAL_ADC_Start_DMA+0x1d8>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5c:	d106      	bne.n	8001d6c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f023 0206 	bic.w	r2, r3, #6
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
 8001d6a:	e002      	b.n	8001d72 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7e:	4a42      	ldr	r2, [pc, #264]	; (8001e88 <HAL_ADC_Start_DMA+0x1dc>)
 8001d80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d86:	4a41      	ldr	r2, [pc, #260]	; (8001e8c <HAL_ADC_Start_DMA+0x1e0>)
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8e:	4a40      	ldr	r2, [pc, #256]	; (8001e90 <HAL_ADC_Start_DMA+0x1e4>)
 8001d90:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001daa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	334c      	adds	r3, #76	; 0x4c
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f000 fd02 	bl	80027d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001dd0:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <HAL_ADC_Start_DMA+0x1e8>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10f      	bne.n	8001dfc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d143      	bne.n	8001e72 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	e03a      	b.n	8001e72 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <HAL_ADC_Start_DMA+0x1ec>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10e      	bne.n	8001e24 <HAL_ADC_Start_DMA+0x178>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e22:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_ADC_Start_DMA+0x1e8>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d120      	bne.n	8001e72 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <HAL_ADC_Start_DMA+0x1f0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d11b      	bne.n	8001e72 <HAL_ADC_Start_DMA+0x1c6>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d114      	bne.n	8001e72 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	e00b      	b.n	8001e72 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f043 0210 	orr.w	r2, r3, #16
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	431bde83 	.word	0x431bde83
 8001e84:	fffff8fe 	.word	0xfffff8fe
 8001e88:	08002351 	.word	0x08002351
 8001e8c:	0800240b 	.word	0x0800240b
 8001e90:	08002427 	.word	0x08002427
 8001e94:	40012300 	.word	0x40012300
 8001e98:	40012000 	.word	0x40012000
 8001e9c:	40012200 	.word	0x40012200

08001ea0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1c>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e12a      	b.n	800213a <HAL_ADC_ConfigChannel+0x272>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b09      	cmp	r3, #9
 8001ef2:	d93a      	bls.n	8001f6a <HAL_ADC_ConfigChannel+0xa2>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001efc:	d035      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68d9      	ldr	r1, [r3, #12]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	3b1e      	subs	r3, #30
 8001f14:	2207      	movs	r2, #7
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	400a      	ands	r2, r1
 8001f22:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a87      	ldr	r2, [pc, #540]	; (8002148 <HAL_ADC_ConfigChannel+0x280>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d10a      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68d9      	ldr	r1, [r3, #12]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	061a      	lsls	r2, r3, #24
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f42:	e035      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68d9      	ldr	r1, [r3, #12]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	4618      	mov	r0, r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4403      	add	r3, r0
 8001f5c:	3b1e      	subs	r3, #30
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f68:	e022      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6919      	ldr	r1, [r3, #16]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	2207      	movs	r2, #7
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43da      	mvns	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6919      	ldr	r1, [r3, #16]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4403      	add	r3, r0
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b06      	cmp	r3, #6
 8001fb6:	d824      	bhi.n	8002002 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b05      	subs	r3, #5
 8001fca:	221f      	movs	r2, #31
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43da      	mvns	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3b05      	subs	r3, #5
 8001ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	635a      	str	r2, [r3, #52]	; 0x34
 8002000:	e04c      	b.n	800209c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d824      	bhi.n	8002054 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b23      	subs	r3, #35	; 0x23
 800201c:	221f      	movs	r2, #31
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	400a      	ands	r2, r1
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	4618      	mov	r0, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	3b23      	subs	r3, #35	; 0x23
 8002046:	fa00 f203 	lsl.w	r2, r0, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
 8002052:	e023      	b.n	800209c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b41      	subs	r3, #65	; 0x41
 8002066:	221f      	movs	r2, #31
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43da      	mvns	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	400a      	ands	r2, r1
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	4618      	mov	r0, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	3b41      	subs	r3, #65	; 0x41
 8002090:	fa00 f203 	lsl.w	r2, r0, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2a      	ldr	r2, [pc, #168]	; (800214c <HAL_ADC_ConfigChannel+0x284>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d10a      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x1f4>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020ae:	d105      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <HAL_ADC_ConfigChannel+0x288>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a26      	ldr	r2, [pc, #152]	; (8002150 <HAL_ADC_ConfigChannel+0x288>)
 80020b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80020ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a22      	ldr	r2, [pc, #136]	; (800214c <HAL_ADC_ConfigChannel+0x284>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d109      	bne.n	80020da <HAL_ADC_ConfigChannel+0x212>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b12      	cmp	r3, #18
 80020cc:	d105      	bne.n	80020da <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_ADC_ConfigChannel+0x288>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4a1f      	ldr	r2, [pc, #124]	; (8002150 <HAL_ADC_ConfigChannel+0x288>)
 80020d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_ADC_ConfigChannel+0x284>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d125      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x268>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_ADC_ConfigChannel+0x280>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d003      	beq.n	80020f6 <HAL_ADC_ConfigChannel+0x22e>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b11      	cmp	r3, #17
 80020f4:	d11c      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_ADC_ConfigChannel+0x288>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a15      	ldr	r2, [pc, #84]	; (8002150 <HAL_ADC_ConfigChannel+0x288>)
 80020fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002100:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <HAL_ADC_ConfigChannel+0x280>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d111      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_ADC_ConfigChannel+0x28c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_ADC_ConfigChannel+0x290>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0c9a      	lsrs	r2, r3, #18
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002122:	e002      	b.n	800212a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3b01      	subs	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f9      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	10000012 	.word	0x10000012
 800214c:	40012000 	.word	0x40012000
 8002150:	40012300 	.word	0x40012300
 8002154:	20000000 	.word	0x20000000
 8002158:	431bde83 	.word	0x431bde83

0800215c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002164:	4b78      	ldr	r3, [pc, #480]	; (8002348 <ADC_Init+0x1ec>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a77      	ldr	r2, [pc, #476]	; (8002348 <ADC_Init+0x1ec>)
 800216a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800216e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002170:	4b75      	ldr	r3, [pc, #468]	; (8002348 <ADC_Init+0x1ec>)
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4973      	ldr	r1, [pc, #460]	; (8002348 <ADC_Init+0x1ec>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800218c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	021a      	lsls	r2, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	4a58      	ldr	r2, [pc, #352]	; (800234c <ADC_Init+0x1f0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d022      	beq.n	8002236 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6899      	ldr	r1, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6899      	ldr	r1, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	e00f      	b.n	8002256 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002254:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0202 	bic.w	r2, r2, #2
 8002264:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6899      	ldr	r1, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	005a      	lsls	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002292:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	3b01      	subs	r3, #1
 80022b0:	035a      	lsls	r2, r3, #13
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	e007      	b.n	80022cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	051a      	lsls	r2, r3, #20
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800230e:	025a      	lsls	r2, r3, #9
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	029a      	lsls	r2, r3, #10
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	609a      	str	r2, [r3, #8]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40012300 	.word	0x40012300
 800234c:	0f000001 	.word	0x0f000001

08002350 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002366:	2b00      	cmp	r3, #0
 8002368:	d13c      	bne.n	80023e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d12b      	bne.n	80023dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002388:	2b00      	cmp	r3, #0
 800238a:	d127      	bne.n	80023dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002396:	2b00      	cmp	r3, #0
 8002398:	d006      	beq.n	80023a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d119      	bne.n	80023dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0220 	bic.w	r2, r2, #32
 80023b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f7ff f95f 	bl	80016a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023e2:	e00e      	b.n	8002402 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f7ff fd5f 	bl	8001eb4 <HAL_ADC_ErrorCallback>
}
 80023f6:	e004      	b.n	8002402 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4798      	blx	r3
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f7ff fd41 	bl	8001ea0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f043 0204 	orr.w	r2, r3, #4
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff fd34 	bl	8001eb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <__NVIC_SetPriorityGrouping+0x40>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002470:	4013      	ands	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	4313      	orrs	r3, r2
 8002480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002482:	4a04      	ldr	r2, [pc, #16]	; (8002494 <__NVIC_SetPriorityGrouping+0x40>)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	60d3      	str	r3, [r2, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00
 8002498:	05fa0000 	.word	0x05fa0000

0800249c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <__NVIC_GetPriorityGrouping+0x18>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f003 0307 	and.w	r3, r3, #7
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	db0b      	blt.n	80024e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	4907      	ldr	r1, [pc, #28]	; (80024f0 <__NVIC_EnableIRQ+0x38>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	2001      	movs	r0, #1
 80024da:	fa00 f202 	lsl.w	r2, r0, r2
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000e100 	.word	0xe000e100

080024f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	2b00      	cmp	r3, #0
 8002506:	db0a      	blt.n	800251e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	490c      	ldr	r1, [pc, #48]	; (8002540 <__NVIC_SetPriority+0x4c>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	0112      	lsls	r2, r2, #4
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	440b      	add	r3, r1
 8002518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800251c:	e00a      	b.n	8002534 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4908      	ldr	r1, [pc, #32]	; (8002544 <__NVIC_SetPriority+0x50>)
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	3b04      	subs	r3, #4
 800252c:	0112      	lsls	r2, r2, #4
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	440b      	add	r3, r1
 8002532:	761a      	strb	r2, [r3, #24]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000e100 	.word	0xe000e100
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f1c3 0307 	rsb	r3, r3, #7
 8002562:	2b04      	cmp	r3, #4
 8002564:	bf28      	it	cs
 8002566:	2304      	movcs	r3, #4
 8002568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3304      	adds	r3, #4
 800256e:	2b06      	cmp	r3, #6
 8002570:	d902      	bls.n	8002578 <NVIC_EncodePriority+0x30>
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3b03      	subs	r3, #3
 8002576:	e000      	b.n	800257a <NVIC_EncodePriority+0x32>
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	f04f 32ff 	mov.w	r2, #4294967295
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	401a      	ands	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002590:	f04f 31ff 	mov.w	r1, #4294967295
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43d9      	mvns	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	4313      	orrs	r3, r2
         );
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3724      	adds	r7, #36	; 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c0:	d301      	bcc.n	80025c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00f      	b.n	80025e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <SysTick_Config+0x40>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ce:	210f      	movs	r1, #15
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f7ff ff8e 	bl	80024f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <SysTick_Config+0x40>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025de:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <SysTick_Config+0x40>)
 80025e0:	2207      	movs	r2, #7
 80025e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	e000e010 	.word	0xe000e010

080025f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff29 	bl	8002454 <__NVIC_SetPriorityGrouping>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800261c:	f7ff ff3e 	bl	800249c <__NVIC_GetPriorityGrouping>
 8002620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	f7ff ff8e 	bl	8002548 <NVIC_EncodePriority>
 800262c:	4602      	mov	r2, r0
 800262e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff5d 	bl	80024f4 <__NVIC_SetPriority>
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff31 	bl	80024b8 <__NVIC_EnableIRQ>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ffa2 	bl	80025b0 <SysTick_Config>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff fa9e 	bl	8001bc4 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e099      	b.n	80027c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b4:	e00f      	b.n	80026d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026b6:	f7ff fa85 	bl	8001bc4 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b05      	cmp	r3, #5
 80026c2:	d908      	bls.n	80026d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2203      	movs	r2, #3
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e078      	b.n	80027c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e8      	bne.n	80026b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <HAL_DMA_Init+0x158>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2b04      	cmp	r3, #4
 800272e:	d107      	bne.n	8002740 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	4313      	orrs	r3, r2
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f023 0307 	bic.w	r3, r3, #7
 8002756:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	2b04      	cmp	r3, #4
 8002768:	d117      	bne.n	800279a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00e      	beq.n	800279a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fb09 	bl	8002d94 <DMA_CheckFifoParam>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2240      	movs	r2, #64	; 0x40
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002796:	2301      	movs	r3, #1
 8002798:	e016      	b.n	80027c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fac0 	bl	8002d28 <DMA_CalcBaseAndBitshift>
 80027a8:	4603      	mov	r3, r0
 80027aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	223f      	movs	r2, #63	; 0x3f
 80027b2:	409a      	lsls	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	e010803f 	.word	0xe010803f

080027d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_DMA_Start_IT+0x26>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e048      	b.n	800288c <HAL_DMA_Start_IT+0xb8>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d137      	bne.n	800287e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2202      	movs	r2, #2
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fa52 	bl	8002ccc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	223f      	movs	r2, #63	; 0x3f
 800282e:	409a      	lsls	r2, r3
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0216 	orr.w	r2, r2, #22
 8002842:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002852:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0208 	orr.w	r2, r2, #8
 800286a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e005      	b.n	800288a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002886:	2302      	movs	r3, #2
 8002888:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800288a:	7dfb      	ldrb	r3, [r7, #23]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028a2:	f7ff f98f 	bl	8001bc4 <HAL_GetTick>
 80028a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d008      	beq.n	80028c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e052      	b.n	800296c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0216 	bic.w	r2, r2, #22
 80028d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d103      	bne.n	80028f6 <HAL_DMA_Abort+0x62>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0208 	bic.w	r2, r2, #8
 8002904:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002916:	e013      	b.n	8002940 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002918:	f7ff f954 	bl	8001bc4 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b05      	cmp	r3, #5
 8002924:	d90c      	bls.n	8002940 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2203      	movs	r2, #3
 8002938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e015      	b.n	800296c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e4      	bne.n	8002918 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	223f      	movs	r2, #63	; 0x3f
 8002954:	409a      	lsls	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d004      	beq.n	8002992 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2280      	movs	r2, #128	; 0x80
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e00c      	b.n	80029ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2205      	movs	r2, #5
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80029c4:	4b92      	ldr	r3, [pc, #584]	; (8002c10 <HAL_DMA_IRQHandler+0x258>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a92      	ldr	r2, [pc, #584]	; (8002c14 <HAL_DMA_IRQHandler+0x25c>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	0a9b      	lsrs	r3, r3, #10
 80029d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	2208      	movs	r2, #8
 80029e4:	409a      	lsls	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01a      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d013      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0204 	bic.w	r2, r2, #4
 8002a0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	2208      	movs	r2, #8
 8002a12:	409a      	lsls	r2, r3
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	2201      	movs	r2, #1
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d012      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	2201      	movs	r2, #1
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	f043 0202 	orr.w	r2, r3, #2
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	2204      	movs	r2, #4
 8002a60:	409a      	lsls	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d012      	beq.n	8002a90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00b      	beq.n	8002a90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	f043 0204 	orr.w	r2, r3, #4
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	2210      	movs	r2, #16
 8002a96:	409a      	lsls	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d043      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d03c      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d018      	beq.n	8002afa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d108      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d024      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
 8002ae6:	e01f      	b.n	8002b28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01b      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
 8002af8:	e016      	b.n	8002b28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d107      	bne.n	8002b18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0208 	bic.w	r2, r2, #8
 8002b16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 808e 	beq.w	8002c56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8086 	beq.w	8002c56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	2220      	movs	r2, #32
 8002b50:	409a      	lsls	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b05      	cmp	r3, #5
 8002b60:	d136      	bne.n	8002bd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0216 	bic.w	r2, r2, #22
 8002b70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d103      	bne.n	8002b92 <HAL_DMA_IRQHandler+0x1da>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0208 	bic.w	r2, r2, #8
 8002ba0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba6:	223f      	movs	r2, #63	; 0x3f
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d07d      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
        }
        return;
 8002bce:	e078      	b.n	8002cc2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01c      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d108      	bne.n	8002bfe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d030      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
 8002bfc:	e02b      	b.n	8002c56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d027      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
 8002c0e:	e022      	b.n	8002c56 <HAL_DMA_IRQHandler+0x29e>
 8002c10:	20000000 	.word	0x20000000
 8002c14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10f      	bne.n	8002c46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0210 	bic.w	r2, r2, #16
 8002c34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d032      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d022      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2205      	movs	r2, #5
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3301      	adds	r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d307      	bcc.n	8002c9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f2      	bne.n	8002c82 <HAL_DMA_IRQHandler+0x2ca>
 8002c9c:	e000      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cc2:	bf00      	nop
    }
  }
}
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop

08002ccc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ce8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b40      	cmp	r3, #64	; 0x40
 8002cf8:	d108      	bne.n	8002d0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d0a:	e007      	b.n	8002d1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	60da      	str	r2, [r3, #12]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	3b10      	subs	r3, #16
 8002d38:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <DMA_CalcBaseAndBitshift+0x60>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d42:	4a12      	ldr	r2, [pc, #72]	; (8002d8c <DMA_CalcBaseAndBitshift+0x64>)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d908      	bls.n	8002d68 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <DMA_CalcBaseAndBitshift+0x68>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	1d1a      	adds	r2, r3, #4
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	659a      	str	r2, [r3, #88]	; 0x58
 8002d66:	e006      	b.n	8002d76 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <DMA_CalcBaseAndBitshift+0x68>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	aaaaaaab 	.word	0xaaaaaaab
 8002d8c:	0800669c 	.word	0x0800669c
 8002d90:	fffffc00 	.word	0xfffffc00

08002d94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d11f      	bne.n	8002dee <DMA_CheckFifoParam+0x5a>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d856      	bhi.n	8002e62 <DMA_CheckFifoParam+0xce>
 8002db4:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <DMA_CheckFifoParam+0x28>)
 8002db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dba:	bf00      	nop
 8002dbc:	08002dcd 	.word	0x08002dcd
 8002dc0:	08002ddf 	.word	0x08002ddf
 8002dc4:	08002dcd 	.word	0x08002dcd
 8002dc8:	08002e63 	.word	0x08002e63
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d046      	beq.n	8002e66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ddc:	e043      	b.n	8002e66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002de6:	d140      	bne.n	8002e6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dec:	e03d      	b.n	8002e6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df6:	d121      	bne.n	8002e3c <DMA_CheckFifoParam+0xa8>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d837      	bhi.n	8002e6e <DMA_CheckFifoParam+0xda>
 8002dfe:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <DMA_CheckFifoParam+0x70>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002e15 	.word	0x08002e15
 8002e08:	08002e1b 	.word	0x08002e1b
 8002e0c:	08002e15 	.word	0x08002e15
 8002e10:	08002e2d 	.word	0x08002e2d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
      break;
 8002e18:	e030      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d025      	beq.n	8002e72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2a:	e022      	b.n	8002e72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e34:	d11f      	bne.n	8002e76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e3a:	e01c      	b.n	8002e76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d903      	bls.n	8002e4a <DMA_CheckFifoParam+0xb6>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d003      	beq.n	8002e50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e48:	e018      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4e:	e015      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00e      	beq.n	8002e7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e60:	e00b      	b.n	8002e7a <DMA_CheckFifoParam+0xe6>
      break;
 8002e62:	bf00      	nop
 8002e64:	e00a      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      break;
 8002e66:	bf00      	nop
 8002e68:	e008      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      break;
 8002e6a:	bf00      	nop
 8002e6c:	e006      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      break;
 8002e6e:	bf00      	nop
 8002e70:	e004      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      break;
 8002e72:	bf00      	nop
 8002e74:	e002      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      break;   
 8002e76:	bf00      	nop
 8002e78:	e000      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      break;
 8002e7a:	bf00      	nop
    }
  } 
  
  return status; 
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop

08002e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b089      	sub	sp, #36	; 0x24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	e175      	b.n	8003198 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002eac:	2201      	movs	r2, #1
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	f040 8164 	bne.w	8003192 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d00b      	beq.n	8002eea <HAL_GPIO_Init+0x5e>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d007      	beq.n	8002eea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ede:	2b11      	cmp	r3, #17
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b12      	cmp	r3, #18
 8002ee8:	d130      	bne.n	8002f4c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f20:	2201      	movs	r2, #1
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	091b      	lsrs	r3, r3, #4
 8002f36:	f003 0201 	and.w	r2, r3, #1
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	2203      	movs	r2, #3
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d003      	beq.n	8002f8c <HAL_GPIO_Init+0x100>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b12      	cmp	r3, #18
 8002f8a:	d123      	bne.n	8002fd4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	08da      	lsrs	r2, r3, #3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3208      	adds	r2, #8
 8002f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	220f      	movs	r2, #15
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	08da      	lsrs	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3208      	adds	r2, #8
 8002fce:	69b9      	ldr	r1, [r7, #24]
 8002fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2203      	movs	r2, #3
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0203 	and.w	r2, r3, #3
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80be 	beq.w	8003192 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003016:	4b66      	ldr	r3, [pc, #408]	; (80031b0 <HAL_GPIO_Init+0x324>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	4a65      	ldr	r2, [pc, #404]	; (80031b0 <HAL_GPIO_Init+0x324>)
 800301c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003020:	6453      	str	r3, [r2, #68]	; 0x44
 8003022:	4b63      	ldr	r3, [pc, #396]	; (80031b0 <HAL_GPIO_Init+0x324>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800302e:	4a61      	ldr	r2, [pc, #388]	; (80031b4 <HAL_GPIO_Init+0x328>)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	089b      	lsrs	r3, r3, #2
 8003034:	3302      	adds	r3, #2
 8003036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	220f      	movs	r2, #15
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a58      	ldr	r2, [pc, #352]	; (80031b8 <HAL_GPIO_Init+0x32c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d037      	beq.n	80030ca <HAL_GPIO_Init+0x23e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a57      	ldr	r2, [pc, #348]	; (80031bc <HAL_GPIO_Init+0x330>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d031      	beq.n	80030c6 <HAL_GPIO_Init+0x23a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a56      	ldr	r2, [pc, #344]	; (80031c0 <HAL_GPIO_Init+0x334>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d02b      	beq.n	80030c2 <HAL_GPIO_Init+0x236>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a55      	ldr	r2, [pc, #340]	; (80031c4 <HAL_GPIO_Init+0x338>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d025      	beq.n	80030be <HAL_GPIO_Init+0x232>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a54      	ldr	r2, [pc, #336]	; (80031c8 <HAL_GPIO_Init+0x33c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d01f      	beq.n	80030ba <HAL_GPIO_Init+0x22e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a53      	ldr	r2, [pc, #332]	; (80031cc <HAL_GPIO_Init+0x340>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d019      	beq.n	80030b6 <HAL_GPIO_Init+0x22a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <HAL_GPIO_Init+0x344>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_GPIO_Init+0x226>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a51      	ldr	r2, [pc, #324]	; (80031d4 <HAL_GPIO_Init+0x348>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00d      	beq.n	80030ae <HAL_GPIO_Init+0x222>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a50      	ldr	r2, [pc, #320]	; (80031d8 <HAL_GPIO_Init+0x34c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d007      	beq.n	80030aa <HAL_GPIO_Init+0x21e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a4f      	ldr	r2, [pc, #316]	; (80031dc <HAL_GPIO_Init+0x350>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d101      	bne.n	80030a6 <HAL_GPIO_Init+0x21a>
 80030a2:	2309      	movs	r3, #9
 80030a4:	e012      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030a6:	230a      	movs	r3, #10
 80030a8:	e010      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030aa:	2308      	movs	r3, #8
 80030ac:	e00e      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030ae:	2307      	movs	r3, #7
 80030b0:	e00c      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030b2:	2306      	movs	r3, #6
 80030b4:	e00a      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030b6:	2305      	movs	r3, #5
 80030b8:	e008      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030ba:	2304      	movs	r3, #4
 80030bc:	e006      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030be:	2303      	movs	r3, #3
 80030c0:	e004      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e002      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <HAL_GPIO_Init+0x240>
 80030ca:	2300      	movs	r3, #0
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	f002 0203 	and.w	r2, r2, #3
 80030d2:	0092      	lsls	r2, r2, #2
 80030d4:	4093      	lsls	r3, r2
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030dc:	4935      	ldr	r1, [pc, #212]	; (80031b4 <HAL_GPIO_Init+0x328>)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	3302      	adds	r3, #2
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030ea:	4b3d      	ldr	r3, [pc, #244]	; (80031e0 <HAL_GPIO_Init+0x354>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800310e:	4a34      	ldr	r2, [pc, #208]	; (80031e0 <HAL_GPIO_Init+0x354>)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003114:	4b32      	ldr	r3, [pc, #200]	; (80031e0 <HAL_GPIO_Init+0x354>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003138:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <HAL_GPIO_Init+0x354>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313e:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <HAL_GPIO_Init+0x354>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003162:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <HAL_GPIO_Init+0x354>)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_GPIO_Init+0x354>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800318c:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <HAL_GPIO_Init+0x354>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3301      	adds	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	2b0f      	cmp	r3, #15
 800319c:	f67f ae86 	bls.w	8002eac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	3724      	adds	r7, #36	; 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40013800 	.word	0x40013800
 80031b8:	40020000 	.word	0x40020000
 80031bc:	40020400 	.word	0x40020400
 80031c0:	40020800 	.word	0x40020800
 80031c4:	40020c00 	.word	0x40020c00
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40021400 	.word	0x40021400
 80031d0:	40021800 	.word	0x40021800
 80031d4:	40021c00 	.word	0x40021c00
 80031d8:	40022000 	.word	0x40022000
 80031dc:	40022400 	.word	0x40022400
 80031e0:	40013c00 	.word	0x40013c00

080031e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	887b      	ldrh	r3, [r7, #2]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	e001      	b.n	8003206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]
 8003220:	4613      	mov	r3, r2
 8003222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003224:	787b      	ldrb	r3, [r7, #1]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322a:	887a      	ldrh	r2, [r7, #2]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003230:	e003      	b.n	800323a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003232:	887b      	ldrh	r3, [r7, #2]
 8003234:	041a      	lsls	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	619a      	str	r2, [r3, #24]
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003258:	887a      	ldrh	r2, [r7, #2]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4013      	ands	r3, r2
 800325e:	041a      	lsls	r2, r3, #16
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	43d9      	mvns	r1, r3
 8003264:	887b      	ldrh	r3, [r7, #2]
 8003266:	400b      	ands	r3, r1
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	619a      	str	r2, [r3, #24]
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d006      	beq.n	80032a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003292:	4a05      	ldr	r2, [pc, #20]	; (80032a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe f98c 	bl	80015b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40013c00 	.word	0x40013c00

080032ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032b4:	2300      	movs	r3, #0
 80032b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e29b      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8087 	beq.w	80033de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d0:	4b96      	ldr	r3, [pc, #600]	; (800352c <HAL_RCC_OscConfig+0x280>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d00c      	beq.n	80032f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032dc:	4b93      	ldr	r3, [pc, #588]	; (800352c <HAL_RCC_OscConfig+0x280>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d112      	bne.n	800330e <HAL_RCC_OscConfig+0x62>
 80032e8:	4b90      	ldr	r3, [pc, #576]	; (800352c <HAL_RCC_OscConfig+0x280>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f4:	d10b      	bne.n	800330e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f6:	4b8d      	ldr	r3, [pc, #564]	; (800352c <HAL_RCC_OscConfig+0x280>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d06c      	beq.n	80033dc <HAL_RCC_OscConfig+0x130>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d168      	bne.n	80033dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e275      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x7a>
 8003318:	4b84      	ldr	r3, [pc, #528]	; (800352c <HAL_RCC_OscConfig+0x280>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a83      	ldr	r2, [pc, #524]	; (800352c <HAL_RCC_OscConfig+0x280>)
 800331e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	e02e      	b.n	8003384 <HAL_RCC_OscConfig+0xd8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x9c>
 800332e:	4b7f      	ldr	r3, [pc, #508]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a7e      	ldr	r2, [pc, #504]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4b7c      	ldr	r3, [pc, #496]	; (800352c <HAL_RCC_OscConfig+0x280>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a7b      	ldr	r2, [pc, #492]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e01d      	b.n	8003384 <HAL_RCC_OscConfig+0xd8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0xc0>
 8003352:	4b76      	ldr	r3, [pc, #472]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a75      	ldr	r2, [pc, #468]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	4b73      	ldr	r3, [pc, #460]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a72      	ldr	r2, [pc, #456]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e00b      	b.n	8003384 <HAL_RCC_OscConfig+0xd8>
 800336c:	4b6f      	ldr	r3, [pc, #444]	; (800352c <HAL_RCC_OscConfig+0x280>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a6e      	ldr	r2, [pc, #440]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4b6c      	ldr	r3, [pc, #432]	; (800352c <HAL_RCC_OscConfig+0x280>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a6b      	ldr	r2, [pc, #428]	; (800352c <HAL_RCC_OscConfig+0x280>)
 800337e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fe fc1a 	bl	8001bc4 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe fc16 	bl	8001bc4 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e229      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	4b61      	ldr	r3, [pc, #388]	; (800352c <HAL_RCC_OscConfig+0x280>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0xe8>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe fc06 	bl	8001bc4 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fe fc02 	bl	8001bc4 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e215      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	4b57      	ldr	r3, [pc, #348]	; (800352c <HAL_RCC_OscConfig+0x280>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x110>
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d069      	beq.n	80034be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ea:	4b50      	ldr	r3, [pc, #320]	; (800352c <HAL_RCC_OscConfig+0x280>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f6:	4b4d      	ldr	r3, [pc, #308]	; (800352c <HAL_RCC_OscConfig+0x280>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d11c      	bne.n	800343c <HAL_RCC_OscConfig+0x190>
 8003402:	4b4a      	ldr	r3, [pc, #296]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d116      	bne.n	800343c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	4b47      	ldr	r3, [pc, #284]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <HAL_RCC_OscConfig+0x17a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d001      	beq.n	8003426 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e1e9      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003426:	4b41      	ldr	r3, [pc, #260]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	493d      	ldr	r1, [pc, #244]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	e040      	b.n	80034be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d023      	beq.n	800348c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003444:	4b39      	ldr	r3, [pc, #228]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a38      	ldr	r2, [pc, #224]	; (800352c <HAL_RCC_OscConfig+0x280>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fe fbb8 	bl	8001bc4 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003458:	f7fe fbb4 	bl	8001bc4 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1c7      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	4b30      	ldr	r3, [pc, #192]	; (800352c <HAL_RCC_OscConfig+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003476:	4b2d      	ldr	r3, [pc, #180]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4929      	ldr	r1, [pc, #164]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
 800348a:	e018      	b.n	80034be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800348c:	4b27      	ldr	r3, [pc, #156]	; (800352c <HAL_RCC_OscConfig+0x280>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a26      	ldr	r2, [pc, #152]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fe fb94 	bl	8001bc4 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a0:	f7fe fb90 	bl	8001bc4 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e1a3      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <HAL_RCC_OscConfig+0x280>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d038      	beq.n	800353c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d019      	beq.n	8003506 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d2:	4b16      	ldr	r3, [pc, #88]	; (800352c <HAL_RCC_OscConfig+0x280>)
 80034d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d6:	4a15      	ldr	r2, [pc, #84]	; (800352c <HAL_RCC_OscConfig+0x280>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034de:	f7fe fb71 	bl	8001bc4 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e6:	f7fe fb6d 	bl	8001bc4 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e180      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <HAL_RCC_OscConfig+0x280>)
 80034fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x23a>
 8003504:	e01a      	b.n	800353c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_RCC_OscConfig+0x280>)
 8003508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350a:	4a08      	ldr	r2, [pc, #32]	; (800352c <HAL_RCC_OscConfig+0x280>)
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003512:	f7fe fb57 	bl	8001bc4 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003518:	e00a      	b.n	8003530 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800351a:	f7fe fb53 	bl	8001bc4 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d903      	bls.n	8003530 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e166      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
 800352c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003530:	4b92      	ldr	r3, [pc, #584]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 8003532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ee      	bne.n	800351a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80a4 	beq.w	8003692 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354a:	4b8c      	ldr	r3, [pc, #560]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10d      	bne.n	8003572 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003556:	4b89      	ldr	r3, [pc, #548]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a88      	ldr	r2, [pc, #544]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 800355c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
 8003562:	4b86      	ldr	r3, [pc, #536]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003572:	4b83      	ldr	r3, [pc, #524]	; (8003780 <HAL_RCC_OscConfig+0x4d4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d118      	bne.n	80035b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800357e:	4b80      	ldr	r3, [pc, #512]	; (8003780 <HAL_RCC_OscConfig+0x4d4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a7f      	ldr	r2, [pc, #508]	; (8003780 <HAL_RCC_OscConfig+0x4d4>)
 8003584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358a:	f7fe fb1b 	bl	8001bc4 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003592:	f7fe fb17 	bl	8001bc4 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b64      	cmp	r3, #100	; 0x64
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e12a      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a4:	4b76      	ldr	r3, [pc, #472]	; (8003780 <HAL_RCC_OscConfig+0x4d4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d106      	bne.n	80035c6 <HAL_RCC_OscConfig+0x31a>
 80035b8:	4b70      	ldr	r3, [pc, #448]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a6f      	ldr	r2, [pc, #444]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
 80035c4:	e02d      	b.n	8003622 <HAL_RCC_OscConfig+0x376>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x33c>
 80035ce:	4b6b      	ldr	r3, [pc, #428]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	4a6a      	ldr	r2, [pc, #424]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	6713      	str	r3, [r2, #112]	; 0x70
 80035da:	4b68      	ldr	r3, [pc, #416]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	4a67      	ldr	r2, [pc, #412]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 80035e0:	f023 0304 	bic.w	r3, r3, #4
 80035e4:	6713      	str	r3, [r2, #112]	; 0x70
 80035e6:	e01c      	b.n	8003622 <HAL_RCC_OscConfig+0x376>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d10c      	bne.n	800360a <HAL_RCC_OscConfig+0x35e>
 80035f0:	4b62      	ldr	r3, [pc, #392]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	4a61      	ldr	r2, [pc, #388]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 80035f6:	f043 0304 	orr.w	r3, r3, #4
 80035fa:	6713      	str	r3, [r2, #112]	; 0x70
 80035fc:	4b5f      	ldr	r3, [pc, #380]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	4a5e      	ldr	r2, [pc, #376]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6713      	str	r3, [r2, #112]	; 0x70
 8003608:	e00b      	b.n	8003622 <HAL_RCC_OscConfig+0x376>
 800360a:	4b5c      	ldr	r3, [pc, #368]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	4a5b      	ldr	r2, [pc, #364]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	6713      	str	r3, [r2, #112]	; 0x70
 8003616:	4b59      	ldr	r3, [pc, #356]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	4a58      	ldr	r2, [pc, #352]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 800361c:	f023 0304 	bic.w	r3, r3, #4
 8003620:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d015      	beq.n	8003656 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362a:	f7fe facb 	bl	8001bc4 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003630:	e00a      	b.n	8003648 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003632:	f7fe fac7 	bl	8001bc4 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003640:	4293      	cmp	r3, r2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e0d8      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003648:	4b4c      	ldr	r3, [pc, #304]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0ee      	beq.n	8003632 <HAL_RCC_OscConfig+0x386>
 8003654:	e014      	b.n	8003680 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003656:	f7fe fab5 	bl	8001bc4 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365c:	e00a      	b.n	8003674 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365e:	f7fe fab1 	bl	8001bc4 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	f241 3288 	movw	r2, #5000	; 0x1388
 800366c:	4293      	cmp	r3, r2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e0c2      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003674:	4b41      	ldr	r3, [pc, #260]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ee      	bne.n	800365e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003680:	7dfb      	ldrb	r3, [r7, #23]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d105      	bne.n	8003692 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003686:	4b3d      	ldr	r3, [pc, #244]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	4a3c      	ldr	r2, [pc, #240]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 800368c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003690:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 80ae 	beq.w	80037f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800369c:	4b37      	ldr	r3, [pc, #220]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d06d      	beq.n	8003784 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d14b      	bne.n	8003748 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b0:	4b32      	ldr	r3, [pc, #200]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a31      	ldr	r2, [pc, #196]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 80036b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe fa82 	bl	8001bc4 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fe fa7e 	bl	8001bc4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e091      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	4b29      	ldr	r3, [pc, #164]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69da      	ldr	r2, [r3, #28]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	019b      	lsls	r3, r3, #6
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	085b      	lsrs	r3, r3, #1
 80036fa:	3b01      	subs	r3, #1
 80036fc:	041b      	lsls	r3, r3, #16
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	061b      	lsls	r3, r3, #24
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	071b      	lsls	r3, r3, #28
 800370e:	491b      	ldr	r1, [pc, #108]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a18      	ldr	r2, [pc, #96]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 800371a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800371e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fe fa50 	bl	8001bc4 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003728:	f7fe fa4c 	bl	8001bc4 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e05f      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x47c>
 8003746:	e057      	b.n	80037f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a0b      	ldr	r2, [pc, #44]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 800374e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fe fa36 	bl	8001bc4 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375c:	f7fe fa32 	bl	8001bc4 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e045      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376e:	4b03      	ldr	r3, [pc, #12]	; (800377c <HAL_RCC_OscConfig+0x4d0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x4b0>
 800377a:	e03d      	b.n	80037f8 <HAL_RCC_OscConfig+0x54c>
 800377c:	40023800 	.word	0x40023800
 8003780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003784:	4b1f      	ldr	r3, [pc, #124]	; (8003804 <HAL_RCC_OscConfig+0x558>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d030      	beq.n	80037f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d129      	bne.n	80037f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d122      	bne.n	80037f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037bc:	4293      	cmp	r3, r2
 80037be:	d119      	bne.n	80037f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	3b01      	subs	r3, #1
 80037ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d10f      	bne.n	80037f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0d0      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003820:	4b6a      	ldr	r3, [pc, #424]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d910      	bls.n	8003850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b67      	ldr	r3, [pc, #412]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 020f 	bic.w	r2, r3, #15
 8003836:	4965      	ldr	r1, [pc, #404]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b63      	ldr	r3, [pc, #396]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0b8      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d020      	beq.n	800389e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003868:	4b59      	ldr	r3, [pc, #356]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a58      	ldr	r2, [pc, #352]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 800386e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003872:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003880:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	4a52      	ldr	r2, [pc, #328]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800388a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388c:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	494d      	ldr	r1, [pc, #308]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d040      	beq.n	800392c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d115      	bne.n	80038ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e07f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d107      	bne.n	80038da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	4b41      	ldr	r3, [pc, #260]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e073      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038da:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e06b      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ea:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f023 0203 	bic.w	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4936      	ldr	r1, [pc, #216]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fc:	f7fe f962 	bl	8001bc4 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003902:	e00a      	b.n	800391a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003904:	f7fe f95e 	bl	8001bc4 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e053      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	4b2d      	ldr	r3, [pc, #180]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 020c 	and.w	r2, r3, #12
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	429a      	cmp	r2, r3
 800392a:	d1eb      	bne.n	8003904 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800392c:	4b27      	ldr	r3, [pc, #156]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d210      	bcs.n	800395c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 020f 	bic.w	r2, r3, #15
 8003942:	4922      	ldr	r1, [pc, #136]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e032      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4916      	ldr	r1, [pc, #88]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	490e      	ldr	r1, [pc, #56]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800399a:	f000 f821 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	490a      	ldr	r1, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x1cc>)
 80039ac:	5ccb      	ldrb	r3, [r1, r3]
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <HAL_RCC_ClockConfig+0x1d0>)
 80039b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_ClockConfig+0x1d4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe f8be 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023c00 	.word	0x40023c00
 80039d0:	40023800 	.word	0x40023800
 80039d4:	08006684 	.word	0x08006684
 80039d8:	20000000 	.word	0x20000000
 80039dc:	20000004 	.word	0x20000004

080039e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039e6:	2100      	movs	r1, #0
 80039e8:	6079      	str	r1, [r7, #4]
 80039ea:	2100      	movs	r1, #0
 80039ec:	60f9      	str	r1, [r7, #12]
 80039ee:	2100      	movs	r1, #0
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80039f2:	2100      	movs	r1, #0
 80039f4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f6:	4952      	ldr	r1, [pc, #328]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x160>)
 80039f8:	6889      	ldr	r1, [r1, #8]
 80039fa:	f001 010c 	and.w	r1, r1, #12
 80039fe:	2908      	cmp	r1, #8
 8003a00:	d00d      	beq.n	8003a1e <HAL_RCC_GetSysClockFreq+0x3e>
 8003a02:	2908      	cmp	r1, #8
 8003a04:	f200 8094 	bhi.w	8003b30 <HAL_RCC_GetSysClockFreq+0x150>
 8003a08:	2900      	cmp	r1, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_RCC_GetSysClockFreq+0x32>
 8003a0c:	2904      	cmp	r1, #4
 8003a0e:	d003      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x38>
 8003a10:	e08e      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a12:	4b4c      	ldr	r3, [pc, #304]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a14:	60bb      	str	r3, [r7, #8]
      break;
 8003a16:	e08e      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a18:	4b4b      	ldr	r3, [pc, #300]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a1a:	60bb      	str	r3, [r7, #8]
      break;
 8003a1c:	e08b      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a1e:	4948      	ldr	r1, [pc, #288]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a20:	6849      	ldr	r1, [r1, #4]
 8003a22:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a26:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a28:	4945      	ldr	r1, [pc, #276]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a2a:	6849      	ldr	r1, [r1, #4]
 8003a2c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a30:	2900      	cmp	r1, #0
 8003a32:	d024      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a34:	4942      	ldr	r1, [pc, #264]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a36:	6849      	ldr	r1, [r1, #4]
 8003a38:	0989      	lsrs	r1, r1, #6
 8003a3a:	4608      	mov	r0, r1
 8003a3c:	f04f 0100 	mov.w	r1, #0
 8003a40:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003a44:	f04f 0500 	mov.w	r5, #0
 8003a48:	ea00 0204 	and.w	r2, r0, r4
 8003a4c:	ea01 0305 	and.w	r3, r1, r5
 8003a50:	493d      	ldr	r1, [pc, #244]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a52:	fb01 f003 	mul.w	r0, r1, r3
 8003a56:	2100      	movs	r1, #0
 8003a58:	fb01 f102 	mul.w	r1, r1, r2
 8003a5c:	1844      	adds	r4, r0, r1
 8003a5e:	493a      	ldr	r1, [pc, #232]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a60:	fba2 0101 	umull	r0, r1, r2, r1
 8003a64:	1863      	adds	r3, r4, r1
 8003a66:	4619      	mov	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	f7fc fbe2 	bl	8000238 <__aeabi_uldivmod>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4613      	mov	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e04a      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7e:	4b30      	ldr	r3, [pc, #192]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	099b      	lsrs	r3, r3, #6
 8003a84:	461a      	mov	r2, r3
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a8e:	f04f 0100 	mov.w	r1, #0
 8003a92:	ea02 0400 	and.w	r4, r2, r0
 8003a96:	ea03 0501 	and.w	r5, r3, r1
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	014b      	lsls	r3, r1, #5
 8003aa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003aac:	0142      	lsls	r2, r0, #5
 8003aae:	4610      	mov	r0, r2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	1b00      	subs	r0, r0, r4
 8003ab4:	eb61 0105 	sbc.w	r1, r1, r5
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	018b      	lsls	r3, r1, #6
 8003ac2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ac6:	0182      	lsls	r2, r0, #6
 8003ac8:	1a12      	subs	r2, r2, r0
 8003aca:	eb63 0301 	sbc.w	r3, r3, r1
 8003ace:	f04f 0000 	mov.w	r0, #0
 8003ad2:	f04f 0100 	mov.w	r1, #0
 8003ad6:	00d9      	lsls	r1, r3, #3
 8003ad8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003adc:	00d0      	lsls	r0, r2, #3
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	1912      	adds	r2, r2, r4
 8003ae4:	eb45 0303 	adc.w	r3, r5, r3
 8003ae8:	f04f 0000 	mov.w	r0, #0
 8003aec:	f04f 0100 	mov.w	r1, #0
 8003af0:	0299      	lsls	r1, r3, #10
 8003af2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003af6:	0290      	lsls	r0, r2, #10
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4610      	mov	r0, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	f7fc fb96 	bl	8000238 <__aeabi_uldivmod>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4613      	mov	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	0c1b      	lsrs	r3, r3, #16
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	60bb      	str	r3, [r7, #8]
      break;
 8003b2e:	e002      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b30:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b32:	60bb      	str	r3, [r7, #8]
      break;
 8003b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b36:	68bb      	ldr	r3, [r7, #8]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b40:	40023800 	.word	0x40023800
 8003b44:	00f42400 	.word	0x00f42400
 8003b48:	017d7840 	.word	0x017d7840

08003b4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000000 	.word	0x20000000

08003b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b68:	f7ff fff0 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	0a9b      	lsrs	r3, r3, #10
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4903      	ldr	r1, [pc, #12]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40023800 	.word	0x40023800
 8003b88:	08006694 	.word	0x08006694

08003b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b90:	f7ff ffdc 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0b5b      	lsrs	r3, r3, #13
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4903      	ldr	r1, [pc, #12]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	08006694 	.word	0x08006694

08003bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d012      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bdc:	4b69      	ldr	r3, [pc, #420]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a68      	ldr	r2, [pc, #416]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003be6:	6093      	str	r3, [r2, #8]
 8003be8:	4b66      	ldr	r3, [pc, #408]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	4964      	ldr	r1, [pc, #400]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d017      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c0e:	4b5d      	ldr	r3, [pc, #372]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	4959      	ldr	r1, [pc, #356]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d017      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c4a:	4b4e      	ldr	r3, [pc, #312]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	494a      	ldr	r1, [pc, #296]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c68:	d101      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c86:	2301      	movs	r3, #1
 8003c88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 808b 	beq.w	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c98:	4b3a      	ldr	r3, [pc, #232]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	4a39      	ldr	r2, [pc, #228]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca4:	4b37      	ldr	r3, [pc, #220]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cb0:	4b35      	ldr	r3, [pc, #212]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a34      	ldr	r2, [pc, #208]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbc:	f7fd ff82 	bl	8001bc4 <HAL_GetTick>
 8003cc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc4:	f7fd ff7e 	bl	8001bc4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	; 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e38f      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cd6:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ce2:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d035      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d02e      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d00:	4b20      	ldr	r3, [pc, #128]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d0a:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d16:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a1a      	ldr	r2, [pc, #104]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d22:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d28:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d114      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd ff46 	bl	8001bc4 <HAL_GetTick>
 8003d38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3c:	f7fd ff42 	bl	8001bc4 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e351      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d52:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ee      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d6a:	d111      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d7a:	400b      	ands	r3, r1
 8003d7c:	4901      	ldr	r1, [pc, #4]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
 8003d82:	e00b      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40007000 	.word	0x40007000
 8003d8c:	0ffffcff 	.word	0x0ffffcff
 8003d90:	4bb3      	ldr	r3, [pc, #716]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4ab2      	ldr	r2, [pc, #712]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d9a:	6093      	str	r3, [r2, #8]
 8003d9c:	4bb0      	ldr	r3, [pc, #704]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da8:	49ad      	ldr	r1, [pc, #692]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d010      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dba:	4ba9      	ldr	r3, [pc, #676]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc0:	4aa7      	ldr	r2, [pc, #668]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003dca:	4ba5      	ldr	r3, [pc, #660]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dcc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	49a2      	ldr	r1, [pc, #648]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003de8:	4b9d      	ldr	r3, [pc, #628]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df6:	499a      	ldr	r1, [pc, #616]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e0a:	4b95      	ldr	r3, [pc, #596]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e18:	4991      	ldr	r1, [pc, #580]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e2c:	4b8c      	ldr	r3, [pc, #560]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3a:	4989      	ldr	r1, [pc, #548]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e4e:	4b84      	ldr	r3, [pc, #528]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4980      	ldr	r1, [pc, #512]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e70:	4b7b      	ldr	r3, [pc, #492]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	4978      	ldr	r1, [pc, #480]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e92:	4b73      	ldr	r3, [pc, #460]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e98:	f023 020c 	bic.w	r2, r3, #12
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea0:	496f      	ldr	r1, [pc, #444]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eb4:	4b6a      	ldr	r3, [pc, #424]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	4967      	ldr	r1, [pc, #412]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ed6:	4b62      	ldr	r3, [pc, #392]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003edc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	495e      	ldr	r1, [pc, #376]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ef8:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	4956      	ldr	r1, [pc, #344]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f1a:	4b51      	ldr	r3, [pc, #324]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f28:	494d      	ldr	r1, [pc, #308]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f3c:	4b48      	ldr	r3, [pc, #288]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	4945      	ldr	r1, [pc, #276]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f5e:	4b40      	ldr	r3, [pc, #256]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6c:	493c      	ldr	r1, [pc, #240]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f80:	4b37      	ldr	r3, [pc, #220]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f8e:	4934      	ldr	r1, [pc, #208]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d011      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fa2:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb0:	492b      	ldr	r1, [pc, #172]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fe2:	4b1f      	ldr	r3, [pc, #124]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff0:	491b      	ldr	r1, [pc, #108]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00b      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004004:	4b16      	ldr	r3, [pc, #88]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004014:	4912      	ldr	r1, [pc, #72]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00b      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004028:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004038:	4909      	ldr	r1, [pc, #36]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00f      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800404e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004052:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	e002      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800
 8004064:	4986      	ldr	r1, [pc, #536]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00b      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004078:	4b81      	ldr	r3, [pc, #516]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800407a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800407e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004088:	497d      	ldr	r1, [pc, #500]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d006      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80d6 	beq.w	8004250 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040a4:	4b76      	ldr	r3, [pc, #472]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a75      	ldr	r2, [pc, #468]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b0:	f7fd fd88 	bl	8001bc4 <HAL_GetTick>
 80040b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040b8:	f7fd fd84 	bl	8001bc4 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e195      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040ca:	4b6d      	ldr	r3, [pc, #436]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d021      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d11d      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040ea:	4b65      	ldr	r3, [pc, #404]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040f8:	4b61      	ldr	r3, [pc, #388]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040fe:	0e1b      	lsrs	r3, r3, #24
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	019a      	lsls	r2, r3, #6
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	041b      	lsls	r3, r3, #16
 8004110:	431a      	orrs	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	061b      	lsls	r3, r3, #24
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	071b      	lsls	r3, r3, #28
 800411e:	4958      	ldr	r1, [pc, #352]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d004      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02e      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004150:	d129      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004152:	4b4b      	ldr	r3, [pc, #300]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004158:	0c1b      	lsrs	r3, r3, #16
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004160:	4b47      	ldr	r3, [pc, #284]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004166:	0f1b      	lsrs	r3, r3, #28
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	019a      	lsls	r2, r3, #6
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	041b      	lsls	r3, r3, #16
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	061b      	lsls	r3, r3, #24
 8004180:	431a      	orrs	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	071b      	lsls	r3, r3, #28
 8004186:	493e      	ldr	r1, [pc, #248]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800418e:	4b3c      	ldr	r3, [pc, #240]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004194:	f023 021f 	bic.w	r2, r3, #31
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	3b01      	subs	r3, #1
 800419e:	4938      	ldr	r1, [pc, #224]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d01d      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041b2:	4b33      	ldr	r3, [pc, #204]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b8:	0e1b      	lsrs	r3, r3, #24
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041c0:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c6:	0f1b      	lsrs	r3, r3, #28
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	019a      	lsls	r2, r3, #6
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	431a      	orrs	r2, r3
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	061b      	lsls	r3, r3, #24
 80041e0:	431a      	orrs	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	071b      	lsls	r3, r3, #28
 80041e6:	4926      	ldr	r1, [pc, #152]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d011      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	019a      	lsls	r2, r3, #6
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	041b      	lsls	r3, r3, #16
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	061b      	lsls	r3, r3, #24
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	071b      	lsls	r3, r3, #28
 8004216:	491a      	ldr	r1, [pc, #104]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800421e:	4b18      	ldr	r3, [pc, #96]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a17      	ldr	r2, [pc, #92]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004224:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800422a:	f7fd fccb 	bl	8001bc4 <HAL_GetTick>
 800422e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004230:	e008      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004232:	f7fd fcc7 	bl	8001bc4 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b64      	cmp	r3, #100	; 0x64
 800423e:	d901      	bls.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e0d8      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004244:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2b01      	cmp	r3, #1
 8004254:	f040 80ce 	bne.w	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a08      	ldr	r2, [pc, #32]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800425e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004264:	f7fd fcae 	bl	8001bc4 <HAL_GetTick>
 8004268:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800426a:	e00b      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800426c:	f7fd fcaa 	bl	8001bc4 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d904      	bls.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0bb      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004284:	4b5e      	ldr	r3, [pc, #376]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800428c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004290:	d0ec      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d02e      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d12a      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042ba:	4b51      	ldr	r3, [pc, #324]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042c8:	4b4d      	ldr	r3, [pc, #308]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	0f1b      	lsrs	r3, r3, #28
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	019a      	lsls	r2, r3, #6
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	041b      	lsls	r3, r3, #16
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	061b      	lsls	r3, r3, #24
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	071b      	lsls	r3, r3, #28
 80042ee:	4944      	ldr	r1, [pc, #272]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042f6:	4b42      	ldr	r3, [pc, #264]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	3b01      	subs	r3, #1
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	493d      	ldr	r1, [pc, #244]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d022      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004324:	d11d      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004326:	4b36      	ldr	r3, [pc, #216]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	0e1b      	lsrs	r3, r3, #24
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004334:	4b32      	ldr	r3, [pc, #200]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	0f1b      	lsrs	r3, r3, #28
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	019a      	lsls	r2, r3, #6
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	431a      	orrs	r2, r3
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	061b      	lsls	r3, r3, #24
 8004354:	431a      	orrs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	071b      	lsls	r3, r3, #28
 800435a:	4929      	ldr	r1, [pc, #164]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d028      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800436e:	4b24      	ldr	r3, [pc, #144]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	0e1b      	lsrs	r3, r3, #24
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800437c:	4b20      	ldr	r3, [pc, #128]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	0c1b      	lsrs	r3, r3, #16
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	019a      	lsls	r2, r3, #6
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	041b      	lsls	r3, r3, #16
 8004394:	431a      	orrs	r2, r3
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	061b      	lsls	r3, r3, #24
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	071b      	lsls	r3, r3, #28
 80043a2:	4917      	ldr	r1, [pc, #92]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043aa:	4b15      	ldr	r3, [pc, #84]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	4911      	ldr	r1, [pc, #68]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043c0:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a0e      	ldr	r2, [pc, #56]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043cc:	f7fd fbfa 	bl	8001bc4 <HAL_GetTick>
 80043d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043d4:	f7fd fbf6 	bl	8001bc4 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	; 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e007      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f2:	d1ef      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800

08004404 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e09d      	b.n	8004552 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	2b00      	cmp	r3, #0
 800441c:	d108      	bne.n	8004430 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004426:	d009      	beq.n	800443c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	61da      	str	r2, [r3, #28]
 800442e:	e005      	b.n	800443c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fd f9f0 	bl	800183c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004472:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800447c:	d902      	bls.n	8004484 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	e002      	b.n	800448a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004488:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004492:	d007      	beq.n	80044a4 <HAL_SPI_Init+0xa0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800449c:	d002      	beq.n	80044a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e6:	ea42 0103 	orr.w	r1, r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	0c1b      	lsrs	r3, r3, #16
 8004500:	f003 0204 	and.w	r2, r3, #4
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004520:	ea42 0103 	orr.w	r1, r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69da      	ldr	r2, [r3, #28]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004540:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b088      	sub	sp, #32
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	4613      	mov	r3, r2
 8004568:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_SPI_Transmit+0x22>
 8004578:	2302      	movs	r3, #2
 800457a:	e158      	b.n	800482e <HAL_SPI_Transmit+0x2d4>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004584:	f7fd fb1e 	bl	8001bc4 <HAL_GetTick>
 8004588:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d002      	beq.n	80045a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800459a:	2302      	movs	r3, #2
 800459c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800459e:	e13d      	b.n	800481c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_SPI_Transmit+0x52>
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045b0:	e134      	b.n	800481c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2203      	movs	r2, #3
 80045b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	88fa      	ldrh	r2, [r7, #6]
 80045ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045fc:	d10f      	bne.n	800461e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800461c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004628:	2b40      	cmp	r3, #64	; 0x40
 800462a:	d007      	beq.n	800463c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800463a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004644:	d94b      	bls.n	80046de <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_SPI_Transmit+0xfa>
 800464e:	8afb      	ldrh	r3, [r7, #22]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d13e      	bne.n	80046d2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	881a      	ldrh	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	1c9a      	adds	r2, r3, #2
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004678:	e02b      	b.n	80046d2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b02      	cmp	r3, #2
 8004686:	d112      	bne.n	80046ae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	881a      	ldrh	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	1c9a      	adds	r2, r3, #2
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046ac:	e011      	b.n	80046d2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ae:	f7fd fa89 	bl	8001bc4 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d803      	bhi.n	80046c6 <HAL_SPI_Transmit+0x16c>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c4:	d102      	bne.n	80046cc <HAL_SPI_Transmit+0x172>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d102      	bne.n	80046d2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046d0:	e0a4      	b.n	800481c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1ce      	bne.n	800467a <HAL_SPI_Transmit+0x120>
 80046dc:	e07c      	b.n	80047d8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_SPI_Transmit+0x192>
 80046e6:	8afb      	ldrh	r3, [r7, #22]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d170      	bne.n	80047ce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d912      	bls.n	800471c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	881a      	ldrh	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	1c9a      	adds	r2, r3, #2
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b02      	subs	r3, #2
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	87da      	strh	r2, [r3, #62]	; 0x3e
 800471a:	e058      	b.n	80047ce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	7812      	ldrb	r2, [r2, #0]
 8004728:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004742:	e044      	b.n	80047ce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b02      	cmp	r3, #2
 8004750:	d12b      	bne.n	80047aa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d912      	bls.n	8004782 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	881a      	ldrh	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	1c9a      	adds	r2, r3, #2
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b02      	subs	r3, #2
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004780:	e025      	b.n	80047ce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	330c      	adds	r3, #12
 800478c:	7812      	ldrb	r2, [r2, #0]
 800478e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047a8:	e011      	b.n	80047ce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047aa:	f7fd fa0b 	bl	8001bc4 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d803      	bhi.n	80047c2 <HAL_SPI_Transmit+0x268>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d102      	bne.n	80047c8 <HAL_SPI_Transmit+0x26e>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d102      	bne.n	80047ce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047cc:	e026      	b.n	800481c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1b5      	bne.n	8004744 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	6839      	ldr	r1, [r7, #0]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f945 	bl	8004a6c <SPI_EndRxTxTransaction>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	77fb      	strb	r3, [r7, #31]
 8004818:	e000      	b.n	800481c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800481a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800482c:	7ffb      	ldrb	r3, [r7, #31]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	4613      	mov	r3, r2
 8004846:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004848:	f7fd f9bc 	bl	8001bc4 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	4413      	add	r3, r2
 8004856:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004858:	f7fd f9b4 	bl	8001bc4 <HAL_GetTick>
 800485c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800485e:	4b39      	ldr	r3, [pc, #228]	; (8004944 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	015b      	lsls	r3, r3, #5
 8004864:	0d1b      	lsrs	r3, r3, #20
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	fb02 f303 	mul.w	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800486e:	e054      	b.n	800491a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	d050      	beq.n	800491a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004878:	f7fd f9a4 	bl	8001bc4 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	429a      	cmp	r2, r3
 8004886:	d902      	bls.n	800488e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d13d      	bne.n	800490a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800489c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a6:	d111      	bne.n	80048cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b0:	d004      	beq.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ba:	d107      	bne.n	80048cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d4:	d10f      	bne.n	80048f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e017      	b.n	800493a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	3b01      	subs	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4013      	ands	r3, r2
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	429a      	cmp	r2, r3
 8004928:	bf0c      	ite	eq
 800492a:	2301      	moveq	r3, #1
 800492c:	2300      	movne	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	429a      	cmp	r2, r3
 8004936:	d19b      	bne.n	8004870 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3720      	adds	r7, #32
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000000 	.word	0x20000000

08004948 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004956:	f7fd f935 	bl	8001bc4 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	4413      	add	r3, r2
 8004964:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004966:	f7fd f92d 	bl	8001bc4 <HAL_GetTick>
 800496a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800496c:	4b3e      	ldr	r3, [pc, #248]	; (8004a68 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	00da      	lsls	r2, r3, #3
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	0d1b      	lsrs	r3, r3, #20
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004984:	e062      	b.n	8004a4c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800498c:	d109      	bne.n	80049a2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80049a0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a8:	d050      	beq.n	8004a4c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049aa:	f7fd f90b 	bl	8001bc4 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d902      	bls.n	80049c0 <SPI_WaitFifoStateUntilTimeout+0x78>
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d13d      	bne.n	8004a3c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d8:	d111      	bne.n	80049fe <SPI_WaitFifoStateUntilTimeout+0xb6>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e2:	d004      	beq.n	80049ee <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ec:	d107      	bne.n	80049fe <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a06:	d10f      	bne.n	8004a28 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e010      	b.n	8004a5e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d194      	bne.n	8004986 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000000 	.word	0x20000000

08004a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7ff ff5f 	bl	8004948 <SPI_WaitFifoStateUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a94:	f043 0220 	orr.w	r2, r3, #32
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e027      	b.n	8004af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2180      	movs	r1, #128	; 0x80
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff fec4 	bl	8004838 <SPI_WaitFlagStateUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aba:	f043 0220 	orr.w	r2, r3, #32
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e014      	b.n	8004af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff ff38 	bl	8004948 <SPI_WaitFifoStateUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e000      	b.n	8004af0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e049      	b.n	8004b9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fc fed0 	bl	80018c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4619      	mov	r1, r3
 8004b36:	4610      	mov	r0, r2
 8004b38:	f000 fa6c 	bl	8005014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e049      	b.n	8004c4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d106      	bne.n	8004bd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f841 	bl	8004c54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3304      	adds	r3, #4
 8004be2:	4619      	mov	r1, r3
 8004be4:	4610      	mov	r0, r2
 8004be6:	f000 fa15 	bl	8005014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e0fd      	b.n	8004e7e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b14      	cmp	r3, #20
 8004c8e:	f200 80f0 	bhi.w	8004e72 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004c92:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004ced 	.word	0x08004ced
 8004c9c:	08004e73 	.word	0x08004e73
 8004ca0:	08004e73 	.word	0x08004e73
 8004ca4:	08004e73 	.word	0x08004e73
 8004ca8:	08004d2d 	.word	0x08004d2d
 8004cac:	08004e73 	.word	0x08004e73
 8004cb0:	08004e73 	.word	0x08004e73
 8004cb4:	08004e73 	.word	0x08004e73
 8004cb8:	08004d6f 	.word	0x08004d6f
 8004cbc:	08004e73 	.word	0x08004e73
 8004cc0:	08004e73 	.word	0x08004e73
 8004cc4:	08004e73 	.word	0x08004e73
 8004cc8:	08004daf 	.word	0x08004daf
 8004ccc:	08004e73 	.word	0x08004e73
 8004cd0:	08004e73 	.word	0x08004e73
 8004cd4:	08004e73 	.word	0x08004e73
 8004cd8:	08004df1 	.word	0x08004df1
 8004cdc:	08004e73 	.word	0x08004e73
 8004ce0:	08004e73 	.word	0x08004e73
 8004ce4:	08004e73 	.word	0x08004e73
 8004ce8:	08004e31 	.word	0x08004e31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fa2e 	bl	8005154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0208 	orr.w	r2, r2, #8
 8004d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0204 	bic.w	r2, r2, #4
 8004d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6999      	ldr	r1, [r3, #24]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	619a      	str	r2, [r3, #24]
      break;
 8004d2a:	e0a3      	b.n	8004e74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fa80 	bl	8005238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6999      	ldr	r1, [r3, #24]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	021a      	lsls	r2, r3, #8
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	619a      	str	r2, [r3, #24]
      break;
 8004d6c:	e082      	b.n	8004e74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fad7 	bl	8005328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0208 	orr.w	r2, r2, #8
 8004d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0204 	bic.w	r2, r2, #4
 8004d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69d9      	ldr	r1, [r3, #28]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	61da      	str	r2, [r3, #28]
      break;
 8004dac:	e062      	b.n	8004e74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fb2d 	bl	8005414 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69d9      	ldr	r1, [r3, #28]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	021a      	lsls	r2, r3, #8
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	61da      	str	r2, [r3, #28]
      break;
 8004dee:	e041      	b.n	8004e74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fb64 	bl	80054c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0208 	orr.w	r2, r2, #8
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0204 	bic.w	r2, r2, #4
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e2e:	e021      	b.n	8004e74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fb96 	bl	8005568 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	021a      	lsls	r2, r3, #8
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e70:	e000      	b.n	8004e74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004e72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop

08004e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIM_ConfigClockSource+0x18>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e0b3      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x180>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4b55      	ldr	r3, [pc, #340]	; (8005010 <HAL_TIM_ConfigClockSource+0x188>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ec6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed8:	d03e      	beq.n	8004f58 <HAL_TIM_ConfigClockSource+0xd0>
 8004eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ede:	f200 8087 	bhi.w	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee6:	f000 8085 	beq.w	8004ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eee:	d87f      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004ef0:	2b70      	cmp	r3, #112	; 0x70
 8004ef2:	d01a      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0xa2>
 8004ef4:	2b70      	cmp	r3, #112	; 0x70
 8004ef6:	d87b      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004ef8:	2b60      	cmp	r3, #96	; 0x60
 8004efa:	d050      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x116>
 8004efc:	2b60      	cmp	r3, #96	; 0x60
 8004efe:	d877      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004f00:	2b50      	cmp	r3, #80	; 0x50
 8004f02:	d03c      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0xf6>
 8004f04:	2b50      	cmp	r3, #80	; 0x50
 8004f06:	d873      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d058      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x136>
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d86f      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004f10:	2b30      	cmp	r3, #48	; 0x30
 8004f12:	d064      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x156>
 8004f14:	2b30      	cmp	r3, #48	; 0x30
 8004f16:	d86b      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d060      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x156>
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d867      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d05c      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x156>
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d05a      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f28:	e062      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6899      	ldr	r1, [r3, #8]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f000 fbe3 	bl	8005704 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	609a      	str	r2, [r3, #8]
      break;
 8004f56:	e04e      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	6899      	ldr	r1, [r3, #8]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f000 fbcc 	bl	8005704 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f7a:	609a      	str	r2, [r3, #8]
      break;
 8004f7c:	e03b      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6859      	ldr	r1, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f000 fb40 	bl	8005610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2150      	movs	r1, #80	; 0x50
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fb99 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 8004f9c:	e02b      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6859      	ldr	r1, [r3, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f000 fb5f 	bl	800566e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2160      	movs	r1, #96	; 0x60
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fb89 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 8004fbc:	e01b      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f000 fb20 	bl	8005610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2140      	movs	r1, #64	; 0x40
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fb79 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 8004fdc:	e00b      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f000 fb70 	bl	80056ce <TIM_ITRx_SetConfig>
        break;
 8004fee:	e002      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ff0:	bf00      	nop
 8004ff2:	e000      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ff4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	fffeff88 	.word	0xfffeff88

08005014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a40      	ldr	r2, [pc, #256]	; (8005128 <TIM_Base_SetConfig+0x114>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d013      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005032:	d00f      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a3d      	ldr	r2, [pc, #244]	; (800512c <TIM_Base_SetConfig+0x118>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00b      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a3c      	ldr	r2, [pc, #240]	; (8005130 <TIM_Base_SetConfig+0x11c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d007      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a3b      	ldr	r2, [pc, #236]	; (8005134 <TIM_Base_SetConfig+0x120>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a3a      	ldr	r2, [pc, #232]	; (8005138 <TIM_Base_SetConfig+0x124>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d108      	bne.n	8005066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2f      	ldr	r2, [pc, #188]	; (8005128 <TIM_Base_SetConfig+0x114>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d02b      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005074:	d027      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2c      	ldr	r2, [pc, #176]	; (800512c <TIM_Base_SetConfig+0x118>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d023      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2b      	ldr	r2, [pc, #172]	; (8005130 <TIM_Base_SetConfig+0x11c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01f      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2a      	ldr	r2, [pc, #168]	; (8005134 <TIM_Base_SetConfig+0x120>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d01b      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a29      	ldr	r2, [pc, #164]	; (8005138 <TIM_Base_SetConfig+0x124>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d017      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a28      	ldr	r2, [pc, #160]	; (800513c <TIM_Base_SetConfig+0x128>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a27      	ldr	r2, [pc, #156]	; (8005140 <TIM_Base_SetConfig+0x12c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00f      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a26      	ldr	r2, [pc, #152]	; (8005144 <TIM_Base_SetConfig+0x130>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00b      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a25      	ldr	r2, [pc, #148]	; (8005148 <TIM_Base_SetConfig+0x134>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d007      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a24      	ldr	r2, [pc, #144]	; (800514c <TIM_Base_SetConfig+0x138>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d003      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a23      	ldr	r2, [pc, #140]	; (8005150 <TIM_Base_SetConfig+0x13c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d108      	bne.n	80050d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a0a      	ldr	r2, [pc, #40]	; (8005128 <TIM_Base_SetConfig+0x114>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_Base_SetConfig+0xf8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a0c      	ldr	r2, [pc, #48]	; (8005138 <TIM_Base_SetConfig+0x124>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d103      	bne.n	8005114 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	615a      	str	r2, [r3, #20]
}
 800511a:	bf00      	nop
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40010000 	.word	0x40010000
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40000c00 	.word	0x40000c00
 8005138:	40010400 	.word	0x40010400
 800513c:	40014000 	.word	0x40014000
 8005140:	40014400 	.word	0x40014400
 8005144:	40014800 	.word	0x40014800
 8005148:	40001800 	.word	0x40001800
 800514c:	40001c00 	.word	0x40001c00
 8005150:	40002000 	.word	0x40002000

08005154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4b2b      	ldr	r3, [pc, #172]	; (800522c <TIM_OC1_SetConfig+0xd8>)
 8005180:	4013      	ands	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0303 	bic.w	r3, r3, #3
 800518a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f023 0302 	bic.w	r3, r3, #2
 800519c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a21      	ldr	r2, [pc, #132]	; (8005230 <TIM_OC1_SetConfig+0xdc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d003      	beq.n	80051b8 <TIM_OC1_SetConfig+0x64>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a20      	ldr	r2, [pc, #128]	; (8005234 <TIM_OC1_SetConfig+0xe0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d10c      	bne.n	80051d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f023 0308 	bic.w	r3, r3, #8
 80051be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a16      	ldr	r2, [pc, #88]	; (8005230 <TIM_OC1_SetConfig+0xdc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d003      	beq.n	80051e2 <TIM_OC1_SetConfig+0x8e>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a15      	ldr	r2, [pc, #84]	; (8005234 <TIM_OC1_SetConfig+0xe0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d111      	bne.n	8005206 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	621a      	str	r2, [r3, #32]
}
 8005220:	bf00      	nop
 8005222:	371c      	adds	r7, #28
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	fffeff8f 	.word	0xfffeff8f
 8005230:	40010000 	.word	0x40010000
 8005234:	40010400 	.word	0x40010400

08005238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0210 	bic.w	r2, r3, #16
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4b2e      	ldr	r3, [pc, #184]	; (800531c <TIM_OC2_SetConfig+0xe4>)
 8005264:	4013      	ands	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0320 	bic.w	r3, r3, #32
 8005282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a23      	ldr	r2, [pc, #140]	; (8005320 <TIM_OC2_SetConfig+0xe8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d003      	beq.n	80052a0 <TIM_OC2_SetConfig+0x68>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a22      	ldr	r2, [pc, #136]	; (8005324 <TIM_OC2_SetConfig+0xec>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d10d      	bne.n	80052bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a18      	ldr	r2, [pc, #96]	; (8005320 <TIM_OC2_SetConfig+0xe8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_OC2_SetConfig+0x94>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a17      	ldr	r2, [pc, #92]	; (8005324 <TIM_OC2_SetConfig+0xec>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d113      	bne.n	80052f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	feff8fff 	.word	0xfeff8fff
 8005320:	40010000 	.word	0x40010000
 8005324:	40010400 	.word	0x40010400

08005328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4b2d      	ldr	r3, [pc, #180]	; (8005408 <TIM_OC3_SetConfig+0xe0>)
 8005354:	4013      	ands	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a22      	ldr	r2, [pc, #136]	; (800540c <TIM_OC3_SetConfig+0xe4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d003      	beq.n	800538e <TIM_OC3_SetConfig+0x66>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a21      	ldr	r2, [pc, #132]	; (8005410 <TIM_OC3_SetConfig+0xe8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10d      	bne.n	80053aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a17      	ldr	r2, [pc, #92]	; (800540c <TIM_OC3_SetConfig+0xe4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_OC3_SetConfig+0x92>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a16      	ldr	r2, [pc, #88]	; (8005410 <TIM_OC3_SetConfig+0xe8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d113      	bne.n	80053e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	621a      	str	r2, [r3, #32]
}
 80053fc:	bf00      	nop
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	fffeff8f 	.word	0xfffeff8f
 800540c:	40010000 	.word	0x40010000
 8005410:	40010400 	.word	0x40010400

08005414 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4b1e      	ldr	r3, [pc, #120]	; (80054b8 <TIM_OC4_SetConfig+0xa4>)
 8005440:	4013      	ands	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800545e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	031b      	lsls	r3, r3, #12
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a13      	ldr	r2, [pc, #76]	; (80054bc <TIM_OC4_SetConfig+0xa8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_OC4_SetConfig+0x68>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a12      	ldr	r2, [pc, #72]	; (80054c0 <TIM_OC4_SetConfig+0xac>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d109      	bne.n	8005490 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	019b      	lsls	r3, r3, #6
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	feff8fff 	.word	0xfeff8fff
 80054bc:	40010000 	.word	0x40010000
 80054c0:	40010400 	.word	0x40010400

080054c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4b1b      	ldr	r3, [pc, #108]	; (800555c <TIM_OC5_SetConfig+0x98>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005504:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	041b      	lsls	r3, r3, #16
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a12      	ldr	r2, [pc, #72]	; (8005560 <TIM_OC5_SetConfig+0x9c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_OC5_SetConfig+0x5e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a11      	ldr	r2, [pc, #68]	; (8005564 <TIM_OC5_SetConfig+0xa0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d109      	bne.n	8005536 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005528:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	621a      	str	r2, [r3, #32]
}
 8005550:	bf00      	nop
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	fffeff8f 	.word	0xfffeff8f
 8005560:	40010000 	.word	0x40010000
 8005564:	40010400 	.word	0x40010400

08005568 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <TIM_OC6_SetConfig+0x9c>)
 8005594:	4013      	ands	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	051b      	lsls	r3, r3, #20
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a13      	ldr	r2, [pc, #76]	; (8005608 <TIM_OC6_SetConfig+0xa0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_OC6_SetConfig+0x60>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a12      	ldr	r2, [pc, #72]	; (800560c <TIM_OC6_SetConfig+0xa4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d109      	bne.n	80055dc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	029b      	lsls	r3, r3, #10
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	621a      	str	r2, [r3, #32]
}
 80055f6:	bf00      	nop
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	feff8fff 	.word	0xfeff8fff
 8005608:	40010000 	.word	0x40010000
 800560c:	40010400 	.word	0x40010400

08005610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f023 0201 	bic.w	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800563a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f023 030a 	bic.w	r3, r3, #10
 800564c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800566e:	b480      	push	{r7}
 8005670:	b087      	sub	sp, #28
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f023 0210 	bic.w	r2, r3, #16
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	031b      	lsls	r3, r3, #12
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f043 0307 	orr.w	r3, r3, #7
 80056f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	609a      	str	r2, [r3, #8]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800571e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	021a      	lsls	r2, r3, #8
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	431a      	orrs	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4313      	orrs	r3, r2
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	609a      	str	r2, [r3, #8]
}
 8005738:	bf00      	nop
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005758:	2302      	movs	r3, #2
 800575a:	e06d      	b.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a30      	ldr	r2, [pc, #192]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a2f      	ldr	r2, [pc, #188]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d108      	bne.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005796:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a20      	ldr	r2, [pc, #128]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d022      	beq.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ce:	d01d      	beq.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1d      	ldr	r2, [pc, #116]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d018      	beq.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a1c      	ldr	r2, [pc, #112]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d013      	beq.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1a      	ldr	r2, [pc, #104]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00e      	beq.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a15      	ldr	r2, [pc, #84]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d009      	beq.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a16      	ldr	r2, [pc, #88]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d004      	beq.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a15      	ldr	r2, [pc, #84]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d10c      	bne.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005812:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	4313      	orrs	r3, r2
 800581c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	40010000 	.word	0x40010000
 8005848:	40010400 	.word	0x40010400
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40014000 	.word	0x40014000
 800585c:	40001800 	.word	0x40001800

08005860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e040      	b.n	80058f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fc f876 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2224      	movs	r2, #36	; 0x24
 800588c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0201 	bic.w	r2, r2, #1
 800589c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa56 	bl	8005d50 <UART_SetConfig>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e022      	b.n	80058f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fcac 	bl	8006214 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0201 	orr.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fd33 	bl	8006358 <UART_CheckIdleState>
 80058f2:	4603      	mov	r3, r0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005922:	4013      	ands	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d113      	bne.n	8005954 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00e      	beq.n	8005954 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b00      	cmp	r3, #0
 800593e:	d009      	beq.n	8005954 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 81cc 	beq.w	8005ce2 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4798      	blx	r3
      }
      return;
 8005952:	e1c6      	b.n	8005ce2 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 80e3 	beq.w	8005b22 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d105      	bne.n	8005972 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	4ba5      	ldr	r3, [pc, #660]	; (8005c00 <HAL_UART_IRQHandler+0x304>)
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 80d8 	beq.w	8005b22 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d010      	beq.n	800599e <HAL_UART_IRQHandler+0xa2>
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2201      	movs	r2, #1
 800598c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005994:	f043 0201 	orr.w	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d010      	beq.n	80059ca <HAL_UART_IRQHandler+0xce>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2202      	movs	r2, #2
 80059b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c0:	f043 0204 	orr.w	r2, r3, #4
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d010      	beq.n	80059f6 <HAL_UART_IRQHandler+0xfa>
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00b      	beq.n	80059f6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2204      	movs	r2, #4
 80059e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ec:	f043 0202 	orr.w	r2, r3, #2
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d015      	beq.n	8005a2c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d104      	bne.n	8005a14 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00b      	beq.n	8005a2c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2208      	movs	r2, #8
 8005a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a22:	f043 0208 	orr.w	r2, r3, #8
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d011      	beq.n	8005a5a <HAL_UART_IRQHandler+0x15e>
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00c      	beq.n	8005a5a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a50:	f043 0220 	orr.w	r2, r3, #32
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8140 	beq.w	8005ce6 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00c      	beq.n	8005a8a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a90:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9c:	2b40      	cmp	r3, #64	; 0x40
 8005a9e:	d004      	beq.n	8005aaa <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d031      	beq.n	8005b0e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fd19 	bl	80064e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d123      	bne.n	8005b06 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005acc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d013      	beq.n	8005afe <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ada:	4a4a      	ldr	r2, [pc, #296]	; (8005c04 <HAL_UART_IRQHandler+0x308>)
 8005adc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fc ff46 	bl	8002974 <HAL_DMA_Abort_IT>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d017      	beq.n	8005b1e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005af8:	4610      	mov	r0, r2
 8005afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	e00f      	b.n	8005b1e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f906 	bl	8005d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b04:	e00b      	b.n	8005b1e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f902 	bl	8005d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0c:	e007      	b.n	8005b1e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f8fe 	bl	8005d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005b1c:	e0e3      	b.n	8005ce6 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1e:	bf00      	nop
    return;
 8005b20:	e0e1      	b.n	8005ce6 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	f040 80a7 	bne.w	8005c7a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80a1 	beq.w	8005c7a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	f003 0310 	and.w	r3, r3, #16
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 809b 	beq.w	8005c7a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2210      	movs	r2, #16
 8005b4a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b56:	2b40      	cmp	r3, #64	; 0x40
 8005b58:	d156      	bne.n	8005c08 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005b64:	893b      	ldrh	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 80bf 	beq.w	8005cea <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b72:	893a      	ldrh	r2, [r7, #8]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	f080 80b8 	bcs.w	8005cea <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	893a      	ldrh	r2, [r7, #8]
 8005b7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8c:	d02a      	beq.n	8005be4 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bbc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0210 	bic.w	r2, r2, #16
 8005bd8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fc fe58 	bl	8002894 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f893 	bl	8005d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bfe:	e074      	b.n	8005cea <HAL_UART_IRQHandler+0x3ee>
 8005c00:	04000120 	.word	0x04000120
 8005c04:	08006541 	.word	0x08006541
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d063      	beq.n	8005cee <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8005c26:	897b      	ldrh	r3, [r7, #10]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d060      	beq.n	8005cee <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c3a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689a      	ldr	r2, [r3, #8]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0210 	bic.w	r2, r2, #16
 8005c6c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c6e:	897b      	ldrh	r3, [r7, #10]
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f856 	bl	8005d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c78:	e039      	b.n	8005cee <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00d      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x3a4>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f84f 	bl	8005d3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c9e:	e029      	b.n	8005cf4 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00d      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d008      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01a      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4798      	blx	r3
    }
    return;
 8005cc4:	e015      	b.n	8005cf2 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d011      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x3f8>
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00c      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fc46 	bl	800656c <UART_EndTransmit_IT>
    return;
 8005ce0:	e008      	b.n	8005cf4 <HAL_UART_IRQHandler+0x3f8>
      return;
 8005ce2:	bf00      	nop
 8005ce4:	e006      	b.n	8005cf4 <HAL_UART_IRQHandler+0x3f8>
    return;
 8005ce6:	bf00      	nop
 8005ce8:	e004      	b.n	8005cf4 <HAL_UART_IRQHandler+0x3f8>
      return;
 8005cea:	bf00      	nop
 8005cec:	e002      	b.n	8005cf4 <HAL_UART_IRQHandler+0x3f8>
      return;
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <HAL_UART_IRQHandler+0x3f8>
    return;
 8005cf2:	bf00      	nop
  }

}
 8005cf4:	3720      	adds	r7, #32
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop

08005cfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4ba7      	ldr	r3, [pc, #668]	; (8006018 <UART_SetConfig+0x2c8>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	6979      	ldr	r1, [r7, #20]
 8005d84:	430b      	orrs	r3, r1
 8005d86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a95      	ldr	r2, [pc, #596]	; (800601c <UART_SetConfig+0x2cc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d120      	bne.n	8005e0e <UART_SetConfig+0xbe>
 8005dcc:	4b94      	ldr	r3, [pc, #592]	; (8006020 <UART_SetConfig+0x2d0>)
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d816      	bhi.n	8005e08 <UART_SetConfig+0xb8>
 8005dda:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <UART_SetConfig+0x90>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005df1 	.word	0x08005df1
 8005de4:	08005dfd 	.word	0x08005dfd
 8005de8:	08005df7 	.word	0x08005df7
 8005dec:	08005e03 	.word	0x08005e03
 8005df0:	2301      	movs	r3, #1
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e14f      	b.n	8006096 <UART_SetConfig+0x346>
 8005df6:	2302      	movs	r3, #2
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	e14c      	b.n	8006096 <UART_SetConfig+0x346>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e149      	b.n	8006096 <UART_SetConfig+0x346>
 8005e02:	2308      	movs	r3, #8
 8005e04:	77fb      	strb	r3, [r7, #31]
 8005e06:	e146      	b.n	8006096 <UART_SetConfig+0x346>
 8005e08:	2310      	movs	r3, #16
 8005e0a:	77fb      	strb	r3, [r7, #31]
 8005e0c:	e143      	b.n	8006096 <UART_SetConfig+0x346>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a84      	ldr	r2, [pc, #528]	; (8006024 <UART_SetConfig+0x2d4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d132      	bne.n	8005e7e <UART_SetConfig+0x12e>
 8005e18:	4b81      	ldr	r3, [pc, #516]	; (8006020 <UART_SetConfig+0x2d0>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1e:	f003 030c 	and.w	r3, r3, #12
 8005e22:	2b0c      	cmp	r3, #12
 8005e24:	d828      	bhi.n	8005e78 <UART_SetConfig+0x128>
 8005e26:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <UART_SetConfig+0xdc>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e61 	.word	0x08005e61
 8005e30:	08005e79 	.word	0x08005e79
 8005e34:	08005e79 	.word	0x08005e79
 8005e38:	08005e79 	.word	0x08005e79
 8005e3c:	08005e6d 	.word	0x08005e6d
 8005e40:	08005e79 	.word	0x08005e79
 8005e44:	08005e79 	.word	0x08005e79
 8005e48:	08005e79 	.word	0x08005e79
 8005e4c:	08005e67 	.word	0x08005e67
 8005e50:	08005e79 	.word	0x08005e79
 8005e54:	08005e79 	.word	0x08005e79
 8005e58:	08005e79 	.word	0x08005e79
 8005e5c:	08005e73 	.word	0x08005e73
 8005e60:	2300      	movs	r3, #0
 8005e62:	77fb      	strb	r3, [r7, #31]
 8005e64:	e117      	b.n	8006096 <UART_SetConfig+0x346>
 8005e66:	2302      	movs	r3, #2
 8005e68:	77fb      	strb	r3, [r7, #31]
 8005e6a:	e114      	b.n	8006096 <UART_SetConfig+0x346>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	77fb      	strb	r3, [r7, #31]
 8005e70:	e111      	b.n	8006096 <UART_SetConfig+0x346>
 8005e72:	2308      	movs	r3, #8
 8005e74:	77fb      	strb	r3, [r7, #31]
 8005e76:	e10e      	b.n	8006096 <UART_SetConfig+0x346>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	77fb      	strb	r3, [r7, #31]
 8005e7c:	e10b      	b.n	8006096 <UART_SetConfig+0x346>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a69      	ldr	r2, [pc, #420]	; (8006028 <UART_SetConfig+0x2d8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d120      	bne.n	8005eca <UART_SetConfig+0x17a>
 8005e88:	4b65      	ldr	r3, [pc, #404]	; (8006020 <UART_SetConfig+0x2d0>)
 8005e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e92:	2b30      	cmp	r3, #48	; 0x30
 8005e94:	d013      	beq.n	8005ebe <UART_SetConfig+0x16e>
 8005e96:	2b30      	cmp	r3, #48	; 0x30
 8005e98:	d814      	bhi.n	8005ec4 <UART_SetConfig+0x174>
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d009      	beq.n	8005eb2 <UART_SetConfig+0x162>
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d810      	bhi.n	8005ec4 <UART_SetConfig+0x174>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <UART_SetConfig+0x15c>
 8005ea6:	2b10      	cmp	r3, #16
 8005ea8:	d006      	beq.n	8005eb8 <UART_SetConfig+0x168>
 8005eaa:	e00b      	b.n	8005ec4 <UART_SetConfig+0x174>
 8005eac:	2300      	movs	r3, #0
 8005eae:	77fb      	strb	r3, [r7, #31]
 8005eb0:	e0f1      	b.n	8006096 <UART_SetConfig+0x346>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	77fb      	strb	r3, [r7, #31]
 8005eb6:	e0ee      	b.n	8006096 <UART_SetConfig+0x346>
 8005eb8:	2304      	movs	r3, #4
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e0eb      	b.n	8006096 <UART_SetConfig+0x346>
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	e0e8      	b.n	8006096 <UART_SetConfig+0x346>
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	77fb      	strb	r3, [r7, #31]
 8005ec8:	e0e5      	b.n	8006096 <UART_SetConfig+0x346>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a57      	ldr	r2, [pc, #348]	; (800602c <UART_SetConfig+0x2dc>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d120      	bne.n	8005f16 <UART_SetConfig+0x1c6>
 8005ed4:	4b52      	ldr	r3, [pc, #328]	; (8006020 <UART_SetConfig+0x2d0>)
 8005ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ede:	2bc0      	cmp	r3, #192	; 0xc0
 8005ee0:	d013      	beq.n	8005f0a <UART_SetConfig+0x1ba>
 8005ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ee4:	d814      	bhi.n	8005f10 <UART_SetConfig+0x1c0>
 8005ee6:	2b80      	cmp	r3, #128	; 0x80
 8005ee8:	d009      	beq.n	8005efe <UART_SetConfig+0x1ae>
 8005eea:	2b80      	cmp	r3, #128	; 0x80
 8005eec:	d810      	bhi.n	8005f10 <UART_SetConfig+0x1c0>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <UART_SetConfig+0x1a8>
 8005ef2:	2b40      	cmp	r3, #64	; 0x40
 8005ef4:	d006      	beq.n	8005f04 <UART_SetConfig+0x1b4>
 8005ef6:	e00b      	b.n	8005f10 <UART_SetConfig+0x1c0>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e0cb      	b.n	8006096 <UART_SetConfig+0x346>
 8005efe:	2302      	movs	r3, #2
 8005f00:	77fb      	strb	r3, [r7, #31]
 8005f02:	e0c8      	b.n	8006096 <UART_SetConfig+0x346>
 8005f04:	2304      	movs	r3, #4
 8005f06:	77fb      	strb	r3, [r7, #31]
 8005f08:	e0c5      	b.n	8006096 <UART_SetConfig+0x346>
 8005f0a:	2308      	movs	r3, #8
 8005f0c:	77fb      	strb	r3, [r7, #31]
 8005f0e:	e0c2      	b.n	8006096 <UART_SetConfig+0x346>
 8005f10:	2310      	movs	r3, #16
 8005f12:	77fb      	strb	r3, [r7, #31]
 8005f14:	e0bf      	b.n	8006096 <UART_SetConfig+0x346>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a45      	ldr	r2, [pc, #276]	; (8006030 <UART_SetConfig+0x2e0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d125      	bne.n	8005f6c <UART_SetConfig+0x21c>
 8005f20:	4b3f      	ldr	r3, [pc, #252]	; (8006020 <UART_SetConfig+0x2d0>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f2e:	d017      	beq.n	8005f60 <UART_SetConfig+0x210>
 8005f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f34:	d817      	bhi.n	8005f66 <UART_SetConfig+0x216>
 8005f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f3a:	d00b      	beq.n	8005f54 <UART_SetConfig+0x204>
 8005f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f40:	d811      	bhi.n	8005f66 <UART_SetConfig+0x216>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <UART_SetConfig+0x1fe>
 8005f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4a:	d006      	beq.n	8005f5a <UART_SetConfig+0x20a>
 8005f4c:	e00b      	b.n	8005f66 <UART_SetConfig+0x216>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	77fb      	strb	r3, [r7, #31]
 8005f52:	e0a0      	b.n	8006096 <UART_SetConfig+0x346>
 8005f54:	2302      	movs	r3, #2
 8005f56:	77fb      	strb	r3, [r7, #31]
 8005f58:	e09d      	b.n	8006096 <UART_SetConfig+0x346>
 8005f5a:	2304      	movs	r3, #4
 8005f5c:	77fb      	strb	r3, [r7, #31]
 8005f5e:	e09a      	b.n	8006096 <UART_SetConfig+0x346>
 8005f60:	2308      	movs	r3, #8
 8005f62:	77fb      	strb	r3, [r7, #31]
 8005f64:	e097      	b.n	8006096 <UART_SetConfig+0x346>
 8005f66:	2310      	movs	r3, #16
 8005f68:	77fb      	strb	r3, [r7, #31]
 8005f6a:	e094      	b.n	8006096 <UART_SetConfig+0x346>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a30      	ldr	r2, [pc, #192]	; (8006034 <UART_SetConfig+0x2e4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d125      	bne.n	8005fc2 <UART_SetConfig+0x272>
 8005f76:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <UART_SetConfig+0x2d0>)
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f84:	d017      	beq.n	8005fb6 <UART_SetConfig+0x266>
 8005f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f8a:	d817      	bhi.n	8005fbc <UART_SetConfig+0x26c>
 8005f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f90:	d00b      	beq.n	8005faa <UART_SetConfig+0x25a>
 8005f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f96:	d811      	bhi.n	8005fbc <UART_SetConfig+0x26c>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <UART_SetConfig+0x254>
 8005f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa0:	d006      	beq.n	8005fb0 <UART_SetConfig+0x260>
 8005fa2:	e00b      	b.n	8005fbc <UART_SetConfig+0x26c>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	e075      	b.n	8006096 <UART_SetConfig+0x346>
 8005faa:	2302      	movs	r3, #2
 8005fac:	77fb      	strb	r3, [r7, #31]
 8005fae:	e072      	b.n	8006096 <UART_SetConfig+0x346>
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e06f      	b.n	8006096 <UART_SetConfig+0x346>
 8005fb6:	2308      	movs	r3, #8
 8005fb8:	77fb      	strb	r3, [r7, #31]
 8005fba:	e06c      	b.n	8006096 <UART_SetConfig+0x346>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	77fb      	strb	r3, [r7, #31]
 8005fc0:	e069      	b.n	8006096 <UART_SetConfig+0x346>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1c      	ldr	r2, [pc, #112]	; (8006038 <UART_SetConfig+0x2e8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d137      	bne.n	800603c <UART_SetConfig+0x2ec>
 8005fcc:	4b14      	ldr	r3, [pc, #80]	; (8006020 <UART_SetConfig+0x2d0>)
 8005fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fda:	d017      	beq.n	800600c <UART_SetConfig+0x2bc>
 8005fdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fe0:	d817      	bhi.n	8006012 <UART_SetConfig+0x2c2>
 8005fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe6:	d00b      	beq.n	8006000 <UART_SetConfig+0x2b0>
 8005fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fec:	d811      	bhi.n	8006012 <UART_SetConfig+0x2c2>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <UART_SetConfig+0x2aa>
 8005ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff6:	d006      	beq.n	8006006 <UART_SetConfig+0x2b6>
 8005ff8:	e00b      	b.n	8006012 <UART_SetConfig+0x2c2>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	77fb      	strb	r3, [r7, #31]
 8005ffe:	e04a      	b.n	8006096 <UART_SetConfig+0x346>
 8006000:	2302      	movs	r3, #2
 8006002:	77fb      	strb	r3, [r7, #31]
 8006004:	e047      	b.n	8006096 <UART_SetConfig+0x346>
 8006006:	2304      	movs	r3, #4
 8006008:	77fb      	strb	r3, [r7, #31]
 800600a:	e044      	b.n	8006096 <UART_SetConfig+0x346>
 800600c:	2308      	movs	r3, #8
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e041      	b.n	8006096 <UART_SetConfig+0x346>
 8006012:	2310      	movs	r3, #16
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e03e      	b.n	8006096 <UART_SetConfig+0x346>
 8006018:	efff69f3 	.word	0xefff69f3
 800601c:	40011000 	.word	0x40011000
 8006020:	40023800 	.word	0x40023800
 8006024:	40004400 	.word	0x40004400
 8006028:	40004800 	.word	0x40004800
 800602c:	40004c00 	.word	0x40004c00
 8006030:	40005000 	.word	0x40005000
 8006034:	40011400 	.word	0x40011400
 8006038:	40007800 	.word	0x40007800
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a71      	ldr	r2, [pc, #452]	; (8006208 <UART_SetConfig+0x4b8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d125      	bne.n	8006092 <UART_SetConfig+0x342>
 8006046:	4b71      	ldr	r3, [pc, #452]	; (800620c <UART_SetConfig+0x4bc>)
 8006048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006050:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006054:	d017      	beq.n	8006086 <UART_SetConfig+0x336>
 8006056:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800605a:	d817      	bhi.n	800608c <UART_SetConfig+0x33c>
 800605c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006060:	d00b      	beq.n	800607a <UART_SetConfig+0x32a>
 8006062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006066:	d811      	bhi.n	800608c <UART_SetConfig+0x33c>
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <UART_SetConfig+0x324>
 800606c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006070:	d006      	beq.n	8006080 <UART_SetConfig+0x330>
 8006072:	e00b      	b.n	800608c <UART_SetConfig+0x33c>
 8006074:	2300      	movs	r3, #0
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	e00d      	b.n	8006096 <UART_SetConfig+0x346>
 800607a:	2302      	movs	r3, #2
 800607c:	77fb      	strb	r3, [r7, #31]
 800607e:	e00a      	b.n	8006096 <UART_SetConfig+0x346>
 8006080:	2304      	movs	r3, #4
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e007      	b.n	8006096 <UART_SetConfig+0x346>
 8006086:	2308      	movs	r3, #8
 8006088:	77fb      	strb	r3, [r7, #31]
 800608a:	e004      	b.n	8006096 <UART_SetConfig+0x346>
 800608c:	2310      	movs	r3, #16
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e001      	b.n	8006096 <UART_SetConfig+0x346>
 8006092:	2310      	movs	r3, #16
 8006094:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609e:	d15b      	bne.n	8006158 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80060a0:	7ffb      	ldrb	r3, [r7, #31]
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d827      	bhi.n	80060f6 <UART_SetConfig+0x3a6>
 80060a6:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <UART_SetConfig+0x35c>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	080060d1 	.word	0x080060d1
 80060b0:	080060d9 	.word	0x080060d9
 80060b4:	080060e1 	.word	0x080060e1
 80060b8:	080060f7 	.word	0x080060f7
 80060bc:	080060e7 	.word	0x080060e7
 80060c0:	080060f7 	.word	0x080060f7
 80060c4:	080060f7 	.word	0x080060f7
 80060c8:	080060f7 	.word	0x080060f7
 80060cc:	080060ef 	.word	0x080060ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d0:	f7fd fd48 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 80060d4:	61b8      	str	r0, [r7, #24]
        break;
 80060d6:	e013      	b.n	8006100 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060d8:	f7fd fd58 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 80060dc:	61b8      	str	r0, [r7, #24]
        break;
 80060de:	e00f      	b.n	8006100 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e0:	4b4b      	ldr	r3, [pc, #300]	; (8006210 <UART_SetConfig+0x4c0>)
 80060e2:	61bb      	str	r3, [r7, #24]
        break;
 80060e4:	e00c      	b.n	8006100 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060e6:	f7fd fc7b 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 80060ea:	61b8      	str	r0, [r7, #24]
        break;
 80060ec:	e008      	b.n	8006100 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f2:	61bb      	str	r3, [r7, #24]
        break;
 80060f4:	e004      	b.n	8006100 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	77bb      	strb	r3, [r7, #30]
        break;
 80060fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d074      	beq.n	80061f0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	005a      	lsls	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	085b      	lsrs	r3, r3, #1
 8006110:	441a      	add	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	fbb2 f3f3 	udiv	r3, r2, r3
 800611a:	b29b      	uxth	r3, r3
 800611c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	2b0f      	cmp	r3, #15
 8006122:	d916      	bls.n	8006152 <UART_SetConfig+0x402>
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800612a:	d212      	bcs.n	8006152 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f023 030f 	bic.w	r3, r3, #15
 8006134:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	085b      	lsrs	r3, r3, #1
 800613a:	b29b      	uxth	r3, r3
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	b29a      	uxth	r2, r3
 8006142:	89fb      	ldrh	r3, [r7, #14]
 8006144:	4313      	orrs	r3, r2
 8006146:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	89fa      	ldrh	r2, [r7, #14]
 800614e:	60da      	str	r2, [r3, #12]
 8006150:	e04e      	b.n	80061f0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	77bb      	strb	r3, [r7, #30]
 8006156:	e04b      	b.n	80061f0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006158:	7ffb      	ldrb	r3, [r7, #31]
 800615a:	2b08      	cmp	r3, #8
 800615c:	d827      	bhi.n	80061ae <UART_SetConfig+0x45e>
 800615e:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <UART_SetConfig+0x414>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	08006189 	.word	0x08006189
 8006168:	08006191 	.word	0x08006191
 800616c:	08006199 	.word	0x08006199
 8006170:	080061af 	.word	0x080061af
 8006174:	0800619f 	.word	0x0800619f
 8006178:	080061af 	.word	0x080061af
 800617c:	080061af 	.word	0x080061af
 8006180:	080061af 	.word	0x080061af
 8006184:	080061a7 	.word	0x080061a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006188:	f7fd fcec 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 800618c:	61b8      	str	r0, [r7, #24]
        break;
 800618e:	e013      	b.n	80061b8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006190:	f7fd fcfc 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 8006194:	61b8      	str	r0, [r7, #24]
        break;
 8006196:	e00f      	b.n	80061b8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006198:	4b1d      	ldr	r3, [pc, #116]	; (8006210 <UART_SetConfig+0x4c0>)
 800619a:	61bb      	str	r3, [r7, #24]
        break;
 800619c:	e00c      	b.n	80061b8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800619e:	f7fd fc1f 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 80061a2:	61b8      	str	r0, [r7, #24]
        break;
 80061a4:	e008      	b.n	80061b8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061aa:	61bb      	str	r3, [r7, #24]
        break;
 80061ac:	e004      	b.n	80061b8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	77bb      	strb	r3, [r7, #30]
        break;
 80061b6:	bf00      	nop
    }

    if (pclk != 0U)
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d018      	beq.n	80061f0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	085a      	lsrs	r2, r3, #1
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	441a      	add	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b0f      	cmp	r3, #15
 80061d8:	d908      	bls.n	80061ec <UART_SetConfig+0x49c>
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e0:	d204      	bcs.n	80061ec <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	60da      	str	r2, [r3, #12]
 80061ea:	e001      	b.n	80061f0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80061fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	40007c00 	.word	0x40007c00
 800620c:	40023800 	.word	0x40023800
 8006210:	00f42400 	.word	0x00f42400

08006214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01a      	beq.n	800632a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006312:	d10a      	bne.n	800632a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	605a      	str	r2, [r3, #4]
  }
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af02      	add	r7, sp, #8
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006368:	f7fb fc2c 	bl	8001bc4 <HAL_GetTick>
 800636c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0308 	and.w	r3, r3, #8
 8006378:	2b08      	cmp	r3, #8
 800637a:	d10e      	bne.n	800639a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800637c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f82d 	bl	80063ea <UART_WaitOnFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e023      	b.n	80063e2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d10e      	bne.n	80063c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f817 	bl	80063ea <UART_WaitOnFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e00d      	b.n	80063e2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	4613      	mov	r3, r2
 80063f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063fa:	e05e      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d05a      	beq.n	80064ba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006404:	f7fb fbde 	bl	8001bc4 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	429a      	cmp	r2, r3
 8006412:	d302      	bcc.n	800641a <UART_WaitOnFlagUntilTimeout+0x30>
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d11b      	bne.n	8006452 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006428:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2220      	movs	r2, #32
 8006444:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e043      	b.n	80064da <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	d02c      	beq.n	80064ba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800646a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800646e:	d124      	bne.n	80064ba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006478:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006488:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0201 	bic.w	r2, r2, #1
 8006498:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2220      	movs	r2, #32
 80064a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e00f      	b.n	80064da <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69da      	ldr	r2, [r3, #28]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4013      	ands	r3, r2
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	bf0c      	ite	eq
 80064ca:	2301      	moveq	r3, #1
 80064cc:	2300      	movne	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d091      	beq.n	80063fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064f8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0201 	bic.w	r2, r2, #1
 8006508:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800650e:	2b01      	cmp	r3, #1
 8006510:	d107      	bne.n	8006522 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0210 	bic.w	r2, r2, #16
 8006520:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7ff fbd6 	bl	8005d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006564:	bf00      	nop
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006582:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff fbb3 	bl	8005cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <__libc_init_array>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	4d0d      	ldr	r5, [pc, #52]	; (80065d8 <__libc_init_array+0x38>)
 80065a4:	4c0d      	ldr	r4, [pc, #52]	; (80065dc <__libc_init_array+0x3c>)
 80065a6:	1b64      	subs	r4, r4, r5
 80065a8:	10a4      	asrs	r4, r4, #2
 80065aa:	2600      	movs	r6, #0
 80065ac:	42a6      	cmp	r6, r4
 80065ae:	d109      	bne.n	80065c4 <__libc_init_array+0x24>
 80065b0:	4d0b      	ldr	r5, [pc, #44]	; (80065e0 <__libc_init_array+0x40>)
 80065b2:	4c0c      	ldr	r4, [pc, #48]	; (80065e4 <__libc_init_array+0x44>)
 80065b4:	f000 f820 	bl	80065f8 <_init>
 80065b8:	1b64      	subs	r4, r4, r5
 80065ba:	10a4      	asrs	r4, r4, #2
 80065bc:	2600      	movs	r6, #0
 80065be:	42a6      	cmp	r6, r4
 80065c0:	d105      	bne.n	80065ce <__libc_init_array+0x2e>
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c8:	4798      	blx	r3
 80065ca:	3601      	adds	r6, #1
 80065cc:	e7ee      	b.n	80065ac <__libc_init_array+0xc>
 80065ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d2:	4798      	blx	r3
 80065d4:	3601      	adds	r6, #1
 80065d6:	e7f2      	b.n	80065be <__libc_init_array+0x1e>
 80065d8:	080066ac 	.word	0x080066ac
 80065dc:	080066ac 	.word	0x080066ac
 80065e0:	080066ac 	.word	0x080066ac
 80065e4:	080066b0 	.word	0x080066b0

080065e8 <memset>:
 80065e8:	4402      	add	r2, r0
 80065ea:	4603      	mov	r3, r0
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d100      	bne.n	80065f2 <memset+0xa>
 80065f0:	4770      	bx	lr
 80065f2:	f803 1b01 	strb.w	r1, [r3], #1
 80065f6:	e7f9      	b.n	80065ec <memset+0x4>

080065f8 <_init>:
 80065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fa:	bf00      	nop
 80065fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fe:	bc08      	pop	{r3}
 8006600:	469e      	mov	lr, r3
 8006602:	4770      	bx	lr

08006604 <_fini>:
 8006604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006606:	bf00      	nop
 8006608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660a:	bc08      	pop	{r3}
 800660c:	469e      	mov	lr, r3
 800660e:	4770      	bx	lr
