
LCD_Button_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0d8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a50  0800b2d0  0800b2d0  0001b2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd20  0800bd20  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd20  0800bd20  0001bd20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd28  0800bd28  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd28  0800bd28  0001bd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd2c  0800bd2c  0001bd2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800bd30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016d4  200000a0  0800bdd0  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001774  0800bdd0  00021774  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d920  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005911  00000000  00000000  0003d9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  00043300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001808  00000000  00000000  00044df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b308  00000000  00000000  00046600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b76  00000000  00000000  00071908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001048e0  00000000  00000000  0009247e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00196d5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006948  00000000  00000000  00196db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200000a0 	.word	0x200000a0
 8000214:	00000000 	.word	0x00000000
 8000218:	0800b2b8 	.word	0x0800b2b8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000a4 	.word	0x200000a4
 8000234:	0800b2b8 	.word	0x0800b2b8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <initiate_input_channels>:
static Digital_Channel outputChannel[3];

#define ANALOG_INPUT_CH_COUNT 2
static Analog_Input_Channel analog_input_channel[ANALOG_INPUT_CH_COUNT];

void initiate_input_channels(){
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	inputChannel[0].port = GPIOF;
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <initiate_input_channels+0x40>)
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <initiate_input_channels+0x44>)
 8000538:	601a      	str	r2, [r3, #0]
	inputChannel[0].pin = GPIO_PIN_3; //EXT3
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <initiate_input_channels+0x40>)
 800053c:	2208      	movs	r2, #8
 800053e:	605a      	str	r2, [r3, #4]

	inputChannel[1].port = GPIOF;
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <initiate_input_channels+0x40>)
 8000542:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <initiate_input_channels+0x44>)
 8000544:	609a      	str	r2, [r3, #8]
	inputChannel[1].pin = GPIO_PIN_5; //EXT5
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <initiate_input_channels+0x40>)
 8000548:	2220      	movs	r2, #32
 800054a:	60da      	str	r2, [r3, #12]

	inputChannel[2].port = GPIOF;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <initiate_input_channels+0x40>)
 800054e:	4a09      	ldr	r2, [pc, #36]	; (8000574 <initiate_input_channels+0x44>)
 8000550:	611a      	str	r2, [r3, #16]
	inputChannel[2].pin = GPIO_PIN_10; //EXT10
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <initiate_input_channels+0x40>)
 8000554:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000558:	615a      	str	r2, [r3, #20]

	inputChannel[3].port = GPIOA; //Joystick button
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <initiate_input_channels+0x40>)
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <initiate_input_channels+0x48>)
 800055e:	619a      	str	r2, [r3, #24]
	inputChannel[3].pin = GPIO_PIN_6; //EXT10
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <initiate_input_channels+0x40>)
 8000562:	2240      	movs	r2, #64	; 0x40
 8000564:	61da      	str	r2, [r3, #28]
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	200000bc 	.word	0x200000bc
 8000574:	40021400 	.word	0x40021400
 8000578:	40020000 	.word	0x40020000

0800057c <initiate_output_channels>:

void initiate_output_channels(){
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	outputChannel[0].port = GPIOF;
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <initiate_output_channels+0x34>)
 8000582:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <initiate_output_channels+0x38>)
 8000584:	601a      	str	r2, [r3, #0]
	outputChannel[0].pin = GPIO_PIN_0;
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <initiate_output_channels+0x34>)
 8000588:	2201      	movs	r2, #1
 800058a:	605a      	str	r2, [r3, #4]

	outputChannel[1].port = GPIOF;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <initiate_output_channels+0x34>)
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <initiate_output_channels+0x38>)
 8000590:	609a      	str	r2, [r3, #8]
	outputChannel[1].pin = GPIO_PIN_2;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <initiate_output_channels+0x34>)
 8000594:	2204      	movs	r2, #4
 8000596:	60da      	str	r2, [r3, #12]

	outputChannel[2].port = GPIOF;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <initiate_output_channels+0x34>)
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <initiate_output_channels+0x38>)
 800059c:	611a      	str	r2, [r3, #16]
	outputChannel[2].pin = GPIO_PIN_13;
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <initiate_output_channels+0x34>)
 80005a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a4:	615a      	str	r2, [r3, #20]
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	200000dc 	.word	0x200000dc
 80005b4:	40021400 	.word	0x40021400

080005b8 <initate_analog_channels>:

void initate_analog_channels(){
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	analog_input_channel[0].ai = &adc_info;
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <initate_analog_channels+0x28>)
 80005be:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <initate_analog_channels+0x2c>)
 80005c0:	605a      	str	r2, [r3, #4]
	analog_input_channel[0].data = 0;
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <initate_analog_channels+0x28>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	801a      	strh	r2, [r3, #0]

	analog_input_channel[1].ai = &adc_info;
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <initate_analog_channels+0x28>)
 80005ca:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <initate_analog_channels+0x2c>)
 80005cc:	60da      	str	r2, [r3, #12]
	analog_input_channel[1].data = 0;
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <initate_analog_channels+0x28>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	811a      	strh	r2, [r3, #8]

}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200000f4 	.word	0x200000f4
 80005e4:	20000000 	.word	0x20000000

080005e8 <hal_gpio_write_pin>:

uint8_t uart_rx_data;

//Leds are connected to: PF0-PF2-PF13
//Please write down GPIO output function in your hardware
void hal_gpio_write_pin(uint16_t chNum, uint8_t value){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	80fb      	strh	r3, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(outputChannel[chNum].port, outputChannel[chNum].pin, value);
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <hal_gpio_write_pin+0x38>)
 80005fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000600:	4618      	mov	r0, r3
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <hal_gpio_write_pin+0x38>)
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	4413      	add	r3, r2
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	b29b      	uxth	r3, r3
 800060e:	797a      	ldrb	r2, [r7, #5]
 8000610:	4619      	mov	r1, r3
 8000612:	f003 fb65 	bl	8003ce0 <HAL_GPIO_WritePin>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000dc 	.word	0x200000dc

08000624 <hal_gpio_read_pin>:

uint8_t  hal_gpio_read_pin(uint32_t chNum){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	//return values >= 2, depicts error
	return HAL_GPIO_ReadPin(inputChannel[chNum].port, inputChannel[chNum].pin);
 800062c:	4a09      	ldr	r2, [pc, #36]	; (8000654 <hal_gpio_read_pin+0x30>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000634:	4618      	mov	r0, r3
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <hal_gpio_read_pin+0x30>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	00db      	lsls	r3, r3, #3
 800063c:	4413      	add	r3, r2
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	b29b      	uxth	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	f003 fb34 	bl	8003cb0 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0

}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000bc 	.word	0x200000bc

08000658 <hal_read_analog_ch>:

//------------------ADC readings with DMA---------------------------------------
uint32_t counter_hal_dma = 0, counter_dma_callback = 0;

uint32_t hal_read_analog_ch(uint32_t chNum){
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	Analog_Input_Channel* ch = &analog_input_channel[chNum];
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	4a11      	ldr	r2, [pc, #68]	; (80006ac <hal_read_analog_ch+0x54>)
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
	ADC_Info* ai = ch->ai;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60bb      	str	r3, [r7, #8]
	if(ai->ready_flag == 1){ //check for the conv finish
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d111      	bne.n	800069c <hal_read_analog_ch+0x44>
		//Start DMA controlled ADC single convertion
		//this adc is working on two channels IN3 and IN10
		//so there will be two channel value after one conversion
		ai->ready_flag = 0; //disable the flag to notify there is an ongoing process
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	2200      	movs	r2, #0
 800067c:	711a      	strb	r2, [r3, #4]
		HAL_ADC_Start_DMA(ai->adc, (uint32_t*) &ai->data, ai->ch_count);
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1d99      	adds	r1, r3, #6
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800068c:	461a      	mov	r2, r3
 800068e:	f001 fda3 	bl	80021d8 <HAL_ADC_Start_DMA>
		counter_hal_dma++;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <hal_read_analog_ch+0x58>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <hal_read_analog_ch+0x58>)
 800069a:	6013      	str	r3, [r2, #0]
	}

	return analog_input_channel[chNum].data;
 800069c:	4a03      	ldr	r2, [pc, #12]	; (80006ac <hal_read_analog_ch+0x54>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000f4 	.word	0x200000f4
 80006b0:	20000104 	.word	0x20000104

080006b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	Analog_Input_Channel* ch;
	ADC_Info* ai;
	for(uint8_t i=0;i<ANALOG_INPUT_CH_COUNT;i++){
 80006bc:	2300      	movs	r3, #0
 80006be:	75fb      	strb	r3, [r7, #23]
 80006c0:	e01e      	b.n	8000700 <HAL_ADC_ConvCpltCallback+0x4c>
		ch = &analog_input_channel[i];
 80006c2:	7dfb      	ldrb	r3, [r7, #23]
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <HAL_ADC_ConvCpltCallback+0x60>)
 80006c8:	4413      	add	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
		ai = ch->ai;
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	60fb      	str	r3, [r7, #12]
		if(hadc == ai->adc){
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d10e      	bne.n	80006fa <HAL_ADC_ConvCpltCallback+0x46>
			ch->data = ai->data[i];
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	88da      	ldrh	r2, [r3, #6]
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	801a      	strh	r2, [r3, #0]
			ai->ready_flag = 1;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2201      	movs	r2, #1
 80006ee:	711a      	strb	r2, [r3, #4]
			counter_dma_callback++;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_ADC_ConvCpltCallback+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_ADC_ConvCpltCallback+0x64>)
 80006f8:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0;i<ANALOG_INPUT_CH_COUNT;i++){
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
 80006fc:	3301      	adds	r3, #1
 80006fe:	75fb      	strb	r3, [r7, #23]
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d9dd      	bls.n	80006c2 <HAL_ADC_ConvCpltCallback+0xe>
		}
	}
}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	371c      	adds	r7, #28
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	200000f4 	.word	0x200000f4
 8000718:	20000108 	.word	0x20000108

0800071c <hal_get_tick>:
//-------------------------------------------------------------------------------

//Please write down "get system tick" function in your hardware
uint32_t hal_get_tick(){
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000720:	f001 fba4 	bl	8001e6c <HAL_GetTick>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	bd80      	pop	{r7, pc}

0800072a <hal_init_tick>:

void /*__attribute__((weak))*/ hal_init_tick(){
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
	HAL_InitTick(0);
 800072e:	2000      	movs	r0, #0
 8000730:	f001 fb58 	bl	8001de4 <HAL_InitTick>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <init_comm_data_service>:

//Communication Channel Adaptation

//Please write down functions for your communication channel
//And put this function right after your initialisations
void init_comm_data_service(){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(ra.comm_huart, &uart_rx_data, 1);
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <init_comm_data_service+0x18>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	4904      	ldr	r1, [pc, #16]	; (8000754 <init_comm_data_service+0x1c>)
 8000744:	4618      	mov	r0, r3
 8000746:	f006 f9e1 	bl	8006b0c <HAL_UART_Receive_IT>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000028 	.word	0x20000028
 8000754:	200003f0 	.word	0x200003f0

08000758 <init_comm_timing_service>:

//Please write down functions for communication timing services
//And put this function right after your initialisations
void init_comm_timing_service(){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(ra.comm_htim);
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <init_comm_timing_service+0x1c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f004 ff93 	bl	800568c <HAL_TIM_Base_Start_IT>
	stop_comm_timer(ra.comm_htim);
 8000766:	4b03      	ldr	r3, [pc, #12]	; (8000774 <init_comm_timing_service+0x1c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f822 	bl	80007b4 <stop_comm_timer>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000028 	.word	0x20000028

08000778 <start_comm_timer>:

void start_comm_timer(TIM_HandleTypeDef* htim){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f022 0201 	bic.w	r2, r2, #1
 800078e:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
	htim->Instance->CR1 |= 0x01; //Start Timer
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0201 	orr.w	r2, r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <stop_comm_timer>:

void stop_comm_timer(TIM_HandleTypeDef* htim){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f022 0201 	bic.w	r2, r2, #1
 80007ca:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2200      	movs	r2, #0
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <HAL_UART_RxCpltCallback>:

//Callbacks
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &uart_rx_data, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	4909      	ldr	r1, [pc, #36]	; (8000810 <HAL_UART_RxCpltCallback+0x30>)
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f006 f98d 	bl	8006b0c <HAL_UART_Receive_IT>
	start_comm_timer(ra.comm_htim);
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_UART_RxCpltCallback+0x34>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ffbe 	bl	8000778 <start_comm_timer>

	//When new data received copy this data to the runtime buffers
	Runtime_CommDataService_NewData_Received(0, &uart_rx_data, 1);
 80007fc:	2201      	movs	r2, #1
 80007fe:	4904      	ldr	r1, [pc, #16]	; (8000810 <HAL_UART_RxCpltCallback+0x30>)
 8000800:	2000      	movs	r0, #0
 8000802:	f007 fd00 	bl	8008206 <Runtime_CommDataService_NewData_Received>
	User_Callback_Function* ucf = get_ucf();
	if(ucf[MODBUS_UART_CALLBACK_FUNCTION_SLOT].f != 0){
		ucf[MODBUS_UART_CALLBACK_FUNCTION_SLOT].f(&uart_rx_data);
	}
	*/
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200003f0 	.word	0x200003f0
 8000814:	20000028 	.word	0x20000028

08000818 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	if(htim == ra.comm_htim){
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	d107      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x22>
		stop_comm_timer(ra.comm_htim);
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ffc0 	bl	80007b4 <stop_comm_timer>

		//External trigger makes runtime to process data
		//This trigging is needed for Modbus (3.5 Char)
		Runtime_CommDataService_Process_DataBuffer(0);
 8000834:	2000      	movs	r0, #0
 8000836:	f007 fd11 	bl	800825c <Runtime_CommDataService_Process_DataBuffer>
	}
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000028 	.word	0x20000028

08000848 <hal_modbus_uart_tx>:

//Modbus UART Transmit Functions
void /*__attribute__((weak))*/ hal_modbus_uart_tx(uint8_t* pData, uint16_t Size){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(ra.comm_huart, pData, Size);
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <hal_modbus_uart_tx+0x24>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	887a      	ldrh	r2, [r7, #2]
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	4618      	mov	r0, r3
 800085e:	f006 f8f9 	bl	8006a54 <HAL_UART_Transmit_IT>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000028 	.word	0x20000028

08000870 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <get_uniqueid>:

//-----------------------UNIQUE ID-----------------------------------------
void get_uniqueid(uint8_t* id, uint16_t len){
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	807b      	strh	r3, [r7, #2]
	uint32_t* buf = id;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	60fb      	str	r3, [r7, #12]
	buf[0] 	= (uint32_t) READ_REG(*((uint32_t *)UID_BASE));
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <get_uniqueid+0x38>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	601a      	str	r2, [r3, #0]
	buf[1] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x04U)));
 800089c:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <get_uniqueid+0x3c>)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3304      	adds	r3, #4
 80008a2:	6812      	ldr	r2, [r2, #0]
 80008a4:	601a      	str	r2, [r3, #0]
	buf[2] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x14U)));
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <get_uniqueid+0x40>)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3308      	adds	r3, #8
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	1ff0f420 	.word	0x1ff0f420
 80008c0:	1ff0f424 	.word	0x1ff0f424
 80008c4:	1ff0f434 	.word	0x1ff0f434

080008c8 <get_flash_memory_info>:

//---------------------Flash functions---------------------------------------
#define ADDR_FLASH_SECTOR_23     ((uint32_t)0x081E0000)
#define FLASH_MEMORY_SIZE (128*1024)

void get_flash_memory_info(uint32_t* start_addr, uint32_t* size){
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
	*start_addr = ADDR_FLASH_SECTOR_23;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a05      	ldr	r2, [pc, #20]	; (80008ec <get_flash_memory_info+0x24>)
 80008d6:	601a      	str	r2, [r3, #0]
	*size = FLASH_MEMORY_SIZE;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008de:	601a      	str	r2, [r3, #0]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	081e0000 	.word	0x081e0000

080008f0 <write_to_flash>:

uint8_t write_to_flash(uint8_t* p, uint32_t start_addr, uint16_t size)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	4613      	mov	r3, r2
 80008fc:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	757b      	strb	r3, [r7, #21]
	uint16_t i;
	uint32_t data;

	HAL_FLASH_Unlock();
 8000902:	f002 fdc9 	bl	8003498 <HAL_FLASH_Unlock>

	for (i = 0; i < size; i+=4) {
 8000906:	2300      	movs	r3, #0
 8000908:	82fb      	strh	r3, [r7, #22]
 800090a:	e01a      	b.n	8000942 <write_to_flash+0x52>
                data = *(uint32_t*)(p+i);
 800090c:	8afb      	ldrh	r3, [r7, #22]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	613b      	str	r3, [r7, #16]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_addr + i, data) == HAL_OK) ret = 1;
 8000916:	8afa      	ldrh	r2, [r7, #22]
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	18d1      	adds	r1, r2, r3
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	461a      	mov	r2, r3
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	2002      	movs	r0, #2
 8000926:	f002 fd5b 	bl	80033e0 <HAL_FLASH_Program>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <write_to_flash+0x46>
 8000930:	2301      	movs	r3, #1
 8000932:	757b      	strb	r3, [r7, #21]
 8000934:	e002      	b.n	800093c <write_to_flash+0x4c>
		else {
			ret = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	757b      	strb	r3, [r7, #21]
			break;
 800093a:	e006      	b.n	800094a <write_to_flash+0x5a>
	for (i = 0; i < size; i+=4) {
 800093c:	8afb      	ldrh	r3, [r7, #22]
 800093e:	3304      	adds	r3, #4
 8000940:	82fb      	strh	r3, [r7, #22]
 8000942:	8afa      	ldrh	r2, [r7, #22]
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	429a      	cmp	r2, r3
 8000948:	d3e0      	bcc.n	800090c <write_to_flash+0x1c>
		}
	}

	HAL_FLASH_Lock();
 800094a:	f002 fdc7 	bl	80034dc <HAL_FLASH_Lock>
}
 800094e:	bf00      	nop
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <erase_flash>:

uint8_t erase_flash(uint32_t start_addr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint32_t SectorError = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
    FLASH_EraseInitTypeDef EraseInitStruct;


	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 800096a:	f002 fd95 	bl	8003498 <HAL_FLASH_Unlock>

	/* Erase the user Flash area
	(area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS         ;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors = 1;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.Sector = FLASH_SECTOR_23;
 8000976:	2317      	movs	r3, #23
 8000978:	617b      	str	r3, [r7, #20]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 800097a:	f107 0220 	add.w	r2, r7, #32
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fee9 	bl	800375c <HAL_FLASHEx_Erase>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d003      	beq.n	8000998 <erase_flash+0x40>
	{
		ret = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000996:	e002      	b.n	800099e <erase_flash+0x46>
	}

	else ret = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return ret;
 800099e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <hal_get_encoder_value>:

//---------------------Encoder Function---------------------------------------------------
int8_t hal_get_encoder_value(uint8_t ch)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	if(ch==0){
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d105      	bne.n	80009c8 <hal_get_encoder_value+0x1c>
		return (htim1.Instance->CNT>>2);
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <hal_get_encoder_value+0x2c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	e000      	b.n	80009ca <hal_get_encoder_value+0x1e>
	}
	else{
		return 0;
 80009c8:	2300      	movs	r3, #0
	}
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	2000060c 	.word	0x2000060c

080009dc <Display_String>:

//---------------------Display FUnctions---------------------------------------------------
//Display Functions
void  Display_String(int32_t startX, int32_t startY,
												int32_t width, int32_t height,
													int32_t attr, char* str, uint16_t len){
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b089      	sub	sp, #36	; 0x24
 80009e0:	af04      	add	r7, sp, #16
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
 80009e8:	603b      	str	r3, [r7, #0]
	ST7735_FillRectangle(startX, startY, width, height, BLACK);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	b298      	uxth	r0, r3
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	b299      	uxth	r1, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	2400      	movs	r4, #0
 80009fc:	9400      	str	r4, [sp, #0]
 80009fe:	f000 fafb 	bl	8000ff8 <ST7735_FillRectangle>
	ST7735_WriteString(startX, startY, str, Font_7x10, WHITE, BLACK);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	b298      	uxth	r0, r3
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	b299      	uxth	r1, r3
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <Display_String+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	9202      	str	r2, [sp, #8]
 8000a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a14:	9201      	str	r2, [sp, #4]
 8000a16:	685a      	ldr	r2, [r3, #4]
 8000a18:	9200      	str	r2, [sp, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a1e:	f000 fa97 	bl	8000f50 <ST7735_WriteString>
	return 0;
 8000a22:	bf00      	nop
}
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd90      	pop	{r4, r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000030 	.word	0x20000030

08000a30 <Display_Number>:

void  Display_Number(int32_t startX, int32_t startY,
											int32_t width, int32_t height,
												int32_t attr, int32_t val){
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b08d      	sub	sp, #52	; 0x34
 8000a34:	af04      	add	r7, sp, #16
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]
	char str[16];
	itoa(val, str, 10);
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	220a      	movs	r2, #10
 8000a44:	4619      	mov	r1, r3
 8000a46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000a48:	f00a fbdc 	bl	800b204 <itoa>

	ST7735_FillRectangle(startX, startY, width, height, BLACK);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	b298      	uxth	r0, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	b299      	uxth	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	2400      	movs	r4, #0
 8000a5e:	9400      	str	r4, [sp, #0]
 8000a60:	f000 faca 	bl	8000ff8 <ST7735_FillRectangle>
	ST7735_WriteString(startX, startY, str, Font_7x10, WHITE, BLACK);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	b298      	uxth	r0, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	b299      	uxth	r1, r3
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <Display_Number+0x60>)
 8000a6e:	f107 0410 	add.w	r4, r7, #16
 8000a72:	2200      	movs	r2, #0
 8000a74:	9202      	str	r2, [sp, #8]
 8000a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a7a:	9201      	str	r2, [sp, #4]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	9200      	str	r2, [sp, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4622      	mov	r2, r4
 8000a84:	f000 fa64 	bl	8000f50 <ST7735_WriteString>
	return 0;
 8000a88:	bf00      	nop
}
 8000a8a:	3724      	adds	r7, #36	; 0x24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	20000030 	.word	0x20000030

08000a94 <initiate_runtime>:

void initiate_runtime()
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	  init_comm_data_service();
 8000a98:	f7ff fe4e 	bl	8000738 <init_comm_data_service>
	  init_comm_timing_service();
 8000a9c:	f7ff fe5c 	bl	8000758 <init_comm_timing_service>
	  initiate_input_channels();
 8000aa0:	f7ff fd46 	bl	8000530 <initiate_input_channels>
	  initiate_output_channels();
 8000aa4:	f7ff fd6a 	bl	800057c <initiate_output_channels>
	  initate_analog_channels();
 8000aa8:	f7ff fd86 	bl	80005b8 <initate_analog_channels>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	4608      	mov	r0, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	4623      	mov	r3, r4
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	807b      	strh	r3, [r7, #2]
 8000aca:	4613      	mov	r3, r2
 8000acc:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000ace:	88f8      	ldrh	r0, [r7, #6]
 8000ad0:	88b9      	ldrh	r1, [r7, #4]
 8000ad2:	887a      	ldrh	r2, [r7, #2]
 8000ad4:	883c      	ldrh	r4, [r7, #0]
 8000ad6:	8b3b      	ldrh	r3, [r7, #24]
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	4623      	mov	r3, r4
 8000adc:	f000 fa8c 	bl	8000ff8 <ST7735_FillRectangle>
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd90      	pop	{r4, r7, pc}

08000ae8 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af02      	add	r7, sp, #8
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <fillScreen+0x2c>)
 8000af4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <fillScreen+0x30>)
 8000afa:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	460b      	mov	r3, r1
 8000b04:	2100      	movs	r1, #0
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff ffd2 	bl	8000ab0 <fillRect>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200003ea 	.word	0x200003ea
 8000b18:	200003ee 	.word	0x200003ee

08000b1c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2110      	movs	r1, #16
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <ST7735_Select+0x14>)
 8000b26:	f003 f8db 	bl	8003ce0 <HAL_GPIO_WritePin>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40020000 	.word	0x40020000

08000b34 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <ST7735_Unselect+0x14>)
 8000b3e:	f003 f8cf 	bl	8003ce0 <HAL_GPIO_WritePin>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020000 	.word	0x40020000

08000b4c <ST7735_Reset>:

void ST7735_Reset()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b56:	4807      	ldr	r0, [pc, #28]	; (8000b74 <ST7735_Reset+0x28>)
 8000b58:	f003 f8c2 	bl	8003ce0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000b5c:	2005      	movs	r0, #5
 8000b5e:	f001 f991 	bl	8001e84 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <ST7735_Reset+0x28>)
 8000b6a:	f003 f8b9 	bl	8003ce0 <HAL_GPIO_WritePin>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40020800 	.word	0x40020800

08000b78 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b88:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <ST7735_WriteCommand+0x2c>)
 8000b8a:	f003 f8a9 	bl	8003ce0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000b8e:	1df9      	adds	r1, r7, #7
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295
 8000b94:	2201      	movs	r2, #1
 8000b96:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <ST7735_WriteCommand+0x30>)
 8000b98:	f004 fa51 	bl	800503e <HAL_SPI_Transmit>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	20000658 	.word	0x20000658

08000bac <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <ST7735_WriteData+0x30>)
 8000bbe:	f003 f88f 	bl	8003ce0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <ST7735_WriteData+0x34>)
 8000bce:	f004 fa36 	bl	800503e <HAL_SPI_Transmit>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	20000658 	.word	0x20000658

08000be4 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000bf6:	e034      	b.n	8000c62 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000c02:	7afb      	ldrb	r3, [r7, #11]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ffb7 	bl	8000b78 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	1c5a      	adds	r2, r3, #1
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000c14:	7abb      	ldrb	r3, [r7, #10]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000c1e:	7abb      	ldrb	r3, [r7, #10]
 8000c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c24:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000c26:	7abb      	ldrb	r3, [r7, #10]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d008      	beq.n	8000c3e <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000c2c:	7abb      	ldrb	r3, [r7, #10]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ffbb 	bl	8000bac <ST7735_WriteData>
            addr += numArgs;
 8000c36:	7abb      	ldrb	r3, [r7, #10]
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000c3e:	89bb      	ldrh	r3, [r7, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d00e      	beq.n	8000c62 <DisplayInit+0x7e>
            ms = *addr++;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000c4e:	89bb      	ldrh	r3, [r7, #12]
 8000c50:	2bff      	cmp	r3, #255	; 0xff
 8000c52:	d102      	bne.n	8000c5a <DisplayInit+0x76>
 8000c54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c58:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000c5a:	89bb      	ldrh	r3, [r7, #12]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 f911 	bl	8001e84 <HAL_Delay>
    while(numCommands--) {
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	1e5a      	subs	r2, r3, #1
 8000c66:	73fa      	strb	r2, [r7, #15]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1c5      	bne.n	8000bf8 <DisplayInit+0x14>
        }
    }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4608      	mov	r0, r1
 8000c82:	4611      	mov	r1, r2
 8000c84:	461a      	mov	r2, r3
 8000c86:	4623      	mov	r3, r4
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71bb      	strb	r3, [r7, #6]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	717b      	strb	r3, [r7, #5]
 8000c92:	4613      	mov	r3, r2
 8000c94:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000c96:	202a      	movs	r0, #42	; 0x2a
 8000c98:	f7ff ff6e 	bl	8000b78 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	733b      	strb	r3, [r7, #12]
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <ST7735_SetAddressWindow+0x88>)
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	737b      	strb	r3, [r7, #13]
 8000cac:	2300      	movs	r3, #0
 8000cae:	73bb      	strb	r3, [r7, #14]
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <ST7735_SetAddressWindow+0x88>)
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	797b      	ldrb	r3, [r7, #5]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff72 	bl	8000bac <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000cc8:	202b      	movs	r0, #43	; 0x2b
 8000cca:	f7ff ff55 	bl	8000b78 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <ST7735_SetAddressWindow+0x8c>)
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <ST7735_SetAddressWindow+0x8c>)
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	793b      	ldrb	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	2104      	movs	r1, #4
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5d 	bl	8000bac <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000cf2:	202c      	movs	r0, #44	; 0x2c
 8000cf4:	f7ff ff40 	bl	8000b78 <ST7735_WriteCommand>
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd90      	pop	{r4, r7, pc}
 8000d00:	200003e2 	.word	0x200003e2
 8000d04:	200003e6 	.word	0x200003e6

08000d08 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000d12:	f7ff ff03 	bl	8000b1c <ST7735_Select>
    ST7735_Reset();
 8000d16:	f7ff ff19 	bl	8000b4c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000d1a:	480c      	ldr	r0, [pc, #48]	; (8000d4c <ST7735_Init+0x44>)
 8000d1c:	f7ff ff62 	bl	8000be4 <DisplayInit>
    DisplayInit(init_cmds2);
 8000d20:	480b      	ldr	r0, [pc, #44]	; (8000d50 <ST7735_Init+0x48>)
 8000d22:	f7ff ff5f 	bl	8000be4 <DisplayInit>
    DisplayInit(init_cmds3);
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <ST7735_Init+0x4c>)
 8000d28:	f7ff ff5c 	bl	8000be4 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <ST7735_Init+0x50>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <ST7735_Init+0x54>)
 8000d34:	2203      	movs	r2, #3
 8000d36:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f810 	bl	8000d60 <ST7735_SetRotation>
    ST7735_Unselect();
 8000d40:	f7ff fef8 	bl	8000b34 <ST7735_Unselect>

}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	0800b2f8 	.word	0x0800b2f8
 8000d50:	0800b330 	.word	0x0800b330
 8000d54:	0800b340 	.word	0x0800b340
 8000d58:	200003e3 	.word	0x200003e3
 8000d5c:	200003e7 	.word	0x200003e7

08000d60 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <ST7735_SetRotation+0xe4>)
 8000d78:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000d7a:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <ST7735_SetRotation+0xe4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d84e      	bhi.n	8000e20 <ST7735_SetRotation+0xc0>
 8000d82:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <ST7735_SetRotation+0x28>)
 8000d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d88:	08000d99 	.word	0x08000d99
 8000d8c:	08000dbb 	.word	0x08000dbb
 8000d90:	08000ddd 	.word	0x08000ddd
 8000d94:	08000dff 	.word	0x08000dff
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000d98:	23c0      	movs	r3, #192	; 0xc0
 8000d9a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <ST7735_SetRotation+0xe8>)
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000da2:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <ST7735_SetRotation+0xec>)
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000da8:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <ST7735_SetRotation+0xf0>)
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <ST7735_SetRotation+0xf4>)
 8000dae:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <ST7735_SetRotation+0xf8>)
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <ST7735_SetRotation+0xfc>)
 8000db6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000db8:	e032      	b.n	8000e20 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000dba:	23a0      	movs	r3, #160	; 0xa0
 8000dbc:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000dbe:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <ST7735_SetRotation+0xec>)
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000dc4:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <ST7735_SetRotation+0xe8>)
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <ST7735_SetRotation+0xf0>)
 8000dcc:	781a      	ldrb	r2, [r3, #0]
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <ST7735_SetRotation+0xfc>)
 8000dd0:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <ST7735_SetRotation+0xf8>)
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <ST7735_SetRotation+0xf4>)
 8000dd8:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000dda:	e021      	b.n	8000e20 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <ST7735_SetRotation+0xe8>)
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <ST7735_SetRotation+0xec>)
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <ST7735_SetRotation+0xf0>)
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <ST7735_SetRotation+0xf4>)
 8000df2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <ST7735_SetRotation+0xf8>)
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <ST7735_SetRotation+0xfc>)
 8000dfa:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000dfc:	e010      	b.n	8000e20 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000dfe:	2360      	movs	r3, #96	; 0x60
 8000e00:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <ST7735_SetRotation+0xec>)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <ST7735_SetRotation+0xe8>)
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <ST7735_SetRotation+0xf0>)
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <ST7735_SetRotation+0xfc>)
 8000e14:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <ST7735_SetRotation+0xf8>)
 8000e18:	781a      	ldrb	r2, [r3, #0]
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <ST7735_SetRotation+0xf4>)
 8000e1c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000e1e:	bf00      	nop
  }
  ST7735_Select();
 8000e20:	f7ff fe7c 	bl	8000b1c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000e24:	2036      	movs	r0, #54	; 0x36
 8000e26:	f7ff fea7 	bl	8000b78 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000e2a:	f107 030f 	add.w	r3, r7, #15
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff febb 	bl	8000bac <ST7735_WriteData>
  ST7735_Unselect();
 8000e36:	f7ff fe7d 	bl	8000b34 <ST7735_Unselect>
}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200003e8 	.word	0x200003e8
 8000e48:	200003ee 	.word	0x200003ee
 8000e4c:	200003ea 	.word	0x200003ea
 8000e50:	200003e3 	.word	0x200003e3
 8000e54:	200003e2 	.word	0x200003e2
 8000e58:	200003e7 	.word	0x200003e7
 8000e5c:	200003e6 	.word	0x200003e6

08000e60 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000e60:	b082      	sub	sp, #8
 8000e62:	b590      	push	{r4, r7, lr}
 8000e64:	b089      	sub	sp, #36	; 0x24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	80bb      	strh	r3, [r7, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	b2d8      	uxtb	r0, r3
 8000e7a:	88bb      	ldrh	r3, [r7, #4]
 8000e7c:	b2d9      	uxtb	r1, r3
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e86:	4413      	add	r3, r2
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	b2dc      	uxtb	r4, r3
 8000e8e:	88bb      	ldrh	r3, [r7, #4]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e96:	4413      	add	r3, r2
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4622      	mov	r2, r4
 8000ea0:	f7ff feea 	bl	8000c78 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	e043      	b.n	8000f32 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	3b20      	subs	r3, #32
 8000eb0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000eb4:	fb01 f303 	mul.w	r3, r1, r3
 8000eb8:	4619      	mov	r1, r3
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	440b      	add	r3, r1
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	e029      	b.n	8000f20 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00e      	beq.n	8000efa <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000edc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ede:	0a1b      	lsrs	r3, r3, #8
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	743b      	strb	r3, [r7, #16]
 8000ee6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fe5a 	bl	8000bac <ST7735_WriteData>
 8000ef8:	e00f      	b.n	8000f1a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000efa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000efe:	0a1b      	lsrs	r3, r3, #8
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	733b      	strb	r3, [r7, #12]
 8000f06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	2102      	movs	r1, #2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fe49 	bl	8000bac <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	61bb      	str	r3, [r7, #24]
 8000f20:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f24:	461a      	mov	r2, r3
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d3cf      	bcc.n	8000ecc <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f36:	461a      	mov	r2, r3
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d3b5      	bcc.n	8000eaa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000f3e:	bf00      	nop
 8000f40:	bf00      	nop
 8000f42:	3724      	adds	r7, #36	; 0x24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f4a:	b002      	add	sp, #8
 8000f4c:	4770      	bx	lr
	...

08000f50 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000f50:	b082      	sub	sp, #8
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af04      	add	r7, sp, #16
 8000f58:	603a      	str	r2, [r7, #0]
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	80fb      	strh	r3, [r7, #6]
 8000f60:	460b      	mov	r3, r1
 8000f62:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000f64:	f7ff fdda 	bl	8000b1c <ST7735_Select>

    while(*str) {
 8000f68:	e033      	b.n	8000fd2 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	7d3a      	ldrb	r2, [r7, #20]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <ST7735_WriteString+0xa0>)
 8000f72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f76:	4293      	cmp	r3, r2
 8000f78:	db16      	blt.n	8000fa8 <ST7735_WriteString+0x58>
            x = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000f7e:	7d7b      	ldrb	r3, [r7, #21]
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	7d7a      	ldrb	r2, [r7, #21]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <ST7735_WriteString+0xa4>)
 8000f90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f94:	4293      	cmp	r3, r2
 8000f96:	da21      	bge.n	8000fdc <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	d103      	bne.n	8000fa8 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	603b      	str	r3, [r7, #0]
                continue;
 8000fa6:	e014      	b.n	8000fd2 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	781a      	ldrb	r2, [r3, #0]
 8000fac:	88b9      	ldrh	r1, [r7, #4]
 8000fae:	88f8      	ldrh	r0, [r7, #6]
 8000fb0:	8c3b      	ldrh	r3, [r7, #32]
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	8bbb      	ldrh	r3, [r7, #28]
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f7ff ff4f 	bl	8000e60 <ST7735_WriteChar>
        x += font.width;
 8000fc2:	7d3b      	ldrb	r3, [r7, #20]
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	4413      	add	r3, r2
 8000fca:	80fb      	strh	r3, [r7, #6]
        str++;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1c7      	bne.n	8000f6a <ST7735_WriteString+0x1a>
 8000fda:	e000      	b.n	8000fde <ST7735_WriteString+0x8e>
                break;
 8000fdc:	bf00      	nop
    }

    ST7735_Unselect();
 8000fde:	f7ff fda9 	bl	8000b34 <ST7735_Unselect>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fec:	b002      	add	sp, #8
 8000fee:	4770      	bx	lr
 8000ff0:	200003ea 	.word	0x200003ea
 8000ff4:	200003ee 	.word	0x200003ee

08000ff8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4604      	mov	r4, r0
 8001000:	4608      	mov	r0, r1
 8001002:	4611      	mov	r1, r2
 8001004:	461a      	mov	r2, r3
 8001006:	4623      	mov	r3, r4
 8001008:	80fb      	strh	r3, [r7, #6]
 800100a:	4603      	mov	r3, r0
 800100c:	80bb      	strh	r3, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	807b      	strh	r3, [r7, #2]
 8001012:	4613      	mov	r3, r2
 8001014:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	4a38      	ldr	r2, [pc, #224]	; (80010fc <ST7735_FillRectangle+0x104>)
 800101a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800101e:	4293      	cmp	r3, r2
 8001020:	da67      	bge.n	80010f2 <ST7735_FillRectangle+0xfa>
 8001022:	88bb      	ldrh	r3, [r7, #4]
 8001024:	4a36      	ldr	r2, [pc, #216]	; (8001100 <ST7735_FillRectangle+0x108>)
 8001026:	f9b2 2000 	ldrsh.w	r2, [r2]
 800102a:	4293      	cmp	r3, r2
 800102c:	da61      	bge.n	80010f2 <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 800102e:	88fa      	ldrh	r2, [r7, #6]
 8001030:	887b      	ldrh	r3, [r7, #2]
 8001032:	4413      	add	r3, r2
 8001034:	4a31      	ldr	r2, [pc, #196]	; (80010fc <ST7735_FillRectangle+0x104>)
 8001036:	f9b2 2000 	ldrsh.w	r2, [r2]
 800103a:	4293      	cmp	r3, r2
 800103c:	dd06      	ble.n	800104c <ST7735_FillRectangle+0x54>
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <ST7735_FillRectangle+0x104>)
 8001040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001044:	b29a      	uxth	r2, r3
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 800104c:	88ba      	ldrh	r2, [r7, #4]
 800104e:	883b      	ldrh	r3, [r7, #0]
 8001050:	4413      	add	r3, r2
 8001052:	4a2b      	ldr	r2, [pc, #172]	; (8001100 <ST7735_FillRectangle+0x108>)
 8001054:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001058:	4293      	cmp	r3, r2
 800105a:	dd06      	ble.n	800106a <ST7735_FillRectangle+0x72>
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <ST7735_FillRectangle+0x108>)
 800105e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001062:	b29a      	uxth	r2, r3
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800106a:	f7ff fd57 	bl	8000b1c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	b2d8      	uxtb	r0, r3
 8001072:	88bb      	ldrh	r3, [r7, #4]
 8001074:	b2d9      	uxtb	r1, r3
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4413      	add	r3, r2
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3b01      	subs	r3, #1
 8001084:	b2dc      	uxtb	r4, r3
 8001086:	88bb      	ldrh	r3, [r7, #4]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	883b      	ldrh	r3, [r7, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4413      	add	r3, r2
 8001090:	b2db      	uxtb	r3, r3
 8001092:	3b01      	subs	r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4622      	mov	r2, r4
 8001098:	f7ff fdee 	bl	8000c78 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800109c:	8c3b      	ldrh	r3, [r7, #32]
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	733b      	strb	r3, [r7, #12]
 80010a6:	8c3b      	ldrh	r3, [r7, #32]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b2:	4814      	ldr	r0, [pc, #80]	; (8001104 <ST7735_FillRectangle+0x10c>)
 80010b4:	f002 fe14 	bl	8003ce0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80010b8:	883b      	ldrh	r3, [r7, #0]
 80010ba:	80bb      	strh	r3, [r7, #4]
 80010bc:	e013      	b.n	80010e6 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	80fb      	strh	r3, [r7, #6]
 80010c2:	e00a      	b.n	80010da <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80010c4:	f107 010c 	add.w	r1, r7, #12
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	2202      	movs	r2, #2
 80010ce:	480e      	ldr	r0, [pc, #56]	; (8001108 <ST7735_FillRectangle+0x110>)
 80010d0:	f003 ffb5 	bl	800503e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f1      	bne.n	80010c4 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 80010e0:	88bb      	ldrh	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	80bb      	strh	r3, [r7, #4]
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1e8      	bne.n	80010be <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 80010ec:	f7ff fd22 	bl	8000b34 <ST7735_Unselect>
 80010f0:	e000      	b.n	80010f4 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 80010f2:	bf00      	nop
}
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200003ea 	.word	0x200003ea
 8001100:	200003ee 	.word	0x200003ee
 8001104:	40020800 	.word	0x40020800
 8001108:	20000658 	.word	0x20000658

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001110:	f000 fe5b 	bl	8001dca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001114:	f000 f822 	bl	800115c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001118:	f000 faa0 	bl	800165c <MX_GPIO_Init>
  MX_SPI1_Init();
 800111c:	f000 f90a 	bl	8001334 <MX_SPI1_Init>
  MX_DMA_Init();
 8001120:	f000 fa7e 	bl	8001620 <MX_DMA_Init>
  MX_ADC1_Init();
 8001124:	f000 f8a6 	bl	8001274 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001128:	f000 f99c 	bl	8001464 <MX_TIM4_Init>
  MX_UART7_Init();
 800112c:	f000 fa48 	bl	80015c0 <MX_UART7_Init>
  MX_TIM6_Init();
 8001130:	f000 fa10 	bl	8001554 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001134:	f000 f93c 	bl	80013b0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001138:	213c      	movs	r1, #60	; 0x3c
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <main+0x4c>)
 800113c:	f004 fc26 	bl	800598c <HAL_TIM_Encoder_Start>

  initiate_runtime();
 8001140:	f7ff fca8 	bl	8000a94 <initiate_runtime>


  ST7735_Init(0);
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fddf 	bl	8000d08 <ST7735_Init>
  fillScreen(BLACK);
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff fccc 	bl	8000ae8 <fillScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  mcCore_SM();
 8001150:	f006 fde0 	bl	8007d14 <mcCore_SM>
 8001154:	e7fc      	b.n	8001150 <main+0x44>
 8001156:	bf00      	nop
 8001158:	2000060c 	.word	0x2000060c

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0b8      	sub	sp, #224	; 0xe0
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001166:	2234      	movs	r2, #52	; 0x34
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f00a f85a 	bl	800b224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	2290      	movs	r2, #144	; 0x90
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f00a f84b 	bl	800b224 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b37      	ldr	r3, [pc, #220]	; (800126c <SystemClock_Config+0x110>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a36      	ldr	r2, [pc, #216]	; (800126c <SystemClock_Config+0x110>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b34      	ldr	r3, [pc, #208]	; (800126c <SystemClock_Config+0x110>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <SystemClock_Config+0x114>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011ae:	4a30      	ldr	r2, [pc, #192]	; (8001270 <SystemClock_Config+0x114>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <SystemClock_Config+0x114>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c2:	2302      	movs	r3, #2
 80011c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ce:	2310      	movs	r3, #16
 80011d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011e0:	2308      	movs	r3, #8
 80011e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 80011e6:	2390      	movs	r3, #144	; 0x90
 80011e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011ec:	2304      	movs	r3, #4
 80011ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 fdc7 	bl	8003d90 <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001208:	f000 fb34 	bl	8001874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800122e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001232:	2102      	movs	r1, #2
 8001234:	4618      	mov	r0, r3
 8001236:	f003 f859 	bl	80042ec <HAL_RCC_ClockConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001240:	f000 fb18 	bl	8001874 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001248:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800124a:	2300      	movs	r3, #0
 800124c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fa20 	bl	8004698 <HAL_RCCEx_PeriphCLKConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x106>
  {
    Error_Handler();
 800125e:	f000 fb09 	bl	8001874 <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	37e0      	adds	r7, #224	; 0xe0
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001286:	4b28      	ldr	r3, [pc, #160]	; (8001328 <MX_ADC1_Init+0xb4>)
 8001288:	4a28      	ldr	r2, [pc, #160]	; (800132c <MX_ADC1_Init+0xb8>)
 800128a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800128c:	4b26      	ldr	r3, [pc, #152]	; (8001328 <MX_ADC1_Init+0xb4>)
 800128e:	2200      	movs	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001292:	4b25      	ldr	r3, [pc, #148]	; (8001328 <MX_ADC1_Init+0xb4>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <MX_ADC1_Init+0xb4>)
 800129a:	2201      	movs	r2, #1
 800129c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <MX_ADC1_Init+0xb4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a4:	4b20      	ldr	r3, [pc, #128]	; (8001328 <MX_ADC1_Init+0xb4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_ADC1_Init+0xb4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <MX_ADC1_Init+0xb4>)
 80012b4:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <MX_ADC1_Init+0xbc>)
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_ADC1_Init+0xb4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_ADC1_Init+0xb4>)
 80012c0:	2202      	movs	r2, #2
 80012c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_ADC1_Init+0xb4>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_ADC1_Init+0xb4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d2:	4815      	ldr	r0, [pc, #84]	; (8001328 <MX_ADC1_Init+0xb4>)
 80012d4:	f000 fdfa 	bl	8001ecc <HAL_ADC_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012de:	f000 fac9 	bl	8001874 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012e2:	2303      	movs	r3, #3
 80012e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80012ea:	2301      	movs	r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	4619      	mov	r1, r3
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_ADC1_Init+0xb4>)
 80012f4:	f001 f888 	bl	8002408 <HAL_ADC_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012fe:	f000 fab9 	bl	8001874 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001302:	230a      	movs	r3, #10
 8001304:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001306:	2302      	movs	r3, #2
 8001308:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_ADC1_Init+0xb4>)
 8001310:	f001 f87a 	bl	8002408 <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800131a:	f000 faab 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000514 	.word	0x20000514
 800132c:	40012000 	.word	0x40012000
 8001330:	0f000001 	.word	0x0f000001

08001334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_SPI1_Init+0x74>)
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <MX_SPI1_Init+0x78>)
 800133c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001348:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800134c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001350:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001354:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_SPI1_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001368:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_SPI1_Init+0x74>)
 800136c:	2220      	movs	r2, #32
 800136e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001372:	2200      	movs	r2, #0
 8001374:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <MX_SPI1_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001384:	2207      	movs	r2, #7
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <MX_SPI1_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001390:	2208      	movs	r2, #8
 8001392:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001396:	f003 fda7 	bl	8004ee8 <HAL_SPI_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80013a0:	f000 fa68 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000658 	.word	0x20000658
 80013ac:	40013000 	.word	0x40013000

080013b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	; 0x30
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	2224      	movs	r2, #36	; 0x24
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f009 ff30 	bl	800b224 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	463b      	mov	r3, r7
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <MX_TIM1_Init+0xac>)
 80013d0:	4a23      	ldr	r2, [pc, #140]	; (8001460 <MX_TIM1_Init+0xb0>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_TIM1_Init+0xac>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_TIM1_Init+0xac>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_TIM1_Init+0xac>)
 80013e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_TIM1_Init+0xac>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_TIM1_Init+0xac>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_TIM1_Init+0xac>)
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013fa:	2303      	movs	r3, #3
 80013fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001402:	2301      	movs	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800140a:	230a      	movs	r3, #10
 800140c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001412:	2301      	movs	r3, #1
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800141a:	230a      	movs	r3, #10
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	4619      	mov	r1, r3
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <MX_TIM1_Init+0xac>)
 8001426:	f004 fa0b 	bl	8005840 <HAL_TIM_Encoder_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001430:	f000 fa20 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_TIM1_Init+0xac>)
 8001446:	f005 fa0b 	bl	8006860 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001450:	f000 fa10 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	3730      	adds	r7, #48	; 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000060c 	.word	0x2000060c
 8001460:	40010000 	.word	0x40010000

08001464 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08e      	sub	sp, #56	; 0x38
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001484:	463b      	mov	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <MX_TIM4_Init+0xe8>)
 8001498:	4a2d      	ldr	r2, [pc, #180]	; (8001550 <MX_TIM4_Init+0xec>)
 800149a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 800149c:	4b2b      	ldr	r3, [pc, #172]	; (800154c <MX_TIM4_Init+0xe8>)
 800149e:	2204      	movs	r2, #4
 80014a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	4b2a      	ldr	r3, [pc, #168]	; (800154c <MX_TIM4_Init+0xe8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 360;
 80014a8:	4b28      	ldr	r3, [pc, #160]	; (800154c <MX_TIM4_Init+0xe8>)
 80014aa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80014ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b0:	4b26      	ldr	r3, [pc, #152]	; (800154c <MX_TIM4_Init+0xe8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <MX_TIM4_Init+0xe8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014bc:	4823      	ldr	r0, [pc, #140]	; (800154c <MX_TIM4_Init+0xe8>)
 80014be:	f004 f88d 	bl	80055dc <HAL_TIM_Base_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80014c8:	f000 f9d4 	bl	8001874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d6:	4619      	mov	r1, r3
 80014d8:	481c      	ldr	r0, [pc, #112]	; (800154c <MX_TIM4_Init+0xe8>)
 80014da:	f004 fd15 	bl	8005f08 <HAL_TIM_ConfigClockSource>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80014e4:	f000 f9c6 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014e8:	4818      	ldr	r0, [pc, #96]	; (800154c <MX_TIM4_Init+0xe8>)
 80014ea:	f004 f947 	bl	800577c <HAL_TIM_PWM_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80014f4:	f000 f9be 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4811      	ldr	r0, [pc, #68]	; (800154c <MX_TIM4_Init+0xe8>)
 8001508:	f005 f9aa 	bl	8006860 <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001512:	f000 f9af 	bl	8001874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001516:	2360      	movs	r3, #96	; 0x60
 8001518:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001526:	463b      	mov	r3, r7
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	4807      	ldr	r0, [pc, #28]	; (800154c <MX_TIM4_Init+0xe8>)
 800152e:	f004 fbdb 	bl	8005ce8 <HAL_TIM_PWM_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001538:	f000 f99c 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800153c:	4803      	ldr	r0, [pc, #12]	; (800154c <MX_TIM4_Init+0xe8>)
 800153e:	f000 fb21 	bl	8001b84 <HAL_TIM_MspPostInit>

}
 8001542:	bf00      	nop
 8001544:	3738      	adds	r7, #56	; 0x38
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000478 	.word	0x20000478
 8001550:	40000800 	.word	0x40000800

08001554 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_TIM6_Init+0x64>)
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <MX_TIM6_Init+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <MX_TIM6_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_TIM6_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_TIM6_Init+0x64>)
 8001578:	f242 7210 	movw	r2, #10000	; 0x2710
 800157c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_TIM6_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001584:	480c      	ldr	r0, [pc, #48]	; (80015b8 <MX_TIM6_Init+0x64>)
 8001586:	f004 f829 	bl	80055dc <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001590:	f000 f970 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_TIM6_Init+0x64>)
 80015a2:	f005 f95d 	bl	8006860 <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80015ac:	f000 f962 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200005c0 	.word	0x200005c0
 80015bc:	40001000 	.word	0x40001000

080015c0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_UART7_Init+0x58>)
 80015c6:	4a15      	ldr	r2, [pc, #84]	; (800161c <MX_UART7_Init+0x5c>)
 80015c8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <MX_UART7_Init+0x58>)
 80015cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_UART7_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_UART7_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_UART7_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_UART7_Init+0x58>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_UART7_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_UART7_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_UART7_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_UART7_Init+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_UART7_Init+0x58>)
 8001604:	f005 f9d8 	bl	80069b8 <HAL_UART_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800160e:	f000 f931 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200003f4 	.word	0x200003f4
 800161c:	40007800 	.word	0x40007800

08001620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_DMA_Init+0x38>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <MX_DMA_Init+0x38>)
 800162c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_DMA_Init+0x38>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2038      	movs	r0, #56	; 0x38
 8001644:	f001 fa8b 	bl	8002b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001648:	2038      	movs	r0, #56	; 0x38
 800164a:	f001 faa4 	bl	8002b96 <HAL_NVIC_EnableIRQ>

}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800

0800165c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	; 0x30
 8001660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	4b78      	ldr	r3, [pc, #480]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a77      	ldr	r2, [pc, #476]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001678:	f043 0320 	orr.w	r3, r3, #32
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b75      	ldr	r3, [pc, #468]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0320 	and.w	r3, r3, #32
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168a:	4b72      	ldr	r3, [pc, #456]	; (8001854 <MX_GPIO_Init+0x1f8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a71      	ldr	r2, [pc, #452]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b6f      	ldr	r3, [pc, #444]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b6c      	ldr	r3, [pc, #432]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a6b      	ldr	r2, [pc, #428]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b69      	ldr	r3, [pc, #420]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	4b66      	ldr	r3, [pc, #408]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a65      	ldr	r2, [pc, #404]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b63      	ldr	r3, [pc, #396]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	4b60      	ldr	r3, [pc, #384]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a5f      	ldr	r2, [pc, #380]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b5d      	ldr	r3, [pc, #372]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ea:	4b5a      	ldr	r3, [pc, #360]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a59      	ldr	r2, [pc, #356]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b57      	ldr	r3, [pc, #348]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001702:	4b54      	ldr	r3, [pc, #336]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a53      	ldr	r2, [pc, #332]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b51      	ldr	r3, [pc, #324]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LD4_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f242 0105 	movw	r1, #8197	; 0x2005
 8001720:	484d      	ldr	r0, [pc, #308]	; (8001858 <MX_GPIO_Init+0x1fc>)
 8001722:	f002 fadd 	bl	8003ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	2110      	movs	r1, #16
 800172a:	484c      	ldr	r0, [pc, #304]	; (800185c <MX_GPIO_Init+0x200>)
 800172c:	f002 fad8 	bl	8003ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f244 0181 	movw	r1, #16513	; 0x4081
 8001736:	484a      	ldr	r0, [pc, #296]	; (8001860 <MX_GPIO_Init+0x204>)
 8001738:	f002 fad2 	bl	8003ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001742:	4848      	ldr	r0, [pc, #288]	; (8001864 <MX_GPIO_Init+0x208>)
 8001744:	f002 facc 	bl	8003ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD5_Pin|LD6_Pin;
 8001748:	f242 0305 	movw	r3, #8197	; 0x2005
 800174c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	4619      	mov	r1, r3
 8001760:	483d      	ldr	r0, [pc, #244]	; (8001858 <MX_GPIO_Init+0x1fc>)
 8001762:	f002 f8f9 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF5 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10;
 8001766:	f44f 6385 	mov.w	r3, #1064	; 0x428
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	4837      	ldr	r0, [pc, #220]	; (8001858 <MX_GPIO_Init+0x1fc>)
 800177c:	f002 f8ec 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001780:	2310      	movs	r3, #16
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4831      	ldr	r0, [pc, #196]	; (800185c <MX_GPIO_Init+0x200>)
 8001798:	f002 f8de 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : Joystick_Button_Pin */
  GPIO_InitStruct.Pin = Joystick_Button_Pin;
 800179c:	2340      	movs	r3, #64	; 0x40
 800179e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a0:	4b31      	ldr	r3, [pc, #196]	; (8001868 <MX_GPIO_Init+0x20c>)
 80017a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Joystick_Button_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	482b      	ldr	r0, [pc, #172]	; (800185c <MX_GPIO_Init+0x200>)
 80017b0:	f002 f8d2 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	4824      	ldr	r0, [pc, #144]	; (8001860 <MX_GPIO_Init+0x204>)
 80017ce:	f002 f8c3 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 80017d2:	f44f 7390 	mov.w	r3, #288	; 0x120
 80017d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <MX_GPIO_Init+0x210>)
 80017da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	4822      	ldr	r0, [pc, #136]	; (8001870 <MX_GPIO_Init+0x214>)
 80017e8:	f002 f8b6 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <MX_GPIO_Init+0x20c>)
 80017f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	481c      	ldr	r0, [pc, #112]	; (8001870 <MX_GPIO_Init+0x214>)
 8001800:	f002 f8aa 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Key1_Pin LCD_Key2_Pin LCD_Key3_Pin LCD_Key0_Pin */
  GPIO_InitStruct.Pin = LCD_Key1_Pin|LCD_Key2_Pin|LCD_Key3_Pin|LCD_Key0_Pin;
 8001804:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180e:	2301      	movs	r3, #1
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	4812      	ldr	r0, [pc, #72]	; (8001864 <MX_GPIO_Init+0x208>)
 800181a:	f002 f89d 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800181e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4619      	mov	r1, r3
 8001836:	480b      	ldr	r0, [pc, #44]	; (8001864 <MX_GPIO_Init+0x208>)
 8001838:	f002 f88e 	bl	8003958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	2017      	movs	r0, #23
 8001842:	f001 f98c 	bl	8002b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001846:	2017      	movs	r0, #23
 8001848:	f001 f9a5 	bl	8002b96 <HAL_NVIC_EnableIRQ>

}
 800184c:	bf00      	nop
 800184e:	3730      	adds	r7, #48	; 0x30
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40021400 	.word	0x40021400
 800185c:	40020000 	.word	0x40020000
 8001860:	40020400 	.word	0x40020400
 8001864:	40020800 	.word	0x40020800
 8001868:	10210000 	.word	0x10210000
 800186c:	10310000 	.word	0x10310000
 8001870:	40021800 	.word	0x40021800

08001874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001878:	b672      	cpsid	i
}
 800187a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800187c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001880:	4801      	ldr	r0, [pc, #4]	; (8001888 <Error_Handler+0x14>)
 8001882:	f002 fa46 	bl	8003d12 <HAL_GPIO_TogglePin>
 8001886:	e7f9      	b.n	800187c <Error_Handler+0x8>
 8001888:	40020400 	.word	0x40020400

0800188c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_MspInit+0x44>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_MspInit+0x44>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_MspInit+0x44>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_MspInit+0x44>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_MspInit+0x44>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_MspInit+0x44>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800

080018d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a3d      	ldr	r2, [pc, #244]	; (80019e8 <HAL_ADC_MspInit+0x114>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d173      	bne.n	80019de <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018f6:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <HAL_ADC_MspInit+0x118>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a3c      	ldr	r2, [pc, #240]	; (80019ec <HAL_ADC_MspInit+0x118>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <HAL_ADC_MspInit+0x118>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_ADC_MspInit+0x118>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a36      	ldr	r2, [pc, #216]	; (80019ec <HAL_ADC_MspInit+0x118>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <HAL_ADC_MspInit+0x118>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_ADC_MspInit+0x118>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a30      	ldr	r2, [pc, #192]	; (80019ec <HAL_ADC_MspInit+0x118>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b2e      	ldr	r3, [pc, #184]	; (80019ec <HAL_ADC_MspInit+0x118>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800193e:	2301      	movs	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001942:	2303      	movs	r3, #3
 8001944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4827      	ldr	r0, [pc, #156]	; (80019f0 <HAL_ADC_MspInit+0x11c>)
 8001952:	f002 f801 	bl	8003958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001956:	2308      	movs	r3, #8
 8001958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195a:	2303      	movs	r3, #3
 800195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4822      	ldr	r0, [pc, #136]	; (80019f4 <HAL_ADC_MspInit+0x120>)
 800196a:	f001 fff5 	bl	8003958 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_ADC_MspInit+0x124>)
 8001970:	4a22      	ldr	r2, [pc, #136]	; (80019fc <HAL_ADC_MspInit+0x128>)
 8001972:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001974:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_ADC_MspInit+0x124>)
 8001976:	2200      	movs	r2, #0
 8001978:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_ADC_MspInit+0x124>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_ADC_MspInit+0x124>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_ADC_MspInit+0x124>)
 8001988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_ADC_MspInit+0x124>)
 8001990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001994:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <HAL_ADC_MspInit+0x124>)
 8001998:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800199c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_ADC_MspInit+0x124>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_ADC_MspInit+0x124>)
 80019a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_ADC_MspInit+0x124>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019b2:	4811      	ldr	r0, [pc, #68]	; (80019f8 <HAL_ADC_MspInit+0x124>)
 80019b4:	f001 f90a 	bl	8002bcc <HAL_DMA_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 80019be:	f7ff ff59 	bl	8001874 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_ADC_MspInit+0x124>)
 80019c6:	639a      	str	r2, [r3, #56]	; 0x38
 80019c8:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <HAL_ADC_MspInit+0x124>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2012      	movs	r0, #18
 80019d4:	f001 f8c3 	bl	8002b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80019d8:	2012      	movs	r0, #18
 80019da:	f001 f8dc 	bl	8002b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40012000 	.word	0x40012000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	20000560 	.word	0x20000560
 80019fc:	40026410 	.word	0x40026410

08001a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_SPI_MspInit+0x7c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d127      	bne.n	8001a72 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <HAL_SPI_MspInit+0x80>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a16      	ldr	r2, [pc, #88]	; (8001a80 <HAL_SPI_MspInit+0x80>)
 8001a28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_SPI_MspInit+0x80>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_SPI_MspInit+0x80>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_SPI_MspInit+0x80>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_SPI_MspInit+0x80>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a52:	23a0      	movs	r3, #160	; 0xa0
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a62:	2305      	movs	r3, #5
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_SPI_MspInit+0x84>)
 8001a6e:	f001 ff73 	bl	8003958 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40013000 	.word	0x40013000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d128      	bne.n	8001afc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_TIM_Encoder_MspInit+0x80>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a16      	ldr	r2, [pc, #88]	; (8001b08 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ac8:	f043 0310 	orr.w	r3, r3, #16
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001ada:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <HAL_TIM_Encoder_MspInit+0x84>)
 8001af8:	f001 ff2e 	bl	8003958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40010000 	.word	0x40010000
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40021000 	.word	0x40021000

08001b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <HAL_TIM_Base_MspInit+0x68>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d10c      	bne.n	8001b3c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <HAL_TIM_Base_MspInit+0x6c>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <HAL_TIM_Base_MspInit+0x6c>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_TIM_Base_MspInit+0x6c>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001b3a:	e018      	b.n	8001b6e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <HAL_TIM_Base_MspInit+0x70>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d113      	bne.n	8001b6e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_TIM_Base_MspInit+0x6c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <HAL_TIM_Base_MspInit+0x6c>)
 8001b4c:	f043 0310 	orr.w	r3, r3, #16
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_TIM_Base_MspInit+0x6c>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	2036      	movs	r0, #54	; 0x36
 8001b64:	f000 fffb 	bl	8002b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b68:	2036      	movs	r0, #54	; 0x36
 8001b6a:	f001 f814 	bl	8002b96 <HAL_NVIC_EnableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40000800 	.word	0x40000800
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40001000 	.word	0x40001000

08001b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <HAL_TIM_MspPostInit+0x64>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d11b      	bne.n	8001bde <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_TIM_MspPostInit+0x68>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a10      	ldr	r2, [pc, #64]	; (8001bec <HAL_TIM_MspPostInit+0x68>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_TIM_MspPostInit+0x68>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = LCD_BackLight_Pin;
 8001bbe:	2340      	movs	r3, #64	; 0x40
 8001bc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BackLight_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <HAL_TIM_MspPostInit+0x6c>)
 8001bda:	f001 febd 	bl	8003958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bde:	bf00      	nop
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40000800 	.word	0x40000800
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020400 	.word	0x40020400

08001bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <HAL_UART_MspInit+0x8c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d12f      	bne.n	8001c76 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_UART_MspInit+0x90>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a1a      	ldr	r2, [pc, #104]	; (8001c84 <HAL_UART_MspInit+0x90>)
 8001c1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_UART_MspInit+0x90>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_UART_MspInit+0x90>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <HAL_UART_MspInit+0x90>)
 8001c34:	f043 0320 	orr.w	r3, r3, #32
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_UART_MspInit+0x90>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c46:	23c0      	movs	r3, #192	; 0xc0
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001c56:	2308      	movs	r3, #8
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4809      	ldr	r0, [pc, #36]	; (8001c88 <HAL_UART_MspInit+0x94>)
 8001c62:	f001 fe79 	bl	8003958 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2052      	movs	r0, #82	; 0x52
 8001c6c:	f000 ff77 	bl	8002b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001c70:	2052      	movs	r0, #82	; 0x52
 8001c72:	f000 ff90 	bl	8002b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40007800 	.word	0x40007800
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40021400 	.word	0x40021400

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <NMI_Handler+0x4>

08001c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <MemManage_Handler+0x4>

08001c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd8:	f000 f8b4 	bl	8001e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <ADC_IRQHandler+0x10>)
 8001ce6:	f000 f935 	bl	8001f54 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000514 	.word	0x20000514

08001cf4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001cf8:	2020      	movs	r0, #32
 8001cfa:	f002 f825 	bl	8003d48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001cfe:	2040      	movs	r0, #64	; 0x40
 8001d00:	f002 f822 	bl	8003d48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d04:	2080      	movs	r0, #128	; 0x80
 8001d06:	f002 f81f 	bl	8003d48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001d0a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d0e:	f002 f81b 	bl	8003d48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <TIM6_DAC_IRQHandler+0x10>)
 8001d1e:	f003 fec3 	bl	8005aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200005c0 	.word	0x200005c0

08001d2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <DMA2_Stream0_IRQHandler+0x10>)
 8001d32:	f001 f8eb 	bl	8002f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000560 	.word	0x20000560

08001d40 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <UART7_IRQHandler+0x10>)
 8001d46:	f004 ff1f 	bl	8006b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200003f4 	.word	0x200003f4

08001d54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <SystemInit+0x20>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <SystemInit+0x20>)
 8001d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d7e:	490e      	ldr	r1, [pc, #56]	; (8001db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d80:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d94:	4c0b      	ldr	r4, [pc, #44]	; (8001dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001da2:	f7ff ffd7 	bl	8001d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da6:	f009 f9f1 	bl	800b18c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001daa:	f7ff f9af 	bl	800110c <main>
  bx  lr    
 8001dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001db0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001dbc:	0800bd30 	.word	0x0800bd30
  ldr r2, =_sbss
 8001dc0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001dc4:	20001774 	.word	0x20001774

08001dc8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <CAN1_RX0_IRQHandler>

08001dca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f000 feba 	bl	8002b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f000 f805 	bl	8001de4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001dda:	f7ff fd57 	bl	800188c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_InitTick+0x54>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_InitTick+0x58>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fed5 	bl	8002bb2 <HAL_SYSTICK_Config>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00e      	b.n	8001e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b0f      	cmp	r3, #15
 8001e16:	d80a      	bhi.n	8001e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f000 fe9d 	bl	8002b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <HAL_InitTick+0x5c>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e000      	b.n	8001e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000038 	.word	0x20000038
 8001e3c:	20000040 	.word	0x20000040
 8001e40:	2000003c 	.word	0x2000003c

08001e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_IncTick+0x20>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_IncTick+0x24>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_IncTick+0x24>)
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000040 	.word	0x20000040
 8001e68:	200006bc 	.word	0x200006bc

08001e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_GetTick+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	200006bc 	.word	0x200006bc

08001e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff ffee 	bl	8001e6c <HAL_GetTick>
 8001e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d005      	beq.n	8001eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_Delay+0x44>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eaa:	bf00      	nop
 8001eac:	f7ff ffde 	bl	8001e6c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d8f7      	bhi.n	8001eac <HAL_Delay+0x28>
  {
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000040 	.word	0x20000040

08001ecc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e031      	b.n	8001f46 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fcf2 	bl	80018d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d116      	bne.n	8001f38 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_ADC_Init+0x84>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	f043 0202 	orr.w	r2, r3, #2
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fbbe 	bl	800269c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f023 0303 	bic.w	r3, r3, #3
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
 8001f36:	e001      	b.n	8001f3c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	ffffeefd 	.word	0xffffeefd

08001f54 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d049      	beq.n	800202a <HAL_ADC_IRQHandler+0xd6>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d046      	beq.n	800202a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d12b      	bne.n	800201a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d127      	bne.n	800201a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d119      	bne.n	800201a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0220 	bic.w	r2, r2, #32
 8001ff4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d105      	bne.n	800201a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fb4a 	bl	80006b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0212 	mvn.w	r2, #18
 8002028:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b04      	cmp	r3, #4
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	2b80      	cmp	r3, #128	; 0x80
 800204c:	bf0c      	ite	eq
 800204e:	2301      	moveq	r3, #1
 8002050:	2300      	movne	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d057      	beq.n	800210c <HAL_ADC_IRQHandler+0x1b8>
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d054      	beq.n	800210c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d139      	bne.n	80020fc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d12b      	bne.n	80020fc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d124      	bne.n	80020fc <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d11d      	bne.n	80020fc <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d119      	bne.n	80020fc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 fc49 	bl	8002994 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f06f 020c 	mvn.w	r2, #12
 800210a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b01      	cmp	r3, #1
 8002118:	bf0c      	ite	eq
 800211a:	2301      	moveq	r3, #1
 800211c:	2300      	movne	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	2b40      	cmp	r3, #64	; 0x40
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d017      	beq.n	800216e <HAL_ADC_IRQHandler+0x21a>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d014      	beq.n	800216e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10d      	bne.n	800216e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f93e 	bl	80023e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0201 	mvn.w	r2, #1
 800216c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b20      	cmp	r3, #32
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800218e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d015      	beq.n	80021ce <HAL_ADC_IRQHandler+0x27a>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d012      	beq.n	80021ce <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	f043 0202 	orr.w	r2, r3, #2
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0220 	mvn.w	r2, #32
 80021bc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f918 	bl	80023f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0220 	mvn.w	r2, #32
 80021cc:	601a      	str	r2, [r3, #0]
  }
}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_Start_DMA+0x1e>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e0d4      	b.n	80023a0 <HAL_ADC_Start_DMA+0x1c8>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d018      	beq.n	800223e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800221c:	4b62      	ldr	r3, [pc, #392]	; (80023a8 <HAL_ADC_Start_DMA+0x1d0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a62      	ldr	r2, [pc, #392]	; (80023ac <HAL_ADC_Start_DMA+0x1d4>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9a      	lsrs	r2, r3, #18
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002230:	e002      	b.n	8002238 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3b01      	subs	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f9      	bne.n	8002232 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	f040 809c 	bne.w	8002386 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002252:	4b57      	ldr	r3, [pc, #348]	; (80023b0 <HAL_ADC_Start_DMA+0x1d8>)
 8002254:	4013      	ands	r3, r2
 8002256:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002274:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002288:	d106      	bne.n	8002298 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f023 0206 	bic.w	r2, r3, #6
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
 8002296:	e002      	b.n	800229e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	4a42      	ldr	r2, [pc, #264]	; (80023b4 <HAL_ADC_Start_DMA+0x1dc>)
 80022ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	4a41      	ldr	r2, [pc, #260]	; (80023b8 <HAL_ADC_Start_DMA+0x1e0>)
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	4a40      	ldr	r2, [pc, #256]	; (80023bc <HAL_ADC_Start_DMA+0x1e4>)
 80022bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80022d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	334c      	adds	r3, #76	; 0x4c
 80022f2:	4619      	mov	r1, r3
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f000 fd16 	bl	8002d28 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80022fc:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_ADC_Start_DMA+0x1e8>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10f      	bne.n	8002328 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d143      	bne.n	800239e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	e03a      	b.n	800239e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a25      	ldr	r2, [pc, #148]	; (80023c4 <HAL_ADC_Start_DMA+0x1ec>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10e      	bne.n	8002350 <HAL_ADC_Start_DMA+0x178>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d107      	bne.n	8002350 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800234e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_ADC_Start_DMA+0x1e8>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b00      	cmp	r3, #0
 800235a:	d120      	bne.n	800239e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a19      	ldr	r2, [pc, #100]	; (80023c8 <HAL_ADC_Start_DMA+0x1f0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d11b      	bne.n	800239e <HAL_ADC_Start_DMA+0x1c6>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d114      	bne.n	800239e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	e00b      	b.n	800239e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f043 0210 	orr.w	r2, r3, #16
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f043 0201 	orr.w	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000038 	.word	0x20000038
 80023ac:	431bde83 	.word	0x431bde83
 80023b0:	fffff8fe 	.word	0xfffff8fe
 80023b4:	08002891 	.word	0x08002891
 80023b8:	0800294b 	.word	0x0800294b
 80023bc:	08002967 	.word	0x08002967
 80023c0:	40012300 	.word	0x40012300
 80023c4:	40012000 	.word	0x40012000
 80023c8:	40012200 	.word	0x40012200

080023cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x1c>
 8002420:	2302      	movs	r3, #2
 8002422:	e12a      	b.n	800267a <HAL_ADC_ConfigChannel+0x272>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b09      	cmp	r3, #9
 8002432:	d93a      	bls.n	80024aa <HAL_ADC_ConfigChannel+0xa2>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800243c:	d035      	beq.n	80024aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68d9      	ldr	r1, [r3, #12]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	3b1e      	subs	r3, #30
 8002454:	2207      	movs	r2, #7
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	400a      	ands	r2, r1
 8002462:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a87      	ldr	r2, [pc, #540]	; (8002688 <HAL_ADC_ConfigChannel+0x280>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10a      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68d9      	ldr	r1, [r3, #12]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	061a      	lsls	r2, r3, #24
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002482:	e035      	b.n	80024f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68d9      	ldr	r1, [r3, #12]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	4603      	mov	r3, r0
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4403      	add	r3, r0
 800249c:	3b1e      	subs	r3, #30
 800249e:	409a      	lsls	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a8:	e022      	b.n	80024f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6919      	ldr	r1, [r3, #16]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	2207      	movs	r2, #7
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43da      	mvns	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	400a      	ands	r2, r1
 80024cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6919      	ldr	r1, [r3, #16]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	4618      	mov	r0, r3
 80024e0:	4603      	mov	r3, r0
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4403      	add	r3, r0
 80024e6:	409a      	lsls	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d824      	bhi.n	8002542 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	3b05      	subs	r3, #5
 800250a:	221f      	movs	r2, #31
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43da      	mvns	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	400a      	ands	r2, r1
 8002518:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	4618      	mov	r0, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	3b05      	subs	r3, #5
 8002534:	fa00 f203 	lsl.w	r2, r0, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	635a      	str	r2, [r3, #52]	; 0x34
 8002540:	e04c      	b.n	80025dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d824      	bhi.n	8002594 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	3b23      	subs	r3, #35	; 0x23
 800255c:	221f      	movs	r2, #31
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	400a      	ands	r2, r1
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	4618      	mov	r0, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	3b23      	subs	r3, #35	; 0x23
 8002586:	fa00 f203 	lsl.w	r2, r0, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
 8002592:	e023      	b.n	80025dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	3b41      	subs	r3, #65	; 0x41
 80025a6:	221f      	movs	r2, #31
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43da      	mvns	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	400a      	ands	r2, r1
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	4618      	mov	r0, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3b41      	subs	r3, #65	; 0x41
 80025d0:	fa00 f203 	lsl.w	r2, r0, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a2a      	ldr	r2, [pc, #168]	; (800268c <HAL_ADC_ConfigChannel+0x284>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d10a      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x1f4>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025ee:	d105      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_ADC_ConfigChannel+0x288>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a26      	ldr	r2, [pc, #152]	; (8002690 <HAL_ADC_ConfigChannel+0x288>)
 80025f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025fa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_ADC_ConfigChannel+0x284>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d109      	bne.n	800261a <HAL_ADC_ConfigChannel+0x212>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b12      	cmp	r3, #18
 800260c:	d105      	bne.n	800261a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800260e:	4b20      	ldr	r3, [pc, #128]	; (8002690 <HAL_ADC_ConfigChannel+0x288>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4a1f      	ldr	r2, [pc, #124]	; (8002690 <HAL_ADC_ConfigChannel+0x288>)
 8002614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002618:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1b      	ldr	r2, [pc, #108]	; (800268c <HAL_ADC_ConfigChannel+0x284>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d125      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x268>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a17      	ldr	r2, [pc, #92]	; (8002688 <HAL_ADC_ConfigChannel+0x280>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x22e>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b11      	cmp	r3, #17
 8002634:	d11c      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <HAL_ADC_ConfigChannel+0x288>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a15      	ldr	r2, [pc, #84]	; (8002690 <HAL_ADC_ConfigChannel+0x288>)
 800263c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002640:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a10      	ldr	r2, [pc, #64]	; (8002688 <HAL_ADC_ConfigChannel+0x280>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d111      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_ADC_ConfigChannel+0x28c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a11      	ldr	r2, [pc, #68]	; (8002698 <HAL_ADC_ConfigChannel+0x290>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0c9a      	lsrs	r2, r3, #18
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002662:	e002      	b.n	800266a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3b01      	subs	r3, #1
 8002668:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f9      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	10000012 	.word	0x10000012
 800268c:	40012000 	.word	0x40012000
 8002690:	40012300 	.word	0x40012300
 8002694:	20000038 	.word	0x20000038
 8002698:	431bde83 	.word	0x431bde83

0800269c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80026a4:	4b78      	ldr	r3, [pc, #480]	; (8002888 <ADC_Init+0x1ec>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a77      	ldr	r2, [pc, #476]	; (8002888 <ADC_Init+0x1ec>)
 80026aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80026ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80026b0:	4b75      	ldr	r3, [pc, #468]	; (8002888 <ADC_Init+0x1ec>)
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4973      	ldr	r1, [pc, #460]	; (8002888 <ADC_Init+0x1ec>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	021a      	lsls	r2, r3, #8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002712:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6899      	ldr	r1, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	4a58      	ldr	r2, [pc, #352]	; (800288c <ADC_Init+0x1f0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d022      	beq.n	8002776 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800273e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6899      	ldr	r1, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002760:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	e00f      	b.n	8002796 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002794:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0202 	bic.w	r2, r2, #2
 80027a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6899      	ldr	r1, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	005a      	lsls	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	3b01      	subs	r3, #1
 80027f0:	035a      	lsls	r2, r3, #13
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	e007      	b.n	800280c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	3b01      	subs	r3, #1
 8002828:	051a      	lsls	r2, r3, #20
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002840:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800284e:	025a      	lsls	r2, r3, #9
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002866:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6899      	ldr	r1, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	029a      	lsls	r2, r3, #10
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	609a      	str	r2, [r3, #8]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40012300 	.word	0x40012300
 800288c:	0f000001 	.word	0x0f000001

08002890 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d13c      	bne.n	8002924 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d12b      	bne.n	800291c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d127      	bne.n	800291c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d119      	bne.n	800291c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0220 	bic.w	r2, r2, #32
 80028f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d105      	bne.n	800291c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f043 0201 	orr.w	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7fd fec9 	bl	80006b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002922:	e00e      	b.n	8002942 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff fd5f 	bl	80023f4 <HAL_ADC_ErrorCallback>
}
 8002936:	e004      	b.n	8002942 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f7ff fd37 	bl	80023cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2240      	movs	r2, #64	; 0x40
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f043 0204 	orr.w	r2, r3, #4
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7ff fd34 	bl	80023f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <__NVIC_SetPriorityGrouping+0x40>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c4:	4013      	ands	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <__NVIC_SetPriorityGrouping+0x44>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <__NVIC_SetPriorityGrouping+0x40>)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	60d3      	str	r3, [r2, #12]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00
 80029ec:	05fa0000 	.word	0x05fa0000

080029f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <__NVIC_GetPriorityGrouping+0x18>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	0a1b      	lsrs	r3, r3, #8
 80029fa:	f003 0307 	and.w	r3, r3, #7
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	db0b      	blt.n	8002a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	f003 021f 	and.w	r2, r3, #31
 8002a24:	4907      	ldr	r1, [pc, #28]	; (8002a44 <__NVIC_EnableIRQ+0x38>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	e000e100 	.word	0xe000e100

08002a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	6039      	str	r1, [r7, #0]
 8002a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	db0a      	blt.n	8002a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	490c      	ldr	r1, [pc, #48]	; (8002a94 <__NVIC_SetPriority+0x4c>)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	0112      	lsls	r2, r2, #4
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a70:	e00a      	b.n	8002a88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4908      	ldr	r1, [pc, #32]	; (8002a98 <__NVIC_SetPriority+0x50>)
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	3b04      	subs	r3, #4
 8002a80:	0112      	lsls	r2, r2, #4
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	440b      	add	r3, r1
 8002a86:	761a      	strb	r2, [r3, #24]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000e100 	.word	0xe000e100
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b089      	sub	sp, #36	; 0x24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f1c3 0307 	rsb	r3, r3, #7
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	bf28      	it	cs
 8002aba:	2304      	movcs	r3, #4
 8002abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d902      	bls.n	8002acc <NVIC_EncodePriority+0x30>
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3b03      	subs	r3, #3
 8002aca:	e000      	b.n	8002ace <NVIC_EncodePriority+0x32>
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43da      	mvns	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	401a      	ands	r2, r3
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	fa01 f303 	lsl.w	r3, r1, r3
 8002aee:	43d9      	mvns	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af4:	4313      	orrs	r3, r2
         );
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3724      	adds	r7, #36	; 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b14:	d301      	bcc.n	8002b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b16:	2301      	movs	r3, #1
 8002b18:	e00f      	b.n	8002b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <SysTick_Config+0x40>)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b22:	210f      	movs	r1, #15
 8002b24:	f04f 30ff 	mov.w	r0, #4294967295
 8002b28:	f7ff ff8e 	bl	8002a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <SysTick_Config+0x40>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b32:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <SysTick_Config+0x40>)
 8002b34:	2207      	movs	r2, #7
 8002b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	e000e010 	.word	0xe000e010

08002b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ff29 	bl	80029a8 <__NVIC_SetPriorityGrouping>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b70:	f7ff ff3e 	bl	80029f0 <__NVIC_GetPriorityGrouping>
 8002b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	6978      	ldr	r0, [r7, #20]
 8002b7c:	f7ff ff8e 	bl	8002a9c <NVIC_EncodePriority>
 8002b80:	4602      	mov	r2, r0
 8002b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff5d 	bl	8002a48 <__NVIC_SetPriority>
}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff31 	bl	8002a0c <__NVIC_EnableIRQ>
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ffa2 	bl	8002b04 <SysTick_Config>
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bd8:	f7ff f948 	bl	8001e6c <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e099      	b.n	8002d1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c08:	e00f      	b.n	8002c2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c0a:	f7ff f92f 	bl	8001e6c <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d908      	bls.n	8002c2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2203      	movs	r2, #3
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e078      	b.n	8002d1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e8      	bne.n	8002c0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_DMA_Init+0x158>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d107      	bne.n	8002c94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f023 0307 	bic.w	r3, r3, #7
 8002caa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d117      	bne.n	8002cee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00e      	beq.n	8002cee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fb09 	bl	80032e8 <DMA_CheckFifoParam>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2240      	movs	r2, #64	; 0x40
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cea:	2301      	movs	r3, #1
 8002cec:	e016      	b.n	8002d1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fac0 	bl	800327c <DMA_CalcBaseAndBitshift>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d04:	223f      	movs	r2, #63	; 0x3f
 8002d06:	409a      	lsls	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	e010803f 	.word	0xe010803f

08002d28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_DMA_Start_IT+0x26>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e048      	b.n	8002de0 <HAL_DMA_Start_IT+0xb8>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d137      	bne.n	8002dd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fa52 	bl	8003220 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	223f      	movs	r2, #63	; 0x3f
 8002d82:	409a      	lsls	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0216 	orr.w	r2, r2, #22
 8002d96:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002da6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d007      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0208 	orr.w	r2, r2, #8
 8002dbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e005      	b.n	8002dde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002df6:	f7ff f839 	bl	8001e6c <HAL_GetTick>
 8002dfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d008      	beq.n	8002e1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2280      	movs	r2, #128	; 0x80
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e052      	b.n	8002ec0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0216 	bic.w	r2, r2, #22
 8002e28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <HAL_DMA_Abort+0x62>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0208 	bic.w	r2, r2, #8
 8002e58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6a:	e013      	b.n	8002e94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6c:	f7fe fffe 	bl	8001e6c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d90c      	bls.n	8002e94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e015      	b.n	8002ec0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e4      	bne.n	8002e6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	223f      	movs	r2, #63	; 0x3f
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d004      	beq.n	8002ee6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00c      	b.n	8002f00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2205      	movs	r2, #5
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f18:	4b92      	ldr	r3, [pc, #584]	; (8003164 <HAL_DMA_IRQHandler+0x258>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a92      	ldr	r2, [pc, #584]	; (8003168 <HAL_DMA_IRQHandler+0x25c>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	0a9b      	lsrs	r3, r3, #10
 8002f24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	2208      	movs	r2, #8
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01a      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0204 	bic.w	r2, r2, #4
 8002f5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	2208      	movs	r2, #8
 8002f66:	409a      	lsls	r2, r3
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d012      	beq.n	8002fae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa6:	f043 0202 	orr.w	r2, r3, #2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d012      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	f043 0204 	orr.w	r2, r3, #4
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	2210      	movs	r2, #16
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d043      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d03c      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	2210      	movs	r2, #16
 8003008:	409a      	lsls	r2, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d018      	beq.n	800304e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d024      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
 800303a:	e01f      	b.n	800307c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e016      	b.n	800307c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0208 	bic.w	r2, r2, #8
 800306a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	2220      	movs	r2, #32
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 808e 	beq.w	80031aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8086 	beq.w	80031aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	2220      	movs	r2, #32
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	d136      	bne.n	8003124 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0216 	bic.w	r2, r2, #22
 80030c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <HAL_DMA_IRQHandler+0x1da>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0208 	bic.w	r2, r2, #8
 80030f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	223f      	movs	r2, #63	; 0x3f
 80030fc:	409a      	lsls	r2, r3
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003116:	2b00      	cmp	r3, #0
 8003118:	d07d      	beq.n	8003216 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
        }
        return;
 8003122:	e078      	b.n	8003216 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01c      	beq.n	800316c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d108      	bne.n	8003152 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	2b00      	cmp	r3, #0
 8003146:	d030      	beq.n	80031aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
 8003150:	e02b      	b.n	80031aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d027      	beq.n	80031aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
 8003162:	e022      	b.n	80031aa <HAL_DMA_IRQHandler+0x29e>
 8003164:	20000038 	.word	0x20000038
 8003168:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0210 	bic.w	r2, r2, #16
 8003188:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d032      	beq.n	8003218 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d022      	beq.n	8003204 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2205      	movs	r2, #5
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	3301      	adds	r3, #1
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d307      	bcc.n	80031f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f2      	bne.n	80031d6 <HAL_DMA_IRQHandler+0x2ca>
 80031f0:	e000      	b.n	80031f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
 8003214:	e000      	b.n	8003218 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003216:	bf00      	nop
    }
  }
}
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop

08003220 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800323c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b40      	cmp	r3, #64	; 0x40
 800324c:	d108      	bne.n	8003260 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800325e:	e007      	b.n	8003270 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	3b10      	subs	r3, #16
 800328c:	4a13      	ldr	r2, [pc, #76]	; (80032dc <DMA_CalcBaseAndBitshift+0x60>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003296:	4a12      	ldr	r2, [pc, #72]	; (80032e0 <DMA_CalcBaseAndBitshift+0x64>)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d908      	bls.n	80032bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <DMA_CalcBaseAndBitshift+0x68>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	1d1a      	adds	r2, r3, #4
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	659a      	str	r2, [r3, #88]	; 0x58
 80032ba:	e006      	b.n	80032ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <DMA_CalcBaseAndBitshift+0x68>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	aaaaaaab 	.word	0xaaaaaaab
 80032e0:	0800baf0 	.word	0x0800baf0
 80032e4:	fffffc00 	.word	0xfffffc00

080032e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d11f      	bne.n	8003342 <DMA_CheckFifoParam+0x5a>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d856      	bhi.n	80033b6 <DMA_CheckFifoParam+0xce>
 8003308:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <DMA_CheckFifoParam+0x28>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003321 	.word	0x08003321
 8003314:	08003333 	.word	0x08003333
 8003318:	08003321 	.word	0x08003321
 800331c:	080033b7 	.word	0x080033b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d046      	beq.n	80033ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003330:	e043      	b.n	80033ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800333a:	d140      	bne.n	80033be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003340:	e03d      	b.n	80033be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334a:	d121      	bne.n	8003390 <DMA_CheckFifoParam+0xa8>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d837      	bhi.n	80033c2 <DMA_CheckFifoParam+0xda>
 8003352:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <DMA_CheckFifoParam+0x70>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	08003369 	.word	0x08003369
 800335c:	0800336f 	.word	0x0800336f
 8003360:	08003369 	.word	0x08003369
 8003364:	08003381 	.word	0x08003381
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      break;
 800336c:	e030      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d025      	beq.n	80033c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337e:	e022      	b.n	80033c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003388:	d11f      	bne.n	80033ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800338e:	e01c      	b.n	80033ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d903      	bls.n	800339e <DMA_CheckFifoParam+0xb6>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d003      	beq.n	80033a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800339c:	e018      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
      break;
 80033a2:	e015      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00e      	beq.n	80033ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      break;
 80033b4:	e00b      	b.n	80033ce <DMA_CheckFifoParam+0xe6>
      break;
 80033b6:	bf00      	nop
 80033b8:	e00a      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033ba:	bf00      	nop
 80033bc:	e008      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033be:	bf00      	nop
 80033c0:	e006      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033c2:	bf00      	nop
 80033c4:	e004      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033c6:	bf00      	nop
 80033c8:	e002      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80033ca:	bf00      	nop
 80033cc:	e000      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
    }
  } 
  
  return status; 
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop

080033e0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80033f2:	4b27      	ldr	r3, [pc, #156]	; (8003490 <HAL_FLASH_Program+0xb0>)
 80033f4:	7d1b      	ldrb	r3, [r3, #20]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_FLASH_Program+0x1e>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e043      	b.n	8003486 <HAL_FLASH_Program+0xa6>
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <HAL_FLASH_Program+0xb0>)
 8003400:	2201      	movs	r2, #1
 8003402:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003404:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003408:	f000 f878 	bl	80034fc <FLASH_WaitForLastOperation>
 800340c:	4603      	mov	r3, r0
 800340e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d133      	bne.n	800347e <HAL_FLASH_Program+0x9e>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d823      	bhi.n	8003464 <HAL_FLASH_Program+0x84>
 800341c:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <HAL_FLASH_Program+0x44>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003435 	.word	0x08003435
 8003428:	08003441 	.word	0x08003441
 800342c:	0800344d 	.word	0x0800344d
 8003430:	08003459 	.word	0x08003459
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8003434:	783b      	ldrb	r3, [r7, #0]
 8003436:	4619      	mov	r1, r3
 8003438:	68b8      	ldr	r0, [r7, #8]
 800343a:	f000 f921 	bl	8003680 <FLASH_Program_Byte>
        break;
 800343e:	e012      	b.n	8003466 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003440:	883b      	ldrh	r3, [r7, #0]
 8003442:	4619      	mov	r1, r3
 8003444:	68b8      	ldr	r0, [r7, #8]
 8003446:	f000 f8f5 	bl	8003634 <FLASH_Program_HalfWord>
        break;
 800344a:	e00c      	b.n	8003466 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4619      	mov	r1, r3
 8003450:	68b8      	ldr	r0, [r7, #8]
 8003452:	f000 f8c9 	bl	80035e8 <FLASH_Program_Word>
        break;
 8003456:	e006      	b.n	8003466 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8003458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800345c:	68b8      	ldr	r0, [r7, #8]
 800345e:	f000 f88d 	bl	800357c <FLASH_Program_DoubleWord>
        break;
 8003462:	e000      	b.n	8003466 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8003464:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003466:	f24c 3050 	movw	r0, #50000	; 0xc350
 800346a:	f000 f847 	bl	80034fc <FLASH_WaitForLastOperation>
 800346e:	4603      	mov	r3, r0
 8003470:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_FLASH_Program+0xb4>)
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	4a07      	ldr	r2, [pc, #28]	; (8003494 <HAL_FLASH_Program+0xb4>)
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800347e:	4b04      	ldr	r3, [pc, #16]	; (8003490 <HAL_FLASH_Program+0xb0>)
 8003480:	2200      	movs	r2, #0
 8003482:	751a      	strb	r2, [r3, #20]

  return status;
 8003484:	7dfb      	ldrb	r3, [r7, #23]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	200006c0 	.word	0x200006c0
 8003494:	40023c00 	.word	0x40023c00

08003498 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_FLASH_Unlock+0x38>)
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	da0b      	bge.n	80034c2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_FLASH_Unlock+0x38>)
 80034ac:	4a09      	ldr	r2, [pc, #36]	; (80034d4 <HAL_FLASH_Unlock+0x3c>)
 80034ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80034b0:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <HAL_FLASH_Unlock+0x38>)
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <HAL_FLASH_Unlock+0x40>)
 80034b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_FLASH_Unlock+0x38>)
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	da01      	bge.n	80034c2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80034c2:	79fb      	ldrb	r3, [r7, #7]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40023c00 	.word	0x40023c00
 80034d4:	45670123 	.word	0x45670123
 80034d8:	cdef89ab 	.word	0xcdef89ab

080034dc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_FLASH_Lock+0x1c>)
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <HAL_FLASH_Lock+0x1c>)
 80034e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034ea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40023c00 	.word	0x40023c00

080034fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003508:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <FLASH_WaitForLastOperation+0x78>)
 800350a:	2200      	movs	r2, #0
 800350c:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800350e:	f7fe fcad 	bl	8001e6c <HAL_GetTick>
 8003512:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003514:	e010      	b.n	8003538 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d00c      	beq.n	8003538 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <FLASH_WaitForLastOperation+0x38>
 8003524:	f7fe fca2 	bl	8001e6c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	d201      	bcs.n	8003538 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e019      	b.n	800356c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003538:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <FLASH_WaitForLastOperation+0x7c>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e8      	bne.n	8003516 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <FLASH_WaitForLastOperation+0x7c>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003550:	f000 f8ba 	bl	80036c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e009      	b.n	800356c <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <FLASH_WaitForLastOperation+0x7c>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003564:	4b04      	ldr	r3, [pc, #16]	; (8003578 <FLASH_WaitForLastOperation+0x7c>)
 8003566:	2201      	movs	r2, #1
 8003568:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
  
}  
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	200006c0 	.word	0x200006c0
 8003578:	40023c00 	.word	0x40023c00

0800357c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003588:	4b16      	ldr	r3, [pc, #88]	; (80035e4 <FLASH_Program_DoubleWord+0x68>)
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	4a15      	ldr	r2, [pc, #84]	; (80035e4 <FLASH_Program_DoubleWord+0x68>)
 800358e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003592:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003594:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <FLASH_Program_DoubleWord+0x68>)
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <FLASH_Program_DoubleWord+0x68>)
 800359a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800359e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80035a0:	4b10      	ldr	r3, [pc, #64]	; (80035e4 <FLASH_Program_DoubleWord+0x68>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	4a0f      	ldr	r2, [pc, #60]	; (80035e4 <FLASH_Program_DoubleWord+0x68>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80035b2:	f3bf 8f6f 	isb	sy
}
 80035b6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80035b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	000a      	movs	r2, r1
 80035c6:	2300      	movs	r3, #0
 80035c8:	68f9      	ldr	r1, [r7, #12]
 80035ca:	3104      	adds	r1, #4
 80035cc:	4613      	mov	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80035d0:	f3bf 8f4f 	dsb	sy
}
 80035d4:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40023c00 	.word	0x40023c00

080035e8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80035f2:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <FLASH_Program_Word+0x48>)
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <FLASH_Program_Word+0x48>)
 80035f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80035fe:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <FLASH_Program_Word+0x48>)
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	4a0b      	ldr	r2, [pc, #44]	; (8003630 <FLASH_Program_Word+0x48>)
 8003604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003608:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800360a:	4b09      	ldr	r3, [pc, #36]	; (8003630 <FLASH_Program_Word+0x48>)
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	4a08      	ldr	r2, [pc, #32]	; (8003630 <FLASH_Program_Word+0x48>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800361c:	f3bf 8f4f 	dsb	sy
}
 8003620:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40023c00 	.word	0x40023c00

08003634 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003640:	4b0e      	ldr	r3, [pc, #56]	; (800367c <FLASH_Program_HalfWord+0x48>)
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	4a0d      	ldr	r2, [pc, #52]	; (800367c <FLASH_Program_HalfWord+0x48>)
 8003646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <FLASH_Program_HalfWord+0x48>)
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	4a0a      	ldr	r2, [pc, #40]	; (800367c <FLASH_Program_HalfWord+0x48>)
 8003652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003656:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <FLASH_Program_HalfWord+0x48>)
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	4a07      	ldr	r2, [pc, #28]	; (800367c <FLASH_Program_HalfWord+0x48>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	887a      	ldrh	r2, [r7, #2]
 8003668:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800366a:	f3bf 8f4f 	dsb	sy
}
 800366e:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	40023c00 	.word	0x40023c00

08003680 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800368c:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <FLASH_Program_Byte+0x44>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	4a0c      	ldr	r2, [pc, #48]	; (80036c4 <FLASH_Program_Byte+0x44>)
 8003692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003696:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <FLASH_Program_Byte+0x44>)
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <FLASH_Program_Byte+0x44>)
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80036a0:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <FLASH_Program_Byte+0x44>)
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	4a07      	ldr	r2, [pc, #28]	; (80036c4 <FLASH_Program_Byte+0x44>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80036b2:	f3bf 8f4f 	dsb	sy
}
 80036b6:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	40023c00 	.word	0x40023c00

080036c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80036cc:	4b21      	ldr	r3, [pc, #132]	; (8003754 <FLASH_SetErrorCode+0x8c>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80036d8:	4b1f      	ldr	r3, [pc, #124]	; (8003758 <FLASH_SetErrorCode+0x90>)
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f043 0320 	orr.w	r3, r3, #32
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <FLASH_SetErrorCode+0x90>)
 80036e2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <FLASH_SetErrorCode+0x8c>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80036f0:	4b19      	ldr	r3, [pc, #100]	; (8003758 <FLASH_SetErrorCode+0x90>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f043 0310 	orr.w	r3, r3, #16
 80036f8:	4a17      	ldr	r2, [pc, #92]	; (8003758 <FLASH_SetErrorCode+0x90>)
 80036fa:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80036fc:	4b15      	ldr	r3, [pc, #84]	; (8003754 <FLASH_SetErrorCode+0x8c>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003708:	4b13      	ldr	r3, [pc, #76]	; (8003758 <FLASH_SetErrorCode+0x90>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f043 0308 	orr.w	r3, r3, #8
 8003710:	4a11      	ldr	r2, [pc, #68]	; (8003758 <FLASH_SetErrorCode+0x90>)
 8003712:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <FLASH_SetErrorCode+0x8c>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <FLASH_SetErrorCode+0x90>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f043 0304 	orr.w	r3, r3, #4
 8003728:	4a0b      	ldr	r2, [pc, #44]	; (8003758 <FLASH_SetErrorCode+0x90>)
 800372a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <FLASH_SetErrorCode+0x8c>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <FLASH_SetErrorCode+0x90>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f043 0302 	orr.w	r3, r3, #2
 8003740:	4a05      	ldr	r2, [pc, #20]	; (8003758 <FLASH_SetErrorCode+0x90>)
 8003742:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <FLASH_SetErrorCode+0x8c>)
 8003746:	22f2      	movs	r2, #242	; 0xf2
 8003748:	60da      	str	r2, [r3, #12]
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	40023c00 	.word	0x40023c00
 8003758:	200006c0 	.word	0x200006c0

0800375c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800376e:	4b30      	ldr	r3, [pc, #192]	; (8003830 <HAL_FLASHEx_Erase+0xd4>)
 8003770:	7d1b      	ldrb	r3, [r3, #20]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_FLASHEx_Erase+0x1e>
 8003776:	2302      	movs	r3, #2
 8003778:	e056      	b.n	8003828 <HAL_FLASHEx_Erase+0xcc>
 800377a:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <HAL_FLASHEx_Erase+0xd4>)
 800377c:	2201      	movs	r2, #1
 800377e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003780:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003784:	f7ff feba 	bl	80034fc <FLASH_WaitForLastOperation>
 8003788:	4603      	mov	r3, r0
 800378a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d146      	bne.n	8003820 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d115      	bne.n	80037ce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4619      	mov	r1, r3
 80037ae:	4610      	mov	r0, r2
 80037b0:	f000 f844 	bl	800383c <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037b8:	f7ff fea0 	bl	80034fc <FLASH_WaitForLastOperation>
 80037bc:	4603      	mov	r3, r0
 80037be:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <HAL_FLASHEx_Erase+0xd8>)
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	491b      	ldr	r1, [pc, #108]	; (8003834 <HAL_FLASHEx_Erase+0xd8>)
 80037c6:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <HAL_FLASHEx_Erase+0xdc>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	610b      	str	r3, [r1, #16]
 80037cc:	e028      	b.n	8003820 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	e01c      	b.n	8003810 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	4619      	mov	r1, r3
 80037de:	68b8      	ldr	r0, [r7, #8]
 80037e0:	f000 f868 	bl	80038b4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037e8:	f7ff fe88 	bl	80034fc <FLASH_WaitForLastOperation>
 80037ec:	4603      	mov	r3, r0
 80037ee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80037f0:	4b10      	ldr	r3, [pc, #64]	; (8003834 <HAL_FLASHEx_Erase+0xd8>)
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	4a0f      	ldr	r2, [pc, #60]	; (8003834 <HAL_FLASHEx_Erase+0xd8>)
 80037f6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80037fa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	601a      	str	r2, [r3, #0]
          break;
 8003808:	e00a      	b.n	8003820 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	3301      	adds	r3, #1
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4413      	add	r3, r2
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	429a      	cmp	r2, r3
 800381e:	d3da      	bcc.n	80037d6 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <HAL_FLASHEx_Erase+0xd4>)
 8003822:	2200      	movs	r2, #0
 8003824:	751a      	strb	r2, [r3, #20]

  return status;
 8003826:	7bfb      	ldrb	r3, [r7, #15]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	200006c0 	.word	0x200006c0
 8003834:	40023c00 	.word	0x40023c00
 8003838:	ffff7ffb 	.word	0xffff7ffb

0800383c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	6039      	str	r1, [r7, #0]
 8003846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <FLASH_MassErase+0x74>)
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	4a18      	ldr	r2, [pc, #96]	; (80038b0 <FLASH_MassErase+0x74>)
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003852:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b03      	cmp	r3, #3
 8003858:	d107      	bne.n	800386a <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <FLASH_MassErase+0x74>)
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	4914      	ldr	r1, [pc, #80]	; (80038b0 <FLASH_MassErase+0x74>)
 8003860:	f248 0304 	movw	r3, #32772	; 0x8004
 8003864:	4313      	orrs	r3, r2
 8003866:	610b      	str	r3, [r1, #16]
 8003868:	e00f      	b.n	800388a <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d106      	bne.n	800387e <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003870:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <FLASH_MassErase+0x74>)
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	4a0e      	ldr	r2, [pc, #56]	; (80038b0 <FLASH_MassErase+0x74>)
 8003876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387a:	6113      	str	r3, [r2, #16]
 800387c:	e005      	b.n	800388a <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 800387e:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <FLASH_MassErase+0x74>)
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	4a0b      	ldr	r2, [pc, #44]	; (80038b0 <FLASH_MassErase+0x74>)
 8003884:	f043 0304 	orr.w	r3, r3, #4
 8003888:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <FLASH_MassErase+0x74>)
 800388c:	691a      	ldr	r2, [r3, #16]
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	4313      	orrs	r3, r2
 8003894:	4a06      	ldr	r2, [pc, #24]	; (80038b0 <FLASH_MassErase+0x74>)
 8003896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800389c:	f3bf 8f4f 	dsb	sy
}
 80038a0:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40023c00 	.word	0x40023c00

080038b4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e010      	b.n	80038f2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d103      	bne.n	80038de <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80038d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e009      	b.n	80038f2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d103      	bne.n	80038ec <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80038e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	e002      	b.n	80038f2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80038ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038f0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b0b      	cmp	r3, #11
 80038f6:	d902      	bls.n	80038fe <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <FLASH_Erase_Sector+0xa0>)
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	4a14      	ldr	r2, [pc, #80]	; (8003954 <FLASH_Erase_Sector+0xa0>)
 8003904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003908:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <FLASH_Erase_Sector+0xa0>)
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	4911      	ldr	r1, [pc, #68]	; (8003954 <FLASH_Erase_Sector+0xa0>)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <FLASH_Erase_Sector+0xa0>)
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	4a0e      	ldr	r2, [pc, #56]	; (8003954 <FLASH_Erase_Sector+0xa0>)
 800391c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003920:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <FLASH_Erase_Sector+0xa0>)
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4313      	orrs	r3, r2
 800392c:	4a09      	ldr	r2, [pc, #36]	; (8003954 <FLASH_Erase_Sector+0xa0>)
 800392e:	f043 0302 	orr.w	r3, r3, #2
 8003932:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003934:	4b07      	ldr	r3, [pc, #28]	; (8003954 <FLASH_Erase_Sector+0xa0>)
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	4a06      	ldr	r2, [pc, #24]	; (8003954 <FLASH_Erase_Sector+0xa0>)
 800393a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8003940:	f3bf 8f4f 	dsb	sy
}
 8003944:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40023c00 	.word	0x40023c00

08003958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003958:	b480      	push	{r7}
 800395a:	b089      	sub	sp, #36	; 0x24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800396e:	2300      	movs	r3, #0
 8003970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	e175      	b.n	8003c64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003978:	2201      	movs	r2, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	f040 8164 	bne.w	8003c5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d00b      	beq.n	80039b6 <HAL_GPIO_Init+0x5e>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d007      	beq.n	80039b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039aa:	2b11      	cmp	r3, #17
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b12      	cmp	r3, #18
 80039b4:	d130      	bne.n	8003a18 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	2203      	movs	r2, #3
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039ec:	2201      	movs	r2, #1
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 0201 	and.w	r2, r3, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	2203      	movs	r2, #3
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x100>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b12      	cmp	r3, #18
 8003a56:	d123      	bne.n	8003aa0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	08da      	lsrs	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3208      	adds	r2, #8
 8003a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	220f      	movs	r2, #15
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	08da      	lsrs	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3208      	adds	r2, #8
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0203 	and.w	r2, r3, #3
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80be 	beq.w	8003c5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae2:	4b66      	ldr	r3, [pc, #408]	; (8003c7c <HAL_GPIO_Init+0x324>)
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	4a65      	ldr	r2, [pc, #404]	; (8003c7c <HAL_GPIO_Init+0x324>)
 8003ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aec:	6453      	str	r3, [r2, #68]	; 0x44
 8003aee:	4b63      	ldr	r3, [pc, #396]	; (8003c7c <HAL_GPIO_Init+0x324>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003afa:	4a61      	ldr	r2, [pc, #388]	; (8003c80 <HAL_GPIO_Init+0x328>)
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	3302      	adds	r3, #2
 8003b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	220f      	movs	r2, #15
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a58      	ldr	r2, [pc, #352]	; (8003c84 <HAL_GPIO_Init+0x32c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d037      	beq.n	8003b96 <HAL_GPIO_Init+0x23e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a57      	ldr	r2, [pc, #348]	; (8003c88 <HAL_GPIO_Init+0x330>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d031      	beq.n	8003b92 <HAL_GPIO_Init+0x23a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a56      	ldr	r2, [pc, #344]	; (8003c8c <HAL_GPIO_Init+0x334>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d02b      	beq.n	8003b8e <HAL_GPIO_Init+0x236>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a55      	ldr	r2, [pc, #340]	; (8003c90 <HAL_GPIO_Init+0x338>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d025      	beq.n	8003b8a <HAL_GPIO_Init+0x232>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a54      	ldr	r2, [pc, #336]	; (8003c94 <HAL_GPIO_Init+0x33c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01f      	beq.n	8003b86 <HAL_GPIO_Init+0x22e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a53      	ldr	r2, [pc, #332]	; (8003c98 <HAL_GPIO_Init+0x340>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d019      	beq.n	8003b82 <HAL_GPIO_Init+0x22a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a52      	ldr	r2, [pc, #328]	; (8003c9c <HAL_GPIO_Init+0x344>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_GPIO_Init+0x226>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a51      	ldr	r2, [pc, #324]	; (8003ca0 <HAL_GPIO_Init+0x348>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00d      	beq.n	8003b7a <HAL_GPIO_Init+0x222>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a50      	ldr	r2, [pc, #320]	; (8003ca4 <HAL_GPIO_Init+0x34c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <HAL_GPIO_Init+0x21e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4f      	ldr	r2, [pc, #316]	; (8003ca8 <HAL_GPIO_Init+0x350>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d101      	bne.n	8003b72 <HAL_GPIO_Init+0x21a>
 8003b6e:	2309      	movs	r3, #9
 8003b70:	e012      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b72:	230a      	movs	r3, #10
 8003b74:	e010      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b76:	2308      	movs	r3, #8
 8003b78:	e00e      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b7a:	2307      	movs	r3, #7
 8003b7c:	e00c      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b7e:	2306      	movs	r3, #6
 8003b80:	e00a      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b82:	2305      	movs	r3, #5
 8003b84:	e008      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b86:	2304      	movs	r3, #4
 8003b88:	e006      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e004      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e002      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b96:	2300      	movs	r3, #0
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	f002 0203 	and.w	r2, r2, #3
 8003b9e:	0092      	lsls	r2, r2, #2
 8003ba0:	4093      	lsls	r3, r2
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ba8:	4935      	ldr	r1, [pc, #212]	; (8003c80 <HAL_GPIO_Init+0x328>)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	089b      	lsrs	r3, r3, #2
 8003bae:	3302      	adds	r3, #2
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bb6:	4b3d      	ldr	r3, [pc, #244]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bda:	4a34      	ldr	r2, [pc, #208]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003be0:	4b32      	ldr	r3, [pc, #200]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c04:	4a29      	ldr	r2, [pc, #164]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c0a:	4b28      	ldr	r3, [pc, #160]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c2e:	4a1f      	ldr	r2, [pc, #124]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c34:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3301      	adds	r3, #1
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	f67f ae86 	bls.w	8003978 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3724      	adds	r7, #36	; 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40013800 	.word	0x40013800
 8003c84:	40020000 	.word	0x40020000
 8003c88:	40020400 	.word	0x40020400
 8003c8c:	40020800 	.word	0x40020800
 8003c90:	40020c00 	.word	0x40020c00
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40021400 	.word	0x40021400
 8003c9c:	40021800 	.word	0x40021800
 8003ca0:	40021c00 	.word	0x40021c00
 8003ca4:	40022000 	.word	0x40022000
 8003ca8:	40022400 	.word	0x40022400
 8003cac:	40013c00 	.word	0x40013c00

08003cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	887b      	ldrh	r3, [r7, #2]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	e001      	b.n	8003cd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	807b      	strh	r3, [r7, #2]
 8003cec:	4613      	mov	r3, r2
 8003cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cf0:	787b      	ldrb	r3, [r7, #1]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cf6:	887a      	ldrh	r2, [r7, #2]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003cfc:	e003      	b.n	8003d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003cfe:	887b      	ldrh	r3, [r7, #2]
 8003d00:	041a      	lsls	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	619a      	str	r2, [r3, #24]
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b085      	sub	sp, #20
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d24:	887a      	ldrh	r2, [r7, #2]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	041a      	lsls	r2, r3, #16
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	43d9      	mvns	r1, r3
 8003d30:	887b      	ldrh	r3, [r7, #2]
 8003d32:	400b      	ands	r3, r1
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	619a      	str	r2, [r3, #24]
}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d006      	beq.n	8003d6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d5e:	4a05      	ldr	r2, [pc, #20]	; (8003d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d60:	88fb      	ldrh	r3, [r7, #6]
 8003d62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f806 	bl	8003d78 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40013c00 	.word	0x40013c00

08003d78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e29b      	b.n	80042de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8087 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003db4:	4b96      	ldr	r3, [pc, #600]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d00c      	beq.n	8003dda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc0:	4b93      	ldr	r3, [pc, #588]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 030c 	and.w	r3, r3, #12
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d112      	bne.n	8003df2 <HAL_RCC_OscConfig+0x62>
 8003dcc:	4b90      	ldr	r3, [pc, #576]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dd8:	d10b      	bne.n	8003df2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dda:	4b8d      	ldr	r3, [pc, #564]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d06c      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x130>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d168      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e275      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCC_OscConfig+0x7a>
 8003dfc:	4b84      	ldr	r3, [pc, #528]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a83      	ldr	r2, [pc, #524]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	e02e      	b.n	8003e68 <HAL_RCC_OscConfig+0xd8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x9c>
 8003e12:	4b7f      	ldr	r3, [pc, #508]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a7e      	ldr	r2, [pc, #504]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b7c      	ldr	r3, [pc, #496]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a7b      	ldr	r2, [pc, #492]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e01d      	b.n	8003e68 <HAL_RCC_OscConfig+0xd8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0xc0>
 8003e36:	4b76      	ldr	r3, [pc, #472]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a75      	ldr	r2, [pc, #468]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b73      	ldr	r3, [pc, #460]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a72      	ldr	r2, [pc, #456]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0xd8>
 8003e50:	4b6f      	ldr	r3, [pc, #444]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a6e      	ldr	r2, [pc, #440]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b6c      	ldr	r3, [pc, #432]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a6b      	ldr	r2, [pc, #428]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d013      	beq.n	8003e98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fd fffc 	bl	8001e6c <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fd fff8 	bl	8001e6c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e229      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	4b61      	ldr	r3, [pc, #388]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0xe8>
 8003e96:	e014      	b.n	8003ec2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fd ffe8 	bl	8001e6c <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fd ffe4 	bl	8001e6c <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e215      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	4b57      	ldr	r3, [pc, #348]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x110>
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d069      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ece:	4b50      	ldr	r3, [pc, #320]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eda:	4b4d      	ldr	r3, [pc, #308]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d11c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x190>
 8003ee6:	4b4a      	ldr	r3, [pc, #296]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d116      	bne.n	8003f20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef2:	4b47      	ldr	r3, [pc, #284]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_RCC_OscConfig+0x17a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d001      	beq.n	8003f0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e1e9      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0a:	4b41      	ldr	r3, [pc, #260]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	493d      	ldr	r1, [pc, #244]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	e040      	b.n	8003fa2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d023      	beq.n	8003f70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f28:	4b39      	ldr	r3, [pc, #228]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a38      	ldr	r2, [pc, #224]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fd ff9a 	bl	8001e6c <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3c:	f7fd ff96 	bl	8001e6c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e1c7      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4e:	4b30      	ldr	r3, [pc, #192]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5a:	4b2d      	ldr	r3, [pc, #180]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4929      	ldr	r1, [pc, #164]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]
 8003f6e:	e018      	b.n	8003fa2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f70:	4b27      	ldr	r3, [pc, #156]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a26      	ldr	r2, [pc, #152]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fd ff76 	bl	8001e6c <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f84:	f7fd ff72 	bl	8001e6c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1a3      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f96:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d038      	beq.n	8004020 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d019      	beq.n	8003fea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb6:	4b16      	ldr	r3, [pc, #88]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fba:	4a15      	ldr	r2, [pc, #84]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc2:	f7fd ff53 	bl	8001e6c <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fca:	f7fd ff4f 	bl	8001e6c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e180      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0x23a>
 8003fe8:	e01a      	b.n	8004020 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fee:	4a08      	ldr	r2, [pc, #32]	; (8004010 <HAL_RCC_OscConfig+0x280>)
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff6:	f7fd ff39 	bl	8001e6c <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	e00a      	b.n	8004014 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ffe:	f7fd ff35 	bl	8001e6c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d903      	bls.n	8004014 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e166      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
 8004010:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004014:	4b92      	ldr	r3, [pc, #584]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 8004016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1ee      	bne.n	8003ffe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80a4 	beq.w	8004176 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402e:	4b8c      	ldr	r3, [pc, #560]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10d      	bne.n	8004056 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	4b89      	ldr	r3, [pc, #548]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	4a88      	ldr	r2, [pc, #544]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004044:	6413      	str	r3, [r2, #64]	; 0x40
 8004046:	4b86      	ldr	r3, [pc, #536]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004052:	2301      	movs	r3, #1
 8004054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004056:	4b83      	ldr	r3, [pc, #524]	; (8004264 <HAL_RCC_OscConfig+0x4d4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d118      	bne.n	8004094 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004062:	4b80      	ldr	r3, [pc, #512]	; (8004264 <HAL_RCC_OscConfig+0x4d4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a7f      	ldr	r2, [pc, #508]	; (8004264 <HAL_RCC_OscConfig+0x4d4>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800406e:	f7fd fefd 	bl	8001e6c <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004076:	f7fd fef9 	bl	8001e6c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b64      	cmp	r3, #100	; 0x64
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e12a      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004088:	4b76      	ldr	r3, [pc, #472]	; (8004264 <HAL_RCC_OscConfig+0x4d4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d106      	bne.n	80040aa <HAL_RCC_OscConfig+0x31a>
 800409c:	4b70      	ldr	r3, [pc, #448]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	4a6f      	ldr	r2, [pc, #444]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6713      	str	r3, [r2, #112]	; 0x70
 80040a8:	e02d      	b.n	8004106 <HAL_RCC_OscConfig+0x376>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10c      	bne.n	80040cc <HAL_RCC_OscConfig+0x33c>
 80040b2:	4b6b      	ldr	r3, [pc, #428]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4a6a      	ldr	r2, [pc, #424]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	6713      	str	r3, [r2, #112]	; 0x70
 80040be:	4b68      	ldr	r3, [pc, #416]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	4a67      	ldr	r2, [pc, #412]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80040c4:	f023 0304 	bic.w	r3, r3, #4
 80040c8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ca:	e01c      	b.n	8004106 <HAL_RCC_OscConfig+0x376>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b05      	cmp	r3, #5
 80040d2:	d10c      	bne.n	80040ee <HAL_RCC_OscConfig+0x35e>
 80040d4:	4b62      	ldr	r3, [pc, #392]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	4a61      	ldr	r2, [pc, #388]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80040da:	f043 0304 	orr.w	r3, r3, #4
 80040de:	6713      	str	r3, [r2, #112]	; 0x70
 80040e0:	4b5f      	ldr	r3, [pc, #380]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e4:	4a5e      	ldr	r2, [pc, #376]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	6713      	str	r3, [r2, #112]	; 0x70
 80040ec:	e00b      	b.n	8004106 <HAL_RCC_OscConfig+0x376>
 80040ee:	4b5c      	ldr	r3, [pc, #368]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	4a5b      	ldr	r2, [pc, #364]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	6713      	str	r3, [r2, #112]	; 0x70
 80040fa:	4b59      	ldr	r3, [pc, #356]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	4a58      	ldr	r2, [pc, #352]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 8004100:	f023 0304 	bic.w	r3, r3, #4
 8004104:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d015      	beq.n	800413a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410e:	f7fd fead 	bl	8001e6c <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004114:	e00a      	b.n	800412c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fd fea9 	bl	8001e6c <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e0d8      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412c:	4b4c      	ldr	r3, [pc, #304]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0ee      	beq.n	8004116 <HAL_RCC_OscConfig+0x386>
 8004138:	e014      	b.n	8004164 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413a:	f7fd fe97 	bl	8001e6c <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004140:	e00a      	b.n	8004158 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004142:	f7fd fe93 	bl	8001e6c <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004150:	4293      	cmp	r3, r2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e0c2      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004158:	4b41      	ldr	r3, [pc, #260]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 800415a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1ee      	bne.n	8004142 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d105      	bne.n	8004176 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800416a:	4b3d      	ldr	r3, [pc, #244]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	4a3c      	ldr	r2, [pc, #240]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 8004170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004174:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 80ae 	beq.w	80042dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004180:	4b37      	ldr	r3, [pc, #220]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 030c 	and.w	r3, r3, #12
 8004188:	2b08      	cmp	r3, #8
 800418a:	d06d      	beq.n	8004268 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b02      	cmp	r3, #2
 8004192:	d14b      	bne.n	800422c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004194:	4b32      	ldr	r3, [pc, #200]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a31      	ldr	r2, [pc, #196]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 800419a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800419e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fd fe64 	bl	8001e6c <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a8:	f7fd fe60 	bl	8001e6c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e091      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ba:	4b29      	ldr	r3, [pc, #164]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69da      	ldr	r2, [r3, #28]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	019b      	lsls	r3, r3, #6
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	085b      	lsrs	r3, r3, #1
 80041de:	3b01      	subs	r3, #1
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	061b      	lsls	r3, r3, #24
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	071b      	lsls	r3, r3, #28
 80041f2:	491b      	ldr	r1, [pc, #108]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f8:	4b19      	ldr	r3, [pc, #100]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a18      	ldr	r2, [pc, #96]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 80041fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fd fe32 	bl	8001e6c <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420c:	f7fd fe2e 	bl	8001e6c <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e05f      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0x47c>
 800422a:	e057      	b.n	80042dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a0b      	ldr	r2, [pc, #44]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 8004232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fd fe18 	bl	8001e6c <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004240:	f7fd fe14 	bl	8001e6c <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e045      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004252:	4b03      	ldr	r3, [pc, #12]	; (8004260 <HAL_RCC_OscConfig+0x4d0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x4b0>
 800425e:	e03d      	b.n	80042dc <HAL_RCC_OscConfig+0x54c>
 8004260:	40023800 	.word	0x40023800
 8004264:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004268:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <HAL_RCC_OscConfig+0x558>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d030      	beq.n	80042d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d129      	bne.n	80042d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d122      	bne.n	80042d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004298:	4013      	ands	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800429e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d119      	bne.n	80042d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	3b01      	subs	r3, #1
 80042b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d10f      	bne.n	80042d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d107      	bne.n	80042d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800

080042ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0d0      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004304:	4b6a      	ldr	r3, [pc, #424]	; (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d910      	bls.n	8004334 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b67      	ldr	r3, [pc, #412]	; (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 020f 	bic.w	r2, r3, #15
 800431a:	4965      	ldr	r1, [pc, #404]	; (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b63      	ldr	r3, [pc, #396]	; (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0b8      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d020      	beq.n	8004382 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800434c:	4b59      	ldr	r3, [pc, #356]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	4a58      	ldr	r2, [pc, #352]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004356:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004364:	4b53      	ldr	r3, [pc, #332]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4a52      	ldr	r2, [pc, #328]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 800436a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800436e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004370:	4b50      	ldr	r3, [pc, #320]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	494d      	ldr	r1, [pc, #308]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d040      	beq.n	8004410 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b47      	ldr	r3, [pc, #284]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d115      	bne.n	80043ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e07f      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ae:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e073      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043be:	4b3d      	ldr	r3, [pc, #244]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e06b      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ce:	4b39      	ldr	r3, [pc, #228]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f023 0203 	bic.w	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4936      	ldr	r1, [pc, #216]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e0:	f7fd fd44 	bl	8001e6c <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e8:	f7fd fd40 	bl	8001e6c <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e053      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 020c 	and.w	r2, r3, #12
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	429a      	cmp	r2, r3
 800440e:	d1eb      	bne.n	80043e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004410:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d210      	bcs.n	8004440 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 020f 	bic.w	r2, r3, #15
 8004426:	4922      	ldr	r1, [pc, #136]	; (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	4313      	orrs	r3, r2
 800442c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	4b20      	ldr	r3, [pc, #128]	; (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e032      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800444c:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4916      	ldr	r1, [pc, #88]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800446a:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	490e      	ldr	r1, [pc, #56]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800447e:	f000 f821 	bl	80044c4 <HAL_RCC_GetSysClockFreq>
 8004482:	4602      	mov	r2, r0
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	490a      	ldr	r1, [pc, #40]	; (80044b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004490:	5ccb      	ldrb	r3, [r1, r3]
 8004492:	fa22 f303 	lsr.w	r3, r2, r3
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <HAL_RCC_ClockConfig+0x1d0>)
 8004498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800449a:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCC_ClockConfig+0x1d4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fd fca0 	bl	8001de4 <HAL_InitTick>

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40023c00 	.word	0x40023c00
 80044b4:	40023800 	.word	0x40023800
 80044b8:	0800bad8 	.word	0x0800bad8
 80044bc:	20000038 	.word	0x20000038
 80044c0:	2000003c 	.word	0x2000003c

080044c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c4:	b5b0      	push	{r4, r5, r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044ca:	2100      	movs	r1, #0
 80044cc:	6079      	str	r1, [r7, #4]
 80044ce:	2100      	movs	r1, #0
 80044d0:	60f9      	str	r1, [r7, #12]
 80044d2:	2100      	movs	r1, #0
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80044d6:	2100      	movs	r1, #0
 80044d8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044da:	4952      	ldr	r1, [pc, #328]	; (8004624 <HAL_RCC_GetSysClockFreq+0x160>)
 80044dc:	6889      	ldr	r1, [r1, #8]
 80044de:	f001 010c 	and.w	r1, r1, #12
 80044e2:	2908      	cmp	r1, #8
 80044e4:	d00d      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0x3e>
 80044e6:	2908      	cmp	r1, #8
 80044e8:	f200 8094 	bhi.w	8004614 <HAL_RCC_GetSysClockFreq+0x150>
 80044ec:	2900      	cmp	r1, #0
 80044ee:	d002      	beq.n	80044f6 <HAL_RCC_GetSysClockFreq+0x32>
 80044f0:	2904      	cmp	r1, #4
 80044f2:	d003      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x38>
 80044f4:	e08e      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044f6:	4b4c      	ldr	r3, [pc, #304]	; (8004628 <HAL_RCC_GetSysClockFreq+0x164>)
 80044f8:	60bb      	str	r3, [r7, #8]
      break;
 80044fa:	e08e      	b.n	800461a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044fc:	4b4b      	ldr	r3, [pc, #300]	; (800462c <HAL_RCC_GetSysClockFreq+0x168>)
 80044fe:	60bb      	str	r3, [r7, #8]
      break;
 8004500:	e08b      	b.n	800461a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004502:	4948      	ldr	r1, [pc, #288]	; (8004624 <HAL_RCC_GetSysClockFreq+0x160>)
 8004504:	6849      	ldr	r1, [r1, #4]
 8004506:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800450a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800450c:	4945      	ldr	r1, [pc, #276]	; (8004624 <HAL_RCC_GetSysClockFreq+0x160>)
 800450e:	6849      	ldr	r1, [r1, #4]
 8004510:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004514:	2900      	cmp	r1, #0
 8004516:	d024      	beq.n	8004562 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004518:	4942      	ldr	r1, [pc, #264]	; (8004624 <HAL_RCC_GetSysClockFreq+0x160>)
 800451a:	6849      	ldr	r1, [r1, #4]
 800451c:	0989      	lsrs	r1, r1, #6
 800451e:	4608      	mov	r0, r1
 8004520:	f04f 0100 	mov.w	r1, #0
 8004524:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004528:	f04f 0500 	mov.w	r5, #0
 800452c:	ea00 0204 	and.w	r2, r0, r4
 8004530:	ea01 0305 	and.w	r3, r1, r5
 8004534:	493d      	ldr	r1, [pc, #244]	; (800462c <HAL_RCC_GetSysClockFreq+0x168>)
 8004536:	fb01 f003 	mul.w	r0, r1, r3
 800453a:	2100      	movs	r1, #0
 800453c:	fb01 f102 	mul.w	r1, r1, r2
 8004540:	1844      	adds	r4, r0, r1
 8004542:	493a      	ldr	r1, [pc, #232]	; (800462c <HAL_RCC_GetSysClockFreq+0x168>)
 8004544:	fba2 0101 	umull	r0, r1, r2, r1
 8004548:	1863      	adds	r3, r4, r1
 800454a:	4619      	mov	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	461a      	mov	r2, r3
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	f7fb fe70 	bl	8000238 <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4613      	mov	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e04a      	b.n	80045f8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004562:	4b30      	ldr	r3, [pc, #192]	; (8004624 <HAL_RCC_GetSysClockFreq+0x160>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	461a      	mov	r2, r3
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004572:	f04f 0100 	mov.w	r1, #0
 8004576:	ea02 0400 	and.w	r4, r2, r0
 800457a:	ea03 0501 	and.w	r5, r3, r1
 800457e:	4620      	mov	r0, r4
 8004580:	4629      	mov	r1, r5
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	014b      	lsls	r3, r1, #5
 800458c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004590:	0142      	lsls	r2, r0, #5
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	1b00      	subs	r0, r0, r4
 8004598:	eb61 0105 	sbc.w	r1, r1, r5
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	018b      	lsls	r3, r1, #6
 80045a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045aa:	0182      	lsls	r2, r0, #6
 80045ac:	1a12      	subs	r2, r2, r0
 80045ae:	eb63 0301 	sbc.w	r3, r3, r1
 80045b2:	f04f 0000 	mov.w	r0, #0
 80045b6:	f04f 0100 	mov.w	r1, #0
 80045ba:	00d9      	lsls	r1, r3, #3
 80045bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045c0:	00d0      	lsls	r0, r2, #3
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	1912      	adds	r2, r2, r4
 80045c8:	eb45 0303 	adc.w	r3, r5, r3
 80045cc:	f04f 0000 	mov.w	r0, #0
 80045d0:	f04f 0100 	mov.w	r1, #0
 80045d4:	0299      	lsls	r1, r3, #10
 80045d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045da:	0290      	lsls	r0, r2, #10
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	f7fb fe24 	bl	8000238 <__aeabi_uldivmod>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4613      	mov	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <HAL_RCC_GetSysClockFreq+0x160>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	0c1b      	lsrs	r3, r3, #16
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	3301      	adds	r3, #1
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004610:	60bb      	str	r3, [r7, #8]
      break;
 8004612:	e002      	b.n	800461a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004614:	4b04      	ldr	r3, [pc, #16]	; (8004628 <HAL_RCC_GetSysClockFreq+0x164>)
 8004616:	60bb      	str	r3, [r7, #8]
      break;
 8004618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800461a:	68bb      	ldr	r3, [r7, #8]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bdb0      	pop	{r4, r5, r7, pc}
 8004624:	40023800 	.word	0x40023800
 8004628:	00f42400 	.word	0x00f42400
 800462c:	017d7840 	.word	0x017d7840

08004630 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <HAL_RCC_GetHCLKFreq+0x14>)
 8004636:	681b      	ldr	r3, [r3, #0]
}
 8004638:	4618      	mov	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000038 	.word	0x20000038

08004648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800464c:	f7ff fff0 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 8004650:	4602      	mov	r2, r0
 8004652:	4b05      	ldr	r3, [pc, #20]	; (8004668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	0a9b      	lsrs	r3, r3, #10
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	4903      	ldr	r1, [pc, #12]	; (800466c <HAL_RCC_GetPCLK1Freq+0x24>)
 800465e:	5ccb      	ldrb	r3, [r1, r3]
 8004660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004664:	4618      	mov	r0, r3
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40023800 	.word	0x40023800
 800466c:	0800bae8 	.word	0x0800bae8

08004670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004674:	f7ff ffdc 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 8004678:	4602      	mov	r2, r0
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	0b5b      	lsrs	r3, r3, #13
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	4903      	ldr	r1, [pc, #12]	; (8004694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004686:	5ccb      	ldrb	r3, [r1, r3]
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800468c:	4618      	mov	r0, r3
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40023800 	.word	0x40023800
 8004694:	0800bae8 	.word	0x0800bae8

08004698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d012      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046c0:	4b69      	ldr	r3, [pc, #420]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4a68      	ldr	r2, [pc, #416]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046ca:	6093      	str	r3, [r2, #8]
 80046cc:	4b66      	ldr	r3, [pc, #408]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d4:	4964      	ldr	r1, [pc, #400]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80046e2:	2301      	movs	r3, #1
 80046e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d017      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046f2:	4b5d      	ldr	r3, [pc, #372]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004700:	4959      	ldr	r1, [pc, #356]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004710:	d101      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004712:	2301      	movs	r3, #1
 8004714:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800471e:	2301      	movs	r3, #1
 8004720:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d017      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800472e:	4b4e      	ldr	r3, [pc, #312]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004734:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	494a      	ldr	r1, [pc, #296]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800474c:	d101      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800474e:	2301      	movs	r3, #1
 8004750:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800475a:	2301      	movs	r3, #1
 800475c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800476a:	2301      	movs	r3, #1
 800476c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 808b 	beq.w	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800477c:	4b3a      	ldr	r3, [pc, #232]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	4a39      	ldr	r2, [pc, #228]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004786:	6413      	str	r3, [r2, #64]	; 0x40
 8004788:	4b37      	ldr	r3, [pc, #220]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004794:	4b35      	ldr	r3, [pc, #212]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a34      	ldr	r2, [pc, #208]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800479a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a0:	f7fd fb64 	bl	8001e6c <HAL_GetTick>
 80047a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a8:	f7fd fb60 	bl	8001e6c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	; 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e38f      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047ba:	4b2c      	ldr	r3, [pc, #176]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047c6:	4b28      	ldr	r3, [pc, #160]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d035      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d02e      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e4:	4b20      	ldr	r3, [pc, #128]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047ee:	4b1e      	ldr	r3, [pc, #120]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	4a1d      	ldr	r2, [pc, #116]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047fa:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	4a1a      	ldr	r2, [pc, #104]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004804:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004806:	4a18      	ldr	r2, [pc, #96]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800480c:	4b16      	ldr	r3, [pc, #88]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	d114      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fd fb28 	bl	8001e6c <HAL_GetTick>
 800481c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481e:	e00a      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004820:	f7fd fb24 	bl	8001e6c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	; 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e351      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004836:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0ee      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800484e:	d111      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800485c:	4b04      	ldr	r3, [pc, #16]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800485e:	400b      	ands	r3, r1
 8004860:	4901      	ldr	r1, [pc, #4]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]
 8004866:	e00b      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004868:	40023800 	.word	0x40023800
 800486c:	40007000 	.word	0x40007000
 8004870:	0ffffcff 	.word	0x0ffffcff
 8004874:	4bb3      	ldr	r3, [pc, #716]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	4ab2      	ldr	r2, [pc, #712]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800487a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800487e:	6093      	str	r3, [r2, #8]
 8004880:	4bb0      	ldr	r3, [pc, #704]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004882:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488c:	49ad      	ldr	r1, [pc, #692]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488e:	4313      	orrs	r3, r2
 8004890:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	2b00      	cmp	r3, #0
 800489c:	d010      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800489e:	4ba9      	ldr	r3, [pc, #676]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a4:	4aa7      	ldr	r2, [pc, #668]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048ae:	4ba5      	ldr	r3, [pc, #660]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	49a2      	ldr	r1, [pc, #648]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048cc:	4b9d      	ldr	r3, [pc, #628]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048da:	499a      	ldr	r1, [pc, #616]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ee:	4b95      	ldr	r3, [pc, #596]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048fc:	4991      	ldr	r1, [pc, #580]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004910:	4b8c      	ldr	r3, [pc, #560]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800491e:	4989      	ldr	r1, [pc, #548]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004932:	4b84      	ldr	r3, [pc, #528]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004938:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	4980      	ldr	r1, [pc, #512]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004954:	4b7b      	ldr	r3, [pc, #492]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495a:	f023 0203 	bic.w	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	4978      	ldr	r1, [pc, #480]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004976:	4b73      	ldr	r3, [pc, #460]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	f023 020c 	bic.w	r2, r3, #12
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004984:	496f      	ldr	r1, [pc, #444]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004998:	4b6a      	ldr	r3, [pc, #424]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	4967      	ldr	r1, [pc, #412]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049ba:	4b62      	ldr	r3, [pc, #392]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c8:	495e      	ldr	r1, [pc, #376]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049dc:	4b59      	ldr	r3, [pc, #356]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	4956      	ldr	r1, [pc, #344]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049fe:	4b51      	ldr	r3, [pc, #324]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0c:	494d      	ldr	r1, [pc, #308]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a20:	4b48      	ldr	r3, [pc, #288]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2e:	4945      	ldr	r1, [pc, #276]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a42:	4b40      	ldr	r3, [pc, #256]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a50:	493c      	ldr	r1, [pc, #240]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a64:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a72:	4934      	ldr	r1, [pc, #208]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d011      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a86:	4b2f      	ldr	r3, [pc, #188]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a94:	492b      	ldr	r1, [pc, #172]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ac6:	4b1f      	ldr	r3, [pc, #124]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad4:	491b      	ldr	r1, [pc, #108]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00b      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ae8:	4b16      	ldr	r3, [pc, #88]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004af8:	4912      	ldr	r1, [pc, #72]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004b0c:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b12:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1c:	4909      	ldr	r1, [pc, #36]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00f      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	e002      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	4986      	ldr	r1, [pc, #536]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00b      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b5c:	4b81      	ldr	r3, [pc, #516]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b6c:	497d      	ldr	r1, [pc, #500]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d006      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80d6 	beq.w	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b88:	4b76      	ldr	r3, [pc, #472]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a75      	ldr	r2, [pc, #468]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b94:	f7fd f96a 	bl	8001e6c <HAL_GetTick>
 8004b98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b9c:	f7fd f966 	bl	8001e6c <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	; 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e195      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bae:	4b6d      	ldr	r3, [pc, #436]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d021      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d11d      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bce:	4b65      	ldr	r3, [pc, #404]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bdc:	4b61      	ldr	r3, [pc, #388]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be2:	0e1b      	lsrs	r3, r3, #24
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	019a      	lsls	r2, r3, #6
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	061b      	lsls	r3, r3, #24
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	071b      	lsls	r3, r3, #28
 8004c02:	4958      	ldr	r1, [pc, #352]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d004      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c1e:	d00a      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d02e      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c34:	d129      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c36:	4b4b      	ldr	r3, [pc, #300]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c44:	4b47      	ldr	r3, [pc, #284]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4a:	0f1b      	lsrs	r3, r3, #28
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	019a      	lsls	r2, r3, #6
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	041b      	lsls	r3, r3, #16
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	061b      	lsls	r3, r3, #24
 8004c64:	431a      	orrs	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	071b      	lsls	r3, r3, #28
 8004c6a:	493e      	ldr	r1, [pc, #248]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c72:	4b3c      	ldr	r3, [pc, #240]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c78:	f023 021f 	bic.w	r2, r3, #31
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	3b01      	subs	r3, #1
 8004c82:	4938      	ldr	r1, [pc, #224]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01d      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c96:	4b33      	ldr	r3, [pc, #204]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9c:	0e1b      	lsrs	r3, r3, #24
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ca4:	4b2f      	ldr	r3, [pc, #188]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004caa:	0f1b      	lsrs	r3, r3, #28
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	019a      	lsls	r2, r3, #6
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	041b      	lsls	r3, r3, #16
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	061b      	lsls	r3, r3, #24
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	071b      	lsls	r3, r3, #28
 8004cca:	4926      	ldr	r1, [pc, #152]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d011      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	019a      	lsls	r2, r3, #6
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	061b      	lsls	r3, r3, #24
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	071b      	lsls	r3, r3, #28
 8004cfa:	491a      	ldr	r1, [pc, #104]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d02:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a17      	ldr	r2, [pc, #92]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0e:	f7fd f8ad 	bl	8001e6c <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d16:	f7fd f8a9 	bl	8001e6c <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b64      	cmp	r3, #100	; 0x64
 8004d22:	d901      	bls.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e0d8      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d28:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	f040 80ce 	bne.w	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d48:	f7fd f890 	bl	8001e6c <HAL_GetTick>
 8004d4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d4e:	e00b      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d50:	f7fd f88c 	bl	8001e6c <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	; 0x64
 8004d5c:	d904      	bls.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e0bb      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d68:	4b5e      	ldr	r3, [pc, #376]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d74:	d0ec      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02e      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d12a      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d9e:	4b51      	ldr	r3, [pc, #324]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dac:	4b4d      	ldr	r3, [pc, #308]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db2:	0f1b      	lsrs	r3, r3, #28
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	019a      	lsls	r2, r3, #6
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	041b      	lsls	r3, r3, #16
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	061b      	lsls	r3, r3, #24
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	071b      	lsls	r3, r3, #28
 8004dd2:	4944      	ldr	r1, [pc, #272]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dda:	4b42      	ldr	r3, [pc, #264]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004de0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	3b01      	subs	r3, #1
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	493d      	ldr	r1, [pc, #244]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d022      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e08:	d11d      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e0a:	4b36      	ldr	r3, [pc, #216]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	0e1b      	lsrs	r3, r3, #24
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e18:	4b32      	ldr	r3, [pc, #200]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	0f1b      	lsrs	r3, r3, #28
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	019a      	lsls	r2, r3, #6
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	041b      	lsls	r3, r3, #16
 8004e32:	431a      	orrs	r2, r3
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	061b      	lsls	r3, r3, #24
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	071b      	lsls	r3, r3, #28
 8004e3e:	4929      	ldr	r1, [pc, #164]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d028      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e52:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e58:	0e1b      	lsrs	r3, r3, #24
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e60:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e66:	0c1b      	lsrs	r3, r3, #16
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	019a      	lsls	r2, r3, #6
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	061b      	lsls	r3, r3, #24
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	071b      	lsls	r3, r3, #28
 8004e86:	4917      	ldr	r1, [pc, #92]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e8e:	4b15      	ldr	r3, [pc, #84]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	4911      	ldr	r1, [pc, #68]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a0e      	ldr	r2, [pc, #56]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb0:	f7fc ffdc 	bl	8001e6c <HAL_GetTick>
 8004eb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004eb8:	f7fc ffd8 	bl	8001e6c <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b64      	cmp	r3, #100	; 0x64
 8004ec4:	d901      	bls.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e007      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed6:	d1ef      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40023800 	.word	0x40023800

08004ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e09d      	b.n	8005036 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d108      	bne.n	8004f14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f0a:	d009      	beq.n	8004f20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	61da      	str	r2, [r3, #28]
 8004f12:	e005      	b.n	8004f20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fc fd60 	bl	8001a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f60:	d902      	bls.n	8004f68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e002      	b.n	8004f6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f76:	d007      	beq.n	8004f88 <HAL_SPI_Init+0xa0>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f80:	d002      	beq.n	8004f88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	ea42 0103 	orr.w	r1, r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	0c1b      	lsrs	r3, r3, #16
 8004fe4:	f003 0204 	and.w	r2, r3, #4
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005004:	ea42 0103 	orr.w	r1, r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005024:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b088      	sub	sp, #32
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_SPI_Transmit+0x22>
 800505c:	2302      	movs	r3, #2
 800505e:	e158      	b.n	8005312 <HAL_SPI_Transmit+0x2d4>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005068:	f7fc ff00 	bl	8001e6c <HAL_GetTick>
 800506c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b01      	cmp	r3, #1
 800507c:	d002      	beq.n	8005084 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800507e:	2302      	movs	r3, #2
 8005080:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005082:	e13d      	b.n	8005300 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_SPI_Transmit+0x52>
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005094:	e134      	b.n	8005300 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2203      	movs	r2, #3
 800509a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e0:	d10f      	bne.n	8005102 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005100:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b40      	cmp	r3, #64	; 0x40
 800510e:	d007      	beq.n	8005120 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800511e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005128:	d94b      	bls.n	80051c2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_SPI_Transmit+0xfa>
 8005132:	8afb      	ldrh	r3, [r7, #22]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d13e      	bne.n	80051b6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	881a      	ldrh	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	1c9a      	adds	r2, r3, #2
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800515c:	e02b      	b.n	80051b6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b02      	cmp	r3, #2
 800516a:	d112      	bne.n	8005192 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	881a      	ldrh	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	1c9a      	adds	r2, r3, #2
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005190:	e011      	b.n	80051b6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005192:	f7fc fe6b 	bl	8001e6c <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d803      	bhi.n	80051aa <HAL_SPI_Transmit+0x16c>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a8:	d102      	bne.n	80051b0 <HAL_SPI_Transmit+0x172>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d102      	bne.n	80051b6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051b4:	e0a4      	b.n	8005300 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1ce      	bne.n	800515e <HAL_SPI_Transmit+0x120>
 80051c0:	e07c      	b.n	80052bc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_SPI_Transmit+0x192>
 80051ca:	8afb      	ldrh	r3, [r7, #22]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d170      	bne.n	80052b2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d912      	bls.n	8005200 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	881a      	ldrh	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	1c9a      	adds	r2, r3, #2
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b02      	subs	r3, #2
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051fe:	e058      	b.n	80052b2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	7812      	ldrb	r2, [r2, #0]
 800520c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005226:	e044      	b.n	80052b2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b02      	cmp	r3, #2
 8005234:	d12b      	bne.n	800528e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	d912      	bls.n	8005266 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	881a      	ldrh	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	1c9a      	adds	r2, r3, #2
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b02      	subs	r3, #2
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005264:	e025      	b.n	80052b2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	7812      	ldrb	r2, [r2, #0]
 8005272:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800528c:	e011      	b.n	80052b2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800528e:	f7fc fded 	bl	8001e6c <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d803      	bhi.n	80052a6 <HAL_SPI_Transmit+0x268>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d102      	bne.n	80052ac <HAL_SPI_Transmit+0x26e>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052b0:	e026      	b.n	8005300 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1b5      	bne.n	8005228 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	6839      	ldr	r1, [r7, #0]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f945 	bl	8005550 <SPI_EndRxTxTransaction>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10a      	bne.n	80052f0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e000      	b.n	8005300 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80052fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005310:	7ffb      	ldrb	r3, [r7, #31]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b088      	sub	sp, #32
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800532c:	f7fc fd9e 	bl	8001e6c <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	4413      	add	r3, r2
 800533a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800533c:	f7fc fd96 	bl	8001e6c <HAL_GetTick>
 8005340:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005342:	4b39      	ldr	r3, [pc, #228]	; (8005428 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	015b      	lsls	r3, r3, #5
 8005348:	0d1b      	lsrs	r3, r3, #20
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	fb02 f303 	mul.w	r3, r2, r3
 8005350:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005352:	e054      	b.n	80053fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535a:	d050      	beq.n	80053fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800535c:	f7fc fd86 	bl	8001e6c <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	429a      	cmp	r2, r3
 800536a:	d902      	bls.n	8005372 <SPI_WaitFlagStateUntilTimeout+0x56>
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d13d      	bne.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800538a:	d111      	bne.n	80053b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005394:	d004      	beq.n	80053a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800539e:	d107      	bne.n	80053b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b8:	d10f      	bne.n	80053da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e017      	b.n	800541e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4013      	ands	r3, r2
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	bf0c      	ite	eq
 800540e:	2301      	moveq	r3, #1
 8005410:	2300      	movne	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	429a      	cmp	r2, r3
 800541a:	d19b      	bne.n	8005354 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3720      	adds	r7, #32
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000038 	.word	0x20000038

0800542c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800543a:	f7fc fd17 	bl	8001e6c <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	4413      	add	r3, r2
 8005448:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800544a:	f7fc fd0f 	bl	8001e6c <HAL_GetTick>
 800544e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005450:	4b3e      	ldr	r3, [pc, #248]	; (800554c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	00da      	lsls	r2, r3, #3
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	0d1b      	lsrs	r3, r3, #20
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	fb02 f303 	mul.w	r3, r2, r3
 8005466:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005468:	e062      	b.n	8005530 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005470:	d109      	bne.n	8005486 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d106      	bne.n	8005486 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	330c      	adds	r3, #12
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005484:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548c:	d050      	beq.n	8005530 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800548e:	f7fc fced 	bl	8001e6c <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	429a      	cmp	r2, r3
 800549c:	d902      	bls.n	80054a4 <SPI_WaitFifoStateUntilTimeout+0x78>
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d13d      	bne.n	8005520 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054bc:	d111      	bne.n	80054e2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c6:	d004      	beq.n	80054d2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d0:	d107      	bne.n	80054e2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ea:	d10f      	bne.n	800550c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800550a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e010      	b.n	8005542 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	3b01      	subs	r3, #1
 800552e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4013      	ands	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d194      	bne.n	800546a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3720      	adds	r7, #32
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20000038 	.word	0x20000038

08005550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2200      	movs	r2, #0
 8005564:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff ff5f 	bl	800542c <SPI_WaitFifoStateUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005578:	f043 0220 	orr.w	r2, r3, #32
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e027      	b.n	80055d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2200      	movs	r2, #0
 800558c:	2180      	movs	r1, #128	; 0x80
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f7ff fec4 	bl	800531c <SPI_WaitFlagStateUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e014      	b.n	80055d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff ff38 	bl	800542c <SPI_WaitFifoStateUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d007      	beq.n	80055d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e000      	b.n	80055d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e049      	b.n	8005682 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fc fa84 	bl	8001b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f000 fd62 	bl	80060e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	d001      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e054      	b.n	800574e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a26      	ldr	r2, [pc, #152]	; (800575c <HAL_TIM_Base_Start_IT+0xd0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d022      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x80>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ce:	d01d      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x80>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a22      	ldr	r2, [pc, #136]	; (8005760 <HAL_TIM_Base_Start_IT+0xd4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d018      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x80>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a21      	ldr	r2, [pc, #132]	; (8005764 <HAL_TIM_Base_Start_IT+0xd8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d013      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x80>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1f      	ldr	r2, [pc, #124]	; (8005768 <HAL_TIM_Base_Start_IT+0xdc>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00e      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x80>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1e      	ldr	r2, [pc, #120]	; (800576c <HAL_TIM_Base_Start_IT+0xe0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x80>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1c      	ldr	r2, [pc, #112]	; (8005770 <HAL_TIM_Base_Start_IT+0xe4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x80>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1b      	ldr	r2, [pc, #108]	; (8005774 <HAL_TIM_Base_Start_IT+0xe8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d115      	bne.n	8005738 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	4b19      	ldr	r3, [pc, #100]	; (8005778 <HAL_TIM_Base_Start_IT+0xec>)
 8005714:	4013      	ands	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b06      	cmp	r3, #6
 800571c:	d015      	beq.n	800574a <HAL_TIM_Base_Start_IT+0xbe>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005724:	d011      	beq.n	800574a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0201 	orr.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005736:	e008      	b.n	800574a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	e000      	b.n	800574c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40010000 	.word	0x40010000
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	40010400 	.word	0x40010400
 8005770:	40014000 	.word	0x40014000
 8005774:	40001800 	.word	0x40001800
 8005778:	00010007 	.word	0x00010007

0800577c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e049      	b.n	8005822 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f841 	bl	800582a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f000 fc92 	bl	80060e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e08f      	b.n	8005974 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d106      	bne.n	800586e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7fc f90d 	bl	8001a88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2202      	movs	r2, #2
 8005872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6899      	ldr	r1, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	4b3e      	ldr	r3, [pc, #248]	; (800597c <HAL_TIM_Encoder_Init+0x13c>)
 8005882:	400b      	ands	r3, r1
 8005884:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3304      	adds	r3, #4
 800588e:	4619      	mov	r1, r3
 8005890:	4610      	mov	r0, r2
 8005892:	f000 fc27 	bl	80060e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4b31      	ldr	r3, [pc, #196]	; (8005980 <HAL_TIM_Encoder_Init+0x140>)
 80058bc:	4013      	ands	r3, r2
 80058be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	4313      	orrs	r3, r2
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4b2b      	ldr	r3, [pc, #172]	; (8005984 <HAL_TIM_Encoder_Init+0x144>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4b2a      	ldr	r3, [pc, #168]	; (8005988 <HAL_TIM_Encoder_Init+0x148>)
 80058de:	4013      	ands	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	4313      	orrs	r3, r2
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	011a      	lsls	r2, r3, #4
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	031b      	lsls	r3, r3, #12
 8005900:	4313      	orrs	r3, r2
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005916:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	4313      	orrs	r3, r2
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	fffebff8 	.word	0xfffebff8
 8005980:	fffffcfc 	.word	0xfffffcfc
 8005984:	fffff3f3 	.word	0xfffff3f3
 8005988:	ffff0f0f 	.word	0xffff0f0f

0800598c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800599c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d110      	bne.n	80059de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d102      	bne.n	80059c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80059c2:	7b7b      	ldrb	r3, [r7, #13]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d001      	beq.n	80059cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e069      	b.n	8005aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059dc:	e031      	b.n	8005a42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d110      	bne.n	8005a06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d102      	bne.n	80059f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059ea:	7b3b      	ldrb	r3, [r7, #12]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d001      	beq.n	80059f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e055      	b.n	8005aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a04:	e01d      	b.n	8005a42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d108      	bne.n	8005a1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a0c:	7bbb      	ldrb	r3, [r7, #14]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d105      	bne.n	8005a1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a12:	7b7b      	ldrb	r3, [r7, #13]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d102      	bne.n	8005a1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a18:	7b3b      	ldrb	r3, [r7, #12]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d001      	beq.n	8005a22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e03e      	b.n	8005aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_TIM_Encoder_Start+0xc4>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d008      	beq.n	8005a60 <HAL_TIM_Encoder_Start+0xd4>
 8005a4e:	e00f      	b.n	8005a70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2201      	movs	r2, #1
 8005a56:	2100      	movs	r1, #0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fedb 	bl	8006814 <TIM_CCxChannelCmd>
      break;
 8005a5e:	e016      	b.n	8005a8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2201      	movs	r2, #1
 8005a66:	2104      	movs	r1, #4
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fed3 	bl	8006814 <TIM_CCxChannelCmd>
      break;
 8005a6e:	e00e      	b.n	8005a8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2201      	movs	r2, #1
 8005a76:	2100      	movs	r1, #0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fecb 	bl	8006814 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2201      	movs	r2, #1
 8005a84:	2104      	movs	r1, #4
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fec4 	bl	8006814 <TIM_CCxChannelCmd>
      break;
 8005a8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0201 	orr.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d122      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d11b      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0202 	mvn.w	r2, #2
 8005ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fadc 	bl	80060a8 <HAL_TIM_IC_CaptureCallback>
 8005af0:	e005      	b.n	8005afe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 face 	bl	8006094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fadf 	bl	80060bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d122      	bne.n	8005b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d11b      	bne.n	8005b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f06f 0204 	mvn.w	r2, #4
 8005b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fab2 	bl	80060a8 <HAL_TIM_IC_CaptureCallback>
 8005b44:	e005      	b.n	8005b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 faa4 	bl	8006094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fab5 	bl	80060bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d122      	bne.n	8005bac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0308 	and.w	r3, r3, #8
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d11b      	bne.n	8005bac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0208 	mvn.w	r2, #8
 8005b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2204      	movs	r2, #4
 8005b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa88 	bl	80060a8 <HAL_TIM_IC_CaptureCallback>
 8005b98:	e005      	b.n	8005ba6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fa7a 	bl	8006094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fa8b 	bl	80060bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0310 	and.w	r3, r3, #16
 8005bb6:	2b10      	cmp	r3, #16
 8005bb8:	d122      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b10      	cmp	r3, #16
 8005bc6:	d11b      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0210 	mvn.w	r2, #16
 8005bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2208      	movs	r2, #8
 8005bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fa5e 	bl	80060a8 <HAL_TIM_IC_CaptureCallback>
 8005bec:	e005      	b.n	8005bfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fa50 	bl	8006094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fa61 	bl	80060bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d10e      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d107      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0201 	mvn.w	r2, #1
 8005c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fa fdf6 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c36:	2b80      	cmp	r3, #128	; 0x80
 8005c38:	d10e      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c44:	2b80      	cmp	r3, #128	; 0x80
 8005c46:	d107      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fe9c 	bl	8006990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c66:	d10e      	bne.n	8005c86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b80      	cmp	r3, #128	; 0x80
 8005c74:	d107      	bne.n	8005c86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fe8f 	bl	80069a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d10e      	bne.n	8005cb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	d107      	bne.n	8005cb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fa0f 	bl	80060d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	d10e      	bne.n	8005cde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d107      	bne.n	8005cde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f06f 0220 	mvn.w	r2, #32
 8005cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fe4f 	bl	800697c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e0fd      	b.n	8005efe <HAL_TIM_PWM_ConfigChannel+0x216>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b14      	cmp	r3, #20
 8005d0e:	f200 80f0 	bhi.w	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005d12:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d6d 	.word	0x08005d6d
 8005d1c:	08005ef3 	.word	0x08005ef3
 8005d20:	08005ef3 	.word	0x08005ef3
 8005d24:	08005ef3 	.word	0x08005ef3
 8005d28:	08005dad 	.word	0x08005dad
 8005d2c:	08005ef3 	.word	0x08005ef3
 8005d30:	08005ef3 	.word	0x08005ef3
 8005d34:	08005ef3 	.word	0x08005ef3
 8005d38:	08005def 	.word	0x08005def
 8005d3c:	08005ef3 	.word	0x08005ef3
 8005d40:	08005ef3 	.word	0x08005ef3
 8005d44:	08005ef3 	.word	0x08005ef3
 8005d48:	08005e2f 	.word	0x08005e2f
 8005d4c:	08005ef3 	.word	0x08005ef3
 8005d50:	08005ef3 	.word	0x08005ef3
 8005d54:	08005ef3 	.word	0x08005ef3
 8005d58:	08005e71 	.word	0x08005e71
 8005d5c:	08005ef3 	.word	0x08005ef3
 8005d60:	08005ef3 	.word	0x08005ef3
 8005d64:	08005ef3 	.word	0x08005ef3
 8005d68:	08005eb1 	.word	0x08005eb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fa56 	bl	8006224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0208 	orr.w	r2, r2, #8
 8005d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0204 	bic.w	r2, r2, #4
 8005d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6999      	ldr	r1, [r3, #24]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	691a      	ldr	r2, [r3, #16]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	619a      	str	r2, [r3, #24]
      break;
 8005daa:	e0a3      	b.n	8005ef4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 faa8 	bl	8006308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6999      	ldr	r1, [r3, #24]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	021a      	lsls	r2, r3, #8
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	619a      	str	r2, [r3, #24]
      break;
 8005dec:	e082      	b.n	8005ef4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 faff 	bl	80063f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0208 	orr.w	r2, r2, #8
 8005e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69da      	ldr	r2, [r3, #28]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0204 	bic.w	r2, r2, #4
 8005e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69d9      	ldr	r1, [r3, #28]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	61da      	str	r2, [r3, #28]
      break;
 8005e2c:	e062      	b.n	8005ef4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fb55 	bl	80064e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69d9      	ldr	r1, [r3, #28]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	021a      	lsls	r2, r3, #8
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	61da      	str	r2, [r3, #28]
      break;
 8005e6e:	e041      	b.n	8005ef4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fb8c 	bl	8006594 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0208 	orr.w	r2, r2, #8
 8005e8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0204 	bic.w	r2, r2, #4
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005eae:	e021      	b.n	8005ef4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fbbe 	bl	8006638 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	021a      	lsls	r2, r3, #8
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ef0:	e000      	b.n	8005ef4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005ef2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop

08005f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_TIM_ConfigClockSource+0x18>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e0b3      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x180>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4b55      	ldr	r3, [pc, #340]	; (8006090 <HAL_TIM_ConfigClockSource+0x188>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f58:	d03e      	beq.n	8005fd8 <HAL_TIM_ConfigClockSource+0xd0>
 8005f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f5e:	f200 8087 	bhi.w	8006070 <HAL_TIM_ConfigClockSource+0x168>
 8005f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f66:	f000 8085 	beq.w	8006074 <HAL_TIM_ConfigClockSource+0x16c>
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6e:	d87f      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x168>
 8005f70:	2b70      	cmp	r3, #112	; 0x70
 8005f72:	d01a      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0xa2>
 8005f74:	2b70      	cmp	r3, #112	; 0x70
 8005f76:	d87b      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x168>
 8005f78:	2b60      	cmp	r3, #96	; 0x60
 8005f7a:	d050      	beq.n	800601e <HAL_TIM_ConfigClockSource+0x116>
 8005f7c:	2b60      	cmp	r3, #96	; 0x60
 8005f7e:	d877      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x168>
 8005f80:	2b50      	cmp	r3, #80	; 0x50
 8005f82:	d03c      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0xf6>
 8005f84:	2b50      	cmp	r3, #80	; 0x50
 8005f86:	d873      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x168>
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d058      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x136>
 8005f8c:	2b40      	cmp	r3, #64	; 0x40
 8005f8e:	d86f      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x168>
 8005f90:	2b30      	cmp	r3, #48	; 0x30
 8005f92:	d064      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x156>
 8005f94:	2b30      	cmp	r3, #48	; 0x30
 8005f96:	d86b      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x168>
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d060      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x156>
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d867      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x168>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d05c      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x156>
 8005fa4:	2b10      	cmp	r3, #16
 8005fa6:	d05a      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005fa8:	e062      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6899      	ldr	r1, [r3, #8]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f000 fc0b 	bl	80067d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	609a      	str	r2, [r3, #8]
      break;
 8005fd6:	e04e      	b.n	8006076 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	6899      	ldr	r1, [r3, #8]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f000 fbf4 	bl	80067d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ffa:	609a      	str	r2, [r3, #8]
      break;
 8005ffc:	e03b      	b.n	8006076 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6859      	ldr	r1, [r3, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	461a      	mov	r2, r3
 800600c:	f000 fb68 	bl	80066e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2150      	movs	r1, #80	; 0x50
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fbc1 	bl	800679e <TIM_ITRx_SetConfig>
      break;
 800601c:	e02b      	b.n	8006076 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6859      	ldr	r1, [r3, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	461a      	mov	r2, r3
 800602c:	f000 fb87 	bl	800673e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2160      	movs	r1, #96	; 0x60
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fbb1 	bl	800679e <TIM_ITRx_SetConfig>
      break;
 800603c:	e01b      	b.n	8006076 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6859      	ldr	r1, [r3, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	461a      	mov	r2, r3
 800604c:	f000 fb48 	bl	80066e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2140      	movs	r1, #64	; 0x40
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fba1 	bl	800679e <TIM_ITRx_SetConfig>
      break;
 800605c:	e00b      	b.n	8006076 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4619      	mov	r1, r3
 8006068:	4610      	mov	r0, r2
 800606a:	f000 fb98 	bl	800679e <TIM_ITRx_SetConfig>
        break;
 800606e:	e002      	b.n	8006076 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006070:	bf00      	nop
 8006072:	e000      	b.n	8006076 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006074:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	fffeff88 	.word	0xfffeff88

08006094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a40      	ldr	r2, [pc, #256]	; (80061f8 <TIM_Base_SetConfig+0x114>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d013      	beq.n	8006124 <TIM_Base_SetConfig+0x40>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006102:	d00f      	beq.n	8006124 <TIM_Base_SetConfig+0x40>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a3d      	ldr	r2, [pc, #244]	; (80061fc <TIM_Base_SetConfig+0x118>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00b      	beq.n	8006124 <TIM_Base_SetConfig+0x40>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a3c      	ldr	r2, [pc, #240]	; (8006200 <TIM_Base_SetConfig+0x11c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d007      	beq.n	8006124 <TIM_Base_SetConfig+0x40>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a3b      	ldr	r2, [pc, #236]	; (8006204 <TIM_Base_SetConfig+0x120>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d003      	beq.n	8006124 <TIM_Base_SetConfig+0x40>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a3a      	ldr	r2, [pc, #232]	; (8006208 <TIM_Base_SetConfig+0x124>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d108      	bne.n	8006136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a2f      	ldr	r2, [pc, #188]	; (80061f8 <TIM_Base_SetConfig+0x114>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d02b      	beq.n	8006196 <TIM_Base_SetConfig+0xb2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006144:	d027      	beq.n	8006196 <TIM_Base_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a2c      	ldr	r2, [pc, #176]	; (80061fc <TIM_Base_SetConfig+0x118>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d023      	beq.n	8006196 <TIM_Base_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a2b      	ldr	r2, [pc, #172]	; (8006200 <TIM_Base_SetConfig+0x11c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d01f      	beq.n	8006196 <TIM_Base_SetConfig+0xb2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a2a      	ldr	r2, [pc, #168]	; (8006204 <TIM_Base_SetConfig+0x120>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d01b      	beq.n	8006196 <TIM_Base_SetConfig+0xb2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a29      	ldr	r2, [pc, #164]	; (8006208 <TIM_Base_SetConfig+0x124>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d017      	beq.n	8006196 <TIM_Base_SetConfig+0xb2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a28      	ldr	r2, [pc, #160]	; (800620c <TIM_Base_SetConfig+0x128>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d013      	beq.n	8006196 <TIM_Base_SetConfig+0xb2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a27      	ldr	r2, [pc, #156]	; (8006210 <TIM_Base_SetConfig+0x12c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00f      	beq.n	8006196 <TIM_Base_SetConfig+0xb2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a26      	ldr	r2, [pc, #152]	; (8006214 <TIM_Base_SetConfig+0x130>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00b      	beq.n	8006196 <TIM_Base_SetConfig+0xb2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a25      	ldr	r2, [pc, #148]	; (8006218 <TIM_Base_SetConfig+0x134>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d007      	beq.n	8006196 <TIM_Base_SetConfig+0xb2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a24      	ldr	r2, [pc, #144]	; (800621c <TIM_Base_SetConfig+0x138>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d003      	beq.n	8006196 <TIM_Base_SetConfig+0xb2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a23      	ldr	r2, [pc, #140]	; (8006220 <TIM_Base_SetConfig+0x13c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d108      	bne.n	80061a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a0a      	ldr	r2, [pc, #40]	; (80061f8 <TIM_Base_SetConfig+0x114>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d003      	beq.n	80061dc <TIM_Base_SetConfig+0xf8>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a0c      	ldr	r2, [pc, #48]	; (8006208 <TIM_Base_SetConfig+0x124>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d103      	bne.n	80061e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	615a      	str	r2, [r3, #20]
}
 80061ea:	bf00      	nop
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40010000 	.word	0x40010000
 80061fc:	40000400 	.word	0x40000400
 8006200:	40000800 	.word	0x40000800
 8006204:	40000c00 	.word	0x40000c00
 8006208:	40010400 	.word	0x40010400
 800620c:	40014000 	.word	0x40014000
 8006210:	40014400 	.word	0x40014400
 8006214:	40014800 	.word	0x40014800
 8006218:	40001800 	.word	0x40001800
 800621c:	40001c00 	.word	0x40001c00
 8006220:	40002000 	.word	0x40002000

08006224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f023 0201 	bic.w	r2, r3, #1
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4b2b      	ldr	r3, [pc, #172]	; (80062fc <TIM_OC1_SetConfig+0xd8>)
 8006250:	4013      	ands	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0303 	bic.w	r3, r3, #3
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f023 0302 	bic.w	r3, r3, #2
 800626c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a21      	ldr	r2, [pc, #132]	; (8006300 <TIM_OC1_SetConfig+0xdc>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d003      	beq.n	8006288 <TIM_OC1_SetConfig+0x64>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a20      	ldr	r2, [pc, #128]	; (8006304 <TIM_OC1_SetConfig+0xe0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d10c      	bne.n	80062a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 0308 	bic.w	r3, r3, #8
 800628e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f023 0304 	bic.w	r3, r3, #4
 80062a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a16      	ldr	r2, [pc, #88]	; (8006300 <TIM_OC1_SetConfig+0xdc>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d003      	beq.n	80062b2 <TIM_OC1_SetConfig+0x8e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a15      	ldr	r2, [pc, #84]	; (8006304 <TIM_OC1_SetConfig+0xe0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d111      	bne.n	80062d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	621a      	str	r2, [r3, #32]
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	fffeff8f 	.word	0xfffeff8f
 8006300:	40010000 	.word	0x40010000
 8006304:	40010400 	.word	0x40010400

08006308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f023 0210 	bic.w	r2, r3, #16
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4b2e      	ldr	r3, [pc, #184]	; (80063ec <TIM_OC2_SetConfig+0xe4>)
 8006334:	4013      	ands	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f023 0320 	bic.w	r3, r3, #32
 8006352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a23      	ldr	r2, [pc, #140]	; (80063f0 <TIM_OC2_SetConfig+0xe8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_OC2_SetConfig+0x68>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a22      	ldr	r2, [pc, #136]	; (80063f4 <TIM_OC2_SetConfig+0xec>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10d      	bne.n	800638c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800638a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a18      	ldr	r2, [pc, #96]	; (80063f0 <TIM_OC2_SetConfig+0xe8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d003      	beq.n	800639c <TIM_OC2_SetConfig+0x94>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a17      	ldr	r2, [pc, #92]	; (80063f4 <TIM_OC2_SetConfig+0xec>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d113      	bne.n	80063c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	feff8fff 	.word	0xfeff8fff
 80063f0:	40010000 	.word	0x40010000
 80063f4:	40010400 	.word	0x40010400

080063f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4b2d      	ldr	r3, [pc, #180]	; (80064d8 <TIM_OC3_SetConfig+0xe0>)
 8006424:	4013      	ands	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 0303 	bic.w	r3, r3, #3
 800642e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	021b      	lsls	r3, r3, #8
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a22      	ldr	r2, [pc, #136]	; (80064dc <TIM_OC3_SetConfig+0xe4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d003      	beq.n	800645e <TIM_OC3_SetConfig+0x66>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a21      	ldr	r2, [pc, #132]	; (80064e0 <TIM_OC3_SetConfig+0xe8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d10d      	bne.n	800647a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006464:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a17      	ldr	r2, [pc, #92]	; (80064dc <TIM_OC3_SetConfig+0xe4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d003      	beq.n	800648a <TIM_OC3_SetConfig+0x92>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a16      	ldr	r2, [pc, #88]	; (80064e0 <TIM_OC3_SetConfig+0xe8>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d113      	bne.n	80064b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	621a      	str	r2, [r3, #32]
}
 80064cc:	bf00      	nop
 80064ce:	371c      	adds	r7, #28
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	fffeff8f 	.word	0xfffeff8f
 80064dc:	40010000 	.word	0x40010000
 80064e0:	40010400 	.word	0x40010400

080064e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4b1e      	ldr	r3, [pc, #120]	; (8006588 <TIM_OC4_SetConfig+0xa4>)
 8006510:	4013      	ands	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800652e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	031b      	lsls	r3, r3, #12
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a13      	ldr	r2, [pc, #76]	; (800658c <TIM_OC4_SetConfig+0xa8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d003      	beq.n	800654c <TIM_OC4_SetConfig+0x68>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a12      	ldr	r2, [pc, #72]	; (8006590 <TIM_OC4_SetConfig+0xac>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d109      	bne.n	8006560 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	019b      	lsls	r3, r3, #6
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	621a      	str	r2, [r3, #32]
}
 800657a:	bf00      	nop
 800657c:	371c      	adds	r7, #28
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	feff8fff 	.word	0xfeff8fff
 800658c:	40010000 	.word	0x40010000
 8006590:	40010400 	.word	0x40010400

08006594 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4b1b      	ldr	r3, [pc, #108]	; (800662c <TIM_OC5_SetConfig+0x98>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	041b      	lsls	r3, r3, #16
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a12      	ldr	r2, [pc, #72]	; (8006630 <TIM_OC5_SetConfig+0x9c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d003      	beq.n	80065f2 <TIM_OC5_SetConfig+0x5e>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a11      	ldr	r2, [pc, #68]	; (8006634 <TIM_OC5_SetConfig+0xa0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d109      	bne.n	8006606 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	021b      	lsls	r3, r3, #8
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	621a      	str	r2, [r3, #32]
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	fffeff8f 	.word	0xfffeff8f
 8006630:	40010000 	.word	0x40010000
 8006634:	40010400 	.word	0x40010400

08006638 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4b1c      	ldr	r3, [pc, #112]	; (80066d4 <TIM_OC6_SetConfig+0x9c>)
 8006664:	4013      	ands	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800667a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	051b      	lsls	r3, r3, #20
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a13      	ldr	r2, [pc, #76]	; (80066d8 <TIM_OC6_SetConfig+0xa0>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <TIM_OC6_SetConfig+0x60>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a12      	ldr	r2, [pc, #72]	; (80066dc <TIM_OC6_SetConfig+0xa4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d109      	bne.n	80066ac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800669e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	029b      	lsls	r3, r3, #10
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	621a      	str	r2, [r3, #32]
}
 80066c6:	bf00      	nop
 80066c8:	371c      	adds	r7, #28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	feff8fff 	.word	0xfeff8fff
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40010400 	.word	0x40010400

080066e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	f023 0201 	bic.w	r2, r3, #1
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800670a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f023 030a 	bic.w	r3, r3, #10
 800671c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	4313      	orrs	r3, r2
 8006724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	621a      	str	r2, [r3, #32]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800673e:	b480      	push	{r7}
 8006740:	b087      	sub	sp, #28
 8006742:	af00      	add	r7, sp, #0
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	f023 0210 	bic.w	r2, r3, #16
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	031b      	lsls	r3, r3, #12
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800677a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800679e:	b480      	push	{r7}
 80067a0:	b085      	sub	sp, #20
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f043 0307 	orr.w	r3, r3, #7
 80067c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	609a      	str	r2, [r3, #8]
}
 80067c8:	bf00      	nop
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	021a      	lsls	r2, r3, #8
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	609a      	str	r2, [r3, #8]
}
 8006808:	bf00      	nop
 800680a:	371c      	adds	r7, #28
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	2201      	movs	r2, #1
 8006828:	fa02 f303 	lsl.w	r3, r2, r3
 800682c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1a      	ldr	r2, [r3, #32]
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	43db      	mvns	r3, r3
 8006836:	401a      	ands	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a1a      	ldr	r2, [r3, #32]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	fa01 f303 	lsl.w	r3, r1, r3
 800684c:	431a      	orrs	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	621a      	str	r2, [r3, #32]
}
 8006852:	bf00      	nop
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006874:	2302      	movs	r3, #2
 8006876:	e06d      	b.n	8006954 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a30      	ldr	r2, [pc, #192]	; (8006960 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d004      	beq.n	80068ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a2f      	ldr	r2, [pc, #188]	; (8006964 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d108      	bne.n	80068be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a20      	ldr	r2, [pc, #128]	; (8006960 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d022      	beq.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ea:	d01d      	beq.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1d      	ldr	r2, [pc, #116]	; (8006968 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d018      	beq.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a1c      	ldr	r2, [pc, #112]	; (800696c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d013      	beq.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1a      	ldr	r2, [pc, #104]	; (8006970 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00e      	beq.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a15      	ldr	r2, [pc, #84]	; (8006964 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d009      	beq.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a16      	ldr	r2, [pc, #88]	; (8006974 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d004      	beq.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a15      	ldr	r2, [pc, #84]	; (8006978 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d10c      	bne.n	8006942 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800692e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	4313      	orrs	r3, r2
 8006938:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	40010000 	.word	0x40010000
 8006964:	40010400 	.word	0x40010400
 8006968:	40000400 	.word	0x40000400
 800696c:	40000800 	.word	0x40000800
 8006970:	40000c00 	.word	0x40000c00
 8006974:	40014000 	.word	0x40014000
 8006978:	40001800 	.word	0x40001800

0800697c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e040      	b.n	8006a4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fb f90a 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2224      	movs	r2, #36	; 0x24
 80069e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0201 	bic.w	r2, r2, #1
 80069f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fae6 	bl	8006fc8 <UART_SetConfig>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e022      	b.n	8006a4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fd3c 	bl	800748c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fdc3 	bl	80075d0 <UART_CheckIdleState>
 8006a4a:	4603      	mov	r3, r0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d145      	bne.n	8006af6 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_UART_Transmit_IT+0x22>
 8006a70:	88fb      	ldrh	r3, [r7, #6]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e03e      	b.n	8006af8 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_UART_Transmit_IT+0x34>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e037      	b.n	8006af8 <HAL_UART_Transmit_IT+0xa4>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	88fa      	ldrh	r2, [r7, #6]
 8006a9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	88fa      	ldrh	r2, [r7, #6]
 8006aa2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2221      	movs	r2, #33	; 0x21
 8006ab8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac2:	d107      	bne.n	8006ad4 <HAL_UART_Transmit_IT+0x80>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d103      	bne.n	8006ad4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a0d      	ldr	r2, [pc, #52]	; (8006b04 <HAL_UART_Transmit_IT+0xb0>)
 8006ad0:	669a      	str	r2, [r3, #104]	; 0x68
 8006ad2:	e002      	b.n	8006ada <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4a0c      	ldr	r2, [pc, #48]	; (8006b08 <HAL_UART_Transmit_IT+0xb4>)
 8006ad8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006af0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	e000      	b.n	8006af8 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8006af6:	2302      	movs	r3, #2
  }
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	08007969 	.word	0x08007969
 8006b08:	080078f7 	.word	0x080078f7

08006b0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d12c      	bne.n	8006b7c <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <HAL_UART_Receive_IT+0x22>
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e025      	b.n	8006b7e <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_UART_Receive_IT+0x34>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e01e      	b.n	8006b7e <HAL_UART_Receive_IT+0x72>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d007      	beq.n	8006b6c <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006b6a:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b6c:	88fb      	ldrh	r3, [r7, #6]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	68b9      	ldr	r1, [r7, #8]
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fdf2 	bl	800775c <UART_Start_Receive_IT>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	e000      	b.n	8006b7e <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006b7c:	2302      	movs	r3, #2
  }
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bae:	4013      	ands	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d113      	bne.n	8006be0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00e      	beq.n	8006be0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d009      	beq.n	8006be0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 81cc 	beq.w	8006f6e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
      }
      return;
 8006bde:	e1c6      	b.n	8006f6e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 80e3 	beq.w	8006dae <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d105      	bne.n	8006bfe <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	4ba5      	ldr	r3, [pc, #660]	; (8006e8c <HAL_UART_IRQHandler+0x304>)
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 80d8 	beq.w	8006dae <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d010      	beq.n	8006c2a <HAL_UART_IRQHandler+0xa2>
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00b      	beq.n	8006c2a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2201      	movs	r2, #1
 8006c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c20:	f043 0201 	orr.w	r2, r3, #1
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d010      	beq.n	8006c56 <HAL_UART_IRQHandler+0xce>
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00b      	beq.n	8006c56 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2202      	movs	r2, #2
 8006c44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c4c:	f043 0204 	orr.w	r2, r3, #4
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d010      	beq.n	8006c82 <HAL_UART_IRQHandler+0xfa>
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00b      	beq.n	8006c82 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2204      	movs	r2, #4
 8006c70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c78:	f043 0202 	orr.w	r2, r3, #2
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	f003 0308 	and.w	r3, r3, #8
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d015      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d104      	bne.n	8006ca0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cae:	f043 0208 	orr.w	r2, r3, #8
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d011      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x15e>
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00c      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cdc:	f043 0220 	orr.w	r2, r3, #32
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 8140 	beq.w	8006f72 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00c      	beq.n	8006d16 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d007      	beq.n	8006d16 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d1c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d28:	2b40      	cmp	r3, #64	; 0x40
 8006d2a:	d004      	beq.n	8006d36 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d031      	beq.n	8006d9a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fd98 	bl	800786c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d46:	2b40      	cmp	r3, #64	; 0x40
 8006d48:	d123      	bne.n	8006d92 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d58:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d013      	beq.n	8006d8a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d66:	4a4a      	ldr	r2, [pc, #296]	; (8006e90 <HAL_UART_IRQHandler+0x308>)
 8006d68:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fc f8aa 	bl	8002ec8 <HAL_DMA_Abort_IT>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d017      	beq.n	8006daa <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d88:	e00f      	b.n	8006daa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f8fc 	bl	8006f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d90:	e00b      	b.n	8006daa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f8f8 	bl	8006f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d98:	e007      	b.n	8006daa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f8f4 	bl	8006f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006da8:	e0e3      	b.n	8006f72 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006daa:	bf00      	nop
    return;
 8006dac:	e0e1      	b.n	8006f72 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	f040 80a7 	bne.w	8006f06 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 80a1 	beq.w	8006f06 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	f003 0310 	and.w	r3, r3, #16
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 809b 	beq.w	8006f06 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d156      	bne.n	8006e94 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006df0:	893b      	ldrh	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 80bf 	beq.w	8006f76 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006dfe:	893a      	ldrh	r2, [r7, #8]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	f080 80b8 	bcs.w	8006f76 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	893a      	ldrh	r2, [r7, #8]
 8006e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e18:	d02a      	beq.n	8006e70 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e28:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0201 	bic.w	r2, r2, #1
 8006e38:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e48:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 0210 	bic.w	r2, r2, #16
 8006e64:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fb ffbc 	bl	8002de8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f889 	bl	8006f9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e8a:	e074      	b.n	8006f76 <HAL_UART_IRQHandler+0x3ee>
 8006e8c:	04000120 	.word	0x04000120
 8006e90:	080078cb 	.word	0x080078cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d063      	beq.n	8006f7a <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8006eb2:	897b      	ldrh	r3, [r7, #10]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d060      	beq.n	8006f7a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ec6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689a      	ldr	r2, [r3, #8]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0201 	bic.w	r2, r2, #1
 8006ed6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0210 	bic.w	r2, r2, #16
 8006ef8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006efa:	897b      	ldrh	r3, [r7, #10]
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f84c 	bl	8006f9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f04:	e039      	b.n	8006f7a <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00d      	beq.n	8006f2c <HAL_UART_IRQHandler+0x3a4>
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d008      	beq.n	8006f2c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f845 	bl	8006fb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f2a:	e029      	b.n	8006f80 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00d      	beq.n	8006f52 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d008      	beq.n	8006f52 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01a      	beq.n	8006f7e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	4798      	blx	r3
    }
    return;
 8006f50:	e015      	b.n	8006f7e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d011      	beq.n	8006f80 <HAL_UART_IRQHandler+0x3f8>
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00c      	beq.n	8006f80 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fd3c 	bl	80079e4 <UART_EndTransmit_IT>
    return;
 8006f6c:	e008      	b.n	8006f80 <HAL_UART_IRQHandler+0x3f8>
      return;
 8006f6e:	bf00      	nop
 8006f70:	e006      	b.n	8006f80 <HAL_UART_IRQHandler+0x3f8>
    return;
 8006f72:	bf00      	nop
 8006f74:	e004      	b.n	8006f80 <HAL_UART_IRQHandler+0x3f8>
      return;
 8006f76:	bf00      	nop
 8006f78:	e002      	b.n	8006f80 <HAL_UART_IRQHandler+0x3f8>
      return;
 8006f7a:	bf00      	nop
 8006f7c:	e000      	b.n	8006f80 <HAL_UART_IRQHandler+0x3f8>
    return;
 8006f7e:	bf00      	nop
  }

}
 8006f80:	3720      	adds	r7, #32
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop

08006f88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4ba7      	ldr	r3, [pc, #668]	; (8007290 <UART_SetConfig+0x2c8>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	6812      	ldr	r2, [r2, #0]
 8006ffa:	6979      	ldr	r1, [r7, #20]
 8006ffc:	430b      	orrs	r3, r1
 8006ffe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	430a      	orrs	r2, r1
 8007038:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a95      	ldr	r2, [pc, #596]	; (8007294 <UART_SetConfig+0x2cc>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d120      	bne.n	8007086 <UART_SetConfig+0xbe>
 8007044:	4b94      	ldr	r3, [pc, #592]	; (8007298 <UART_SetConfig+0x2d0>)
 8007046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	2b03      	cmp	r3, #3
 8007050:	d816      	bhi.n	8007080 <UART_SetConfig+0xb8>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x90>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	08007069 	.word	0x08007069
 800705c:	08007075 	.word	0x08007075
 8007060:	0800706f 	.word	0x0800706f
 8007064:	0800707b 	.word	0x0800707b
 8007068:	2301      	movs	r3, #1
 800706a:	77fb      	strb	r3, [r7, #31]
 800706c:	e14f      	b.n	800730e <UART_SetConfig+0x346>
 800706e:	2302      	movs	r3, #2
 8007070:	77fb      	strb	r3, [r7, #31]
 8007072:	e14c      	b.n	800730e <UART_SetConfig+0x346>
 8007074:	2304      	movs	r3, #4
 8007076:	77fb      	strb	r3, [r7, #31]
 8007078:	e149      	b.n	800730e <UART_SetConfig+0x346>
 800707a:	2308      	movs	r3, #8
 800707c:	77fb      	strb	r3, [r7, #31]
 800707e:	e146      	b.n	800730e <UART_SetConfig+0x346>
 8007080:	2310      	movs	r3, #16
 8007082:	77fb      	strb	r3, [r7, #31]
 8007084:	e143      	b.n	800730e <UART_SetConfig+0x346>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a84      	ldr	r2, [pc, #528]	; (800729c <UART_SetConfig+0x2d4>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d132      	bne.n	80070f6 <UART_SetConfig+0x12e>
 8007090:	4b81      	ldr	r3, [pc, #516]	; (8007298 <UART_SetConfig+0x2d0>)
 8007092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007096:	f003 030c 	and.w	r3, r3, #12
 800709a:	2b0c      	cmp	r3, #12
 800709c:	d828      	bhi.n	80070f0 <UART_SetConfig+0x128>
 800709e:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <UART_SetConfig+0xdc>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	080070d9 	.word	0x080070d9
 80070a8:	080070f1 	.word	0x080070f1
 80070ac:	080070f1 	.word	0x080070f1
 80070b0:	080070f1 	.word	0x080070f1
 80070b4:	080070e5 	.word	0x080070e5
 80070b8:	080070f1 	.word	0x080070f1
 80070bc:	080070f1 	.word	0x080070f1
 80070c0:	080070f1 	.word	0x080070f1
 80070c4:	080070df 	.word	0x080070df
 80070c8:	080070f1 	.word	0x080070f1
 80070cc:	080070f1 	.word	0x080070f1
 80070d0:	080070f1 	.word	0x080070f1
 80070d4:	080070eb 	.word	0x080070eb
 80070d8:	2300      	movs	r3, #0
 80070da:	77fb      	strb	r3, [r7, #31]
 80070dc:	e117      	b.n	800730e <UART_SetConfig+0x346>
 80070de:	2302      	movs	r3, #2
 80070e0:	77fb      	strb	r3, [r7, #31]
 80070e2:	e114      	b.n	800730e <UART_SetConfig+0x346>
 80070e4:	2304      	movs	r3, #4
 80070e6:	77fb      	strb	r3, [r7, #31]
 80070e8:	e111      	b.n	800730e <UART_SetConfig+0x346>
 80070ea:	2308      	movs	r3, #8
 80070ec:	77fb      	strb	r3, [r7, #31]
 80070ee:	e10e      	b.n	800730e <UART_SetConfig+0x346>
 80070f0:	2310      	movs	r3, #16
 80070f2:	77fb      	strb	r3, [r7, #31]
 80070f4:	e10b      	b.n	800730e <UART_SetConfig+0x346>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a69      	ldr	r2, [pc, #420]	; (80072a0 <UART_SetConfig+0x2d8>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d120      	bne.n	8007142 <UART_SetConfig+0x17a>
 8007100:	4b65      	ldr	r3, [pc, #404]	; (8007298 <UART_SetConfig+0x2d0>)
 8007102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007106:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800710a:	2b30      	cmp	r3, #48	; 0x30
 800710c:	d013      	beq.n	8007136 <UART_SetConfig+0x16e>
 800710e:	2b30      	cmp	r3, #48	; 0x30
 8007110:	d814      	bhi.n	800713c <UART_SetConfig+0x174>
 8007112:	2b20      	cmp	r3, #32
 8007114:	d009      	beq.n	800712a <UART_SetConfig+0x162>
 8007116:	2b20      	cmp	r3, #32
 8007118:	d810      	bhi.n	800713c <UART_SetConfig+0x174>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <UART_SetConfig+0x15c>
 800711e:	2b10      	cmp	r3, #16
 8007120:	d006      	beq.n	8007130 <UART_SetConfig+0x168>
 8007122:	e00b      	b.n	800713c <UART_SetConfig+0x174>
 8007124:	2300      	movs	r3, #0
 8007126:	77fb      	strb	r3, [r7, #31]
 8007128:	e0f1      	b.n	800730e <UART_SetConfig+0x346>
 800712a:	2302      	movs	r3, #2
 800712c:	77fb      	strb	r3, [r7, #31]
 800712e:	e0ee      	b.n	800730e <UART_SetConfig+0x346>
 8007130:	2304      	movs	r3, #4
 8007132:	77fb      	strb	r3, [r7, #31]
 8007134:	e0eb      	b.n	800730e <UART_SetConfig+0x346>
 8007136:	2308      	movs	r3, #8
 8007138:	77fb      	strb	r3, [r7, #31]
 800713a:	e0e8      	b.n	800730e <UART_SetConfig+0x346>
 800713c:	2310      	movs	r3, #16
 800713e:	77fb      	strb	r3, [r7, #31]
 8007140:	e0e5      	b.n	800730e <UART_SetConfig+0x346>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a57      	ldr	r2, [pc, #348]	; (80072a4 <UART_SetConfig+0x2dc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d120      	bne.n	800718e <UART_SetConfig+0x1c6>
 800714c:	4b52      	ldr	r3, [pc, #328]	; (8007298 <UART_SetConfig+0x2d0>)
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007152:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007156:	2bc0      	cmp	r3, #192	; 0xc0
 8007158:	d013      	beq.n	8007182 <UART_SetConfig+0x1ba>
 800715a:	2bc0      	cmp	r3, #192	; 0xc0
 800715c:	d814      	bhi.n	8007188 <UART_SetConfig+0x1c0>
 800715e:	2b80      	cmp	r3, #128	; 0x80
 8007160:	d009      	beq.n	8007176 <UART_SetConfig+0x1ae>
 8007162:	2b80      	cmp	r3, #128	; 0x80
 8007164:	d810      	bhi.n	8007188 <UART_SetConfig+0x1c0>
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <UART_SetConfig+0x1a8>
 800716a:	2b40      	cmp	r3, #64	; 0x40
 800716c:	d006      	beq.n	800717c <UART_SetConfig+0x1b4>
 800716e:	e00b      	b.n	8007188 <UART_SetConfig+0x1c0>
 8007170:	2300      	movs	r3, #0
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e0cb      	b.n	800730e <UART_SetConfig+0x346>
 8007176:	2302      	movs	r3, #2
 8007178:	77fb      	strb	r3, [r7, #31]
 800717a:	e0c8      	b.n	800730e <UART_SetConfig+0x346>
 800717c:	2304      	movs	r3, #4
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e0c5      	b.n	800730e <UART_SetConfig+0x346>
 8007182:	2308      	movs	r3, #8
 8007184:	77fb      	strb	r3, [r7, #31]
 8007186:	e0c2      	b.n	800730e <UART_SetConfig+0x346>
 8007188:	2310      	movs	r3, #16
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e0bf      	b.n	800730e <UART_SetConfig+0x346>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a45      	ldr	r2, [pc, #276]	; (80072a8 <UART_SetConfig+0x2e0>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d125      	bne.n	80071e4 <UART_SetConfig+0x21c>
 8007198:	4b3f      	ldr	r3, [pc, #252]	; (8007298 <UART_SetConfig+0x2d0>)
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071a6:	d017      	beq.n	80071d8 <UART_SetConfig+0x210>
 80071a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ac:	d817      	bhi.n	80071de <UART_SetConfig+0x216>
 80071ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b2:	d00b      	beq.n	80071cc <UART_SetConfig+0x204>
 80071b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b8:	d811      	bhi.n	80071de <UART_SetConfig+0x216>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <UART_SetConfig+0x1fe>
 80071be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c2:	d006      	beq.n	80071d2 <UART_SetConfig+0x20a>
 80071c4:	e00b      	b.n	80071de <UART_SetConfig+0x216>
 80071c6:	2300      	movs	r3, #0
 80071c8:	77fb      	strb	r3, [r7, #31]
 80071ca:	e0a0      	b.n	800730e <UART_SetConfig+0x346>
 80071cc:	2302      	movs	r3, #2
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e09d      	b.n	800730e <UART_SetConfig+0x346>
 80071d2:	2304      	movs	r3, #4
 80071d4:	77fb      	strb	r3, [r7, #31]
 80071d6:	e09a      	b.n	800730e <UART_SetConfig+0x346>
 80071d8:	2308      	movs	r3, #8
 80071da:	77fb      	strb	r3, [r7, #31]
 80071dc:	e097      	b.n	800730e <UART_SetConfig+0x346>
 80071de:	2310      	movs	r3, #16
 80071e0:	77fb      	strb	r3, [r7, #31]
 80071e2:	e094      	b.n	800730e <UART_SetConfig+0x346>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a30      	ldr	r2, [pc, #192]	; (80072ac <UART_SetConfig+0x2e4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d125      	bne.n	800723a <UART_SetConfig+0x272>
 80071ee:	4b2a      	ldr	r3, [pc, #168]	; (8007298 <UART_SetConfig+0x2d0>)
 80071f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071fc:	d017      	beq.n	800722e <UART_SetConfig+0x266>
 80071fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007202:	d817      	bhi.n	8007234 <UART_SetConfig+0x26c>
 8007204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007208:	d00b      	beq.n	8007222 <UART_SetConfig+0x25a>
 800720a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800720e:	d811      	bhi.n	8007234 <UART_SetConfig+0x26c>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <UART_SetConfig+0x254>
 8007214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007218:	d006      	beq.n	8007228 <UART_SetConfig+0x260>
 800721a:	e00b      	b.n	8007234 <UART_SetConfig+0x26c>
 800721c:	2301      	movs	r3, #1
 800721e:	77fb      	strb	r3, [r7, #31]
 8007220:	e075      	b.n	800730e <UART_SetConfig+0x346>
 8007222:	2302      	movs	r3, #2
 8007224:	77fb      	strb	r3, [r7, #31]
 8007226:	e072      	b.n	800730e <UART_SetConfig+0x346>
 8007228:	2304      	movs	r3, #4
 800722a:	77fb      	strb	r3, [r7, #31]
 800722c:	e06f      	b.n	800730e <UART_SetConfig+0x346>
 800722e:	2308      	movs	r3, #8
 8007230:	77fb      	strb	r3, [r7, #31]
 8007232:	e06c      	b.n	800730e <UART_SetConfig+0x346>
 8007234:	2310      	movs	r3, #16
 8007236:	77fb      	strb	r3, [r7, #31]
 8007238:	e069      	b.n	800730e <UART_SetConfig+0x346>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a1c      	ldr	r2, [pc, #112]	; (80072b0 <UART_SetConfig+0x2e8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d137      	bne.n	80072b4 <UART_SetConfig+0x2ec>
 8007244:	4b14      	ldr	r3, [pc, #80]	; (8007298 <UART_SetConfig+0x2d0>)
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800724e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007252:	d017      	beq.n	8007284 <UART_SetConfig+0x2bc>
 8007254:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007258:	d817      	bhi.n	800728a <UART_SetConfig+0x2c2>
 800725a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725e:	d00b      	beq.n	8007278 <UART_SetConfig+0x2b0>
 8007260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007264:	d811      	bhi.n	800728a <UART_SetConfig+0x2c2>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <UART_SetConfig+0x2aa>
 800726a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726e:	d006      	beq.n	800727e <UART_SetConfig+0x2b6>
 8007270:	e00b      	b.n	800728a <UART_SetConfig+0x2c2>
 8007272:	2300      	movs	r3, #0
 8007274:	77fb      	strb	r3, [r7, #31]
 8007276:	e04a      	b.n	800730e <UART_SetConfig+0x346>
 8007278:	2302      	movs	r3, #2
 800727a:	77fb      	strb	r3, [r7, #31]
 800727c:	e047      	b.n	800730e <UART_SetConfig+0x346>
 800727e:	2304      	movs	r3, #4
 8007280:	77fb      	strb	r3, [r7, #31]
 8007282:	e044      	b.n	800730e <UART_SetConfig+0x346>
 8007284:	2308      	movs	r3, #8
 8007286:	77fb      	strb	r3, [r7, #31]
 8007288:	e041      	b.n	800730e <UART_SetConfig+0x346>
 800728a:	2310      	movs	r3, #16
 800728c:	77fb      	strb	r3, [r7, #31]
 800728e:	e03e      	b.n	800730e <UART_SetConfig+0x346>
 8007290:	efff69f3 	.word	0xefff69f3
 8007294:	40011000 	.word	0x40011000
 8007298:	40023800 	.word	0x40023800
 800729c:	40004400 	.word	0x40004400
 80072a0:	40004800 	.word	0x40004800
 80072a4:	40004c00 	.word	0x40004c00
 80072a8:	40005000 	.word	0x40005000
 80072ac:	40011400 	.word	0x40011400
 80072b0:	40007800 	.word	0x40007800
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a71      	ldr	r2, [pc, #452]	; (8007480 <UART_SetConfig+0x4b8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d125      	bne.n	800730a <UART_SetConfig+0x342>
 80072be:	4b71      	ldr	r3, [pc, #452]	; (8007484 <UART_SetConfig+0x4bc>)
 80072c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80072c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072cc:	d017      	beq.n	80072fe <UART_SetConfig+0x336>
 80072ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072d2:	d817      	bhi.n	8007304 <UART_SetConfig+0x33c>
 80072d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d8:	d00b      	beq.n	80072f2 <UART_SetConfig+0x32a>
 80072da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072de:	d811      	bhi.n	8007304 <UART_SetConfig+0x33c>
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <UART_SetConfig+0x324>
 80072e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072e8:	d006      	beq.n	80072f8 <UART_SetConfig+0x330>
 80072ea:	e00b      	b.n	8007304 <UART_SetConfig+0x33c>
 80072ec:	2300      	movs	r3, #0
 80072ee:	77fb      	strb	r3, [r7, #31]
 80072f0:	e00d      	b.n	800730e <UART_SetConfig+0x346>
 80072f2:	2302      	movs	r3, #2
 80072f4:	77fb      	strb	r3, [r7, #31]
 80072f6:	e00a      	b.n	800730e <UART_SetConfig+0x346>
 80072f8:	2304      	movs	r3, #4
 80072fa:	77fb      	strb	r3, [r7, #31]
 80072fc:	e007      	b.n	800730e <UART_SetConfig+0x346>
 80072fe:	2308      	movs	r3, #8
 8007300:	77fb      	strb	r3, [r7, #31]
 8007302:	e004      	b.n	800730e <UART_SetConfig+0x346>
 8007304:	2310      	movs	r3, #16
 8007306:	77fb      	strb	r3, [r7, #31]
 8007308:	e001      	b.n	800730e <UART_SetConfig+0x346>
 800730a:	2310      	movs	r3, #16
 800730c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007316:	d15b      	bne.n	80073d0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007318:	7ffb      	ldrb	r3, [r7, #31]
 800731a:	2b08      	cmp	r3, #8
 800731c:	d827      	bhi.n	800736e <UART_SetConfig+0x3a6>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <UART_SetConfig+0x35c>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	08007349 	.word	0x08007349
 8007328:	08007351 	.word	0x08007351
 800732c:	08007359 	.word	0x08007359
 8007330:	0800736f 	.word	0x0800736f
 8007334:	0800735f 	.word	0x0800735f
 8007338:	0800736f 	.word	0x0800736f
 800733c:	0800736f 	.word	0x0800736f
 8007340:	0800736f 	.word	0x0800736f
 8007344:	08007367 	.word	0x08007367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007348:	f7fd f97e 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 800734c:	61b8      	str	r0, [r7, #24]
        break;
 800734e:	e013      	b.n	8007378 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007350:	f7fd f98e 	bl	8004670 <HAL_RCC_GetPCLK2Freq>
 8007354:	61b8      	str	r0, [r7, #24]
        break;
 8007356:	e00f      	b.n	8007378 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007358:	4b4b      	ldr	r3, [pc, #300]	; (8007488 <UART_SetConfig+0x4c0>)
 800735a:	61bb      	str	r3, [r7, #24]
        break;
 800735c:	e00c      	b.n	8007378 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735e:	f7fd f8b1 	bl	80044c4 <HAL_RCC_GetSysClockFreq>
 8007362:	61b8      	str	r0, [r7, #24]
        break;
 8007364:	e008      	b.n	8007378 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800736a:	61bb      	str	r3, [r7, #24]
        break;
 800736c:	e004      	b.n	8007378 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	77bb      	strb	r3, [r7, #30]
        break;
 8007376:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d074      	beq.n	8007468 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	005a      	lsls	r2, r3, #1
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	085b      	lsrs	r3, r3, #1
 8007388:	441a      	add	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007392:	b29b      	uxth	r3, r3
 8007394:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	2b0f      	cmp	r3, #15
 800739a:	d916      	bls.n	80073ca <UART_SetConfig+0x402>
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a2:	d212      	bcs.n	80073ca <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f023 030f 	bic.w	r3, r3, #15
 80073ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	085b      	lsrs	r3, r3, #1
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	89fb      	ldrh	r3, [r7, #14]
 80073bc:	4313      	orrs	r3, r2
 80073be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	89fa      	ldrh	r2, [r7, #14]
 80073c6:	60da      	str	r2, [r3, #12]
 80073c8:	e04e      	b.n	8007468 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	77bb      	strb	r3, [r7, #30]
 80073ce:	e04b      	b.n	8007468 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073d0:	7ffb      	ldrb	r3, [r7, #31]
 80073d2:	2b08      	cmp	r3, #8
 80073d4:	d827      	bhi.n	8007426 <UART_SetConfig+0x45e>
 80073d6:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <UART_SetConfig+0x414>)
 80073d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073dc:	08007401 	.word	0x08007401
 80073e0:	08007409 	.word	0x08007409
 80073e4:	08007411 	.word	0x08007411
 80073e8:	08007427 	.word	0x08007427
 80073ec:	08007417 	.word	0x08007417
 80073f0:	08007427 	.word	0x08007427
 80073f4:	08007427 	.word	0x08007427
 80073f8:	08007427 	.word	0x08007427
 80073fc:	0800741f 	.word	0x0800741f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007400:	f7fd f922 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8007404:	61b8      	str	r0, [r7, #24]
        break;
 8007406:	e013      	b.n	8007430 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007408:	f7fd f932 	bl	8004670 <HAL_RCC_GetPCLK2Freq>
 800740c:	61b8      	str	r0, [r7, #24]
        break;
 800740e:	e00f      	b.n	8007430 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007410:	4b1d      	ldr	r3, [pc, #116]	; (8007488 <UART_SetConfig+0x4c0>)
 8007412:	61bb      	str	r3, [r7, #24]
        break;
 8007414:	e00c      	b.n	8007430 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007416:	f7fd f855 	bl	80044c4 <HAL_RCC_GetSysClockFreq>
 800741a:	61b8      	str	r0, [r7, #24]
        break;
 800741c:	e008      	b.n	8007430 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800741e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007422:	61bb      	str	r3, [r7, #24]
        break;
 8007424:	e004      	b.n	8007430 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	77bb      	strb	r3, [r7, #30]
        break;
 800742e:	bf00      	nop
    }

    if (pclk != 0U)
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d018      	beq.n	8007468 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	085a      	lsrs	r2, r3, #1
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	441a      	add	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	fbb2 f3f3 	udiv	r3, r2, r3
 8007448:	b29b      	uxth	r3, r3
 800744a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	2b0f      	cmp	r3, #15
 8007450:	d908      	bls.n	8007464 <UART_SetConfig+0x49c>
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007458:	d204      	bcs.n	8007464 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	60da      	str	r2, [r3, #12]
 8007462:	e001      	b.n	8007468 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007474:	7fbb      	ldrb	r3, [r7, #30]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3720      	adds	r7, #32
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	40007c00 	.word	0x40007c00
 8007484:	40023800 	.word	0x40023800
 8007488:	00f42400 	.word	0x00f42400

0800748c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00a      	beq.n	80074b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00a      	beq.n	80074fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	f003 0310 	and.w	r3, r3, #16
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	f003 0320 	and.w	r3, r3, #32
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01a      	beq.n	80075a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800758a:	d10a      	bne.n	80075a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	430a      	orrs	r2, r1
 80075c2:	605a      	str	r2, [r3, #4]
  }
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075e0:	f7fa fc44 	bl	8001e6c <HAL_GetTick>
 80075e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0308 	and.w	r3, r3, #8
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d10e      	bne.n	8007612 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f82d 	bl	8007662 <UART_WaitOnFlagUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e023      	b.n	800765a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b04      	cmp	r3, #4
 800761e:	d10e      	bne.n	800763e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f817 	bl	8007662 <UART_WaitOnFlagUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e00d      	b.n	800765a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2220      	movs	r2, #32
 8007642:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2220      	movs	r2, #32
 8007648:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	4613      	mov	r3, r2
 8007670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007672:	e05e      	b.n	8007732 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767a:	d05a      	beq.n	8007732 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800767c:	f7fa fbf6 	bl	8001e6c <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	429a      	cmp	r2, r3
 800768a:	d302      	bcc.n	8007692 <UART_WaitOnFlagUntilTimeout+0x30>
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d11b      	bne.n	80076ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0201 	bic.w	r2, r2, #1
 80076b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2220      	movs	r2, #32
 80076b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2220      	movs	r2, #32
 80076bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e043      	b.n	8007752 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d02c      	beq.n	8007732 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e6:	d124      	bne.n	8007732 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007700:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 0201 	bic.w	r2, r2, #1
 8007710:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2220      	movs	r2, #32
 8007716:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2220      	movs	r2, #32
 800771c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2220      	movs	r2, #32
 8007722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e00f      	b.n	8007752 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69da      	ldr	r2, [r3, #28]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	4013      	ands	r3, r2
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	429a      	cmp	r2, r3
 8007740:	bf0c      	ite	eq
 8007742:	2301      	moveq	r3, #1
 8007744:	2300      	movne	r3, #0
 8007746:	b2db      	uxtb	r3, r3
 8007748:	461a      	mov	r2, r3
 800774a:	79fb      	ldrb	r3, [r7, #7]
 800774c:	429a      	cmp	r2, r3
 800774e:	d091      	beq.n	8007674 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	4613      	mov	r3, r2
 8007768:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	88fa      	ldrh	r2, [r7, #6]
 8007774:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	88fa      	ldrh	r2, [r7, #6]
 800777c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778e:	d10e      	bne.n	80077ae <UART_Start_Receive_IT+0x52>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d105      	bne.n	80077a4 <UART_Start_Receive_IT+0x48>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800779e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077a2:	e02d      	b.n	8007800 <UART_Start_Receive_IT+0xa4>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	22ff      	movs	r2, #255	; 0xff
 80077a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077ac:	e028      	b.n	8007800 <UART_Start_Receive_IT+0xa4>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10d      	bne.n	80077d2 <UART_Start_Receive_IT+0x76>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d104      	bne.n	80077c8 <UART_Start_Receive_IT+0x6c>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	22ff      	movs	r2, #255	; 0xff
 80077c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077c6:	e01b      	b.n	8007800 <UART_Start_Receive_IT+0xa4>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	227f      	movs	r2, #127	; 0x7f
 80077cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077d0:	e016      	b.n	8007800 <UART_Start_Receive_IT+0xa4>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077da:	d10d      	bne.n	80077f8 <UART_Start_Receive_IT+0x9c>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d104      	bne.n	80077ee <UART_Start_Receive_IT+0x92>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	227f      	movs	r2, #127	; 0x7f
 80077e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077ec:	e008      	b.n	8007800 <UART_Start_Receive_IT+0xa4>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	223f      	movs	r2, #63	; 0x3f
 80077f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077f6:	e003      	b.n	8007800 <UART_Start_Receive_IT+0xa4>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2222      	movs	r2, #34	; 0x22
 800780c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f042 0201 	orr.w	r2, r2, #1
 800781c:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007826:	d107      	bne.n	8007838 <UART_Start_Receive_IT+0xdc>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4a0c      	ldr	r2, [pc, #48]	; (8007864 <UART_Start_Receive_IT+0x108>)
 8007834:	665a      	str	r2, [r3, #100]	; 0x64
 8007836:	e002      	b.n	800783e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4a0b      	ldr	r2, [pc, #44]	; (8007868 <UART_Start_Receive_IT+0x10c>)
 800783c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007854:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	08007aeb 	.word	0x08007aeb
 8007868:	08007a17 	.word	0x08007a17

0800786c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007882:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0201 	bic.w	r2, r2, #1
 8007892:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007898:	2b01      	cmp	r3, #1
 800789a:	d107      	bne.n	80078ac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f022 0210 	bic.w	r2, r2, #16
 80078aa:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2220      	movs	r2, #32
 80078b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f7ff fb4d 	bl	8006f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ee:	bf00      	nop
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007902:	2b21      	cmp	r3, #33	; 0x21
 8007904:	d12a      	bne.n	800795c <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d110      	bne.n	8007934 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007920:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007930:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007932:	e013      	b.n	800795c <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007938:	781a      	ldrb	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007944:	1c5a      	adds	r2, r3, #1
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	b29a      	uxth	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007974:	2b21      	cmp	r3, #33	; 0x21
 8007976:	d12f      	bne.n	80079d8 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800797e:	b29b      	uxth	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d110      	bne.n	80079a6 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007992:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079a2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80079a4:	e018      	b.n	80079d8 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079ba:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c0:	1c9a      	adds	r2, r3, #2
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80079d8:	bf00      	nop
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079fa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2220      	movs	r2, #32
 8007a00:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7f8 ff31 	bl	8000870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a24:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a2a:	2b22      	cmp	r3, #34	; 0x22
 8007a2c:	d151      	bne.n	8007ad2 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a36:	89bb      	ldrh	r3, [r7, #12]
 8007a38:	b2d9      	uxtb	r1, r3
 8007a3a:	89fb      	ldrh	r3, [r7, #14]
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a42:	400a      	ands	r2, r1
 8007a44:	b2d2      	uxtb	r2, r2
 8007a46:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d138      	bne.n	8007ae2 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a7e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689a      	ldr	r2, [r3, #8]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0201 	bic.w	r2, r2, #1
 8007a8e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2220      	movs	r2, #32
 8007a94:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d10f      	bne.n	8007ac4 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0210 	bic.w	r2, r2, #16
 8007ab2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff fa6d 	bl	8006f9c <HAL_UARTEx_RxEventCallback>
 8007ac2:	e002      	b.n	8007aca <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7f8 fe8b 	bl	80007e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ad0:	e007      	b.n	8007ae2 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	699a      	ldr	r2, [r3, #24]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f042 0208 	orr.w	r2, r2, #8
 8007ae0:	619a      	str	r2, [r3, #24]
}
 8007ae2:	bf00      	nop
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007af8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007afe:	2b22      	cmp	r3, #34	; 0x22
 8007b00:	d151      	bne.n	8007ba6 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b10:	89ba      	ldrh	r2, [r7, #12]
 8007b12:	89fb      	ldrh	r3, [r7, #14]
 8007b14:	4013      	ands	r3, r2
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b20:	1c9a      	adds	r2, r3, #2
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d138      	bne.n	8007bb6 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b52:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0201 	bic.w	r2, r2, #1
 8007b62:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d10f      	bne.n	8007b98 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0210 	bic.w	r2, r2, #16
 8007b86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7ff fa03 	bl	8006f9c <HAL_UARTEx_RxEventCallback>
 8007b96:	e002      	b.n	8007b9e <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7f8 fe21 	bl	80007e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ba4:	e007      	b.n	8007bb6 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	699a      	ldr	r2, [r3, #24]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0208 	orr.w	r2, r2, #8
 8007bb4:	619a      	str	r2, [r3, #24]
}
 8007bb6:	bf00      	nop
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <get_paramAddrTable>:

s_FBTable fbTable; //table holding function blocks
s_FBTable* get_fbTable(){return &fbTable;}

s_Param paramAddrTable; //parameters pointing function block in/out arguments
s_Param* get_paramAddrTable(){return &paramAddrTable;}
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	4b02      	ldr	r3, [pc, #8]	; (8007bd0 <get_paramAddrTable+0x10>)
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	20000a00 	.word	0x20000a00

08007bd4 <writeToFBTable>:
}
*/

//general functions

uint8_t writeToFBTable(void* callback, uint8_t startParamIndex){
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
	uint8_t fb_index = fbTable.length;
 8007be0:	4b0d      	ldr	r3, [pc, #52]	; (8007c18 <writeToFBTable+0x44>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	73fb      	strb	r3, [r7, #15]
	fbTable.fb[fb_index].callback = callback;
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	490b      	ldr	r1, [pc, #44]	; (8007c18 <writeToFBTable+0x44>)
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	440b      	add	r3, r1
 8007bf0:	609a      	str	r2, [r3, #8]
	fbTable.fb[fb_index].param_start_index = startParamIndex;
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	4a08      	ldr	r2, [pc, #32]	; (8007c18 <writeToFBTable+0x44>)
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	4413      	add	r3, r2
 8007bfa:	78fa      	ldrb	r2, [r7, #3]
 8007bfc:	711a      	strb	r2, [r3, #4]
	fbTable.length++;
 8007bfe:	4b06      	ldr	r3, [pc, #24]	; (8007c18 <writeToFBTable+0x44>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	3301      	adds	r3, #1
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	4b04      	ldr	r3, [pc, #16]	; (8007c18 <writeToFBTable+0x44>)
 8007c08:	701a      	strb	r2, [r3, #0]
	return fb_index;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	200006dc 	.word	0x200006dc

08007c1c <createParameter>:

uint32_t createParameter(int32_t init_val){
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
	paramAddrTable.value[paramAddrTable.currentIndex] = init_val;
 8007c24:	4b10      	ldr	r3, [pc, #64]	; (8007c68 <createParameter+0x4c>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	4a0f      	ldr	r2, [pc, #60]	; (8007c68 <createParameter+0x4c>)
 8007c2a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	605a      	str	r2, [r3, #4]
	paramAddrTable.addr[paramAddrTable.currentIndex] = paramAddrTable.currentIndex;
 8007c36:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <createParameter+0x4c>)
 8007c38:	781a      	ldrb	r2, [r3, #0]
 8007c3a:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <createParameter+0x4c>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4a09      	ldr	r2, [pc, #36]	; (8007c68 <createParameter+0x4c>)
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	6059      	str	r1, [r3, #4]
	paramAddrTable.currentIndex++;
 8007c48:	4b07      	ldr	r3, [pc, #28]	; (8007c68 <createParameter+0x4c>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	4b05      	ldr	r3, [pc, #20]	; (8007c68 <createParameter+0x4c>)
 8007c52:	701a      	strb	r2, [r3, #0]
	return paramAddrTable.currentIndex-1;
 8007c54:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <createParameter+0x4c>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	3b01      	subs	r3, #1
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	20000a00 	.word	0x20000a00

08007c6c <make_connection>:

void make_connection(uint32_t dest_port_i, uint32_t src_port_i)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
	paramAddrTable.addr[dest_port_i] = paramAddrTable.addr[src_port_i] ;
 8007c76:	4a08      	ldr	r2, [pc, #32]	; (8007c98 <make_connection+0x2c>)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	4905      	ldr	r1, [pc, #20]	; (8007c98 <make_connection+0x2c>)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	440b      	add	r3, r1
 8007c88:	605a      	str	r2, [r3, #4]
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	20000a00 	.word	0x20000a00

08007c9c <initiate_mccore>:

void initiate_mccore(){
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
	fbTable.length = 0;
 8007ca0:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <initiate_mccore+0x20>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	701a      	strb	r2, [r3, #0]
	paramAddrTable.currentIndex = 0;
 8007ca6:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <initiate_mccore+0x24>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	701a      	strb	r2, [r3, #0]
	read_persistent_data_structure();
 8007cac:	f000 f8b4 	bl	8007e18 <read_persistent_data_structure>
	init_uniqueid();
 8007cb0:	f000 fa66 	bl	8008180 <init_uniqueid>
	init_deployment_ch();
 8007cb4:	f001 fafc 	bl	80092b0 <init_deployment_ch>
}
 8007cb8:	bf00      	nop
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	200006dc 	.word	0x200006dc
 8007cc0:	20000a00 	.word	0x20000a00

08007cc4 <initiate_circuit>:

void initiate_circuit(){
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
	hal_init_tick();
 8007cc8:	f7f8 fd2f 	bl	800072a <hal_init_tick>
}
 8007ccc:	bf00      	nop
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <run_one_cycle>:

void run_one_cycle(){
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
	//get inputs
	//run the input related function blocks

	//process inputs
	//run the processing related input blocks
	for(uint8_t i= 0;i<fbTable.length;i++){
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	71fb      	strb	r3, [r7, #7]
 8007cda:	e00e      	b.n	8007cfa <run_one_cycle+0x2a>
		(*fbTable.fb[i].callback)((uint8_t)fbTable.fb[i].param_start_index);
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	4a0c      	ldr	r2, [pc, #48]	; (8007d10 <run_one_cycle+0x40>)
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	4413      	add	r3, r2
 8007ce4:	689a      	ldr	r2, [r3, #8]
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	4909      	ldr	r1, [pc, #36]	; (8007d10 <run_one_cycle+0x40>)
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	440b      	add	r3, r1
 8007cee:	791b      	ldrb	r3, [r3, #4]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	4790      	blx	r2
	for(uint8_t i= 0;i<fbTable.length;i++){
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	71fb      	strb	r3, [r7, #7]
 8007cfa:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <run_one_cycle+0x40>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	79fa      	ldrb	r2, [r7, #7]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d3eb      	bcc.n	8007cdc <run_one_cycle+0xc>
	}

	//refresh outputs
	//run the output related function blocks
}
 8007d04:	bf00      	nop
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	200006dc 	.word	0x200006dc

08007d14 <mcCore_SM>:

void mcCore_SM()
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
	test_circuit_t* test_circ = get_test_circuit();
 8007d1a:	f000 f8db 	bl	8007ed4 <get_test_circuit>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	607b      	str	r3, [r7, #4]
	static uint8_t mcCore_state;

	switch (mcCore_state){
 8007d22:	4b27      	ldr	r3, [pc, #156]	; (8007dc0 <mcCore_SM+0xac>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b05      	cmp	r3, #5
 8007d28:	d845      	bhi.n	8007db6 <mcCore_SM+0xa2>
 8007d2a:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <mcCore_SM+0x1c>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007d49 	.word	0x08007d49
 8007d34:	08007d83 	.word	0x08007d83
 8007d38:	08007db7 	.word	0x08007db7
 8007d3c:	08007d65 	.word	0x08007d65
 8007d40:	08007da3 	.word	0x08007da3
 8007d44:	08007daf 	.word	0x08007daf
		case ST_MCCORE_INIT:
			if(test_circ->do_test == 1){
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d103      	bne.n	8007d58 <mcCore_SM+0x44>
				mcCore_state = ST_MCCORE_TEST;
 8007d50:	4b1b      	ldr	r3, [pc, #108]	; (8007dc0 <mcCore_SM+0xac>)
 8007d52:	2204      	movs	r2, #4
 8007d54:	701a      	strb	r2, [r3, #0]
 8007d56:	e002      	b.n	8007d5e <mcCore_SM+0x4a>
			}
			else{
				mcCore_state = ST_WAIT_RUN;
 8007d58:	4b19      	ldr	r3, [pc, #100]	; (8007dc0 <mcCore_SM+0xac>)
 8007d5a:	2203      	movs	r2, #3
 8007d5c:	701a      	strb	r2, [r3, #0]
			}

			initiate_mccore(); //kill all the program memory
 8007d5e:	f7ff ff9d 	bl	8007c9c <initiate_mccore>
			//mcCore_state = ST_WAIT_RUN;
			break;
 8007d62:	e028      	b.n	8007db6 <mcCore_SM+0xa2>

		case ST_WAIT_RUN: //wait for the deployment finish and run cmd arrival
			if(Parser(get_deployment_ch()) == CMD_RUN){
 8007d64:	f001 fa82 	bl	800926c <get_deployment_ch>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f001 fa0a 	bl	8009184 <Parser>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b67      	cmp	r3, #103	; 0x67
 8007d74:	d11e      	bne.n	8007db4 <mcCore_SM+0xa0>
				initiate_circuit();
 8007d76:	f7ff ffa5 	bl	8007cc4 <initiate_circuit>
				mcCore_state = ST_MCCORE_RUN;
 8007d7a:	4b11      	ldr	r3, [pc, #68]	; (8007dc0 <mcCore_SM+0xac>)
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007d80:	e018      	b.n	8007db4 <mcCore_SM+0xa0>

		case ST_MCCORE_RUN:
			if(Parser(get_deployment_ch()) == CMD_KILL){ //when running if KILL cmd received go to the initial state
 8007d82:	f001 fa73 	bl	800926c <get_deployment_ch>
 8007d86:	4603      	mov	r3, r0
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f001 f9fb 	bl	8009184 <Parser>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b68      	cmp	r3, #104	; 0x68
 8007d92:	d103      	bne.n	8007d9c <mcCore_SM+0x88>
				mcCore_state = ST_MCCORE_INIT;
 8007d94:	4b0a      	ldr	r3, [pc, #40]	; (8007dc0 <mcCore_SM+0xac>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	701a      	strb	r2, [r3, #0]
				run_one_cycle();
				//burdaki zamanı ölç
				//delta
				//bu deltaları kullanıcıya logla
			}
			break;
 8007d9a:	e00c      	b.n	8007db6 <mcCore_SM+0xa2>
				run_one_cycle();
 8007d9c:	f7ff ff98 	bl	8007cd0 <run_one_cycle>
			break;
 8007da0:	e009      	b.n	8007db6 <mcCore_SM+0xa2>

		case ST_MCCORE_TEST:
			//test_circ->test_func_ptr(); //function defined in test_circuits.c
			create_display_test_circuit();
 8007da2:	f000 f8a1 	bl	8007ee8 <create_display_test_circuit>
			mcCore_state = ST_MCCORE_TEST_RUN;
 8007da6:	4b06      	ldr	r3, [pc, #24]	; (8007dc0 <mcCore_SM+0xac>)
 8007da8:	2205      	movs	r2, #5
 8007daa:	701a      	strb	r2, [r3, #0]
			break;
 8007dac:	e003      	b.n	8007db6 <mcCore_SM+0xa2>

		case ST_MCCORE_TEST_RUN:
			run_one_cycle();
 8007dae:	f7ff ff8f 	bl	8007cd0 <run_one_cycle>
			break;
 8007db2:	e000      	b.n	8007db6 <mcCore_SM+0xa2>
			break;
 8007db4:	bf00      	nop
	}
}
 8007db6:	bf00      	nop
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	2000010c 	.word	0x2000010c

08007dc4 <get_gpd>:

enum gpd_type {CONS, ATOM, FUNC, LAMBDA}; //for feature use

Global_Persistent_Data gpd;

Global_Persistent_Data* get_gpd(){return &gpd;}
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	4b02      	ldr	r3, [pc, #8]	; (8007dd4 <get_gpd+0x10>)
 8007dca:	4618      	mov	r0, r3
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	20001684 	.word	0x20001684

08007dd8 <init_persistent_data_structure>:

void init_persistent_data_structure(){
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
	gpd.baudrate = 0; //0->115200, 1-->57600, 2-->38400, 3-->19200, 4-->9600
 8007dde:	4b0d      	ldr	r3, [pc, #52]	; (8007e14 <init_persistent_data_structure+0x3c>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	601a      	str	r2, [r3, #0]
	gpd.modbus_slave_address = 101;
 8007de4:	4b0b      	ldr	r3, [pc, #44]	; (8007e14 <init_persistent_data_structure+0x3c>)
 8007de6:	2265      	movs	r2, #101	; 0x65
 8007de8:	605a      	str	r2, [r3, #4]

	for(uint16_t i;i<MODBUS_PERSISTENT_DATA;i++){
 8007dea:	e008      	b.n	8007dfe <init_persistent_data_structure+0x26>
		gpd.modbus_persistent_data[i] = 0;
 8007dec:	88fb      	ldrh	r3, [r7, #6]
 8007dee:	4a09      	ldr	r2, [pc, #36]	; (8007e14 <init_persistent_data_structure+0x3c>)
 8007df0:	3302      	adds	r3, #2
 8007df2:	2100      	movs	r1, #0
 8007df4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint16_t i;i<MODBUS_PERSISTENT_DATA;i++){
 8007df8:	88fb      	ldrh	r3, [r7, #6]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	80fb      	strh	r3, [r7, #6]
 8007dfe:	88fb      	ldrh	r3, [r7, #6]
 8007e00:	2b07      	cmp	r3, #7
 8007e02:	d9f3      	bls.n	8007dec <init_persistent_data_structure+0x14>
	}
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20001684 	.word	0x20001684

08007e18 <read_persistent_data_structure>:

uint8_t read_persistent_data_structure(){
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
	void* fb = get_flash_data();
 8007e1e:	f001 fb15 	bl	800944c <get_flash_data>
 8007e22:	6138      	str	r0, [r7, #16]
	//copy the flash contents to the gpd
	uint8_t* p_flash = (uint8_t*)fb + FLASHBLOCK_HEADER_SIZE;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	3308      	adds	r3, #8
 8007e28:	60fb      	str	r3, [r7, #12]
	uint8_t* p_gpd = (uint8_t*)get_gpd();
 8007e2a:	f7ff ffcb 	bl	8007dc4 <get_gpd>
 8007e2e:	60b8      	str	r0, [r7, #8]
	uint8_t ret = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	75fb      	strb	r3, [r7, #23]

	init_persistent_data_structure();
 8007e34:	f7ff ffd0 	bl	8007dd8 <init_persistent_data_structure>

	if(((Flash_Block*)fb)->length == sizeof(Global_Persistent_Data)){
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	2b28      	cmp	r3, #40	; 0x28
 8007e3e:	d108      	bne.n	8007e52 <read_persistent_data_structure+0x3a>
		memcpy(p_gpd, p_flash, ((Flash_Block*)fb)->length);
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	461a      	mov	r2, r3
 8007e46:	68f9      	ldr	r1, [r7, #12]
 8007e48:	68b8      	ldr	r0, [r7, #8]
 8007e4a:	f003 f9dd 	bl	800b208 <memcpy>
		ret = 1;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	75fb      	strb	r3, [r7, #23]
	}

	//transfer the modbus and user contents of the gpd to the modbus and fb registers
	uint16_t* modbus_data = get_Modbus_Buf_Holding_Registers_40001();
 8007e52:	f000 fa2d 	bl	80082b0 <get_Modbus_Buf_Holding_Registers_40001>
 8007e56:	4603      	mov	r3, r0
 8007e58:	607b      	str	r3, [r7, #4]
	for(uint16_t i = 0;i<MODBUS_PERSISTENT_DATA;i++){
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	82bb      	strh	r3, [r7, #20]
 8007e5e:	e00e      	b.n	8007e7e <read_persistent_data_structure+0x66>
		modbus_data[i+8] = (uint16_t )gpd.modbus_persistent_data[i];
 8007e60:	8abb      	ldrh	r3, [r7, #20]
 8007e62:	4a0b      	ldr	r2, [pc, #44]	; (8007e90 <read_persistent_data_structure+0x78>)
 8007e64:	3302      	adds	r3, #2
 8007e66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e6a:	8abb      	ldrh	r3, [r7, #20]
 8007e6c:	3308      	adds	r3, #8
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	4413      	add	r3, r2
 8007e74:	b28a      	uxth	r2, r1
 8007e76:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0;i<MODBUS_PERSISTENT_DATA;i++){
 8007e78:	8abb      	ldrh	r3, [r7, #20]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	82bb      	strh	r3, [r7, #20]
 8007e7e:	8abb      	ldrh	r3, [r7, #20]
 8007e80:	2b07      	cmp	r3, #7
 8007e82:	d9ed      	bls.n	8007e60 <read_persistent_data_structure+0x48>
	}

	return ret;
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20001684 	.word	0x20001684

08007e94 <write_persistent_data_structure>:

uint8_t write_persistent_data_structure(){
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
	write_flash_data((uint8_t*)&gpd, sizeof(gpd));
 8007e98:	2128      	movs	r1, #40	; 0x28
 8007e9a:	4803      	ldr	r0, [pc, #12]	; (8007ea8 <write_persistent_data_structure+0x14>)
 8007e9c:	f001 faa2 	bl	80093e4 <write_flash_data>
}
 8007ea0:	bf00      	nop
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20001684 	.word	0x20001684

08007eac <Record_To_Modbus_GPD>:

void Record_To_Modbus_GPD(uint8_t index, uint32_t datum){
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	6039      	str	r1, [r7, #0]
 8007eb6:	71fb      	strb	r3, [r7, #7]
	gpd.modbus_persistent_data[index] = datum;
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	4905      	ldr	r1, [pc, #20]	; (8007ed0 <Record_To_Modbus_GPD+0x24>)
 8007ebc:	3302      	adds	r3, #2
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	20001684 	.word	0x20001684

08007ed4 <get_test_circuit>:
#include "mcCore.h"
#include "fb_inc.h"
#include "test_circuits.h"

test_circuit_t test_circuit = {.do_test=1, .test_func_ptr=&create_display_test_circuit};
test_circuit_t* get_test_circuit(){return &test_circuit;}
 8007ed4:	b480      	push	{r7}
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	4b02      	ldr	r3, [pc, #8]	; (8007ee4 <get_test_circuit+0x10>)
 8007eda:	4618      	mov	r0, r3
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	20000044 	.word	0x20000044

08007ee8 <create_display_test_circuit>:
	make_connection(ld2.fp.output, fb_cyc2.fp.output);*/


}

void create_display_test_circuit(){
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8007eee:	af04      	add	r7, sp, #16

	type_fb_text text1 = create_fb_text(7, "encoder");
 8007ef0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8007ef4:	4a9d      	ldr	r2, [pc, #628]	; (800816c <create_display_test_circuit+0x284>)
 8007ef6:	2107      	movs	r1, #7
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f001 f8d3 	bl	80090a4 <create_fb_text>
	type_fb_text text2 = create_fb_text(4, "jy_x");
 8007efe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8007f02:	4a9b      	ldr	r2, [pc, #620]	; (8008170 <create_display_test_circuit+0x288>)
 8007f04:	2104      	movs	r1, #4
 8007f06:	4618      	mov	r0, r3
 8007f08:	f001 f8cc 	bl	80090a4 <create_fb_text>
	type_fb_text text3 = create_fb_text(4, "btn1");
 8007f0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f10:	4a98      	ldr	r2, [pc, #608]	; (8008174 <create_display_test_circuit+0x28c>)
 8007f12:	2104      	movs	r1, #4
 8007f14:	4618      	mov	r0, r3
 8007f16:	f001 f8c5 	bl	80090a4 <create_fb_text>
	type_fb_text text4 = create_fb_text(4, "btn2");
 8007f1a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8007f1e:	4a96      	ldr	r2, [pc, #600]	; (8008178 <create_display_test_circuit+0x290>)
 8007f20:	2104      	movs	r1, #4
 8007f22:	4618      	mov	r0, r3
 8007f24:	f001 f8be 	bl	80090a4 <create_fb_text>
	type_fb_text text5 = create_fb_text(4, "btn3");
 8007f28:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8007f2c:	4a93      	ldr	r2, [pc, #588]	; (800817c <create_display_test_circuit+0x294>)
 8007f2e:	2104      	movs	r1, #4
 8007f30:	4618      	mov	r0, r3
 8007f32:	f001 f8b7 	bl	80090a4 <create_fb_text>

	//encoder:  val
	type_fb_gui_display display_element1 = create_fb_gui_display(10, 10, 75, 10, 0, 0, 0 ,0);
 8007f36:	f507 7001 	add.w	r0, r7, #516	; 0x204
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	9303      	str	r3, [sp, #12]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9302      	str	r3, [sp, #8]
 8007f42:	2300      	movs	r3, #0
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	230a      	movs	r3, #10
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	234b      	movs	r3, #75	; 0x4b
 8007f4c:	220a      	movs	r2, #10
 8007f4e:	210a      	movs	r1, #10
 8007f50:	f000 fe9c 	bl	8008c8c <create_fb_gui_display>
	type_fb_gui_display display_element2 = create_fb_gui_display(90, 10, 25, 10, 0, 0, 1 ,0);
 8007f54:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 8007f58:	2301      	movs	r3, #1
 8007f5a:	9303      	str	r3, [sp, #12]
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	9302      	str	r3, [sp, #8]
 8007f60:	2300      	movs	r3, #0
 8007f62:	9301      	str	r3, [sp, #4]
 8007f64:	230a      	movs	r3, #10
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	2319      	movs	r3, #25
 8007f6a:	220a      	movs	r2, #10
 8007f6c:	215a      	movs	r1, #90	; 0x5a
 8007f6e:	f000 fe8d 	bl	8008c8c <create_fb_gui_display>

	type_fb_gui_display display_element3 = create_fb_gui_display(10, 30, 75, 10, 0, 0, 0 ,0);
 8007f72:	f507 70d6 	add.w	r0, r7, #428	; 0x1ac
 8007f76:	2300      	movs	r3, #0
 8007f78:	9303      	str	r3, [sp, #12]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	9302      	str	r3, [sp, #8]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	230a      	movs	r3, #10
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	234b      	movs	r3, #75	; 0x4b
 8007f88:	221e      	movs	r2, #30
 8007f8a:	210a      	movs	r1, #10
 8007f8c:	f000 fe7e 	bl	8008c8c <create_fb_gui_display>
	type_fb_gui_display display_element4 = create_fb_gui_display(90, 30, 25, 10, 0, 0, 1 ,0);
 8007f90:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8007f94:	2301      	movs	r3, #1
 8007f96:	9303      	str	r3, [sp, #12]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	9302      	str	r3, [sp, #8]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	230a      	movs	r3, #10
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	2319      	movs	r3, #25
 8007fa6:	221e      	movs	r2, #30
 8007fa8:	215a      	movs	r1, #90	; 0x5a
 8007faa:	f000 fe6f 	bl	8008c8c <create_fb_gui_display>

	type_fb_gui_display display_element5 = create_fb_gui_display(10, 40, 75, 10, 0, 0, 0 ,0);
 8007fae:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	9303      	str	r3, [sp, #12]
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	9302      	str	r3, [sp, #8]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	230a      	movs	r3, #10
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	234b      	movs	r3, #75	; 0x4b
 8007fc4:	2228      	movs	r2, #40	; 0x28
 8007fc6:	210a      	movs	r1, #10
 8007fc8:	f000 fe60 	bl	8008c8c <create_fb_gui_display>
	type_fb_gui_display display_element6 = create_fb_gui_display(90, 40, 25, 10, 0, 0, 1 ,0);
 8007fcc:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	9303      	str	r3, [sp, #12]
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9302      	str	r3, [sp, #8]
 8007fd8:	2300      	movs	r3, #0
 8007fda:	9301      	str	r3, [sp, #4]
 8007fdc:	230a      	movs	r3, #10
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	2319      	movs	r3, #25
 8007fe2:	2228      	movs	r2, #40	; 0x28
 8007fe4:	215a      	movs	r1, #90	; 0x5a
 8007fe6:	f000 fe51 	bl	8008c8c <create_fb_gui_display>

	type_fb_gui_display display_element7 = create_fb_gui_display(10, 60, 75, 10, 0, 0, 0 ,0);
 8007fea:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8007fee:	2300      	movs	r3, #0
 8007ff0:	9303      	str	r3, [sp, #12]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9302      	str	r3, [sp, #8]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	230a      	movs	r3, #10
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	234b      	movs	r3, #75	; 0x4b
 8008000:	223c      	movs	r2, #60	; 0x3c
 8008002:	210a      	movs	r1, #10
 8008004:	f000 fe42 	bl	8008c8c <create_fb_gui_display>
	type_fb_gui_display display_element8 = create_fb_gui_display(90, 60, 25, 10, 0, 0, 1 ,0);
 8008008:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800800c:	2301      	movs	r3, #1
 800800e:	9303      	str	r3, [sp, #12]
 8008010:	2300      	movs	r3, #0
 8008012:	9302      	str	r3, [sp, #8]
 8008014:	2300      	movs	r3, #0
 8008016:	9301      	str	r3, [sp, #4]
 8008018:	230a      	movs	r3, #10
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	2319      	movs	r3, #25
 800801e:	223c      	movs	r2, #60	; 0x3c
 8008020:	215a      	movs	r1, #90	; 0x5a
 8008022:	f000 fe33 	bl	8008c8c <create_fb_gui_display>

	type_fb_gui_display display_element9 = create_fb_gui_display(10, 70, 75, 10, 0, 0, 0 ,0);
 8008026:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800802a:	2300      	movs	r3, #0
 800802c:	9303      	str	r3, [sp, #12]
 800802e:	2300      	movs	r3, #0
 8008030:	9302      	str	r3, [sp, #8]
 8008032:	2300      	movs	r3, #0
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	230a      	movs	r3, #10
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	234b      	movs	r3, #75	; 0x4b
 800803c:	2246      	movs	r2, #70	; 0x46
 800803e:	210a      	movs	r1, #10
 8008040:	f000 fe24 	bl	8008c8c <create_fb_gui_display>
	type_fb_gui_display display_element10 = create_fb_gui_display(90, 70, 25, 10, 0, 0, 1 ,0);
 8008044:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8008048:	2301      	movs	r3, #1
 800804a:	9303      	str	r3, [sp, #12]
 800804c:	2300      	movs	r3, #0
 800804e:	9302      	str	r3, [sp, #8]
 8008050:	2300      	movs	r3, #0
 8008052:	9301      	str	r3, [sp, #4]
 8008054:	230a      	movs	r3, #10
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	2319      	movs	r3, #25
 800805a:	2246      	movs	r2, #70	; 0x46
 800805c:	215a      	movs	r1, #90	; 0x5a
 800805e:	f000 fe15 	bl	8008c8c <create_fb_gui_display>


	type_fb_encoder encoder = create_fb_encoder(0, 0);
 8008062:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008066:	2200      	movs	r2, #0
 8008068:	2100      	movs	r1, #0
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fc6e 	bl	800894c <create_fb_encoder>
	type_fb_jy jy = create_fb_jy(0, 1, 3, 0);
 8008070:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8008074:	2300      	movs	r3, #0
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	2303      	movs	r3, #3
 800807a:	2201      	movs	r2, #1
 800807c:	2100      	movs	r1, #0
 800807e:	f000 ffad 	bl	8008fdc <create_fb_jy>
	type_fb_inputpin btn1 = create_fb_inputpin(0, 0);
 8008082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008086:	2200      	movs	r2, #0
 8008088:	2100      	movs	r1, #0
 800808a:	4618      	mov	r0, r3
 800808c:	f000 fec8 	bl	8008e20 <create_fb_inputpin>
	type_fb_inputpin btn2 = create_fb_inputpin(1, 0);
 8008090:	f107 0314 	add.w	r3, r7, #20
 8008094:	2200      	movs	r2, #0
 8008096:	2101      	movs	r1, #1
 8008098:	4618      	mov	r0, r3
 800809a:	f000 fec1 	bl	8008e20 <create_fb_inputpin>
	type_fb_inputpin btn3 = create_fb_inputpin(2, 0);
 800809e:	463b      	mov	r3, r7
 80080a0:	2200      	movs	r2, #0
 80080a2:	2102      	movs	r1, #2
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 febb 	bl	8008e20 <create_fb_inputpin>

	make_connection(display_element1.fp.val, text1.fp.val);
 80080aa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80080ae:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80080b2:	4611      	mov	r1, r2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff fdd9 	bl	8007c6c <make_connection>
	make_connection(display_element2.fp.val, encoder.fp.val);
 80080ba:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80080be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	4619      	mov	r1, r3
 80080c6:	4610      	mov	r0, r2
 80080c8:	f7ff fdd0 	bl	8007c6c <make_connection>

	make_connection(display_element3.fp.val, text2.fp.val);
 80080cc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80080d0:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80080d4:	4611      	mov	r1, r2
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fdc8 	bl	8007c6c <make_connection>
	make_connection(display_element4.fp.val, jy.fp.x);
 80080dc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	4619      	mov	r1, r3
 80080ea:	4610      	mov	r0, r2
 80080ec:	f7ff fdbe 	bl	8007c6c <make_connection>

	make_connection(display_element5.fp.val, text3.fp.val);
 80080f0:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80080fa:	4611      	mov	r1, r2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff fdb5 	bl	8007c6c <make_connection>
	make_connection(display_element6.fp.val, btn1.fp.q);
 8008102:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008106:	699a      	ldr	r2, [r3, #24]
 8008108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	4619      	mov	r1, r3
 8008110:	4610      	mov	r0, r2
 8008112:	f7ff fdab 	bl	8007c6c <make_connection>

	make_connection(display_element7.fp.val, text4.fp.val);
 8008116:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008120:	4611      	mov	r1, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f7ff fda2 	bl	8007c6c <make_connection>
	make_connection(display_element8.fp.val, btn2.fp.q);
 8008128:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800812c:	699a      	ldr	r2, [r3, #24]
 800812e:	f107 0314 	add.w	r3, r7, #20
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f7ff fd98 	bl	8007c6c <make_connection>

	make_connection(display_element9.fp.val, text5.fp.val);
 800813c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8008146:	4611      	mov	r1, r2
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff fd8f 	bl	8007c6c <make_connection>
	make_connection(display_element10.fp.val, btn3.fp.q);
 800814e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008152:	699a      	ldr	r2, [r3, #24]
 8008154:	463b      	mov	r3, r7
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	4619      	mov	r1, r3
 800815a:	4610      	mov	r0, r2
 800815c:	f7ff fd86 	bl	8007c6c <make_connection>
}
 8008160:	bf00      	nop
 8008162:	f507 7720 	add.w	r7, r7, #640	; 0x280
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	0800b2d0 	.word	0x0800b2d0
 8008170:	0800b2d8 	.word	0x0800b2d8
 8008174:	0800b2e0 	.word	0x0800b2e0
 8008178:	0800b2e8 	.word	0x0800b2e8
 800817c:	0800b2f0 	.word	0x0800b2f0

08008180 <init_uniqueid>:
#include "modbus_slave.h"
#include "adaptor.h"

#define UID_LEN 16

void init_uniqueid(){
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
	uint8_t uniqueid[UID_LEN];
	//clear uniqueid buffer
	for(uint8_t i = 0;i<UID_LEN;i++){
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]
 800818a:	e009      	b.n	80081a0 <init_uniqueid+0x20>
		uniqueid[i] = 0;
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	f107 0218 	add.w	r2, r7, #24
 8008192:	4413      	add	r3, r2
 8008194:	2200      	movs	r2, #0
 8008196:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(uint8_t i = 0;i<UID_LEN;i++){
 800819a:	7dfb      	ldrb	r3, [r7, #23]
 800819c:	3301      	adds	r3, #1
 800819e:	75fb      	strb	r3, [r7, #23]
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
 80081a2:	2b0f      	cmp	r3, #15
 80081a4:	d9f2      	bls.n	800818c <init_uniqueid+0xc>
	}
	//read unique id from the adaptor function
	get_uniqueid(uniqueid, UID_LEN);
 80081a6:	463b      	mov	r3, r7
 80081a8:	2110      	movs	r1, #16
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7f8 fb6a 	bl	8000884 <get_uniqueid>

	//copy this value to the memory place where mapped to a modbus read only input registers
	uint8_t* modbus_p = (uint8_t*) get_Modbus_Buf_Input_Registers_30001();
 80081b0:	f000 f888 	bl	80082c4 <get_Modbus_Buf_Input_Registers_30001>
 80081b4:	6138      	str	r0, [r7, #16]

	for(uint8_t i= 0; i<UID_LEN;i++){
 80081b6:	2300      	movs	r3, #0
 80081b8:	75bb      	strb	r3, [r7, #22]
 80081ba:	e00c      	b.n	80081d6 <init_uniqueid+0x56>
		modbus_p[i] = uniqueid[i];
 80081bc:	7dba      	ldrb	r2, [r7, #22]
 80081be:	7dbb      	ldrb	r3, [r7, #22]
 80081c0:	6939      	ldr	r1, [r7, #16]
 80081c2:	440b      	add	r3, r1
 80081c4:	f107 0118 	add.w	r1, r7, #24
 80081c8:	440a      	add	r2, r1
 80081ca:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80081ce:	701a      	strb	r2, [r3, #0]
	for(uint8_t i= 0; i<UID_LEN;i++){
 80081d0:	7dbb      	ldrb	r3, [r7, #22]
 80081d2:	3301      	adds	r3, #1
 80081d4:	75bb      	strb	r3, [r7, #22]
 80081d6:	7dbb      	ldrb	r3, [r7, #22]
 80081d8:	2b0f      	cmp	r3, #15
 80081da:	d9ef      	bls.n	80081bc <init_uniqueid+0x3c>
	}
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <Channel_Mapping>:
 */
#include "stdint.h"
#include "deployment.h"
#include "comm_service.h"

Communication_Ch* Channel_Mapping(uint32_t channel){
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
	Communication_Ch* comm_ch;

	//channel mappings
	if(channel == 0){
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d103      	bne.n	80081fc <Channel_Mapping+0x16>
		comm_ch = get_deployment_ch();
 80081f4:	f001 f83a 	bl	800926c <get_deployment_ch>
 80081f8:	4603      	mov	r3, r0
 80081fa:	60fb      	str	r3, [r7, #12]
	}
	return comm_ch;
 80081fc:	68fb      	ldr	r3, [r7, #12]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <Runtime_CommDataService_NewData_Received>:

void Runtime_CommDataService_NewData_Received(uint32_t channel, uint8_t* buf, uint32_t len)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b086      	sub	sp, #24
 800820a:	af00      	add	r7, sp, #0
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	607a      	str	r2, [r7, #4]
	Communication_Ch* comm_ch = Channel_Mapping(channel);
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f7ff ffe7 	bl	80081e6 <Channel_Mapping>
 8008218:	6138      	str	r0, [r7, #16]

	//put data to the channel buffer
	for(uint32_t i= 0;i<len;i++)
 800821a:	2300      	movs	r3, #0
 800821c:	617b      	str	r3, [r7, #20]
 800821e:	e014      	b.n	800824a <Runtime_CommDataService_NewData_Received+0x44>
	if(comm_ch->rx_data_cntr < CH_RX_DATA_BUF_LEN){ //parse edilmeyi bekleyen bir data varsa üzerine yazma.
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	795b      	ldrb	r3, [r3, #5]
 8008224:	2b3f      	cmp	r3, #63	; 0x3f
 8008226:	d80d      	bhi.n	8008244 <Runtime_CommDataService_NewData_Received+0x3e>
		comm_ch->rx_data_buf[comm_ch->rx_data_cntr++] = buf[i];
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	441a      	add	r2, r3
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	795b      	ldrb	r3, [r3, #5]
 8008232:	1c59      	adds	r1, r3, #1
 8008234:	b2c8      	uxtb	r0, r1
 8008236:	6939      	ldr	r1, [r7, #16]
 8008238:	7148      	strb	r0, [r1, #5]
 800823a:	4619      	mov	r1, r3
 800823c:	7812      	ldrb	r2, [r2, #0]
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	440b      	add	r3, r1
 8008242:	719a      	strb	r2, [r3, #6]
	for(uint32_t i= 0;i<len;i++)
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	3301      	adds	r3, #1
 8008248:	617b      	str	r3, [r7, #20]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	429a      	cmp	r2, r3
 8008250:	d3e6      	bcc.n	8008220 <Runtime_CommDataService_NewData_Received+0x1a>
	}
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	3718      	adds	r7, #24
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <Runtime_CommDataService_Process_DataBuffer>:

uint8_t Runtime_CommDataService_Process_DataBuffer(uint32_t channel)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	Communication_Ch* comm_ch = Channel_Mapping(channel);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff ffbe 	bl	80081e6 <Channel_Mapping>
 800826a:	60f8      	str	r0, [r7, #12]
	if(comm_ch->rx_data_cntr < 2) {
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	795b      	ldrb	r3, [r3, #5]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d803      	bhi.n	800827c <Runtime_CommDataService_Process_DataBuffer+0x20>
		comm_ch->rx_data_cntr = 0;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	715a      	strb	r2, [r3, #5]
 800827a:	e013      	b.n	80082a4 <Runtime_CommDataService_Process_DataBuffer+0x48>
	}
	else if(comm_ch->data_validity_check_callback()  == 0) {
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008280:	4798      	blx	r3
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10b      	bne.n	80082a0 <Runtime_CommDataService_Process_DataBuffer+0x44>
		comm_ch->fdata_ready = 1;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		comm_ch->process_callback(channel);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	4798      	blx	r3
		comm_ch->rx_data_cntr = 0;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	715a      	strb	r2, [r3, #5]
 800829e:	e001      	b.n	80082a4 <Runtime_CommDataService_Process_DataBuffer+0x48>
	}
	else{
		return 1;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e000      	b.n	80082a6 <Runtime_CommDataService_Process_DataBuffer+0x4a>
	}

	return 0;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <get_Modbus_Buf_Holding_Registers_40001>:
//uint8_t Modbus_Buf_Discrete_Inputs_10001; //todo: implement
uint16_t Modbus_Buf_Input_Registers_30001[MODBUS_INPUT_REGISTER_COUNT]; //todo: implement
uint16_t Modbus_Buf_Holding_Registers_40001[MODBUS_HOLDING_REGISTER_COUNT];
Modbus_Slave_Responce_Data resp_data;

uint16_t* get_Modbus_Buf_Holding_Registers_40001(){return Modbus_Buf_Holding_Registers_40001;}
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	4b02      	ldr	r3, [pc, #8]	; (80082c0 <get_Modbus_Buf_Holding_Registers_40001+0x10>)
 80082b6:	4618      	mov	r0, r3
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	200016d4 	.word	0x200016d4

080082c4 <get_Modbus_Buf_Input_Registers_30001>:
uint16_t* get_Modbus_Buf_Input_Registers_30001(){return Modbus_Buf_Input_Registers_30001;}
 80082c4:	b480      	push	{r7}
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <get_Modbus_Buf_Input_Registers_30001+0x10>)
 80082ca:	4618      	mov	r0, r3
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	200016f4 	.word	0x200016f4

080082d8 <get_MODBUS_SLAVE_ADDR>:

uint8_t MODBUS_SLAVE_ADDR  = 0x01;
uint8_t* get_MODBUS_SLAVE_ADDR(){return &MODBUS_SLAVE_ADDR;}
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
 80082dc:	4b02      	ldr	r3, [pc, #8]	; (80082e8 <get_MODBUS_SLAVE_ADDR+0x10>)
 80082de:	4618      	mov	r0, r3
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	2000004c 	.word	0x2000004c

080082ec <get_low_byte>:

uint8_t get_low_byte(uint16_t word){
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	4603      	mov	r3, r0
 80082f4:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)(word & 0xFF);
 80082f6:	88fb      	ldrh	r3, [r7, #6]
 80082f8:	b2db      	uxtb	r3, r3
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <get_hi_byte>:

uint8_t get_hi_byte(uint16_t word){
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	4603      	mov	r3, r0
 800830e:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)((word>>8) & 0xFF);
 8008310:	88fb      	ldrh	r3, [r7, #6]
 8008312:	0a1b      	lsrs	r3, r3, #8
 8008314:	b29b      	uxth	r3, r3
 8008316:	b2db      	uxtb	r3, r3
}
 8008318:	4618      	mov	r0, r3
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <modbus_byte2word>:

uint16_t modbus_byte2word(uint8_t* p){
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
	return ((p[0] << 8) + p[1]);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	b29b      	uxth	r3, r3
 8008332:	021b      	lsls	r3, r3, #8
 8008334:	b29a      	uxth	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3301      	adds	r3, #1
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	b29b      	uxth	r3, r3
 800833e:	4413      	add	r3, r2
 8008340:	b29b      	uxth	r3, r3
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
	...

08008350 <modbus_slave_prep_resp_data>:
}

void modbus_slave_prep_resp_data(Modbus_Slave_Responce_Data* resp_data,
									uint8_t function,
									uint16_t register_addr,
									uint16_t register_qty){
 8008350:	b590      	push	{r4, r7, lr}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	4608      	mov	r0, r1
 800835a:	4611      	mov	r1, r2
 800835c:	461a      	mov	r2, r3
 800835e:	4603      	mov	r3, r0
 8008360:	72fb      	strb	r3, [r7, #11]
 8008362:	460b      	mov	r3, r1
 8008364:	813b      	strh	r3, [r7, #8]
 8008366:	4613      	mov	r3, r2
 8008368:	80fb      	strh	r3, [r7, #6]
	uint16_t i;

	uint16_t register_addr_0 = register_addr-1; //40001 means register 0
 800836a:	893b      	ldrh	r3, [r7, #8]
 800836c:	3b01      	subs	r3, #1
 800836e:	82bb      	strh	r3, [r7, #20]

	resp_data->index = 0;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	resp_data->buf[resp_data->index++] = MODBUS_SLAVE_ADDR; //Slave address
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	b2d1      	uxtb	r1, r2
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8008388:	461a      	mov	r2, r3
 800838a:	4b7d      	ldr	r3, [pc, #500]	; (8008580 <modbus_slave_prep_resp_data+0x230>)
 800838c:	7819      	ldrb	r1, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	5499      	strb	r1, [r3, r2]
	resp_data->buf[resp_data->index++] = function; //Function
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008398:	1c5a      	adds	r2, r3, #1
 800839a:	b2d1      	uxtb	r1, r2
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 80083a2:	4619      	mov	r1, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	7afa      	ldrb	r2, [r7, #11]
 80083a8:	545a      	strb	r2, [r3, r1]
	if(function == MODBUS_READ_HOLDING_REGISTER){
 80083aa:	7afb      	ldrb	r3, [r7, #11]
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d14a      	bne.n	8008446 <modbus_slave_prep_resp_data+0xf6>
		resp_data->buf[resp_data->index++] = register_qty*2;
 80083b0:	88fb      	ldrh	r3, [r7, #6]
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80083ba:	1c59      	adds	r1, r3, #1
 80083bc:	b2c8      	uxtb	r0, r1
 80083be:	68f9      	ldr	r1, [r7, #12]
 80083c0:	f881 0026 	strb.w	r0, [r1, #38]	; 0x26
 80083c4:	4619      	mov	r1, r3
 80083c6:	0053      	lsls	r3, r2, #1
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	545a      	strb	r2, [r3, r1]
		for(i = 0;i<register_qty;i++){
 80083ce:	2300      	movs	r3, #0
 80083d0:	82fb      	strh	r3, [r7, #22]
 80083d2:	e033      	b.n	800843c <modbus_slave_prep_resp_data+0xec>
			if(register_addr_0+i <= MODBUS_HOLDING_REGISTER_COUNT) {
 80083d4:	8aba      	ldrh	r2, [r7, #20]
 80083d6:	8afb      	ldrh	r3, [r7, #22]
 80083d8:	4413      	add	r3, r2
 80083da:	2b10      	cmp	r3, #16
 80083dc:	dc2b      	bgt.n	8008436 <modbus_slave_prep_resp_data+0xe6>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 80083de:	8aba      	ldrh	r2, [r7, #20]
 80083e0:	8afb      	ldrh	r3, [r7, #22]
 80083e2:	4413      	add	r3, r2
 80083e4:	4a67      	ldr	r2, [pc, #412]	; (8008584 <modbus_slave_prep_resp_data+0x234>)
 80083e6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	b2d0      	uxtb	r0, r2
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 80083fa:	461c      	mov	r4, r3
 80083fc:	4608      	mov	r0, r1
 80083fe:	f7ff ff82 	bl	8008306 <get_hi_byte>
 8008402:	4603      	mov	r3, r0
 8008404:	461a      	mov	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	551a      	strb	r2, [r3, r4]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 800840a:	8aba      	ldrh	r2, [r7, #20]
 800840c:	8afb      	ldrh	r3, [r7, #22]
 800840e:	4413      	add	r3, r2
 8008410:	4a5c      	ldr	r2, [pc, #368]	; (8008584 <modbus_slave_prep_resp_data+0x234>)
 8008412:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	b2d0      	uxtb	r0, r2
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 8008426:	461c      	mov	r4, r3
 8008428:	4608      	mov	r0, r1
 800842a:	f7ff ff5f 	bl	80082ec <get_low_byte>
 800842e:	4603      	mov	r3, r0
 8008430:	461a      	mov	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	551a      	strb	r2, [r3, r4]
		for(i = 0;i<register_qty;i++){
 8008436:	8afb      	ldrh	r3, [r7, #22]
 8008438:	3301      	adds	r3, #1
 800843a:	82fb      	strh	r3, [r7, #22]
 800843c:	8afa      	ldrh	r2, [r7, #22]
 800843e:	88fb      	ldrh	r3, [r7, #6]
 8008440:	429a      	cmp	r2, r3
 8008442:	d3c7      	bcc.n	80083d4 <modbus_slave_prep_resp_data+0x84>
 8008444:	e0e9      	b.n	800861a <modbus_slave_prep_resp_data+0x2ca>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_READ_INPUT_REGISTER){
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	2b04      	cmp	r3, #4
 800844a:	d14a      	bne.n	80084e2 <modbus_slave_prep_resp_data+0x192>
		resp_data->buf[resp_data->index++] = register_qty*2;
 800844c:	88fb      	ldrh	r3, [r7, #6]
 800844e:	b2da      	uxtb	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008456:	1c59      	adds	r1, r3, #1
 8008458:	b2c8      	uxtb	r0, r1
 800845a:	68f9      	ldr	r1, [r7, #12]
 800845c:	f881 0026 	strb.w	r0, [r1, #38]	; 0x26
 8008460:	4619      	mov	r1, r3
 8008462:	0053      	lsls	r3, r2, #1
 8008464:	b2da      	uxtb	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	545a      	strb	r2, [r3, r1]
		for(i = 0;i<register_qty;i++){
 800846a:	2300      	movs	r3, #0
 800846c:	82fb      	strh	r3, [r7, #22]
 800846e:	e033      	b.n	80084d8 <modbus_slave_prep_resp_data+0x188>
			if(register_addr_0+i <= MODBUS_INPUT_REGISTER_COUNT) {
 8008470:	8aba      	ldrh	r2, [r7, #20]
 8008472:	8afb      	ldrh	r3, [r7, #22]
 8008474:	4413      	add	r3, r2
 8008476:	2b10      	cmp	r3, #16
 8008478:	dc2b      	bgt.n	80084d2 <modbus_slave_prep_resp_data+0x182>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 800847a:	8aba      	ldrh	r2, [r7, #20]
 800847c:	8afb      	ldrh	r3, [r7, #22]
 800847e:	4413      	add	r3, r2
 8008480:	4a41      	ldr	r2, [pc, #260]	; (8008588 <modbus_slave_prep_resp_data+0x238>)
 8008482:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	b2d0      	uxtb	r0, r2
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 8008496:	461c      	mov	r4, r3
 8008498:	4608      	mov	r0, r1
 800849a:	f7ff ff34 	bl	8008306 <get_hi_byte>
 800849e:	4603      	mov	r3, r0
 80084a0:	461a      	mov	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	551a      	strb	r2, [r3, r4]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 80084a6:	8aba      	ldrh	r2, [r7, #20]
 80084a8:	8afb      	ldrh	r3, [r7, #22]
 80084aa:	4413      	add	r3, r2
 80084ac:	4a36      	ldr	r2, [pc, #216]	; (8008588 <modbus_slave_prep_resp_data+0x238>)
 80084ae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	b2d0      	uxtb	r0, r2
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 80084c2:	461c      	mov	r4, r3
 80084c4:	4608      	mov	r0, r1
 80084c6:	f7ff ff11 	bl	80082ec <get_low_byte>
 80084ca:	4603      	mov	r3, r0
 80084cc:	461a      	mov	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	551a      	strb	r2, [r3, r4]
		for(i = 0;i<register_qty;i++){
 80084d2:	8afb      	ldrh	r3, [r7, #22]
 80084d4:	3301      	adds	r3, #1
 80084d6:	82fb      	strh	r3, [r7, #22]
 80084d8:	8afa      	ldrh	r2, [r7, #22]
 80084da:	88fb      	ldrh	r3, [r7, #6]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d3c7      	bcc.n	8008470 <modbus_slave_prep_resp_data+0x120>
 80084e0:	e09b      	b.n	800861a <modbus_slave_prep_resp_data+0x2ca>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_WRITE_SINGLE_REGISTER){
 80084e2:	7afb      	ldrb	r3, [r7, #11]
 80084e4:	2b06      	cmp	r3, #6
 80084e6:	d151      	bne.n	800858c <modbus_slave_prep_resp_data+0x23c>
		resp_data->buf[resp_data->index++] = get_hi_byte(register_addr);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	b2d1      	uxtb	r1, r2
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 80084f8:	461c      	mov	r4, r3
 80084fa:	893b      	ldrh	r3, [r7, #8]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7ff ff02 	bl	8008306 <get_hi_byte>
 8008502:	4603      	mov	r3, r0
 8008504:	461a      	mov	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_addr);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008510:	1c5a      	adds	r2, r3, #1
 8008512:	b2d1      	uxtb	r1, r2
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 800851a:	461c      	mov	r4, r3
 800851c:	893b      	ldrh	r3, [r7, #8]
 800851e:	4618      	mov	r0, r3
 8008520:	f7ff fee4 	bl	80082ec <get_low_byte>
 8008524:	4603      	mov	r3, r0
 8008526:	461a      	mov	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 800852c:	8abb      	ldrh	r3, [r7, #20]
 800852e:	4a15      	ldr	r2, [pc, #84]	; (8008584 <modbus_slave_prep_resp_data+0x234>)
 8008530:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	b2d0      	uxtb	r0, r2
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 8008544:	461c      	mov	r4, r3
 8008546:	4608      	mov	r0, r1
 8008548:	f7ff fedd 	bl	8008306 <get_hi_byte>
 800854c:	4603      	mov	r3, r0
 800854e:	461a      	mov	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 8008554:	8abb      	ldrh	r3, [r7, #20]
 8008556:	4a0b      	ldr	r2, [pc, #44]	; (8008584 <modbus_slave_prep_resp_data+0x234>)
 8008558:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	b2d0      	uxtb	r0, r2
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 800856c:	461c      	mov	r4, r3
 800856e:	4608      	mov	r0, r1
 8008570:	f7ff febc 	bl	80082ec <get_low_byte>
 8008574:	4603      	mov	r3, r0
 8008576:	461a      	mov	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	551a      	strb	r2, [r3, r4]
 800857c:	e04d      	b.n	800861a <modbus_slave_prep_resp_data+0x2ca>
 800857e:	bf00      	nop
 8008580:	2000004c 	.word	0x2000004c
 8008584:	200016d4 	.word	0x200016d4
 8008588:	200016f4 	.word	0x200016f4
	}

	else if(function == MODBUS_WRITE_MULTIPLE_REGISTER){
 800858c:	7afb      	ldrb	r3, [r7, #11]
 800858e:	2b10      	cmp	r3, #16
 8008590:	d143      	bne.n	800861a <modbus_slave_prep_resp_data+0x2ca>
		resp_data->buf[resp_data->index++] = get_hi_byte(register_addr);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	b2d1      	uxtb	r1, r2
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 80085a2:	461c      	mov	r4, r3
 80085a4:	893b      	ldrh	r3, [r7, #8]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff fead 	bl	8008306 <get_hi_byte>
 80085ac:	4603      	mov	r3, r0
 80085ae:	461a      	mov	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_addr);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	b2d1      	uxtb	r1, r2
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 80085c4:	461c      	mov	r4, r3
 80085c6:	893b      	ldrh	r3, [r7, #8]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff fe8f 	bl	80082ec <get_low_byte>
 80085ce:	4603      	mov	r3, r0
 80085d0:	461a      	mov	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_hi_byte(register_qty);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	b2d1      	uxtb	r1, r2
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 80085e6:	461c      	mov	r4, r3
 80085e8:	88fb      	ldrh	r3, [r7, #6]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff fe8b 	bl	8008306 <get_hi_byte>
 80085f0:	4603      	mov	r3, r0
 80085f2:	461a      	mov	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_qty);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	b2d1      	uxtb	r1, r2
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8008608:	461c      	mov	r4, r3
 800860a:	88fb      	ldrh	r3, [r7, #6]
 800860c:	4618      	mov	r0, r3
 800860e:	f7ff fe6d 	bl	80082ec <get_low_byte>
 8008612:	4603      	mov	r3, r0
 8008614:	461a      	mov	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	551a      	strb	r2, [r3, r4]
	}

	//todo: crc
	uint16_t crc = CRC16(resp_data->buf, resp_data->index);
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008622:	b29b      	uxth	r3, r3
 8008624:	4619      	mov	r1, r3
 8008626:	4610      	mov	r0, r2
 8008628:	f000 f8fc 	bl	8008824 <CRC16>
 800862c:	4603      	mov	r3, r0
 800862e:	827b      	strh	r3, [r7, #18]

	resp_data->buf[resp_data->index++] = get_low_byte(crc);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	b2d1      	uxtb	r1, r2
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8008640:	461c      	mov	r4, r3
 8008642:	8a7b      	ldrh	r3, [r7, #18]
 8008644:	4618      	mov	r0, r3
 8008646:	f7ff fe51 	bl	80082ec <get_low_byte>
 800864a:	4603      	mov	r3, r0
 800864c:	461a      	mov	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	551a      	strb	r2, [r3, r4]
	resp_data->buf[resp_data->index++] = get_hi_byte(crc);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	b2d1      	uxtb	r1, r2
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8008662:	461c      	mov	r4, r3
 8008664:	8a7b      	ldrh	r3, [r7, #18]
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff fe4d 	bl	8008306 <get_hi_byte>
 800866c:	4603      	mov	r3, r0
 800866e:	461a      	mov	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	551a      	strb	r2, [r3, r4]

	resp_data->len = resp_data->index;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8008680:	bf00      	nop
 8008682:	371c      	adds	r7, #28
 8008684:	46bd      	mov	sp, r7
 8008686:	bd90      	pop	{r4, r7, pc}

08008688 <modbus_slave_tx>:

void modbus_slave_tx(Modbus_Slave_Responce_Data* resp_data){
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
	hal_modbus_uart_tx(resp_data->buf, resp_data->len);
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008698:	4619      	mov	r1, r3
 800869a:	4610      	mov	r0, r2
 800869c:	f7f8 f8d4 	bl	8000848 <hal_modbus_uart_tx>
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <modbus_slave_rx>:

uint8_t modbus_slave_rx(uint32_t channel){
 80086a8:	b590      	push	{r4, r7, lr}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
	uint16_t register_addr = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	82bb      	strh	r3, [r7, #20]
	uint16_t register_val = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	827b      	strh	r3, [r7, #18]
	uint16_t register_qty = 0;
 80086b8:	2300      	movs	r3, #0
 80086ba:	823b      	strh	r3, [r7, #16]

	uint16_t starting_addr = 0;
 80086bc:	2300      	movs	r3, #0
 80086be:	81fb      	strh	r3, [r7, #14]
	uint16_t quantity_of_register = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	81bb      	strh	r3, [r7, #12]
	uint8_t gpd_recorded = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	75fb      	strb	r3, [r7, #23]

	Communication_Ch* ch = Channel_Mapping(channel);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff fd8c 	bl	80081e6 <Channel_Mapping>
 80086ce:	4603      	mov	r3, r0
 80086d0:	60bb      	str	r3, [r7, #8]

	//todo: crc check

	if(ch->rx_data_buf[0] == MODBUS_SLAVE_ADDR){
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	799a      	ldrb	r2, [r3, #6]
 80086d6:	4b4f      	ldr	r3, [pc, #316]	; (8008814 <modbus_slave_rx+0x16c>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	f040 8093 	bne.w	8008806 <modbus_slave_rx+0x15e>
		register_addr = modbus_byte2word(&ch->rx_data_buf[2]);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	3308      	adds	r3, #8
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff fe1d 	bl	8008324 <modbus_byte2word>
 80086ea:	4603      	mov	r3, r0
 80086ec:	82bb      	strh	r3, [r7, #20]
		register_qty = modbus_byte2word(&ch->rx_data_buf[4]);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	330a      	adds	r3, #10
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff fe16 	bl	8008324 <modbus_byte2word>
 80086f8:	4603      	mov	r3, r0
 80086fa:	823b      	strh	r3, [r7, #16]
		starting_addr = register_addr - 1;
 80086fc:	8abb      	ldrh	r3, [r7, #20]
 80086fe:	3b01      	subs	r3, #1
 8008700:	81fb      	strh	r3, [r7, #14]

		if(ch->rx_data_buf[1] == MODBUS_WRITE_SINGLE_REGISTER){
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	79db      	ldrb	r3, [r3, #7]
 8008706:	2b06      	cmp	r3, #6
 8008708:	d11f      	bne.n	800874a <modbus_slave_rx+0xa2>
			//todo: need to save parameter to flash
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 800870a:	89fb      	ldrh	r3, [r7, #14]
 800870c:	2b0f      	cmp	r3, #15
 800870e:	d85b      	bhi.n	80087c8 <modbus_slave_rx+0x120>
				Modbus_Buf_Holding_Registers_40001[starting_addr] = modbus_byte2word(&ch->rx_data_buf[4]);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	330a      	adds	r3, #10
 8008714:	89fc      	ldrh	r4, [r7, #14]
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff fe04 	bl	8008324 <modbus_byte2word>
 800871c:	4603      	mov	r3, r0
 800871e:	461a      	mov	r2, r3
 8008720:	4b3d      	ldr	r3, [pc, #244]	; (8008818 <modbus_slave_rx+0x170>)
 8008722:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

				if(starting_addr > 7) {
 8008726:	89fb      	ldrh	r3, [r7, #14]
 8008728:	2b07      	cmp	r3, #7
 800872a:	d94d      	bls.n	80087c8 <modbus_slave_rx+0x120>
					Record_To_Modbus_GPD(starting_addr-8, Modbus_Buf_Holding_Registers_40001[starting_addr]);
 800872c:	89fb      	ldrh	r3, [r7, #14]
 800872e:	b2db      	uxtb	r3, r3
 8008730:	3b08      	subs	r3, #8
 8008732:	b2da      	uxtb	r2, r3
 8008734:	89fb      	ldrh	r3, [r7, #14]
 8008736:	4938      	ldr	r1, [pc, #224]	; (8008818 <modbus_slave_rx+0x170>)
 8008738:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800873c:	4619      	mov	r1, r3
 800873e:	4610      	mov	r0, r2
 8008740:	f7ff fbb4 	bl	8007eac <Record_To_Modbus_GPD>
					write_persistent_data_structure();
 8008744:	f7ff fba6 	bl	8007e94 <write_persistent_data_structure>
 8008748:	e03e      	b.n	80087c8 <modbus_slave_rx+0x120>
				}
			}
		}

		else if(ch->rx_data_buf[1] == MODBUS_WRITE_MULTIPLE_REGISTER){
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	79db      	ldrb	r3, [r3, #7]
 800874e:	2b10      	cmp	r3, #16
 8008750:	d13a      	bne.n	80087c8 <modbus_slave_rx+0x120>
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 8008752:	89fb      	ldrh	r3, [r7, #14]
 8008754:	2b0f      	cmp	r3, #15
 8008756:	d837      	bhi.n	80087c8 <modbus_slave_rx+0x120>
				for(uint8_t i = 0;i<register_qty;i++){
 8008758:	2300      	movs	r3, #0
 800875a:	75bb      	strb	r3, [r7, #22]
 800875c:	e02a      	b.n	80087b4 <modbus_slave_rx+0x10c>
					Modbus_Buf_Holding_Registers_40001[starting_addr+i] = modbus_byte2word(&ch->rx_data_buf[7+i*2]);
 800875e:	7dbb      	ldrb	r3, [r7, #22]
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	3307      	adds	r3, #7
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	4413      	add	r3, r2
 8008768:	1d99      	adds	r1, r3, #6
 800876a:	89fa      	ldrh	r2, [r7, #14]
 800876c:	7dbb      	ldrb	r3, [r7, #22]
 800876e:	18d4      	adds	r4, r2, r3
 8008770:	4608      	mov	r0, r1
 8008772:	f7ff fdd7 	bl	8008324 <modbus_byte2word>
 8008776:	4603      	mov	r3, r0
 8008778:	461a      	mov	r2, r3
 800877a:	4b27      	ldr	r3, [pc, #156]	; (8008818 <modbus_slave_rx+0x170>)
 800877c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
					if((starting_addr+i) > 7) {
 8008780:	89fa      	ldrh	r2, [r7, #14]
 8008782:	7dbb      	ldrb	r3, [r7, #22]
 8008784:	4413      	add	r3, r2
 8008786:	2b07      	cmp	r3, #7
 8008788:	dd11      	ble.n	80087ae <modbus_slave_rx+0x106>
						//If modbus write targetted to upper 8 register,
						//since they are persistent registers record them to gdb
						Record_To_Modbus_GPD(starting_addr+i-8, Modbus_Buf_Holding_Registers_40001[starting_addr+i]);
 800878a:	89fb      	ldrh	r3, [r7, #14]
 800878c:	b2da      	uxtb	r2, r3
 800878e:	7dbb      	ldrb	r3, [r7, #22]
 8008790:	4413      	add	r3, r2
 8008792:	b2db      	uxtb	r3, r3
 8008794:	3b08      	subs	r3, #8
 8008796:	b2d8      	uxtb	r0, r3
 8008798:	89fa      	ldrh	r2, [r7, #14]
 800879a:	7dbb      	ldrb	r3, [r7, #22]
 800879c:	4413      	add	r3, r2
 800879e:	4a1e      	ldr	r2, [pc, #120]	; (8008818 <modbus_slave_rx+0x170>)
 80087a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087a4:	4619      	mov	r1, r3
 80087a6:	f7ff fb81 	bl	8007eac <Record_To_Modbus_GPD>
						gpd_recorded = 1;
 80087aa:	2301      	movs	r3, #1
 80087ac:	75fb      	strb	r3, [r7, #23]
				for(uint8_t i = 0;i<register_qty;i++){
 80087ae:	7dbb      	ldrb	r3, [r7, #22]
 80087b0:	3301      	adds	r3, #1
 80087b2:	75bb      	strb	r3, [r7, #22]
 80087b4:	7dbb      	ldrb	r3, [r7, #22]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	8a3a      	ldrh	r2, [r7, #16]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d8cf      	bhi.n	800875e <modbus_slave_rx+0xb6>
					}
				}

				if(gpd_recorded){
 80087be:	7dfb      	ldrb	r3, [r7, #23]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <modbus_slave_rx+0x120>
					//after multiple write finished record persistent data at once.
					write_persistent_data_structure();
 80087c4:	f7ff fb66 	bl	8007e94 <write_persistent_data_structure>
		}

		else if(ch->rx_data_buf[1] == MODBUS_READ_HOLDING_REGISTER){
		}

		switch(ch->rx_data_buf[1]){
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	79db      	ldrb	r3, [r3, #7]
 80087cc:	2b10      	cmp	r3, #16
 80087ce:	bf8c      	ite	hi
 80087d0:	2201      	movhi	r2, #1
 80087d2:	2200      	movls	r2, #0
 80087d4:	b2d2      	uxtb	r2, r2
 80087d6:	2a00      	cmp	r2, #0
 80087d8:	d116      	bne.n	8008808 <modbus_slave_rx+0x160>
 80087da:	2201      	movs	r2, #1
 80087dc:	409a      	lsls	r2, r3
 80087de:	4b0f      	ldr	r3, [pc, #60]	; (800881c <modbus_slave_rx+0x174>)
 80087e0:	4013      	ands	r3, r2
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bf14      	ite	ne
 80087e6:	2301      	movne	r3, #1
 80087e8:	2300      	moveq	r3, #0
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00b      	beq.n	8008808 <modbus_slave_rx+0x160>
			case MODBUS_WRITE_SINGLE_REGISTER:
			case MODBUS_WRITE_MULTIPLE_REGISTER:
			case MODBUS_READ_HOLDING_REGISTER:
			case MODBUS_READ_INPUT_REGISTER:
				//fill the responce structure
				modbus_slave_prep_resp_data(&resp_data,
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	79d9      	ldrb	r1, [r3, #7]
 80087f4:	8a3b      	ldrh	r3, [r7, #16]
 80087f6:	8aba      	ldrh	r2, [r7, #20]
 80087f8:	4809      	ldr	r0, [pc, #36]	; (8008820 <modbus_slave_rx+0x178>)
 80087fa:	f7ff fda9 	bl	8008350 <modbus_slave_prep_resp_data>
												ch->rx_data_buf[1],
													register_addr,
														register_qty);

				//initiate_tx
				modbus_slave_tx(&resp_data);
 80087fe:	4808      	ldr	r0, [pc, #32]	; (8008820 <modbus_slave_rx+0x178>)
 8008800:	f7ff ff42 	bl	8008688 <modbus_slave_tx>
				break;
 8008804:	e000      	b.n	8008808 <modbus_slave_rx+0x160>
		}
	}
 8008806:	bf00      	nop
	return 0;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	bd90      	pop	{r4, r7, pc}
 8008812:	bf00      	nop
 8008814:	2000004c 	.word	0x2000004c
 8008818:	200016d4 	.word	0x200016d4
 800881c:	00010058 	.word	0x00010058
 8008820:	200016ac 	.word	0x200016ac

08008824 <CRC16>:

uint16_t CRC16 (const uint8_t *nData, uint16_t wLength)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	807b      	strh	r3, [r7, #2]
   0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
   0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

uint8_t nTemp;
uint16_t wCRCWord = 0xFFFF;
 8008830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008834:	81fb      	strh	r3, [r7, #14]

   while (wLength--)
 8008836:	e011      	b.n	800885c <CRC16+0x38>
   {
      nTemp = *nData++ ^ wCRCWord;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	607a      	str	r2, [r7, #4]
 800883e:	781a      	ldrb	r2, [r3, #0]
 8008840:	89fb      	ldrh	r3, [r7, #14]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	4053      	eors	r3, r2
 8008846:	737b      	strb	r3, [r7, #13]
      wCRCWord >>= 8;
 8008848:	89fb      	ldrh	r3, [r7, #14]
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	81fb      	strh	r3, [r7, #14]
      wCRCWord  ^= wCRCTable[nTemp];
 800884e:	7b7b      	ldrb	r3, [r7, #13]
 8008850:	4a08      	ldr	r2, [pc, #32]	; (8008874 <CRC16+0x50>)
 8008852:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008856:	89fb      	ldrh	r3, [r7, #14]
 8008858:	4053      	eors	r3, r2
 800885a:	81fb      	strh	r3, [r7, #14]
   while (wLength--)
 800885c:	887b      	ldrh	r3, [r7, #2]
 800885e:	1e5a      	subs	r2, r3, #1
 8008860:	807a      	strh	r2, [r7, #2]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e8      	bne.n	8008838 <CRC16+0x14>
   }
   return wCRCWord;
 8008866:	89fb      	ldrh	r3, [r7, #14]
} // End: CRC16
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	0800baf8 	.word	0x0800baf8

08008878 <fb_encoder_parser>:
#include "mcCore.h"
#include "fb_encoder.h"
#include "adaptor.h"

//cyclic event fb
uint8_t fb_encoder_parser(uint8_t* p){
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af00      	add	r7, sp, #0
 800887e:	61f8      	str	r0, [r7, #28]
	create_fb_encoder(p[0],p[1]);
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	7819      	ldrb	r1, [r3, #0]
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	3301      	adds	r3, #1
 8008888:	781a      	ldrb	r2, [r3, #0]
 800888a:	463b      	mov	r3, r7
 800888c:	4618      	mov	r0, r3
 800888e:	f000 f85d 	bl	800894c <create_fb_encoder>
	return 1;
 8008892:	2301      	movs	r3, #1
}
 8008894:	4618      	mov	r0, r3
 8008896:	3720      	adds	r7, #32
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <fb_encoder>:

void fb_encoder(uint8_t p){
 800889c:	b580      	push	{r7, lr}
 800889e:	b088      	sub	sp, #32
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 80088a6:	f7ff f98b 	bl	8007bc0 <get_paramAddrTable>
 80088aa:	61f8      	str	r0, [r7, #28]
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	69fa      	ldr	r2, [r7, #28]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	4413      	add	r3, r2
 80088c0:	3304      	adds	r3, #4
 80088c2:	61bb      	str	r3, [r7, #24]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p+1]];
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	3301      	adds	r3, #1
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	69fa      	ldr	r2, [r7, #28]
 80088d8:	4413      	add	r3, r2
 80088da:	3304      	adds	r3, #4
 80088dc:	617b      	str	r3, [r7, #20]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	3302      	adds	r3, #2
 80088e2:	69fa      	ldr	r2, [r7, #28]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	69fa      	ldr	r2, [r7, #28]
 80088f2:	4413      	add	r3, r2
 80088f4:	3304      	adds	r3, #4
 80088f6:	613b      	str	r3, [r7, #16]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+3]];
 80088f8:	79fb      	ldrb	r3, [r7, #7]
 80088fa:	3303      	adds	r3, #3
 80088fc:	69fa      	ldr	r2, [r7, #28]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	69fa      	ldr	r2, [r7, #28]
 800890c:	4413      	add	r3, r2
 800890e:	3304      	adds	r3, #4
 8008910:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 8008912:	79fb      	ldrb	r3, [r7, #7]
 8008914:	3304      	adds	r3, #4
 8008916:	69fa      	ldr	r2, [r7, #28]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	4413      	add	r3, r2
 8008928:	3304      	adds	r3, #4
 800892a:	60bb      	str	r3, [r7, #8]

	//todo:add reset function

	if(*mode == 0){
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d107      	bne.n	8008944 <fb_encoder+0xa8>
		*val = hal_get_encoder_value(*ch);
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4618      	mov	r0, r3
 800893a:	f7f8 f837 	bl	80009ac <hal_get_encoder_value>
 800893e:	4602      	mov	r2, r0
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	601a      	str	r2, [r3, #0]
	}
}
 8008944:	bf00      	nop
 8008946:	3720      	adds	r7, #32
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <create_fb_encoder>:

type_fb_encoder create_fb_encoder(uint8_t ch,
									uint8_t mode){
 800894c:	b5b0      	push	{r4, r5, r7, lr}
 800894e:	b08a      	sub	sp, #40	; 0x28
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	70fb      	strb	r3, [r7, #3]
 8008958:	4613      	mov	r3, r2
 800895a:	70bb      	strb	r3, [r7, #2]
	type_fb_encoder fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800895c:	f7ff f930 	bl	8007bc0 <get_paramAddrTable>
 8008960:	6278      	str	r0, [r7, #36]	; 0x24

	fb.startParamIndex = pAddrTable->currentIndex;
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	737b      	strb	r3, [r7, #13]

	//input ports
	fb.fp.rst = createParameter(0);
 8008968:	2000      	movs	r0, #0
 800896a:	f7ff f957 	bl	8007c1c <createParameter>
 800896e:	4603      	mov	r3, r0
 8008970:	613b      	str	r3, [r7, #16]
	fb.fp.ch = createParameter(ch);
 8008972:	78fb      	ldrb	r3, [r7, #3]
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff f951 	bl	8007c1c <createParameter>
 800897a:	4603      	mov	r3, r0
 800897c:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode);
 800897e:	78bb      	ldrb	r3, [r7, #2]
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff f94b 	bl	8007c1c <createParameter>
 8008986:	4603      	mov	r3, r0
 8008988:	61bb      	str	r3, [r7, #24]

	//output ports
	fb.fp.val = createParameter(0);
 800898a:	2000      	movs	r0, #0
 800898c:	f7ff f946 	bl	8007c1c <createParameter>
 8008990:	4603      	mov	r3, r0
 8008992:	61fb      	str	r3, [r7, #28]
	fb.fp.stat = createParameter(0);
 8008994:	2000      	movs	r0, #0
 8008996:	f7ff f941 	bl	8007c1c <createParameter>
 800899a:	4603      	mov	r3, r0
 800899c:	623b      	str	r3, [r7, #32]

	//internal parameters

	fb.fb_index = writeToFBTable(fb_encoder, fb.startParamIndex);
 800899e:	7b7b      	ldrb	r3, [r7, #13]
 80089a0:	4619      	mov	r1, r3
 80089a2:	4809      	ldr	r0, [pc, #36]	; (80089c8 <create_fb_encoder+0x7c>)
 80089a4:	f7ff f916 	bl	8007bd4 <writeToFBTable>
 80089a8:	4603      	mov	r3, r0
 80089aa:	733b      	strb	r3, [r7, #12]

	return fb;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	461d      	mov	r5, r3
 80089b0:	f107 040c 	add.w	r4, r7, #12
 80089b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80089b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80089bc:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	3728      	adds	r7, #40	; 0x28
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bdb0      	pop	{r4, r5, r7, pc}
 80089c8:	0800889d 	.word	0x0800889d

080089cc <fb_gui_display_parser>:
#include "utility.h"
#include "fb_gui_display.h"


//gui_display fb
uint8_t fb_gui_display_parser(uint8_t* p){
 80089cc:	b590      	push	{r4, r7, lr}
 80089ce:	b099      	sub	sp, #100	; 0x64
 80089d0:	af04      	add	r7, sp, #16
 80089d2:	6378      	str	r0, [r7, #52]	; 0x34
	uint16_t index = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	87bb      	strh	r3, [r7, #60]	; 0x3c

	uint16_t startX = get_uint16(p, &index);
 80089d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80089dc:	4619      	mov	r1, r3
 80089de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80089e0:	f000 fe63 	bl	80096aa <get_uint16>
 80089e4:	4603      	mov	r3, r0
 80089e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t startY = get_uint16(p, &index);
 80089ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80089ee:	4619      	mov	r1, r3
 80089f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80089f2:	f000 fe5a 	bl	80096aa <get_uint16>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t width = get_uint16(p, &index);
 80089fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008a00:	4619      	mov	r1, r3
 8008a02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008a04:	f000 fe51 	bl	80096aa <get_uint16>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint16_t height = get_uint16(p, &index);
 8008a0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008a12:	4619      	mov	r1, r3
 8008a14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008a16:	f000 fe48 	bl	80096aa <get_uint16>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff f8fd 	bl	8007c1c <createParameter>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint8_t attr = get_uint8(p, &index);
 8008a28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008a30:	f000 fe22 	bl	8009678 <get_uint8>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t val = get_uint32(p, &index);
 8008a3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008a42:	f000 fe56 	bl	80096f2 <get_uint32>
 8008a46:	4603      	mov	r3, r0
 8008a48:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t mode = get_uint8(p, &index);
 8008a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008a52:	f000 fe11 	bl	8009678 <get_uint8>
 8008a56:	4603      	mov	r3, r0
 8008a58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t mid = get_uint8(p, &index);

 8008a5c:	4638      	mov	r0, r7
 8008a5e:	f8b7 404a 	ldrh.w	r4, [r7, #74]	; 0x4a
 8008a62:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008a66:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8008a6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a6e:	9303      	str	r3, [sp, #12]
 8008a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a72:	9302      	str	r3, [sp, #8]
 8008a74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008a78:	9301      	str	r3, [sp, #4]
 8008a7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	4623      	mov	r3, r4
 8008a82:	f000 f903 	bl	8008c8c <create_fb_gui_display>
	create_fb_gui_display(startX, startY, width, height, attr, val, mode, mid);

 8008a86:	2301      	movs	r3, #1
	return 1;
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3754      	adds	r7, #84	; 0x54
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd90      	pop	{r4, r7, pc}

08008a90 <fb_gui_display>:
}

 8008a90:	b5b0      	push	{r4, r5, r7, lr}
 8008a92:	b096      	sub	sp, #88	; 0x58
 8008a94:	af04      	add	r7, sp, #16
 8008a96:	4603      	mov	r3, r0
 8008a98:	71fb      	strb	r3, [r7, #7]
void fb_gui_display(uint8_t p){
	uint32_t time, delta;

 8008a9a:	f7ff f891 	bl	8007bc0 <get_paramAddrTable>
 8008a9e:	6438      	str	r0, [r7, #64]	; 0x40
	s_Param* pAddrTable = get_paramAddrTable();
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ab2:	4413      	add	r3, r2
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t* startX = &pAddrTable->value[pAddrTable->addr[p]];
 8008ab8:	79fb      	ldrb	r3, [r7, #7]
 8008aba:	3301      	adds	r3, #1
 8008abc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008acc:	4413      	add	r3, r2
 8008ace:	3304      	adds	r3, #4
 8008ad0:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t* startY = &pAddrTable->value[pAddrTable->addr[p+1]];
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	3302      	adds	r3, #2
 8008ad6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ae6:	4413      	add	r3, r2
 8008ae8:	3304      	adds	r3, #4
 8008aea:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t* width = &pAddrTable->value[pAddrTable->addr[p+2]];
 8008aec:	79fb      	ldrb	r3, [r7, #7]
 8008aee:	3303      	adds	r3, #3
 8008af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b00:	4413      	add	r3, r2
 8008b02:	3304      	adds	r3, #4
 8008b04:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t* height = &pAddrTable->value[pAddrTable->addr[p+3]];
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	3304      	adds	r3, #4
 8008b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b1a:	4413      	add	r3, r2
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t* attr = &pAddrTable->value[pAddrTable->addr[p+4]];
 8008b20:	79fb      	ldrb	r3, [r7, #7]
 8008b22:	3305      	adds	r3, #5
 8008b24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b34:	4413      	add	r3, r2
 8008b36:	3304      	adds	r3, #4
 8008b38:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+5]];
 8008b3a:	79fb      	ldrb	r3, [r7, #7]
 8008b3c:	3306      	adds	r3, #6
 8008b3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b4e:	4413      	add	r3, r2
 8008b50:	3304      	adds	r3, #4
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+6]];
 8008b54:	79fb      	ldrb	r3, [r7, #7]
 8008b56:	3307      	adds	r3, #7
 8008b58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b68:	4413      	add	r3, r2
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	623b      	str	r3, [r7, #32]
	int32_t* mid = &pAddrTable->value[pAddrTable->addr[p+7]];
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	3308      	adds	r3, #8
 8008b72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4413      	add	r3, r2
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b82:	4413      	add	r3, r2
 8008b84:	3304      	adds	r3, #4
 8008b86:	61fb      	str	r3, [r7, #28]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+8]];
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	3309      	adds	r3, #9
 8008b8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b9c:	4413      	add	r3, r2
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	61bb      	str	r3, [r7, #24]
	int32_t* old_val = &pAddrTable->value[pAddrTable->addr[p+9]];
	int32_t* old_time = &pAddrTable->value[pAddrTable->addr[p+10]];
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d069      	beq.n	8008c82 <fb_gui_display+0x1f2>

 8008bae:	f7f7 fdb5 	bl	800071c <hal_get_tick>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	617b      	str	r3, [r7, #20]
	if(*old_val != *val){
		time = hal_get_tick();
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d906      	bls.n	8008bd0 <fb_gui_display+0x140>

 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	1a9b      	subs	r3, r3, r2
 8008bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8008bce:	e006      	b.n	8008bde <fb_gui_display+0x14e>
		if(time > *old_time){
			delta = time - (uint32_t) *old_time;
		}

 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	1a9b      	subs	r3, r3, r2
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	647b      	str	r3, [r7, #68]	; 0x44
		else{
			delta = time + (0xFFFFFFFF - *old_time);
		}
 8008bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008be4:	d94d      	bls.n	8008c82 <fb_gui_display+0x1f2>

 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	601a      	str	r2, [r3, #0]
		if(delta > 1000){ //1000ms'den önce refresh işlemi yapma
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	601a      	str	r2, [r3, #0]
			*old_val = *val;
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d12c      	bne.n	8008c56 <fb_gui_display+0x1c6>
			*old_time = time;
			if(*mode == 0){ //text mode
 8008bfc:	f000 fcd8 	bl	80095b0 <get_text_element_table>
 8008c00:	4603      	mov	r3, r0
 8008c02:	613b      	str	r3, [r7, #16]
				//val holds the data at the global text table
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	4413      	add	r3, r2
 8008c14:	3306      	adds	r3, #6
 8008c16:	60fb      	str	r3, [r7, #12]
				glob_text_element_table_t* table = get_text_element_table();
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	6939      	ldr	r1, [r7, #16]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	440b      	add	r3, r1
 8008c28:	3304      	adds	r3, #4
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	817b      	strh	r3, [r7, #10]
				char* str = table->e[*val].value;
 8008c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c34:	6819      	ldr	r1, [r3, #0]
 8008c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c38:	681c      	ldr	r4, [r3, #0]
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	681d      	ldr	r5, [r3, #0]
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	897a      	ldrh	r2, [r7, #10]
 8008c44:	9202      	str	r2, [sp, #8]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	9201      	str	r2, [sp, #4]
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	462b      	mov	r3, r5
 8008c4e:	4622      	mov	r2, r4
 8008c50:	f7f7 fec4 	bl	80009dc <Display_String>
			}

			else if(*mode == 1){ //number mode
				Display_Number(*startX, *startY, *width, *height, *attr, *val);
			}
		}
 8008c54:	e015      	b.n	8008c82 <fb_gui_display+0x1f2>
			}
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d111      	bne.n	8008c82 <fb_gui_display+0x1f2>

 8008c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	6819      	ldr	r1, [r3, #0]
 8008c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c68:	681c      	ldr	r4, [r3, #0]
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	681d      	ldr	r5, [r3, #0]
 8008c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c74:	6812      	ldr	r2, [r2, #0]
 8008c76:	9201      	str	r2, [sp, #4]
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	462b      	mov	r3, r5
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	f7f7 fed7 	bl	8000a30 <Display_Number>
		}
 8008c82:	bf00      	nop
 8008c84:	3748      	adds	r7, #72	; 0x48
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008c8c <create_fb_gui_display>:
	}
}

type_fb_gui_display create_fb_gui_display(uint16_t startX, uint16_t startY,
											uint16_t width, uint16_t height,
												uint8_t attr, uint32_t val,
 8008c8c:	b5b0      	push	{r4, r5, r7, lr}
 8008c8e:	b090      	sub	sp, #64	; 0x40
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	4608      	mov	r0, r1
 8008c96:	4611      	mov	r1, r2
 8008c98:	461a      	mov	r2, r3
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	817b      	strh	r3, [r7, #10]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	813b      	strh	r3, [r7, #8]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	80fb      	strh	r3, [r7, #6]
													uint8_t mode, uint8_t mid)
{
	
	type_fb_gui_display fb;
 8008ca6:	f7fe ff8b 	bl	8007bc0 <get_paramAddrTable>
 8008caa:	63f8      	str	r0, [r7, #60]	; 0x3c

	s_Param* pAddrTable = get_paramAddrTable();
 8008cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	747b      	strb	r3, [r7, #17]

	fb.startParamIndex = pAddrTable->currentIndex;

 8008cb2:	897b      	ldrh	r3, [r7, #10]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fe ffb1 	bl	8007c1c <createParameter>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	617b      	str	r3, [r7, #20]
	//input ports
 8008cbe:	893b      	ldrh	r3, [r7, #8]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe ffab 	bl	8007c1c <createParameter>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	61bb      	str	r3, [r7, #24]
	fb.fp.startX = createParameter(startX);
 8008cca:	88fb      	ldrh	r3, [r7, #6]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fe ffa5 	bl	8007c1c <createParameter>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	61fb      	str	r3, [r7, #28]
	fb.fp.startY = createParameter(startY);
 8008cd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fe ff9e 	bl	8007c1c <createParameter>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	623b      	str	r3, [r7, #32]
	fb.fp.width = createParameter(width);
 8008ce4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe ff97 	bl	8007c1c <createParameter>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.height = createParameter(height);
 8008cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fe ff91 	bl	8007c1c <createParameter>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.attr = createParameter(attr);
 8008cfe:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe ff8a 	bl	8007c1c <createParameter>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.val = createParameter(val);
	fb.fp.mode = createParameter(mode);
	fb.fp.mid = createParameter(mid);
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	f7fe ff85 	bl	8007c1c <createParameter>
 8008d12:	4603      	mov	r3, r0
 8008d14:	633b      	str	r3, [r7, #48]	; 0x30

	//output ports
	fb.fp.stat = createParameter(0);
 8008d16:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1a:	f7fe ff7f 	bl	8007c1c <createParameter>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	637b      	str	r3, [r7, #52]	; 0x34

 8008d22:	2000      	movs	r0, #0
 8008d24:	f7fe ff7a 	bl	8007c1c <createParameter>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	63bb      	str	r3, [r7, #56]	; 0x38
	//internal parameters
	fb.fp.old_val = createParameter(-1);
 8008d2c:	7c7b      	ldrb	r3, [r7, #17]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	480a      	ldr	r0, [pc, #40]	; (8008d5c <create_fb_gui_display+0xd0>)
 8008d32:	f7fe ff4f 	bl	8007bd4 <writeToFBTable>
 8008d36:	4603      	mov	r3, r0
 8008d38:	743b      	strb	r3, [r7, #16]
	fb.fp.old_time = createParameter(0);

 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	461d      	mov	r5, r3
 8008d3e:	f107 0410 	add.w	r4, r7, #16
 8008d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d4a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008d4e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	fb.fb_index = writeToFBTable(fb_gui_display, fb.startParamIndex);
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	3740      	adds	r7, #64	; 0x40
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bdb0      	pop	{r4, r5, r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	08008a91 	.word	0x08008a91

08008d60 <fb_inputpin_parser>:

/*--------------------------------------------------------------------------------------
						Function Block Functions
----------------------------------------------------------------------------------------*/

uint8_t fb_inputpin_parser(uint8_t* p){
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08a      	sub	sp, #40	; 0x28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	61f8      	str	r0, [r7, #28]
	uint8_t ch = p[0];
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t mode = p[1];
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	785b      	ldrb	r3, [r3, #1]
 8008d74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_inputpin(ch, mode);
 8008d78:	463b      	mov	r3, r7
 8008d7a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d7e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 f84c 	bl	8008e20 <create_fb_inputpin>
	return 1;
 8008d88:	2301      	movs	r3, #1
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3728      	adds	r7, #40	; 0x28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <fb_inputpin>:

void fb_inputpin(uint8_t p){
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b088      	sub	sp, #32
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	4603      	mov	r3, r0
 8008d9a:	71fb      	strb	r3, [r7, #7]

	s_Param* pAddrTable = get_paramAddrTable();
 8008d9c:	f7fe ff10 	bl	8007bc0 <get_paramAddrTable>
 8008da0:	61f8      	str	r0, [r7, #28]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p]];
 8008da2:	79fb      	ldrb	r3, [r7, #7]
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	69fa      	ldr	r2, [r7, #28]
 8008db4:	4413      	add	r3, r2
 8008db6:	3304      	adds	r3, #4
 8008db8:	61bb      	str	r3, [r7, #24]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+1]];
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	69fa      	ldr	r2, [r7, #28]
 8008dce:	4413      	add	r3, r2
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	617b      	str	r3, [r7, #20]
	int32_t* q = &pAddrTable->value[pAddrTable->addr[p+2]];
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	3302      	adds	r3, #2
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	4413      	add	r3, r2
 8008dea:	3304      	adds	r3, #4
 8008dec:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 8008dee:	79fb      	ldrb	r3, [r7, #7]
 8008df0:	3303      	adds	r3, #3
 8008df2:	69fa      	ldr	r2, [r7, #28]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	69fa      	ldr	r2, [r7, #28]
 8008e02:	4413      	add	r3, r2
 8008e04:	3304      	adds	r3, #4
 8008e06:	60fb      	str	r3, [r7, #12]

	*q =  hal_gpio_read_pin((uint32_t)*ch);
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7f7 fc09 	bl	8000624 <hal_gpio_read_pin>
 8008e12:	4602      	mov	r2, r0
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	601a      	str	r2, [r3, #0]
}
 8008e18:	bf00      	nop
 8008e1a:	3720      	adds	r7, #32
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <create_fb_inputpin>:


type_fb_inputpin create_fb_inputpin(uint8_t ch, uint8_t mode){
 8008e20:	b5b0      	push	{r4, r5, r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	70bb      	strb	r3, [r7, #2]
	type_fb_inputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 8008e30:	f7fe fec6 	bl	8007bc0 <get_paramAddrTable>
 8008e34:	61f8      	str	r0, [r7, #28]

	fb.startParamIndex = pAddrTable->currentIndex;
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	727b      	strb	r3, [r7, #9]

	fb.fp.ch = createParameter(ch); //input
 8008e3c:	78fb      	ldrb	r3, [r7, #3]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fe feec 	bl	8007c1c <createParameter>
 8008e44:	4603      	mov	r3, r0
 8008e46:	60fb      	str	r3, [r7, #12]
	fb.fp.mode = createParameter(mode); //pin
 8008e48:	78bb      	ldrb	r3, [r7, #2]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fe fee6 	bl	8007c1c <createParameter>
 8008e50:	4603      	mov	r3, r0
 8008e52:	613b      	str	r3, [r7, #16]
	fb.fp.q = createParameter(0);
 8008e54:	2000      	movs	r0, #0
 8008e56:	f7fe fee1 	bl	8007c1c <createParameter>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	617b      	str	r3, [r7, #20]
	fb.fp.stat = createParameter(0);
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f7fe fedc 	bl	8007c1c <createParameter>
 8008e64:	4603      	mov	r3, r0
 8008e66:	61bb      	str	r3, [r7, #24]

	fb.fb_index = writeToFBTable(fb_inputpin, fb.startParamIndex);
 8008e68:	7a7b      	ldrb	r3, [r7, #9]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	4808      	ldr	r0, [pc, #32]	; (8008e90 <create_fb_inputpin+0x70>)
 8008e6e:	f7fe feb1 	bl	8007bd4 <writeToFBTable>
 8008e72:	4603      	mov	r3, r0
 8008e74:	723b      	strb	r3, [r7, #8]

	return fb;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	461d      	mov	r5, r3
 8008e7a:	f107 0408 	add.w	r4, r7, #8
 8008e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	602b      	str	r3, [r5, #0]
}
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	3720      	adds	r7, #32
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	08008d93 	.word	0x08008d93

08008e94 <fb_jy_parser>:
#include "fb_jy.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_jy_parser(uint8_t* p){
 8008e94:	b590      	push	{r4, r7, lr}
 8008e96:	b08f      	sub	sp, #60	; 0x3c
 8008e98:	af02      	add	r7, sp, #8
 8008e9a:	62f8      	str	r0, [r7, #44]	; 0x2c
	create_fb_jy(p[0],p[1], p[2],p[3]);
 8008e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9e:	7819      	ldrb	r1, [r3, #0]
 8008ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	781a      	ldrb	r2, [r3, #0]
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	3302      	adds	r3, #2
 8008eaa:	781c      	ldrb	r4, [r3, #0]
 8008eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eae:	3303      	adds	r3, #3
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	4623      	mov	r3, r4
 8008eb8:	f000 f890 	bl	8008fdc <create_fb_jy>
	return 1;
 8008ebc:	2301      	movs	r3, #1
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3734      	adds	r7, #52	; 0x34
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd90      	pop	{r4, r7, pc}

08008ec6 <fb_jy>:

void fb_jy(uint8_t p){
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b08c      	sub	sp, #48	; 0x30
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	4603      	mov	r3, r0
 8008ece:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8008ed0:	f7fe fe76 	bl	8007bc0 <get_paramAddrTable>
 8008ed4:	62f8      	str	r0, [r7, #44]	; 0x2c
	int32_t* ch_x = &pAddrTable->value[pAddrTable->addr[p]];
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4413      	add	r3, r2
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ee8:	4413      	add	r3, r2
 8008eea:	3304      	adds	r3, #4
 8008eec:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* ch_y = &pAddrTable->value[pAddrTable->addr[p+1]];
 8008eee:	79fb      	ldrb	r3, [r7, #7]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f02:	4413      	add	r3, r2
 8008f04:	3304      	adds	r3, #4
 8008f06:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* ch_btn = &pAddrTable->value[pAddrTable->addr[p+2]];
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	3302      	adds	r3, #2
 8008f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f1c:	4413      	add	r3, r2
 8008f1e:	3304      	adds	r3, #4
 8008f20:	623b      	str	r3, [r7, #32]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+3]];
 8008f22:	79fb      	ldrb	r3, [r7, #7]
 8008f24:	3303      	adds	r3, #3
 8008f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f36:	4413      	add	r3, r2
 8008f38:	3304      	adds	r3, #4
 8008f3a:	61fb      	str	r3, [r7, #28]
	int32_t* x = &pAddrTable->value[pAddrTable->addr[p+4]];
 8008f3c:	79fb      	ldrb	r3, [r7, #7]
 8008f3e:	3304      	adds	r3, #4
 8008f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f50:	4413      	add	r3, r2
 8008f52:	3304      	adds	r3, #4
 8008f54:	61bb      	str	r3, [r7, #24]
	int32_t* y = &pAddrTable->value[pAddrTable->addr[p+5]];
 8008f56:	79fb      	ldrb	r3, [r7, #7]
 8008f58:	3305      	adds	r3, #5
 8008f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f6a:	4413      	add	r3, r2
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	617b      	str	r3, [r7, #20]
	int32_t* btn = &pAddrTable->value[pAddrTable->addr[p+6]];
 8008f70:	79fb      	ldrb	r3, [r7, #7]
 8008f72:	3306      	adds	r3, #6
 8008f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f84:	4413      	add	r3, r2
 8008f86:	3304      	adds	r3, #4
 8008f88:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+7]];
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	3307      	adds	r3, #7
 8008f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4413      	add	r3, r2
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f9e:	4413      	add	r3, r2
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	60fb      	str	r3, [r7, #12]

	*x = hal_read_analog_ch(*ch_x);
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7f7 fb55 	bl	8000658 <hal_read_analog_ch>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	601a      	str	r2, [r3, #0]
	*y = hal_read_analog_ch(*ch_y);
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7f7 fb4d 	bl	8000658 <hal_read_analog_ch>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	601a      	str	r2, [r3, #0]
	*btn = hal_gpio_read_pin(*ch_btn);
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7f7 fb2b 	bl	8000624 <hal_gpio_read_pin>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	601a      	str	r2, [r3, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	3730      	adds	r7, #48	; 0x30
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <create_fb_jy>:

type_fb_jy create_fb_jy(uint8_t ch_x,
								uint8_t ch_y,
									uint8_t ch_btn,
											uint8_t mode){
 8008fdc:	b5b0      	push	{r4, r5, r7, lr}
 8008fde:	b08c      	sub	sp, #48	; 0x30
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	4608      	mov	r0, r1
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4603      	mov	r3, r0
 8008fec:	70fb      	strb	r3, [r7, #3]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	70bb      	strb	r3, [r7, #2]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	707b      	strb	r3, [r7, #1]
	type_fb_jy fb;

	s_Param* pAddrTable = get_paramAddrTable();
 8008ff6:	f7fe fde3 	bl	8007bc0 <get_paramAddrTable>
 8008ffa:	62f8      	str	r0, [r7, #44]	; 0x2c

	fb.startParamIndex = pAddrTable->currentIndex;
 8008ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	727b      	strb	r3, [r7, #9]

	//input ports
	fb.fp.ch_x = createParameter(ch_x);
 8009002:	78fb      	ldrb	r3, [r7, #3]
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe fe09 	bl	8007c1c <createParameter>
 800900a:	4603      	mov	r3, r0
 800900c:	60fb      	str	r3, [r7, #12]
	fb.fp.ch_y = createParameter(ch_y);
 800900e:	78bb      	ldrb	r3, [r7, #2]
 8009010:	4618      	mov	r0, r3
 8009012:	f7fe fe03 	bl	8007c1c <createParameter>
 8009016:	4603      	mov	r3, r0
 8009018:	613b      	str	r3, [r7, #16]
	fb.fp.ch_btn = createParameter(ch_btn);
 800901a:	787b      	ldrb	r3, [r7, #1]
 800901c:	4618      	mov	r0, r3
 800901e:	f7fe fdfd 	bl	8007c1c <createParameter>
 8009022:	4603      	mov	r3, r0
 8009024:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode);
 8009026:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe fdf6 	bl	8007c1c <createParameter>
 8009030:	4603      	mov	r3, r0
 8009032:	61bb      	str	r3, [r7, #24]

	//output ports
	fb.fp.x = createParameter(0);
 8009034:	2000      	movs	r0, #0
 8009036:	f7fe fdf1 	bl	8007c1c <createParameter>
 800903a:	4603      	mov	r3, r0
 800903c:	61fb      	str	r3, [r7, #28]
	fb.fp.y = createParameter(0);
 800903e:	2000      	movs	r0, #0
 8009040:	f7fe fdec 	bl	8007c1c <createParameter>
 8009044:	4603      	mov	r3, r0
 8009046:	623b      	str	r3, [r7, #32]
	fb.fp.btn = createParameter(0);
 8009048:	2000      	movs	r0, #0
 800904a:	f7fe fde7 	bl	8007c1c <createParameter>
 800904e:	4603      	mov	r3, r0
 8009050:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.stat = createParameter(0);
 8009052:	2000      	movs	r0, #0
 8009054:	f7fe fde2 	bl	8007c1c <createParameter>
 8009058:	4603      	mov	r3, r0
 800905a:	62bb      	str	r3, [r7, #40]	; 0x28

	//internal parameters

	fb.fb_index = writeToFBTable(fb_jy, fb.startParamIndex);
 800905c:	7a7b      	ldrb	r3, [r7, #9]
 800905e:	4619      	mov	r1, r3
 8009060:	4809      	ldr	r0, [pc, #36]	; (8009088 <create_fb_jy+0xac>)
 8009062:	f7fe fdb7 	bl	8007bd4 <writeToFBTable>
 8009066:	4603      	mov	r3, r0
 8009068:	723b      	strb	r3, [r7, #8]

	return fb;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	461d      	mov	r5, r3
 800906e:	f107 0408 	add.w	r4, r7, #8
 8009072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	602b      	str	r3, [r5, #0]
}
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	3730      	adds	r7, #48	; 0x30
 8009082:	46bd      	mov	sp, r7
 8009084:	bdb0      	pop	{r4, r5, r7, pc}
 8009086:	bf00      	nop
 8009088:	08008ec7 	.word	0x08008ec7

0800908c <fb_text>:

	create_fb_text(len, &p[index]);
	return 1;
}

void fb_text(uint8_t p){
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	4603      	mov	r3, r0
 8009094:	71fb      	strb	r3, [r7, #7]
}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
	...

080090a4 <create_fb_text>:

type_fb_text create_fb_text(uint8_t len, char* str){
 80090a4:	b590      	push	{r4, r7, lr}
 80090a6:	b08b      	sub	sp, #44	; 0x2c
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	460b      	mov	r3, r1
 80090ae:	607a      	str	r2, [r7, #4]
 80090b0:	72fb      	strb	r3, [r7, #11]
	type_fb_text fb;
	s_Param* pAddrTable = get_paramAddrTable();
 80090b2:	f7fe fd85 	bl	8007bc0 <get_paramAddrTable>
 80090b6:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t text_table_index;

	fb.startParamIndex = pAddrTable->currentIndex;
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	747b      	strb	r3, [r7, #17]

	//not creating a parameter for str, instead of this create an entry to the global text table
	text_table_index = create_text_table_entry(len, str);
 80090be:	7afb      	ldrb	r3, [r7, #11]
 80090c0:	6879      	ldr	r1, [r7, #4]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 faa4 	bl	8009610 <create_text_table_entry>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	fb.fp.stat = createParameter(0);
 80090ce:	2000      	movs	r0, #0
 80090d0:	f7fe fda4 	bl	8007c1c <createParameter>
 80090d4:	4603      	mov	r3, r0
 80090d6:	61bb      	str	r3, [r7, #24]
	fb.fp.val = createParameter(text_table_index);
 80090d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fe fd9d 	bl	8007c1c <createParameter>
 80090e2:	4603      	mov	r3, r0
 80090e4:	61fb      	str	r3, [r7, #28]

	fb.fb_index = writeToFBTable(fb_text, fb.startParamIndex);
 80090e6:	7c7b      	ldrb	r3, [r7, #17]
 80090e8:	4619      	mov	r1, r3
 80090ea:	4808      	ldr	r0, [pc, #32]	; (800910c <create_fb_text+0x68>)
 80090ec:	f7fe fd72 	bl	8007bd4 <writeToFBTable>
 80090f0:	4603      	mov	r3, r0
 80090f2:	743b      	strb	r3, [r7, #16]
	return fb;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	461c      	mov	r4, r3
 80090f8:	f107 0310 	add.w	r3, r7, #16
 80090fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	372c      	adds	r7, #44	; 0x2c
 8009106:	46bd      	mov	sp, r7
 8009108:	bd90      	pop	{r4, r7, pc}
 800910a:	bf00      	nop
 800910c:	0800908d 	.word	0x0800908d

08009110 <parser_create_connection>:
		fb_encoder_parser,
		fb_gui_display_parser,
		fb_text
};

uint8_t parser_create_connection(uint8_t* p){
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	make_connection(p[0], p[1]); //dest,src
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	461a      	mov	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	3301      	adds	r3, #1
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	4619      	mov	r1, r3
 8009126:	4610      	mov	r0, r2
 8009128:	f7fe fda0 	bl	8007c6c <make_connection>
	return 1;
 800912c:	2301      	movs	r3, #1
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <parser_addwatch>:

uint8_t parser_addwatch(uint8_t* p){
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
	addWatch(p[0]);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	4618      	mov	r0, r3
 8009144:	f000 f998 	bl	8009478 <addWatch>
	return 0;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <parser_removewatch>:

uint8_t parser_removewatch(uint8_t* p){
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
	removeWatch(p[0]);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	4618      	mov	r0, r3
 8009160:	f000 f9a8 	bl	80094b4 <removeWatch>
	return 0;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <parser_monitor>:

uint8_t parser_monitor(uint8_t* p){
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
	monitor();
 8009176:	f000 f9db 	bl	8009530 <monitor>
	return 0;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <Parser>:

uint8_t Parser(Communication_Ch* dep_ch){
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0, addr = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	73fb      	strb	r3, [r7, #15]
 8009190:	2300      	movs	r3, #0
 8009192:	73bb      	strb	r3, [r7, #14]
	uint8_t modbus_slave_addr = *get_MODBUS_SLAVE_ADDR();
 8009194:	f7ff f8a0 	bl	80082d8 <get_MODBUS_SLAVE_ADDR>
 8009198:	4603      	mov	r3, r0
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	737b      	strb	r3, [r7, #13]
	if(dep_ch->fdata_ready){
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d05a      	beq.n	800925e <Parser+0xda>
		addr = dep_ch->rx_data_buf[0];
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	799b      	ldrb	r3, [r3, #6]
 80091ac:	73bb      	strb	r3, [r7, #14]
		if (addr != modbus_slave_addr) return 0;
 80091ae:	7bba      	ldrb	r2, [r7, #14]
 80091b0:	7b7b      	ldrb	r3, [r7, #13]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d001      	beq.n	80091ba <Parser+0x36>
 80091b6:	2300      	movs	r3, #0
 80091b8:	e052      	b.n	8009260 <Parser+0xdc>
		cmd = dep_ch->rx_data_buf[1]; //function
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	79db      	ldrb	r3, [r3, #7]
 80091be:	73fb      	strb	r3, [r7, #15]
		switch (cmd)
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	3b65      	subs	r3, #101	; 0x65
 80091c4:	2b06      	cmp	r3, #6
 80091c6:	d838      	bhi.n	800923a <Parser+0xb6>
 80091c8:	a201      	add	r2, pc, #4	; (adr r2, 80091d0 <Parser+0x4c>)
 80091ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ce:	bf00      	nop
 80091d0:	080091ed 	.word	0x080091ed
 80091d4:	0800920b 	.word	0x0800920b
 80091d8:	0800924d 	.word	0x0800924d
 80091dc:	0800924d 	.word	0x0800924d
 80091e0:	08009217 	.word	0x08009217
 80091e4:	0800922f 	.word	0x0800922f
 80091e8:	08009223 	.word	0x08009223
		{
		case CMD_CREATE_FB: //FBTYPE-PARAMS
			if(dep_ch->rx_data_buf[2]<FB_PARSERS_SIZE){
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	7a1b      	ldrb	r3, [r3, #8]
 80091f0:	2b13      	cmp	r3, #19
 80091f2:	d82d      	bhi.n	8009250 <Parser+0xcc>
				fb_parsers[dep_ch->rx_data_buf[2]](&(dep_ch->rx_data_buf[3]));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	7a1b      	ldrb	r3, [r3, #8]
 80091f8:	461a      	mov	r2, r3
 80091fa:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <Parser+0xe4>)
 80091fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	3209      	adds	r2, #9
 8009204:	4610      	mov	r0, r2
 8009206:	4798      	blx	r3
			}
			break;
 8009208:	e022      	b.n	8009250 <Parser+0xcc>
		case CMD_CREATE_CONN: //DEST-SRC
			parser_create_connection(&(dep_ch->rx_data_buf[2]));
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	3308      	adds	r3, #8
 800920e:	4618      	mov	r0, r3
 8009210:	f7ff ff7e 	bl	8009110 <parser_create_connection>
			break;
 8009214:	e01d      	b.n	8009252 <Parser+0xce>
			break;
		case CMD_KILL:
			break;

		case CMD_ADDWATCH:
			parser_addwatch(&(dep_ch->rx_data_buf[2]));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3308      	adds	r3, #8
 800921a:	4618      	mov	r0, r3
 800921c:	f7ff ff8b 	bl	8009136 <parser_addwatch>
			break;
 8009220:	e017      	b.n	8009252 <Parser+0xce>

		case CMD_REMOVEWATCH:
			parser_removewatch(&(dep_ch->rx_data_buf[2]));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	3308      	adds	r3, #8
 8009226:	4618      	mov	r0, r3
 8009228:	f7ff ff93 	bl	8009152 <parser_removewatch>
			break;
 800922c:	e011      	b.n	8009252 <Parser+0xce>

		case CMD_MONITOR:
			parser_monitor(&(dep_ch->rx_data_buf[2]));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	3308      	adds	r3, #8
 8009232:	4618      	mov	r0, r3
 8009234:	f7ff ff9b 	bl	800916e <parser_monitor>
			break;
 8009238:	e00b      	b.n	8009252 <Parser+0xce>

		default:
			dep_ch->data_error_counter++;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009240:	3301      	adds	r3, #1
 8009242:	b2da      	uxtb	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800924a:	e002      	b.n	8009252 <Parser+0xce>
			break;
 800924c:	bf00      	nop
 800924e:	e000      	b.n	8009252 <Parser+0xce>
			break;
 8009250:	bf00      	nop
		}

		dep_ch->fdata_ready = 0; //data process finished and ready for new data.
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		return cmd;
 800925a:	7bfb      	ldrb	r3, [r7, #15]
 800925c:	e000      	b.n	8009260 <Parser+0xdc>
	}

	else{
		return 0; //no new deployment data
 800925e:	2300      	movs	r3, #0
	}
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	20000050 	.word	0x20000050

0800926c <get_deployment_ch>:
#include "modbus_slave.h"
#include "deployment.h"

Communication_Ch deployment_ch = {.fdata_ready=0,.rx_data_cntr=0};

Communication_Ch* get_deployment_ch(){
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
	return &deployment_ch;
 8009270:	4b02      	ldr	r3, [pc, #8]	; (800927c <get_deployment_ch+0x10>)
}
 8009272:	4618      	mov	r0, r3
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	20000110 	.word	0x20000110

08009280 <deployment_data_validity_check>:

uint8_t deployment_data_validity_check()
{
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
	if(deployment_ch.rx_data_cntr <2) {
 8009284:	4b09      	ldr	r3, [pc, #36]	; (80092ac <deployment_data_validity_check+0x2c>)
 8009286:	795b      	ldrb	r3, [r3, #5]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d809      	bhi.n	80092a0 <deployment_data_validity_check+0x20>
		deployment_ch.data_error_counter = deployment_ch.data_error_counter + 1;
 800928c:	4b07      	ldr	r3, [pc, #28]	; (80092ac <deployment_data_validity_check+0x2c>)
 800928e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009292:	3301      	adds	r3, #1
 8009294:	b2da      	uxtb	r2, r3
 8009296:	4b05      	ldr	r3, [pc, #20]	; (80092ac <deployment_data_validity_check+0x2c>)
 8009298:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		return 1;
 800929c:	2301      	movs	r3, #1
 800929e:	e000      	b.n	80092a2 <deployment_data_validity_check+0x22>
	}
	else{
		return 0;
 80092a0:	2300      	movs	r3, #0
	}
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	20000110 	.word	0x20000110

080092b0 <init_deployment_ch>:

void init_deployment_ch(){
 80092b0:	b480      	push	{r7}
 80092b2:	af00      	add	r7, sp, #0
	deployment_ch.process_callback = modbus_slave_rx;
 80092b4:	4b05      	ldr	r3, [pc, #20]	; (80092cc <init_deployment_ch+0x1c>)
 80092b6:	4a06      	ldr	r2, [pc, #24]	; (80092d0 <init_deployment_ch+0x20>)
 80092b8:	649a      	str	r2, [r3, #72]	; 0x48
	deployment_ch.data_validity_check_callback = deployment_data_validity_check;
 80092ba:	4b04      	ldr	r3, [pc, #16]	; (80092cc <init_deployment_ch+0x1c>)
 80092bc:	4a05      	ldr	r2, [pc, #20]	; (80092d4 <init_deployment_ch+0x24>)
 80092be:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80092c0:	bf00      	nop
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	20000110 	.word	0x20000110
 80092d0:	080086a9 	.word	0x080086a9
 80092d4:	08009281 	.word	0x08009281

080092d8 <check_for_available_memory>:

#include "stdint.h"
#include "fcb.h"


static uint8_t check_for_available_memory(uint32_t start_addr, uint32_t datalen){
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
	uint32_t mem_start, mem_end, mem_size;
	get_flash_memory_info(&mem_start, &mem_size);
 80092e2:	f107 020c 	add.w	r2, r7, #12
 80092e6:	f107 0310 	add.w	r3, r7, #16
 80092ea:	4611      	mov	r1, r2
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7f7 faeb 	bl	80008c8 <get_flash_memory_info>
	mem_end = mem_start+ mem_size;
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4413      	add	r3, r2
 80092f8:	617b      	str	r3, [r7, #20]

	if(mem_end < start_addr+FLASHBLOCK_HEADER_SIZE+datalen){
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	4413      	add	r3, r2
 8009300:	3308      	adds	r3, #8
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	429a      	cmp	r2, r3
 8009306:	d201      	bcs.n	800930c <check_for_available_memory+0x34>
		return 0; //no available memory
 8009308:	2300      	movs	r3, #0
 800930a:	e000      	b.n	800930e <check_for_available_memory+0x36>
	}

	return 1;
 800930c:	2301      	movs	r3, #1
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <write_flash_block>:

static uint32_t write_flash_block(uint32_t start_addr, uint8_t* data, uint32_t datalen)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
	//first control for the available space if there is no space then return error
	if(check_for_available_memory(start_addr, datalen) == 1){
 8009324:	6879      	ldr	r1, [r7, #4]
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f7ff ffd6 	bl	80092d8 <check_for_available_memory>
 800932c:	4603      	mov	r3, r0
 800932e:	2b01      	cmp	r3, #1
 8009330:	d116      	bne.n	8009360 <write_flash_block+0x48>
		Flash_Block fb = {.block_start_marker1= BLOCK_START_MAGIC1, .length = datalen};
 8009332:	4b0e      	ldr	r3, [pc, #56]	; (800936c <write_flash_block+0x54>)
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	617b      	str	r3, [r7, #20]

		//write header
		write_to_flash((uint8_t*) (&fb), start_addr, FLASHBLOCK_HEADER_SIZE);
 800933a:	f107 0310 	add.w	r3, r7, #16
 800933e:	2208      	movs	r2, #8
 8009340:	68f9      	ldr	r1, [r7, #12]
 8009342:	4618      	mov	r0, r3
 8009344:	f7f7 fad4 	bl	80008f0 <write_to_flash>

		//write data
		write_to_flash(data, start_addr+FLASHBLOCK_HEADER_SIZE, datalen);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3308      	adds	r3, #8
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	4619      	mov	r1, r3
 8009350:	68b8      	ldr	r0, [r7, #8]
 8009352:	f7f7 facd 	bl	80008f0 <write_to_flash>

		return start_addr+FLASHBLOCK_HEADER_SIZE+datalen; //return the finish address of the block
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4413      	add	r3, r2
 800935c:	3308      	adds	r3, #8
 800935e:	e000      	b.n	8009362 <write_flash_block+0x4a>
	}

	return 0; //no available memory
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	01234567 	.word	0x01234567

08009370 <get_current_address>:

//search all flash to find the end of record
//last record: when doing search if you need the address of the last record function returns this value from the last_record
static Get_Current_Addr_Data get_current_address(uint32_t start_address, uint32_t memory_size){
 8009370:	b480      	push	{r7}
 8009372:	b08b      	sub	sp, #44	; 0x2c
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
	uint32_t* pflash_data;
	uint32_t flashptr, inc = 1;
 800937c:	2301      	movs	r3, #1
 800937e:	623b      	str	r3, [r7, #32]
	Flash_Block* temp_fb = (Flash_Block*) start_address;
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	61fb      	str	r3, [r7, #28]
	Get_Current_Addr_Data ret;

	ret.last_record_fb = temp_fb; //If there is no record at flash to initiate last record
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	617b      	str	r3, [r7, #20]

	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	627b      	str	r3, [r7, #36]	; 0x24
 800938c:	e010      	b.n	80093b0 <get_current_address+0x40>
	{
		temp_fb = (Flash_Block*) flashptr;
 800938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009390:	61fb      	str	r3, [r7, #28]

		if(temp_fb->block_start_marker1 ==BLOCK_START_MAGIC1){
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a12      	ldr	r2, [pc, #72]	; (80093e0 <get_current_address+0x70>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d110      	bne.n	80093be <get_current_address+0x4e>
			inc = temp_fb->length + FLASHBLOCK_HEADER_SIZE;
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	3308      	adds	r3, #8
 80093a2:	623b      	str	r3, [r7, #32]
			ret.last_record_fb = temp_fb;
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	617b      	str	r3, [r7, #20]
	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 80093a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	4413      	add	r3, r2
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4413      	add	r3, r2
 80093b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d3e8      	bcc.n	800938e <get_current_address+0x1e>
 80093bc:	e000      	b.n	80093c0 <get_current_address+0x50>
		}
		else{
			break;
 80093be:	bf00      	nop
		}
	}
	ret.flash_pointer = flashptr;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	61bb      	str	r3, [r7, #24]

	return ret;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	461a      	mov	r2, r3
 80093c8:	f107 0314 	add.w	r3, r7, #20
 80093cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80093d0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	372c      	adds	r7, #44	; 0x2c
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	01234567 	.word	0x01234567

080093e4 <write_flash_data>:

uint32_t write_flash_data(uint8_t* data, uint32_t length){
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
	uint32_t mem_start_address, mem_size;

	//Its very important length to be multiply of 4
	if(length%4 != 0) return 0;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <write_flash_data+0x18>
 80093f8:	2300      	movs	r3, #0
 80093fa:	e023      	b.n	8009444 <write_flash_data+0x60>

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size);
 80093fc:	f107 0210 	add.w	r2, r7, #16
 8009400:	f107 0314 	add.w	r3, r7, #20
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f7f7 fa5e 	bl	80008c8 <get_flash_memory_info>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);
 800940c:	6979      	ldr	r1, [r7, #20]
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	f107 0308 	add.w	r3, r7, #8
 8009414:	4618      	mov	r0, r3
 8009416:	f7ff ffab 	bl	8009370 <get_current_address>

	if(check_for_available_memory(lastrecord_info.flash_pointer, length) == 0){
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	4618      	mov	r0, r3
 8009420:	f7ff ff5a 	bl	80092d8 <check_for_available_memory>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d105      	bne.n	8009436 <write_flash_data+0x52>
		erase_flash(mem_start_address);
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	4618      	mov	r0, r3
 800942e:	f7f7 fa93 	bl	8000958 <erase_flash>
		lastrecord_info.flash_pointer = mem_start_address;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	60fb      	str	r3, [r7, #12]
	}

	//write data to flash and return current flash pointer address
	return write_flash_block(lastrecord_info.flash_pointer, data, length);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	4618      	mov	r0, r3
 800943e:	f7ff ff6b 	bl	8009318 <write_flash_block>
 8009442:	4603      	mov	r3, r0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <get_flash_data>:

Flash_Block* get_flash_data(){
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
	uint32_t mem_start_address, mem_size;

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size);
 8009452:	f107 0208 	add.w	r2, r7, #8
 8009456:	f107 030c 	add.w	r3, r7, #12
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f7f7 fa33 	bl	80008c8 <get_flash_memory_info>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);
 8009462:	68f9      	ldr	r1, [r7, #12]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	463b      	mov	r3, r7
 8009468:	4618      	mov	r0, r3
 800946a:	f7ff ff81 	bl	8009370 <get_current_address>

	return lastrecord_info.last_record_fb;
 800946e:	683b      	ldr	r3, [r7, #0]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <addWatch>:
		watchList.data[i] = 0;
	}
}

void addWatch(uint8_t index)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	4603      	mov	r3, r0
 8009480:	71fb      	strb	r3, [r7, #7]
	if(watchList.index < MAX_WATCH_COUNT){
 8009482:	4b0b      	ldr	r3, [pc, #44]	; (80094b0 <addWatch+0x38>)
 8009484:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009488:	2b09      	cmp	r3, #9
 800948a:	d80b      	bhi.n	80094a4 <addWatch+0x2c>
		watchList.data[watchList.index++] = index;
 800948c:	4b08      	ldr	r3, [pc, #32]	; (80094b0 <addWatch+0x38>)
 800948e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	b2d1      	uxtb	r1, r2
 8009496:	4a06      	ldr	r2, [pc, #24]	; (80094b0 <addWatch+0x38>)
 8009498:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 800949c:	4619      	mov	r1, r3
 800949e:	4a04      	ldr	r2, [pc, #16]	; (80094b0 <addWatch+0x38>)
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	5453      	strb	r3, [r2, r1]
	}
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	20001714 	.word	0x20001714

080094b4 <removeWatch>:

void removeWatch(uint8_t index)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	4603      	mov	r3, r0
 80094bc:	71fb      	strb	r3, [r7, #7]
	uint8_t tempWatchList[MAX_WATCH_COUNT] = {0};
 80094be:	2300      	movs	r3, #0
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	f107 0310 	add.w	r3, r7, #16
 80094c6:	2200      	movs	r2, #0
 80094c8:	601a      	str	r2, [r3, #0]
 80094ca:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 0;i<MAX_WATCH_COUNT;i++) tempWatchList[i] = watchList.data[i];
 80094cc:	2300      	movs	r3, #0
 80094ce:	75fb      	strb	r3, [r7, #23]
 80094d0:	e00b      	b.n	80094ea <removeWatch+0x36>
 80094d2:	7dfa      	ldrb	r2, [r7, #23]
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	4915      	ldr	r1, [pc, #84]	; (800952c <removeWatch+0x78>)
 80094d8:	5c8a      	ldrb	r2, [r1, r2]
 80094da:	f107 0118 	add.w	r1, r7, #24
 80094de:	440b      	add	r3, r1
 80094e0:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
 80094e6:	3301      	adds	r3, #1
 80094e8:	75fb      	strb	r3, [r7, #23]
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
 80094ec:	2b09      	cmp	r3, #9
 80094ee:	d9f0      	bls.n	80094d2 <removeWatch+0x1e>

	for(uint8_t i = index;i<watchList.index;i++){
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	75bb      	strb	r3, [r7, #22]
 80094f4:	e00c      	b.n	8009510 <removeWatch+0x5c>
		watchList.data[i] = tempWatchList[i+1];
 80094f6:	7dbb      	ldrb	r3, [r7, #22]
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	7dbb      	ldrb	r3, [r7, #22]
 80094fc:	f107 0118 	add.w	r1, r7, #24
 8009500:	440a      	add	r2, r1
 8009502:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8009506:	4a09      	ldr	r2, [pc, #36]	; (800952c <removeWatch+0x78>)
 8009508:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = index;i<watchList.index;i++){
 800950a:	7dbb      	ldrb	r3, [r7, #22]
 800950c:	3301      	adds	r3, #1
 800950e:	75bb      	strb	r3, [r7, #22]
 8009510:	4b06      	ldr	r3, [pc, #24]	; (800952c <removeWatch+0x78>)
 8009512:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009516:	7dba      	ldrb	r2, [r7, #22]
 8009518:	429a      	cmp	r2, r3
 800951a:	d3ec      	bcc.n	80094f6 <removeWatch+0x42>
	}
}
 800951c:	bf00      	nop
 800951e:	bf00      	nop
 8009520:	371c      	adds	r7, #28
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	20001714 	.word	0x20001714

08009530 <monitor>:

void monitor()
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
	uint8_t dma_i = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]
	s_Param* pAddrTable = get_paramAddrTable();
 800953a:	f7fe fb41 	bl	8007bc0 <get_paramAddrTable>
 800953e:	60b8      	str	r0, [r7, #8]

	if(watchList.index == 0) return; //no watches at the list
 8009540:	4b19      	ldr	r3, [pc, #100]	; (80095a8 <monitor+0x78>)
 8009542:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009546:	2b00      	cmp	r3, #0
 8009548:	d02a      	beq.n	80095a0 <monitor+0x70>

		for(uint8_t i = 0;i<watchList.index;i++){
 800954a:	2300      	movs	r3, #0
 800954c:	73bb      	strb	r3, [r7, #14]
 800954e:	e01a      	b.n	8009586 <monitor+0x56>
			watchList.dmaBuffer[dma_i++] = watchList.data[i]; //first put the index of data
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	4a15      	ldr	r2, [pc, #84]	; (80095a8 <monitor+0x78>)
 8009554:	5cd2      	ldrb	r2, [r2, r3]
 8009556:	7bfb      	ldrb	r3, [r7, #15]
 8009558:	1c59      	adds	r1, r3, #1
 800955a:	73f9      	strb	r1, [r7, #15]
 800955c:	4611      	mov	r1, r2
 800955e:	4a12      	ldr	r2, [pc, #72]	; (80095a8 <monitor+0x78>)
 8009560:	3302      	adds	r3, #2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	6059      	str	r1, [r3, #4]
			uint32_t value = pAddrTable->addr[0];
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	607b      	str	r3, [r7, #4]
			watchList.dmaBuffer[dma_i++] = value;
 800956e:	7bfb      	ldrb	r3, [r7, #15]
 8009570:	1c5a      	adds	r2, r3, #1
 8009572:	73fa      	strb	r2, [r7, #15]
 8009574:	4a0c      	ldr	r2, [pc, #48]	; (80095a8 <monitor+0x78>)
 8009576:	3302      	adds	r3, #2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	605a      	str	r2, [r3, #4]
		for(uint8_t i = 0;i<watchList.index;i++){
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	3301      	adds	r3, #1
 8009584:	73bb      	strb	r3, [r7, #14]
 8009586:	4b08      	ldr	r3, [pc, #32]	; (80095a8 <monitor+0x78>)
 8009588:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800958c:	7bba      	ldrb	r2, [r7, #14]
 800958e:	429a      	cmp	r2, r3
 8009590:	d3de      	bcc.n	8009550 <monitor+0x20>
		}
		//HAL_UART_Transmit_IT(&huart1, (uint8_t*)(watchList.dmaBuffer), dma_i*4);
		hal_modbus_uart_tx((uint8_t*)(watchList.dmaBuffer), dma_i*4);
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4619      	mov	r1, r3
 8009598:	4804      	ldr	r0, [pc, #16]	; (80095ac <monitor+0x7c>)
 800959a:	f7f7 f955 	bl	8000848 <hal_modbus_uart_tx>
 800959e:	e000      	b.n	80095a2 <monitor+0x72>
	if(watchList.index == 0) return; //no watches at the list
 80095a0:	bf00      	nop
}
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20001714 	.word	0x20001714
 80095ac:	20001720 	.word	0x20001720

080095b0 <get_text_element_table>:

#include "stdint.h"
#include "text_table.h"

glob_text_element_table_t text_element_table = {.i=0};
glob_text_element_table_t* get_text_element_table(){return &text_element_table;}
 80095b0:	b480      	push	{r7}
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	4b02      	ldr	r3, [pc, #8]	; (80095c0 <get_text_element_table+0x10>)
 80095b6:	4618      	mov	r0, r3
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	20000160 	.word	0x20000160

080095c4 <get_next_text_element>:

static text_element_t* get_next_text_element(){
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
	text_element_t* ret_element = &text_element_table.e[text_element_table.i];
 80095ca:	4b10      	ldr	r3, [pc, #64]	; (800960c <get_next_text_element+0x48>)
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	4613      	mov	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4a0c      	ldr	r2, [pc, #48]	; (800960c <get_next_text_element+0x48>)
 80095da:	4413      	add	r3, r2
 80095dc:	3302      	adds	r3, #2
 80095de:	607b      	str	r3, [r7, #4]
	ret_element->index = text_element_table.i;
 80095e0:	4b0a      	ldr	r3, [pc, #40]	; (800960c <get_next_text_element+0x48>)
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	701a      	strb	r2, [r3, #0]

	if(text_element_table.i < TEXT_TABLE_MAX_ELEMENT_COUNT-1){
 80095ea:	4b08      	ldr	r3, [pc, #32]	; (800960c <get_next_text_element+0x48>)
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	2b1e      	cmp	r3, #30
 80095f0:	d805      	bhi.n	80095fe <get_next_text_element+0x3a>
		text_element_table.i++;
 80095f2:	4b06      	ldr	r3, [pc, #24]	; (800960c <get_next_text_element+0x48>)
 80095f4:	881b      	ldrh	r3, [r3, #0]
 80095f6:	3301      	adds	r3, #1
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	4b04      	ldr	r3, [pc, #16]	; (800960c <get_next_text_element+0x48>)
 80095fc:	801a      	strh	r2, [r3, #0]
	}
	return ret_element;
 80095fe:	687b      	ldr	r3, [r7, #4]
}
 8009600:	4618      	mov	r0, r3
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	20000160 	.word	0x20000160

08009610 <create_text_table_entry>:

uint8_t create_text_table_entry(uint8_t len, char* str){
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	6039      	str	r1, [r7, #0]
 800961a:	71fb      	strb	r3, [r7, #7]
	text_element_t* text_el = get_next_text_element();
 800961c:	f7ff ffd2 	bl	80095c4 <get_next_text_element>
 8009620:	60b8      	str	r0, [r7, #8]
	text_el->length = len;
 8009622:	79fb      	ldrb	r3, [r7, #7]
 8009624:	b29a      	uxth	r2, r3
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	805a      	strh	r2, [r3, #2]
	//first clear entry
	for(uint8_t i = 0;i<TEXT_TABLE_CHAR_LENGTH;i++){
 800962a:	2300      	movs	r3, #0
 800962c:	73fb      	strb	r3, [r7, #15]
 800962e:	e007      	b.n	8009640 <create_text_table_entry+0x30>
		text_el->value[i] = 0;
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	4413      	add	r3, r2
 8009636:	2200      	movs	r2, #0
 8009638:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0;i<TEXT_TABLE_CHAR_LENGTH;i++){
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	3301      	adds	r3, #1
 800963e:	73fb      	strb	r3, [r7, #15]
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	2b0f      	cmp	r3, #15
 8009644:	d9f4      	bls.n	8009630 <create_text_table_entry+0x20>
	}

	//fill with new values
	for(uint8_t i = 0;i<len;i++){
 8009646:	2300      	movs	r3, #0
 8009648:	73bb      	strb	r3, [r7, #14]
 800964a:	e00b      	b.n	8009664 <create_text_table_entry+0x54>
		text_el->value[i] = str[i];
 800964c:	7bbb      	ldrb	r3, [r7, #14]
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	441a      	add	r2, r3
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	7811      	ldrb	r1, [r2, #0]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	4413      	add	r3, r2
 800965a:	460a      	mov	r2, r1
 800965c:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0;i<len;i++){
 800965e:	7bbb      	ldrb	r3, [r7, #14]
 8009660:	3301      	adds	r3, #1
 8009662:	73bb      	strb	r3, [r7, #14]
 8009664:	7bba      	ldrb	r2, [r7, #14]
 8009666:	79fb      	ldrb	r3, [r7, #7]
 8009668:	429a      	cmp	r2, r3
 800966a:	d3ef      	bcc.n	800964c <create_text_table_entry+0x3c>
	}

	return text_el->index;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	781b      	ldrb	r3, [r3, #0]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <get_uint8>:

/*
 * Utility Functions
 */
uint8_t get_uint8(uint8_t*p, uint16_t* index)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
	uint8_t ret;
	ret = (uint16_t) p[*index];
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	881b      	ldrh	r3, [r3, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4413      	add	r3, r2
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	73fb      	strb	r3, [r7, #15]
	*index += 1;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	3301      	adds	r3, #1
 8009696:	b29a      	uxth	r2, r3
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	801a      	strh	r2, [r3, #0]
	return ret;
 800969c:	7bfb      	ldrb	r3, [r7, #15]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <get_uint16>:

uint16_t get_uint16(uint8_t*p, uint16_t* index)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b085      	sub	sp, #20
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	6039      	str	r1, [r7, #0]
	uint16_t ret;
	ret = (uint16_t) p[*index] <<8 | p[*index+1];
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	461a      	mov	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4413      	add	r3, r2
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	021b      	lsls	r3, r3, #8
 80096c2:	b21a      	sxth	r2, r3
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	3301      	adds	r3, #1
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	440b      	add	r3, r1
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	b21b      	sxth	r3, r3
 80096d2:	4313      	orrs	r3, r2
 80096d4:	b21b      	sxth	r3, r3
 80096d6:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	881b      	ldrh	r3, [r3, #0]
 80096dc:	3302      	adds	r3, #2
 80096de:	b29a      	uxth	r2, r3
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	801a      	strh	r2, [r3, #0]
	return ret;
 80096e4:	89fb      	ldrh	r3, [r7, #14]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <get_uint32>:

uint16_t get_uint32(uint8_t*p, uint16_t* index)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b085      	sub	sp, #20
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	6039      	str	r1, [r7, #0]
	uint32_t ret;
	ret = (uint32_t) p[*index] << 24 | p[*index+1]<< 16 | p[*index+2] <<8 | p[*index+3];
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	881b      	ldrh	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4413      	add	r3, r2
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	061b      	lsls	r3, r3, #24
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	8812      	ldrh	r2, [r2, #0]
 800970e:	3201      	adds	r2, #1
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	440a      	add	r2, r1
 8009714:	7812      	ldrb	r2, [r2, #0]
 8009716:	0412      	lsls	r2, r2, #16
 8009718:	4313      	orrs	r3, r2
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	8812      	ldrh	r2, [r2, #0]
 800971e:	3202      	adds	r2, #2
 8009720:	6879      	ldr	r1, [r7, #4]
 8009722:	440a      	add	r2, r1
 8009724:	7812      	ldrb	r2, [r2, #0]
 8009726:	0212      	lsls	r2, r2, #8
 8009728:	4313      	orrs	r3, r2
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	8812      	ldrh	r2, [r2, #0]
 800972e:	3203      	adds	r2, #3
 8009730:	6879      	ldr	r1, [r7, #4]
 8009732:	440a      	add	r2, r1
 8009734:	7812      	ldrb	r2, [r2, #0]
 8009736:	4313      	orrs	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	3304      	adds	r3, #4
 8009740:	b29a      	uxth	r2, r3
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	801a      	strh	r2, [r3, #0]
	return ret;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	b29b      	uxth	r3, r3
}
 800974a:	4618      	mov	r0, r3
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <fb_and_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_and.h"

uint8_t fb_and_parser(uint8_t* p){
 8009756:	b580      	push	{r7, lr}
 8009758:	b08c      	sub	sp, #48	; 0x30
 800975a:	af00      	add	r7, sp, #0
 800975c:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 800975e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_and(type);
 8009766:	463b      	mov	r3, r7
 8009768:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800976c:	4611      	mov	r1, r2
 800976e:	4618      	mov	r0, r3
 8009770:	f000 f892 	bl	8009898 <create_fb_and>
	return 1;
 8009774:	2301      	movs	r3, #1
}
 8009776:	4618      	mov	r0, r3
 8009778:	3730      	adds	r7, #48	; 0x30
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <fb_and>:

void fb_and(uint8_t p){
 800977e:	b580      	push	{r7, lr}
 8009780:	b08a      	sub	sp, #40	; 0x28
 8009782:	af00      	add	r7, sp, #0
 8009784:	4603      	mov	r3, r0
 8009786:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8009788:	f7fe fa1a 	bl	8007bc0 <get_paramAddrTable>
 800978c:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800978e:	79fb      	ldrb	r3, [r7, #7]
 8009790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097a0:	4413      	add	r3, r2
 80097a2:	3304      	adds	r3, #4
 80097a4:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 80097a6:	79fb      	ldrb	r3, [r7, #7]
 80097a8:	3301      	adds	r3, #1
 80097aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4413      	add	r3, r2
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ba:	4413      	add	r3, r2
 80097bc:	3304      	adds	r3, #4
 80097be:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 80097c0:	79fb      	ldrb	r3, [r7, #7]
 80097c2:	3302      	adds	r3, #2
 80097c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d4:	4413      	add	r3, r2
 80097d6:	3304      	adds	r3, #4
 80097d8:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	3303      	adds	r3, #3
 80097de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ee:	4413      	add	r3, r2
 80097f0:	3304      	adds	r3, #4
 80097f2:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	3304      	adds	r3, #4
 80097f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009808:	4413      	add	r3, r2
 800980a:	3304      	adds	r3, #4
 800980c:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	3305      	adds	r3, #5
 8009812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009822:	4413      	add	r3, r2
 8009824:	3304      	adds	r3, #4
 8009826:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 8009828:	79fb      	ldrb	r3, [r7, #7]
 800982a:	3306      	adds	r3, #6
 800982c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800983c:	4413      	add	r3, r2
 800983e:	3304      	adds	r3, #4
 8009840:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 8009842:	6a3b      	ldr	r3, [r7, #32]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d10d      	bne.n	8009866 <fb_and+0xe8>
		*output =  (*input1)&(*input2)&(*input3)&(*input4);
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	401a      	ands	r2, r3
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	401a      	ands	r2, r3
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	401a      	ands	r2, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  (*input1)&&(*input2)&&(*input3)&&(*input4);
	}

}
 8009864:	e014      	b.n	8009890 <fb_and+0x112>
		*output =  (*input1)&&(*input2)&&(*input3)&&(*input4);
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00d      	beq.n	800988a <fb_and+0x10c>
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d009      	beq.n	800988a <fb_and+0x10c>
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d005      	beq.n	800988a <fb_and+0x10c>
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <fb_and+0x10c>
 8009886:	2201      	movs	r2, #1
 8009888:	e000      	b.n	800988c <fb_and+0x10e>
 800988a:	2200      	movs	r2, #0
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	601a      	str	r2, [r3, #0]
}
 8009890:	bf00      	nop
 8009892:	3728      	adds	r7, #40	; 0x28
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <create_fb_and>:

type_fb_and create_fb_and(uint8_t type){
 8009898:	b5b0      	push	{r4, r5, r7, lr}
 800989a:	b08c      	sub	sp, #48	; 0x30
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 80098a4:	f7fe f98c 	bl	8007bc0 <get_paramAddrTable>
 80098a8:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_and fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 80098aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //in4
 80098b0:	78fb      	ldrb	r3, [r7, #3]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe f9b2 	bl	8007c1c <createParameter>
 80098b8:	4603      	mov	r3, r0
 80098ba:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(1); //in1
 80098bc:	2001      	movs	r0, #1
 80098be:	f7fe f9ad 	bl	8007c1c <createParameter>
 80098c2:	4603      	mov	r3, r0
 80098c4:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(1); //in2
 80098c6:	2001      	movs	r0, #1
 80098c8:	f7fe f9a8 	bl	8007c1c <createParameter>
 80098cc:	4603      	mov	r3, r0
 80098ce:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(1); //in3
 80098d0:	2001      	movs	r0, #1
 80098d2:	f7fe f9a3 	bl	8007c1c <createParameter>
 80098d6:	4603      	mov	r3, r0
 80098d8:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(1); //in4
 80098da:	2001      	movs	r0, #1
 80098dc:	f7fe f99e 	bl	8007c1c <createParameter>
 80098e0:	4603      	mov	r3, r0
 80098e2:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(1); //output
 80098e4:	2001      	movs	r0, #1
 80098e6:	f7fe f999 	bl	8007c1c <createParameter>
 80098ea:	4603      	mov	r3, r0
 80098ec:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //output
 80098ee:	2000      	movs	r0, #0
 80098f0:	f7fe f994 	bl	8007c1c <createParameter>
 80098f4:	4603      	mov	r3, r0
 80098f6:	62bb      	str	r3, [r7, #40]	; 0x28



	fb.fb_index = writeToFBTable(fb_and, fb.startParamIndex);
 80098f8:	7b7b      	ldrb	r3, [r7, #13]
 80098fa:	4619      	mov	r1, r3
 80098fc:	4809      	ldr	r0, [pc, #36]	; (8009924 <create_fb_and+0x8c>)
 80098fe:	f7fe f969 	bl	8007bd4 <writeToFBTable>
 8009902:	4603      	mov	r3, r0
 8009904:	733b      	strb	r3, [r7, #12]

	return fb;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	461d      	mov	r5, r3
 800990a:	f107 040c 	add.w	r4, r7, #12
 800990e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009912:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009916:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	3730      	adds	r7, #48	; 0x30
 800991e:	46bd      	mov	sp, r7
 8009920:	bdb0      	pop	{r4, r5, r7, pc}
 8009922:	bf00      	nop
 8009924:	0800977f 	.word	0x0800977f

08009928 <fb_nand_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_nand.h"

uint8_t fb_nand_parser(uint8_t* p){
 8009928:	b580      	push	{r7, lr}
 800992a:	b08c      	sub	sp, #48	; 0x30
 800992c:	af00      	add	r7, sp, #0
 800992e:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_nand(type);
 8009938:	463b      	mov	r3, r7
 800993a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800993e:	4611      	mov	r1, r2
 8009940:	4618      	mov	r0, r3
 8009942:	f000 f899 	bl	8009a78 <create_fb_nand>
	return 1;
 8009946:	2301      	movs	r3, #1
}
 8009948:	4618      	mov	r0, r3
 800994a:	3730      	adds	r7, #48	; 0x30
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <fb_nand>:

void fb_nand(uint8_t p){
 8009950:	b580      	push	{r7, lr}
 8009952:	b08a      	sub	sp, #40	; 0x28
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800995a:	f7fe f931 	bl	8007bc0 <get_paramAddrTable>
 800995e:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009972:	4413      	add	r3, r2
 8009974:	3304      	adds	r3, #4
 8009976:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	3301      	adds	r3, #1
 800997c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998c:	4413      	add	r3, r2
 800998e:	3304      	adds	r3, #4
 8009990:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 8009992:	79fb      	ldrb	r3, [r7, #7]
 8009994:	3302      	adds	r3, #2
 8009996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a6:	4413      	add	r3, r2
 80099a8:	3304      	adds	r3, #4
 80099aa:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 80099ac:	79fb      	ldrb	r3, [r7, #7]
 80099ae:	3303      	adds	r3, #3
 80099b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c0:	4413      	add	r3, r2
 80099c2:	3304      	adds	r3, #4
 80099c4:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 80099c6:	79fb      	ldrb	r3, [r7, #7]
 80099c8:	3304      	adds	r3, #4
 80099ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099da:	4413      	add	r3, r2
 80099dc:	3304      	adds	r3, #4
 80099de:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 80099e0:	79fb      	ldrb	r3, [r7, #7]
 80099e2:	3305      	adds	r3, #5
 80099e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f4:	4413      	add	r3, r2
 80099f6:	3304      	adds	r3, #4
 80099f8:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	3306      	adds	r3, #6
 80099fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a0e:	4413      	add	r3, r2
 8009a10:	3304      	adds	r3, #4
 8009a12:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d113      	bne.n	8009a44 <fb_nand+0xf4>
		*output =  !((*input1)&(*input2)&(*input3)&(*input4));
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	401a      	ands	r2, r3
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	401a      	ands	r2, r3
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4013      	ands	r3, r2
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	bf0c      	ite	eq
 8009a36:	2301      	moveq	r3, #1
 8009a38:	2300      	movne	r3, #0
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  !((*input1)&&(*input2)&&(*input3)&&(*input4));
	}
}
 8009a42:	e014      	b.n	8009a6e <fb_nand+0x11e>
		*output =  !((*input1)&&(*input2)&&(*input3)&&(*input4));
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00b      	beq.n	8009a64 <fb_nand+0x114>
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d007      	beq.n	8009a64 <fb_nand+0x114>
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d003      	beq.n	8009a64 <fb_nand+0x114>
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <fb_nand+0x118>
 8009a64:	2201      	movs	r2, #1
 8009a66:	e000      	b.n	8009a6a <fb_nand+0x11a>
 8009a68:	2200      	movs	r2, #0
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	601a      	str	r2, [r3, #0]
}
 8009a6e:	bf00      	nop
 8009a70:	3728      	adds	r7, #40	; 0x28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <create_fb_nand>:

type_fb_nand create_fb_nand(uint8_t type){
 8009a78:	b5b0      	push	{r4, r5, r7, lr}
 8009a7a:	b08c      	sub	sp, #48	; 0x30
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 8009a84:	f7fe f89c 	bl	8007bc0 <get_paramAddrTable>
 8009a88:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_nand fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 8009a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //in4
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fe f8c2 	bl	8007c1c <createParameter>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(1); //in1
 8009a9c:	2001      	movs	r0, #1
 8009a9e:	f7fe f8bd 	bl	8007c1c <createParameter>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(1); //in2
 8009aa6:	2001      	movs	r0, #1
 8009aa8:	f7fe f8b8 	bl	8007c1c <createParameter>
 8009aac:	4603      	mov	r3, r0
 8009aae:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(1); //in3
 8009ab0:	2001      	movs	r0, #1
 8009ab2:	f7fe f8b3 	bl	8007c1c <createParameter>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(1); //in4
 8009aba:	2001      	movs	r0, #1
 8009abc:	f7fe f8ae 	bl	8007c1c <createParameter>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(0); //output
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	f7fe f8a9 	bl	8007c1c <createParameter>
 8009aca:	4603      	mov	r3, r0
 8009acc:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0);
 8009ace:	2000      	movs	r0, #0
 8009ad0:	f7fe f8a4 	bl	8007c1c <createParameter>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	62bb      	str	r3, [r7, #40]	; 0x28


	fb.fb_index = writeToFBTable(fb_nand, fb.startParamIndex);
 8009ad8:	7b7b      	ldrb	r3, [r7, #13]
 8009ada:	4619      	mov	r1, r3
 8009adc:	4809      	ldr	r0, [pc, #36]	; (8009b04 <create_fb_nand+0x8c>)
 8009ade:	f7fe f879 	bl	8007bd4 <writeToFBTable>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	733b      	strb	r3, [r7, #12]

	return fb;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	461d      	mov	r5, r3
 8009aea:	f107 040c 	add.w	r4, r7, #12
 8009aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009af2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009af6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	3730      	adds	r7, #48	; 0x30
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bdb0      	pop	{r4, r5, r7, pc}
 8009b02:	bf00      	nop
 8009b04:	08009951 	.word	0x08009951

08009b08 <fb_nor_parser>:
#include "logic/fb_nor.h"



//logic fb
uint8_t fb_nor_parser(void){
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b088      	sub	sp, #32
 8009b0c:	af00      	add	r7, sp, #0
	create_fb_nor();
 8009b0e:	463b      	mov	r3, r7
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 f871 	bl	8009bf8 <create_fb_nor>
	return 1;
 8009b16:	2301      	movs	r3, #1
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3720      	adds	r7, #32
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <fb_nor>:
void fb_nor(uint8_t p){
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08a      	sub	sp, #40	; 0x28
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8009b2a:	f7fe f849 	bl	8007bc0 <get_paramAddrTable>
 8009b2e:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p]];
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4413      	add	r3, r2
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b42:	4413      	add	r3, r2
 8009b44:	3304      	adds	r3, #4
 8009b46:	623b      	str	r3, [r7, #32]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b5c:	4413      	add	r3, r2
 8009b5e:	3304      	adds	r3, #4
 8009b60:	61fb      	str	r3, [r7, #28]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+2]];
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	3302      	adds	r3, #2
 8009b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b76:	4413      	add	r3, r2
 8009b78:	3304      	adds	r3, #4
 8009b7a:	61bb      	str	r3, [r7, #24]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+3]];
 8009b7c:	79fb      	ldrb	r3, [r7, #7]
 8009b7e:	3303      	adds	r3, #3
 8009b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b90:	4413      	add	r3, r2
 8009b92:	3304      	adds	r3, #4
 8009b94:	617b      	str	r3, [r7, #20]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+4]];
 8009b96:	79fb      	ldrb	r3, [r7, #7]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009baa:	4413      	add	r3, r2
 8009bac:	3304      	adds	r3, #4
 8009bae:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+5]];
 8009bb0:	79fb      	ldrb	r3, [r7, #7]
 8009bb2:	3305      	adds	r3, #5
 8009bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc4:	4413      	add	r3, r2
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	60fb      	str	r3, [r7, #12]


	*output =  !((*input1)|(*input2)|(*input3)|(*input4));
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	bf0c      	ite	eq
 8009be4:	2301      	moveq	r3, #1
 8009be6:	2300      	movne	r3, #0
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	461a      	mov	r2, r3
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	601a      	str	r2, [r3, #0]

}
 8009bf0:	bf00      	nop
 8009bf2:	3728      	adds	r7, #40	; 0x28
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <create_fb_nor>:


type_fb_nor create_fb_nor(void){
 8009bf8:	b5b0      	push	{r4, r5, r7, lr}
 8009bfa:	b08a      	sub	sp, #40	; 0x28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
	s_Param* pAddrTable = get_paramAddrTable();
 8009c00:	f7fd ffde 	bl	8007bc0 <get_paramAddrTable>
 8009c04:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_nor fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	727b      	strb	r3, [r7, #9]


	fb.fp.input1 = createParameter(0); //in1
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	f7fe f805 	bl	8007c1c <createParameter>
 8009c12:	4603      	mov	r3, r0
 8009c14:	613b      	str	r3, [r7, #16]
	fb.fp.input2 = createParameter(0); //in2
 8009c16:	2000      	movs	r0, #0
 8009c18:	f7fe f800 	bl	8007c1c <createParameter>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	617b      	str	r3, [r7, #20]
	fb.fp.input3 = createParameter(0); //in3
 8009c20:	2000      	movs	r0, #0
 8009c22:	f7fd fffb 	bl	8007c1c <createParameter>
 8009c26:	4603      	mov	r3, r0
 8009c28:	61bb      	str	r3, [r7, #24]
	fb.fp.input4 = createParameter(0); //in4
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	f7fd fff6 	bl	8007c1c <createParameter>
 8009c30:	4603      	mov	r3, r0
 8009c32:	61fb      	str	r3, [r7, #28]
	fb.fp.output = createParameter(0); //output
 8009c34:	2000      	movs	r0, #0
 8009c36:	f7fd fff1 	bl	8007c1c <createParameter>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	60fb      	str	r3, [r7, #12]
	fb.fp.stat = createParameter(0); //output
 8009c3e:	2000      	movs	r0, #0
 8009c40:	f7fd ffec 	bl	8007c1c <createParameter>
 8009c44:	4603      	mov	r3, r0
 8009c46:	623b      	str	r3, [r7, #32]


	fb.fb_index = writeToFBTable(fb_nor, fb.startParamIndex);
 8009c48:	7a7b      	ldrb	r3, [r7, #9]
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	4809      	ldr	r0, [pc, #36]	; (8009c74 <create_fb_nor+0x7c>)
 8009c4e:	f7fd ffc1 	bl	8007bd4 <writeToFBTable>
 8009c52:	4603      	mov	r3, r0
 8009c54:	723b      	strb	r3, [r7, #8]

	return fb;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	461d      	mov	r5, r3
 8009c5a:	f107 0408 	add.w	r4, r7, #8
 8009c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009c62:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009c66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	3728      	adds	r7, #40	; 0x28
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bdb0      	pop	{r4, r5, r7, pc}
 8009c72:	bf00      	nop
 8009c74:	08009b21 	.word	0x08009b21

08009c78 <fb_not_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_not.h"

//logic fb
uint8_t fb_not_parser(uint8_t* p){
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08a      	sub	sp, #40	; 0x28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	61f8      	str	r0, [r7, #28]
	uint8_t type = p[0];
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t input = p[1];
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	785b      	ldrb	r3, [r3, #1]
 8009c8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_not(type, input);
 8009c90:	463b      	mov	r3, r7
 8009c92:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009c96:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f858 	bl	8009d50 <create_fb_not>
	return 1;
 8009ca0:	2301      	movs	r3, #1
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3728      	adds	r7, #40	; 0x28
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <fb_not>:

void fb_not(uint8_t p){
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b088      	sub	sp, #32
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8009cb4:	f7fd ff84 	bl	8007bc0 <get_paramAddrTable>
 8009cb8:	61f8      	str	r0, [r7, #28]
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	69fa      	ldr	r2, [r7, #28]
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	69fa      	ldr	r2, [r7, #28]
 8009ccc:	4413      	add	r3, r2
 8009cce:	3304      	adds	r3, #4
 8009cd0:	61bb      	str	r3, [r7, #24]
	int32_t* input = &pAddrTable->value[pAddrTable->addr[p+1]];
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	69fa      	ldr	r2, [r7, #28]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	69fa      	ldr	r2, [r7, #28]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	3304      	adds	r3, #4
 8009cea:	617b      	str	r3, [r7, #20]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+2]];
 8009cec:	79fb      	ldrb	r3, [r7, #7]
 8009cee:	3302      	adds	r3, #2
 8009cf0:	69fa      	ldr	r2, [r7, #28]
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	69fa      	ldr	r2, [r7, #28]
 8009d00:	4413      	add	r3, r2
 8009d02:	3304      	adds	r3, #4
 8009d04:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 8009d06:	79fb      	ldrb	r3, [r7, #7]
 8009d08:	3303      	adds	r3, #3
 8009d0a:	69fa      	ldr	r2, [r7, #28]
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	69fa      	ldr	r2, [r7, #28]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	60fb      	str	r3, [r7, #12]

	// returns true if the conditions is false
	// else returns false

	if(*type == 1){
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d105      	bne.n	8009d34 <fb_not+0x8a>
		*output =  ~(*input);
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	43da      	mvns	r2, r3
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  !(*input);
	}

}
 8009d32:	e009      	b.n	8009d48 <fb_not+0x9e>
		*output =  !(*input);
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bf0c      	ite	eq
 8009d3c:	2301      	moveq	r3, #1
 8009d3e:	2300      	movne	r3, #0
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	461a      	mov	r2, r3
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	601a      	str	r2, [r3, #0]
}
 8009d48:	bf00      	nop
 8009d4a:	3720      	adds	r7, #32
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <create_fb_not>:


type_fb_not create_fb_not(uint8_t type, uint8_t input){
 8009d50:	b5b0      	push	{r4, r5, r7, lr}
 8009d52:	b088      	sub	sp, #32
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	460b      	mov	r3, r1
 8009d5a:	70fb      	strb	r3, [r7, #3]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	70bb      	strb	r3, [r7, #2]
	s_Param* pAddrTable = get_paramAddrTable();
 8009d60:	f7fd ff2e 	bl	8007bc0 <get_paramAddrTable>
 8009d64:	61f8      	str	r0, [r7, #28]
	type_fb_not fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	727b      	strb	r3, [r7, #9]

	//input not connected -> output = 1
	fb.fp.type = createParameter(type); //in
 8009d6c:	78fb      	ldrb	r3, [r7, #3]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fd ff54 	bl	8007c1c <createParameter>
 8009d74:	4603      	mov	r3, r0
 8009d76:	617b      	str	r3, [r7, #20]
	fb.fp.input = createParameter(input); //in
 8009d78:	78bb      	ldrb	r3, [r7, #2]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fd ff4e 	bl	8007c1c <createParameter>
 8009d80:	4603      	mov	r3, r0
 8009d82:	613b      	str	r3, [r7, #16]
	fb.fp.output = createParameter(0); //output
 8009d84:	2000      	movs	r0, #0
 8009d86:	f7fd ff49 	bl	8007c1c <createParameter>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	60fb      	str	r3, [r7, #12]
	fb.fp.stat = createParameter(0);
 8009d8e:	2000      	movs	r0, #0
 8009d90:	f7fd ff44 	bl	8007c1c <createParameter>
 8009d94:	4603      	mov	r3, r0
 8009d96:	61bb      	str	r3, [r7, #24]



	fb.fb_index = writeToFBTable(fb_not, fb.startParamIndex);
 8009d98:	7a7b      	ldrb	r3, [r7, #9]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	4808      	ldr	r0, [pc, #32]	; (8009dc0 <create_fb_not+0x70>)
 8009d9e:	f7fd ff19 	bl	8007bd4 <writeToFBTable>
 8009da2:	4603      	mov	r3, r0
 8009da4:	723b      	strb	r3, [r7, #8]

	return fb;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	461d      	mov	r5, r3
 8009daa:	f107 0408 	add.w	r4, r7, #8
 8009dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	602b      	str	r3, [r5, #0]
}
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	3720      	adds	r7, #32
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	08009cab 	.word	0x08009cab

08009dc4 <fb_or_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_or.h"

uint8_t fb_or_parser(uint8_t* p){
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b08c      	sub	sp, #48	; 0x30
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 8009dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_or(type);
 8009dd4:	463b      	mov	r3, r7
 8009dd6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009dda:	4611      	mov	r1, r2
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f000 f893 	bl	8009f08 <create_fb_or>
	return 1;
 8009de2:	2301      	movs	r3, #1
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3730      	adds	r7, #48	; 0x30
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <fb_or>:

void fb_or(uint8_t p){
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08a      	sub	sp, #40	; 0x28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8009df6:	f7fd fee3 	bl	8007bc0 <get_paramAddrTable>
 8009dfa:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 8009dfc:	79fb      	ldrb	r3, [r7, #7]
 8009dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0e:	4413      	add	r3, r2
 8009e10:	3304      	adds	r3, #4
 8009e12:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	3301      	adds	r3, #1
 8009e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4413      	add	r3, r2
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e28:	4413      	add	r3, r2
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 8009e2e:	79fb      	ldrb	r3, [r7, #7]
 8009e30:	3302      	adds	r3, #2
 8009e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	4413      	add	r3, r2
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e42:	4413      	add	r3, r2
 8009e44:	3304      	adds	r3, #4
 8009e46:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 8009e48:	79fb      	ldrb	r3, [r7, #7]
 8009e4a:	3303      	adds	r3, #3
 8009e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e5c:	4413      	add	r3, r2
 8009e5e:	3304      	adds	r3, #4
 8009e60:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 8009e62:	79fb      	ldrb	r3, [r7, #7]
 8009e64:	3304      	adds	r3, #4
 8009e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e76:	4413      	add	r3, r2
 8009e78:	3304      	adds	r3, #4
 8009e7a:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 8009e7c:	79fb      	ldrb	r3, [r7, #7]
 8009e7e:	3305      	adds	r3, #5
 8009e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e90:	4413      	add	r3, r2
 8009e92:	3304      	adds	r3, #4
 8009e94:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	3306      	adds	r3, #6
 8009e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eaa:	4413      	add	r3, r2
 8009eac:	3304      	adds	r3, #4
 8009eae:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d10d      	bne.n	8009ed4 <fb_or+0xe8>
		*output =  (*input1)|(*input2)|(*input3)|(*input4);
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	431a      	orrs	r2, r3
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	431a      	orrs	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	601a      	str	r2, [r3, #0]
	else{
		*output =  (*input1)||(*input2)||(*input3)||(*input4);
	}


}
 8009ed2:	e014      	b.n	8009efe <fb_or+0x112>
		*output =  (*input1)||(*input2)||(*input3)||(*input4);
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10b      	bne.n	8009ef4 <fb_or+0x108>
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d107      	bne.n	8009ef4 <fb_or+0x108>
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d103      	bne.n	8009ef4 <fb_or+0x108>
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <fb_or+0x10c>
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	e000      	b.n	8009efa <fb_or+0x10e>
 8009ef8:	2200      	movs	r2, #0
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	601a      	str	r2, [r3, #0]
}
 8009efe:	bf00      	nop
 8009f00:	3728      	adds	r7, #40	; 0x28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
	...

08009f08 <create_fb_or>:


type_fb_or create_fb_or(uint8_t type){
 8009f08:	b5b0      	push	{r4, r5, r7, lr}
 8009f0a:	b08c      	sub	sp, #48	; 0x30
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 8009f14:	f7fd fe54 	bl	8007bc0 <get_paramAddrTable>
 8009f18:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_or fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 8009f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //type
 8009f20:	78fb      	ldrb	r3, [r7, #3]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fd fe7a 	bl	8007c1c <createParameter>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(0); //input1
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	f7fd fe75 	bl	8007c1c <createParameter>
 8009f32:	4603      	mov	r3, r0
 8009f34:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(0); //input2
 8009f36:	2000      	movs	r0, #0
 8009f38:	f7fd fe70 	bl	8007c1c <createParameter>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(0); //input3
 8009f40:	2000      	movs	r0, #0
 8009f42:	f7fd fe6b 	bl	8007c1c <createParameter>
 8009f46:	4603      	mov	r3, r0
 8009f48:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(0); //input4
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	f7fd fe66 	bl	8007c1c <createParameter>
 8009f50:	4603      	mov	r3, r0
 8009f52:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(0); //output
 8009f54:	2000      	movs	r0, #0
 8009f56:	f7fd fe61 	bl	8007c1c <createParameter>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //output
 8009f5e:	2000      	movs	r0, #0
 8009f60:	f7fd fe5c 	bl	8007c1c <createParameter>
 8009f64:	4603      	mov	r3, r0
 8009f66:	62bb      	str	r3, [r7, #40]	; 0x28

	fb.fb_index = writeToFBTable(fb_or, fb.startParamIndex);
 8009f68:	7b7b      	ldrb	r3, [r7, #13]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4809      	ldr	r0, [pc, #36]	; (8009f94 <create_fb_or+0x8c>)
 8009f6e:	f7fd fe31 	bl	8007bd4 <writeToFBTable>
 8009f72:	4603      	mov	r3, r0
 8009f74:	733b      	strb	r3, [r7, #12]

	return fb;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	461d      	mov	r5, r3
 8009f7a:	f107 040c 	add.w	r4, r7, #12
 8009f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009f86:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	3730      	adds	r7, #48	; 0x30
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bdb0      	pop	{r4, r5, r7, pc}
 8009f92:	bf00      	nop
 8009f94:	08009ded 	.word	0x08009ded

08009f98 <fb_xor_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_xor.h"

//logic fb
uint8_t fb_xor_parser(void){
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
	create_fb_xor();
 8009f9e:	463b      	mov	r3, r7
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 f859 	bl	800a058 <create_fb_xor>
	return 1;
 8009fa6:	2301      	movs	r3, #1
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3718      	adds	r7, #24
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <fb_xor>:
void fb_xor(uint8_t p){
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8009fba:	f7fd fe01 	bl	8007bc0 <get_paramAddrTable>
 8009fbe:	61f8      	str	r0, [r7, #28]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p]];
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	69fa      	ldr	r2, [r7, #28]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	69fa      	ldr	r2, [r7, #28]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	61bb      	str	r3, [r7, #24]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 8009fd8:	79fb      	ldrb	r3, [r7, #7]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	69fa      	ldr	r2, [r7, #28]
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4413      	add	r3, r2
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	69fa      	ldr	r2, [r7, #28]
 8009fec:	4413      	add	r3, r2
 8009fee:	3304      	adds	r3, #4
 8009ff0:	617b      	str	r3, [r7, #20]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 8009ff2:	79fb      	ldrb	r3, [r7, #7]
 8009ff4:	3302      	adds	r3, #2
 8009ff6:	69fa      	ldr	r2, [r7, #28]
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	69fa      	ldr	r2, [r7, #28]
 800a006:	4413      	add	r3, r2
 800a008:	3304      	adds	r3, #4
 800a00a:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+3]];
 800a00c:	79fb      	ldrb	r3, [r7, #7]
 800a00e:	3303      	adds	r3, #3
 800a010:	69fa      	ldr	r2, [r7, #28]
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	4413      	add	r3, r2
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	69fa      	ldr	r2, [r7, #28]
 800a020:	4413      	add	r3, r2
 800a022:	3304      	adds	r3, #4
 800a024:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 800a026:	79fb      	ldrb	r3, [r7, #7]
 800a028:	3304      	adds	r3, #4
 800a02a:	69fa      	ldr	r2, [r7, #28]
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	69fa      	ldr	r2, [r7, #28]
 800a03a:	4413      	add	r3, r2
 800a03c:	3304      	adds	r3, #4
 800a03e:	60bb      	str	r3, [r7, #8]

	*output =  (*input1)^(*input2);
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	405a      	eors	r2, r3
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	601a      	str	r2, [r3, #0]
}
 800a04e:	bf00      	nop
 800a050:	3720      	adds	r7, #32
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <create_fb_xor>:


type_fb_xor create_fb_xor(void){
 800a058:	b5b0      	push	{r4, r5, r7, lr}
 800a05a:	b08a      	sub	sp, #40	; 0x28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
	s_Param* pAddrTable = get_paramAddrTable();
 800a060:	f7fd fdae 	bl	8007bc0 <get_paramAddrTable>
 800a064:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_xor fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	737b      	strb	r3, [r7, #13]


	fb.fp.input1 = createParameter(0); //in
 800a06c:	2000      	movs	r0, #0
 800a06e:	f7fd fdd5 	bl	8007c1c <createParameter>
 800a072:	4603      	mov	r3, r0
 800a074:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(0); //in
 800a076:	2000      	movs	r0, #0
 800a078:	f7fd fdd0 	bl	8007c1c <createParameter>
 800a07c:	4603      	mov	r3, r0
 800a07e:	61bb      	str	r3, [r7, #24]
	fb.fp.mode = createParameter(0); //in
 800a080:	2000      	movs	r0, #0
 800a082:	f7fd fdcb 	bl	8007c1c <createParameter>
 800a086:	4603      	mov	r3, r0
 800a088:	61fb      	str	r3, [r7, #28]
	fb.fp.output = createParameter(0); //output
 800a08a:	2000      	movs	r0, #0
 800a08c:	f7fd fdc6 	bl	8007c1c <createParameter>
 800a090:	4603      	mov	r3, r0
 800a092:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //in
 800a094:	2000      	movs	r0, #0
 800a096:	f7fd fdc1 	bl	8007c1c <createParameter>
 800a09a:	4603      	mov	r3, r0
 800a09c:	623b      	str	r3, [r7, #32]



	fb.fb_index = writeToFBTable(fb_xor, fb.startParamIndex);
 800a09e:	7b7b      	ldrb	r3, [r7, #13]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4809      	ldr	r0, [pc, #36]	; (800a0c8 <create_fb_xor+0x70>)
 800a0a4:	f7fd fd96 	bl	8007bd4 <writeToFBTable>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	733b      	strb	r3, [r7, #12]

	return fb;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	461d      	mov	r5, r3
 800a0b0:	f107 040c 	add.w	r4, r7, #12
 800a0b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a0bc:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	3728      	adds	r7, #40	; 0x28
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bdb0      	pop	{r4, r5, r7, pc}
 800a0c8:	08009fb1 	.word	0x08009fb1

0800a0cc <fb_condition_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_condition.h"

//fb_condition
uint8_t fb_condition_parser(uint8_t* p){
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b08a      	sub	sp, #40	; 0x28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	61f8      	str	r0, [r7, #28]
	uint8_t mode = p[0];
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	create_fb_condition(mode);
 800a0dc:	463b      	mov	r3, r7
 800a0de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 f8bd 	bl	800a264 <create_fb_condition>
	return 1;
 800a0ea:	2301      	movs	r3, #1
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3728      	adds	r7, #40	; 0x28
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <fb_condition>:

void fb_condition(uint8_t p){
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b088      	sub	sp, #32
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800a0fe:	f7fd fd5f 	bl	8007bc0 <get_paramAddrTable>
 800a102:	61f8      	str	r0, [r7, #28]
	int32_t* in1 = &pAddrTable->value[pAddrTable->addr[p]];
 800a104:	79fb      	ldrb	r3, [r7, #7]
 800a106:	69fa      	ldr	r2, [r7, #28]
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	69fa      	ldr	r2, [r7, #28]
 800a116:	4413      	add	r3, r2
 800a118:	3304      	adds	r3, #4
 800a11a:	61bb      	str	r3, [r7, #24]
	int32_t* in2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800a11c:	79fb      	ldrb	r3, [r7, #7]
 800a11e:	3301      	adds	r3, #1
 800a120:	69fa      	ldr	r2, [r7, #28]
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	69fa      	ldr	r2, [r7, #28]
 800a130:	4413      	add	r3, r2
 800a132:	3304      	adds	r3, #4
 800a134:	617b      	str	r3, [r7, #20]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	3302      	adds	r3, #2
 800a13a:	69fa      	ldr	r2, [r7, #28]
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	69fa      	ldr	r2, [r7, #28]
 800a14a:	4413      	add	r3, r2
 800a14c:	3304      	adds	r3, #4
 800a14e:	613b      	str	r3, [r7, #16]
	uint32_t* output = &pAddrTable->value[pAddrTable->addr[p+3]];
 800a150:	79fb      	ldrb	r3, [r7, #7]
 800a152:	3303      	adds	r3, #3
 800a154:	69fa      	ldr	r2, [r7, #28]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	69fa      	ldr	r2, [r7, #28]
 800a164:	4413      	add	r3, r2
 800a166:	3304      	adds	r3, #4
 800a168:	60fb      	str	r3, [r7, #12]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 800a16a:	79fb      	ldrb	r3, [r7, #7]
 800a16c:	3304      	adds	r3, #4
 800a16e:	69fa      	ldr	r2, [r7, #28]
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	69fa      	ldr	r2, [r7, #28]
 800a17e:	4413      	add	r3, r2
 800a180:	3304      	adds	r3, #4
 800a182:	60bb      	str	r3, [r7, #8]

	switch ( *mode ){
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b05      	cmp	r3, #5
 800a18a:	d863      	bhi.n	800a254 <fb_condition+0x160>
 800a18c:	a201      	add	r2, pc, #4	; (adr r2, 800a194 <fb_condition+0xa0>)
 800a18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a192:	bf00      	nop
 800a194:	0800a1ad 	.word	0x0800a1ad
 800a198:	0800a1c9 	.word	0x0800a1c9
 800a19c:	0800a1e5 	.word	0x0800a1e5
 800a1a0:	0800a201 	.word	0x0800a201
 800a1a4:	0800a21d 	.word	0x0800a21d
 800a1a8:	0800a239 	.word	0x0800a239
		case 0:
			if( *in1 > *in2)
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	dd03      	ble.n	800a1c0 <fb_condition+0xcc>
				*output = 1;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800a1be:	e04d      	b.n	800a25c <fb_condition+0x168>
				*output = 0;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
			break;
 800a1c6:	e049      	b.n	800a25c <fb_condition+0x168>

		case 1:
			if( *in1 >= *in2)
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	db03      	blt.n	800a1dc <fb_condition+0xe8>
				*output = 1;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800a1da:	e03f      	b.n	800a25c <fb_condition+0x168>
				*output = 0;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	601a      	str	r2, [r3, #0]
			break;
 800a1e2:	e03b      	b.n	800a25c <fb_condition+0x168>

		case 2:
			if( *in1 == *in2)
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d103      	bne.n	800a1f8 <fb_condition+0x104>
				*output = 1;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800a1f6:	e031      	b.n	800a25c <fb_condition+0x168>
				*output = 0;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	601a      	str	r2, [r3, #0]
			break;
 800a1fe:	e02d      	b.n	800a25c <fb_condition+0x168>

		case 3:
			if( *in1 != *in2)
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d003      	beq.n	800a214 <fb_condition+0x120>
				*output = 1;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2201      	movs	r2, #1
 800a210:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800a212:	e023      	b.n	800a25c <fb_condition+0x168>
				*output = 0;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	601a      	str	r2, [r3, #0]
			break;
 800a21a:	e01f      	b.n	800a25c <fb_condition+0x168>

		case 4:
			if( *in1 <= *in2)
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	429a      	cmp	r2, r3
 800a226:	dc03      	bgt.n	800a230 <fb_condition+0x13c>
				*output = 1;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2201      	movs	r2, #1
 800a22c:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800a22e:	e015      	b.n	800a25c <fb_condition+0x168>
				*output = 0;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]
			break;
 800a236:	e011      	b.n	800a25c <fb_condition+0x168>

		case 5:
			if( *in1 < *in2)
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	429a      	cmp	r2, r3
 800a242:	da03      	bge.n	800a24c <fb_condition+0x158>
				*output = 1;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2201      	movs	r2, #1
 800a248:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800a24a:	e007      	b.n	800a25c <fb_condition+0x168>
				*output = 0;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	601a      	str	r2, [r3, #0]
			break;
 800a252:	e003      	b.n	800a25c <fb_condition+0x168>

		default:
			*output = 0;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	601a      	str	r2, [r3, #0]
	}

}
 800a25a:	bf00      	nop
 800a25c:	bf00      	nop
 800a25e:	3720      	adds	r7, #32
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <create_fb_condition>:


type_fb_condition create_fb_condition(uint8_t mode){
 800a264:	b5b0      	push	{r4, r5, r7, lr}
 800a266:	b08a      	sub	sp, #40	; 0x28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	460b      	mov	r3, r1
 800a26e:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 800a270:	f7fd fca6 	bl	8007bc0 <get_paramAddrTable>
 800a274:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_condition fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	737b      	strb	r3, [r7, #13]


	fb.fp.in1 = createParameter(0); //in1
 800a27c:	2000      	movs	r0, #0
 800a27e:	f7fd fccd 	bl	8007c1c <createParameter>
 800a282:	4603      	mov	r3, r0
 800a284:	613b      	str	r3, [r7, #16]
	fb.fp.in2 = createParameter(0); //in2
 800a286:	2000      	movs	r0, #0
 800a288:	f7fd fcc8 	bl	8007c1c <createParameter>
 800a28c:	4603      	mov	r3, r0
 800a28e:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode); //op
 800a290:	78fb      	ldrb	r3, [r7, #3]
 800a292:	4618      	mov	r0, r3
 800a294:	f7fd fcc2 	bl	8007c1c <createParameter>
 800a298:	4603      	mov	r3, r0
 800a29a:	61bb      	str	r3, [r7, #24]
	fb.fp.out = createParameter(0); //output
 800a29c:	2000      	movs	r0, #0
 800a29e:	f7fd fcbd 	bl	8007c1c <createParameter>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	61fb      	str	r3, [r7, #28]
	fb.fp.stat = createParameter(0); //output
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	f7fd fcb8 	bl	8007c1c <createParameter>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_condition, fb.startParamIndex);
 800a2b0:	7b7b      	ldrb	r3, [r7, #13]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	4809      	ldr	r0, [pc, #36]	; (800a2dc <create_fb_condition+0x78>)
 800a2b6:	f7fd fc8d 	bl	8007bd4 <writeToFBTable>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	733b      	strb	r3, [r7, #12]

	return fb;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	461d      	mov	r5, r3
 800a2c2:	f107 040c 	add.w	r4, r7, #12
 800a2c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a2ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a2ce:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	3728      	adds	r7, #40	; 0x28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	0800a0f5 	.word	0x0800a0f5

0800a2e0 <fb_cycle_parser>:
#include "fb_cycle.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_cycle_parser(uint8_t* p){
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b092      	sub	sp, #72	; 0x48
 800a2e4:	af02      	add	r7, sp, #8
 800a2e6:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint8_t rst = p[0];
 800a2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t don = (uint32_t) p[1] << 24 | p[2] << 16 | p[3] <<8 | p[4];
 800a2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	061b      	lsls	r3, r3, #24
 800a2f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2fa:	3202      	adds	r2, #2
 800a2fc:	7812      	ldrb	r2, [r2, #0]
 800a2fe:	0412      	lsls	r2, r2, #16
 800a300:	4313      	orrs	r3, r2
 800a302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a304:	3203      	adds	r2, #3
 800a306:	7812      	ldrb	r2, [r2, #0]
 800a308:	0212      	lsls	r2, r2, #8
 800a30a:	4313      	orrs	r3, r2
 800a30c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a30e:	3204      	adds	r2, #4
 800a310:	7812      	ldrb	r2, [r2, #0]
 800a312:	4313      	orrs	r3, r2
 800a314:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t doff = (uint32_t) p[5] << 24 | p[6] << 16 | p[7] <<8 | p[8];
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	3305      	adds	r3, #5
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	061b      	lsls	r3, r3, #24
 800a31e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a320:	3206      	adds	r2, #6
 800a322:	7812      	ldrb	r2, [r2, #0]
 800a324:	0412      	lsls	r2, r2, #16
 800a326:	4313      	orrs	r3, r2
 800a328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a32a:	3207      	adds	r2, #7
 800a32c:	7812      	ldrb	r2, [r2, #0]
 800a32e:	0212      	lsls	r2, r2, #8
 800a330:	4313      	orrs	r3, r2
 800a332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a334:	3208      	adds	r2, #8
 800a336:	7812      	ldrb	r2, [r2, #0]
 800a338:	4313      	orrs	r3, r2
 800a33a:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t mode = p[9];
 800a33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33e:	7a5b      	ldrb	r3, [r3, #9]
 800a340:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t in = p[10];
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a346:	7a9b      	ldrb	r3, [r3, #10]
 800a348:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	create_fb_cycle(rst,in, don,doff,mode);
 800a34c:	4638      	mov	r0, r7
 800a34e:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800a352:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800a356:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a35a:	9301      	str	r3, [sp, #4]
 800a35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a362:	f000 f8bf 	bl	800a4e4 <create_fb_cycle>
	return 1;
 800a366:	2301      	movs	r3, #1
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3740      	adds	r7, #64	; 0x40
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <fb_cycle>:

void fb_cycle(uint8_t p){
 800a370:	b580      	push	{r7, lr}
 800a372:	b08e      	sub	sp, #56	; 0x38
 800a374:	af00      	add	r7, sp, #0
 800a376:	4603      	mov	r3, r0
 800a378:	71fb      	strb	r3, [r7, #7]
	int32_t delta_time = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	637b      	str	r3, [r7, #52]	; 0x34

	s_Param* pAddrTable = get_paramAddrTable();
 800a37e:	f7fd fc1f 	bl	8007bc0 <get_paramAddrTable>
 800a382:	6338      	str	r0, [r7, #48]	; 0x30
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 800a384:	79fb      	ldrb	r3, [r7, #7]
 800a386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4413      	add	r3, r2
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a396:	4413      	add	r3, r2
 800a398:	3304      	adds	r3, #4
 800a39a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t* in = &pAddrTable->value[pAddrTable->addr[p+1]];
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4413      	add	r3, r2
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3b0:	4413      	add	r3, r2
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* don = &pAddrTable->value[pAddrTable->addr[p+2]];
 800a3b6:	79fb      	ldrb	r3, [r7, #7]
 800a3b8:	3302      	adds	r3, #2
 800a3ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4413      	add	r3, r2
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3ca:	4413      	add	r3, r2
 800a3cc:	3304      	adds	r3, #4
 800a3ce:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* doff = &pAddrTable->value[pAddrTable->addr[p+3]];
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	3303      	adds	r3, #3
 800a3d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	4413      	add	r3, r2
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3e4:	4413      	add	r3, r2
 800a3e6:	3304      	adds	r3, #4
 800a3e8:	623b      	str	r3, [r7, #32]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+4]];
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3fe:	4413      	add	r3, r2
 800a400:	3304      	adds	r3, #4
 800a402:	61fb      	str	r3, [r7, #28]
	int32_t* out = &pAddrTable->value[pAddrTable->addr[p+5]];
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	3305      	adds	r3, #5
 800a408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a418:	4413      	add	r3, r2
 800a41a:	3304      	adds	r3, #4
 800a41c:	61bb      	str	r3, [r7, #24]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 800a41e:	79fb      	ldrb	r3, [r7, #7]
 800a420:	3306      	adds	r3, #6
 800a422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	4413      	add	r3, r2
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a432:	4413      	add	r3, r2
 800a434:	3304      	adds	r3, #4
 800a436:	617b      	str	r3, [r7, #20]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+7]];
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	3307      	adds	r3, #7
 800a43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a44c:	4413      	add	r3, r2
 800a44e:	3304      	adds	r3, #4
 800a450:	613b      	str	r3, [r7, #16]
	int32_t* cycle_counter = &pAddrTable->value[pAddrTable->addr[p+8]];
 800a452:	79fb      	ldrb	r3, [r7, #7]
 800a454:	3308      	adds	r3, #8
 800a456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4413      	add	r3, r2
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a466:	4413      	add	r3, r2
 800a468:	3304      	adds	r3, #4
 800a46a:	60fb      	str	r3, [r7, #12]

	//get cycle_counter
	if(*cycle_counter == 0xFFFFFFFF) //initial value
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a474:	d105      	bne.n	800a482 <fb_cycle+0x112>
	{
		*cycle_counter = hal_get_tick();
 800a476:	f7f6 f951 	bl	800071c <hal_get_tick>
 800a47a:	4602      	mov	r2, r0
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	601a      	str	r2, [r3, #0]
		}
		else{
			*cycle_counter = hal_get_tick(); //resample again
		}
	}
}
 800a480:	e02c      	b.n	800a4dc <fb_cycle+0x16c>
		delta_time = hal_get_tick() - *cycle_counter;
 800a482:	f7f6 f94b 	bl	800071c <hal_get_tick>
 800a486:	4602      	mov	r2, r0
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	637b      	str	r3, [r7, #52]	; 0x34
		if(delta_time < 0){
 800a490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a492:	2b00      	cmp	r3, #0
 800a494:	da08      	bge.n	800a4a8 <fb_cycle+0x138>
			delta_time = 0xFFFFFFFF - *cycle_counter + hal_get_tick();
 800a496:	f7f6 f941 	bl	800071c <hal_get_tick>
 800a49a:	4603      	mov	r3, r0
 800a49c:	461a      	mov	r2, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	637b      	str	r3, [r7, #52]	; 0x34
		if(delta_time < *doff){
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	da03      	bge.n	800a4ba <fb_cycle+0x14a>
			*out = 0;
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	601a      	str	r2, [r3, #0]
}
 800a4b8:	e010      	b.n	800a4dc <fb_cycle+0x16c>
		else if(delta_time < *doff + *don){
 800a4ba:	6a3b      	ldr	r3, [r7, #32]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	da03      	bge.n	800a4d2 <fb_cycle+0x162>
			*out = 1;
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	601a      	str	r2, [r3, #0]
}
 800a4d0:	e004      	b.n	800a4dc <fb_cycle+0x16c>
			*cycle_counter = hal_get_tick(); //resample again
 800a4d2:	f7f6 f923 	bl	800071c <hal_get_tick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	601a      	str	r2, [r3, #0]
}
 800a4dc:	bf00      	nop
 800a4de:	3738      	adds	r7, #56	; 0x38
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <create_fb_cycle>:

type_fb_cycle create_fb_cycle(uint8_t rst,
								uint8_t in,
									uint32_t don,
										uint32_t doff,
											uint8_t mode){
 800a4e4:	b5b0      	push	{r4, r5, r7, lr}
 800a4e6:	b090      	sub	sp, #64	; 0x40
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	607b      	str	r3, [r7, #4]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	72fb      	strb	r3, [r7, #11]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	72bb      	strb	r3, [r7, #10]
	type_fb_cycle fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800a4f6:	f7fd fb63 	bl	8007bc0 <get_paramAddrTable>
 800a4fa:	63f8      	str	r0, [r7, #60]	; 0x3c

	fb.startParamIndex = pAddrTable->currentIndex;
 800a4fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	757b      	strb	r3, [r7, #21]

	//input ports
	fb.fp.rst = createParameter(rst);
 800a502:	7afb      	ldrb	r3, [r7, #11]
 800a504:	4618      	mov	r0, r3
 800a506:	f7fd fb89 	bl	8007c1c <createParameter>
 800a50a:	4603      	mov	r3, r0
 800a50c:	61bb      	str	r3, [r7, #24]
	fb.fp.in = createParameter(in);
 800a50e:	7abb      	ldrb	r3, [r7, #10]
 800a510:	4618      	mov	r0, r3
 800a512:	f7fd fb83 	bl	8007c1c <createParameter>
 800a516:	4603      	mov	r3, r0
 800a518:	61fb      	str	r3, [r7, #28]
	fb.fp.don = createParameter(don);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7fd fb7d 	bl	8007c1c <createParameter>
 800a522:	4603      	mov	r3, r0
 800a524:	623b      	str	r3, [r7, #32]
	fb.fp.doff = createParameter(doff);
 800a526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fd fb77 	bl	8007c1c <createParameter>
 800a52e:	4603      	mov	r3, r0
 800a530:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.mode = createParameter(mode);
 800a532:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a536:	4618      	mov	r0, r3
 800a538:	f7fd fb70 	bl	8007c1c <createParameter>
 800a53c:	4603      	mov	r3, r0
 800a53e:	62bb      	str	r3, [r7, #40]	; 0x28

	//output ports
	fb.fp.out = createParameter(0);
 800a540:	2000      	movs	r0, #0
 800a542:	f7fd fb6b 	bl	8007c1c <createParameter>
 800a546:	4603      	mov	r3, r0
 800a548:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.stat = createParameter(0);
 800a54a:	2000      	movs	r0, #0
 800a54c:	f7fd fb66 	bl	8007c1c <createParameter>
 800a550:	4603      	mov	r3, r0
 800a552:	633b      	str	r3, [r7, #48]	; 0x30
	fb.fp.val = createParameter(0);
 800a554:	2000      	movs	r0, #0
 800a556:	f7fd fb61 	bl	8007c1c <createParameter>
 800a55a:	4603      	mov	r3, r0
 800a55c:	637b      	str	r3, [r7, #52]	; 0x34

	//internal parameters
	fb.fp.cycle_counter = createParameter(0xFFFFFFFF);
 800a55e:	f04f 30ff 	mov.w	r0, #4294967295
 800a562:	f7fd fb5b 	bl	8007c1c <createParameter>
 800a566:	4603      	mov	r3, r0
 800a568:	63bb      	str	r3, [r7, #56]	; 0x38

	fb.fb_index = writeToFBTable(fb_cycle, fb.startParamIndex);
 800a56a:	7d7b      	ldrb	r3, [r7, #21]
 800a56c:	4619      	mov	r1, r3
 800a56e:	480a      	ldr	r0, [pc, #40]	; (800a598 <create_fb_cycle+0xb4>)
 800a570:	f7fd fb30 	bl	8007bd4 <writeToFBTable>
 800a574:	4603      	mov	r3, r0
 800a576:	753b      	strb	r3, [r7, #20]

	return fb;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	461d      	mov	r5, r3
 800a57c:	f107 0414 	add.w	r4, r7, #20
 800a580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a588:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a58c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	3740      	adds	r7, #64	; 0x40
 800a594:	46bd      	mov	sp, r7
 800a596:	bdb0      	pop	{r4, r5, r7, pc}
 800a598:	0800a371 	.word	0x0800a371

0800a59c <fb_hsc_parser>:
#include "fb_hsc.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_hsc_parser(uint8_t* p){
 800a59c:	b590      	push	{r4, r7, lr}
 800a59e:	b091      	sub	sp, #68	; 0x44
 800a5a0:	af02      	add	r7, sp, #8
 800a5a2:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t preset = (uint32_t) p[3] << 24 | p[4] << 16 | p[5] <<8 | p[6];
 800a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a6:	3303      	adds	r3, #3
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	061b      	lsls	r3, r3, #24
 800a5ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5ae:	3204      	adds	r2, #4
 800a5b0:	7812      	ldrb	r2, [r2, #0]
 800a5b2:	0412      	lsls	r2, r2, #16
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5b8:	3205      	adds	r2, #5
 800a5ba:	7812      	ldrb	r2, [r2, #0]
 800a5bc:	0212      	lsls	r2, r2, #8
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5c2:	3206      	adds	r2, #6
 800a5c4:	7812      	ldrb	r2, [r2, #0]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	637b      	str	r3, [r7, #52]	; 0x34
	create_fb_hsc(p[0],p[1], p[2],preset);
 800a5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5cc:	7819      	ldrb	r1, [r3, #0]
 800a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	781a      	ldrb	r2, [r3, #0]
 800a5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d6:	3302      	adds	r3, #2
 800a5d8:	781c      	ldrb	r4, [r3, #0]
 800a5da:	4638      	mov	r0, r7
 800a5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	4623      	mov	r3, r4
 800a5e2:	f000 f885 	bl	800a6f0 <create_fb_hsc>
	return 1;
 800a5e6:	2301      	movs	r3, #1
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	373c      	adds	r7, #60	; 0x3c
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd90      	pop	{r4, r7, pc}

0800a5f0 <fb_hsc>:

void fb_hsc(uint8_t p){
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b08c      	sub	sp, #48	; 0x30
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800a5fa:	f7fd fae1 	bl	8007bc0 <get_paramAddrTable>
 800a5fe:	62f8      	str	r0, [r7, #44]	; 0x2c
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 800a600:	79fb      	ldrb	r3, [r7, #7]
 800a602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a612:	4413      	add	r3, r2
 800a614:	3304      	adds	r3, #4
 800a616:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* ch1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800a618:	79fb      	ldrb	r3, [r7, #7]
 800a61a:	3301      	adds	r3, #1
 800a61c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a62c:	4413      	add	r3, r2
 800a62e:	3304      	adds	r3, #4
 800a630:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* ch2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800a632:	79fb      	ldrb	r3, [r7, #7]
 800a634:	3302      	adds	r3, #2
 800a636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	4413      	add	r3, r2
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a646:	4413      	add	r3, r2
 800a648:	3304      	adds	r3, #4
 800a64a:	623b      	str	r3, [r7, #32]
	int32_t* pf = &pAddrTable->value[pAddrTable->addr[p+3]];
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	3303      	adds	r3, #3
 800a650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a660:	4413      	add	r3, r2
 800a662:	3304      	adds	r3, #4
 800a664:	61fb      	str	r3, [r7, #28]
	int32_t* preset = &pAddrTable->value[pAddrTable->addr[p+4]];
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	3304      	adds	r3, #4
 800a66a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a67a:	4413      	add	r3, r2
 800a67c:	3304      	adds	r3, #4
 800a67e:	61bb      	str	r3, [r7, #24]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+5]];
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	3305      	adds	r3, #5
 800a684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a694:	4413      	add	r3, r2
 800a696:	3304      	adds	r3, #4
 800a698:	617b      	str	r3, [r7, #20]
	int32_t* out = &pAddrTable->value[pAddrTable->addr[p+6]];
 800a69a:	79fb      	ldrb	r3, [r7, #7]
 800a69c:	3306      	adds	r3, #6
 800a69e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ae:	4413      	add	r3, r2
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	613b      	str	r3, [r7, #16]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+7]];
 800a6b4:	79fb      	ldrb	r3, [r7, #7]
 800a6b6:	3307      	adds	r3, #7
 800a6b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4413      	add	r3, r2
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6c8:	4413      	add	r3, r2
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+8]];
 800a6ce:	79fb      	ldrb	r3, [r7, #7]
 800a6d0:	3308      	adds	r3, #8
 800a6d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6e2:	4413      	add	r3, r2
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	60bb      	str	r3, [r7, #8]

	//todo:implement
}
 800a6e8:	bf00      	nop
 800a6ea:	3730      	adds	r7, #48	; 0x30
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <create_fb_hsc>:

type_fb_hsc create_fb_hsc(uint8_t ch1,
								uint8_t ch2,
									uint8_t mode,
											uint32_t preset){
 800a6f0:	b5b0      	push	{r4, r5, r7, lr}
 800a6f2:	b08e      	sub	sp, #56	; 0x38
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	4603      	mov	r3, r0
 800a700:	70fb      	strb	r3, [r7, #3]
 800a702:	460b      	mov	r3, r1
 800a704:	70bb      	strb	r3, [r7, #2]
 800a706:	4613      	mov	r3, r2
 800a708:	707b      	strb	r3, [r7, #1]
	type_fb_hsc fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800a70a:	f7fd fa59 	bl	8007bc0 <get_paramAddrTable>
 800a70e:	6378      	str	r0, [r7, #52]	; 0x34

	fb.startParamIndex = pAddrTable->currentIndex;
 800a710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	737b      	strb	r3, [r7, #13]

	//input ports
	fb.fp.rst = createParameter(0);
 800a716:	2000      	movs	r0, #0
 800a718:	f7fd fa80 	bl	8007c1c <createParameter>
 800a71c:	4603      	mov	r3, r0
 800a71e:	613b      	str	r3, [r7, #16]
	fb.fp.ch1 = createParameter(ch1);
 800a720:	78fb      	ldrb	r3, [r7, #3]
 800a722:	4618      	mov	r0, r3
 800a724:	f7fd fa7a 	bl	8007c1c <createParameter>
 800a728:	4603      	mov	r3, r0
 800a72a:	617b      	str	r3, [r7, #20]
	fb.fp.ch2 = createParameter(ch2);
 800a72c:	78bb      	ldrb	r3, [r7, #2]
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fd fa74 	bl	8007c1c <createParameter>
 800a734:	4603      	mov	r3, r0
 800a736:	61bb      	str	r3, [r7, #24]
	fb.fp.pf = createParameter(0);
 800a738:	2000      	movs	r0, #0
 800a73a:	f7fd fa6f 	bl	8007c1c <createParameter>
 800a73e:	4603      	mov	r3, r0
 800a740:	61fb      	str	r3, [r7, #28]
	fb.fp.preset = createParameter(preset);
 800a742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a744:	4618      	mov	r0, r3
 800a746:	f7fd fa69 	bl	8007c1c <createParameter>
 800a74a:	4603      	mov	r3, r0
 800a74c:	623b      	str	r3, [r7, #32]
	fb.fp.mode = createParameter(mode);
 800a74e:	787b      	ldrb	r3, [r7, #1]
 800a750:	4618      	mov	r0, r3
 800a752:	f7fd fa63 	bl	8007c1c <createParameter>
 800a756:	4603      	mov	r3, r0
 800a758:	627b      	str	r3, [r7, #36]	; 0x24

	//output ports
	fb.fp.out = createParameter(0);
 800a75a:	2000      	movs	r0, #0
 800a75c:	f7fd fa5e 	bl	8007c1c <createParameter>
 800a760:	4603      	mov	r3, r0
 800a762:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.val = createParameter(0);
 800a764:	2000      	movs	r0, #0
 800a766:	f7fd fa59 	bl	8007c1c <createParameter>
 800a76a:	4603      	mov	r3, r0
 800a76c:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.stat = createParameter(0);
 800a76e:	2000      	movs	r0, #0
 800a770:	f7fd fa54 	bl	8007c1c <createParameter>
 800a774:	4603      	mov	r3, r0
 800a776:	633b      	str	r3, [r7, #48]	; 0x30

	//internal parameters

	fb.fb_index = writeToFBTable(fb_hsc, fb.startParamIndex);
 800a778:	7b7b      	ldrb	r3, [r7, #13]
 800a77a:	4619      	mov	r1, r3
 800a77c:	480a      	ldr	r0, [pc, #40]	; (800a7a8 <create_fb_hsc+0xb8>)
 800a77e:	f7fd fa29 	bl	8007bd4 <writeToFBTable>
 800a782:	4603      	mov	r3, r0
 800a784:	733b      	strb	r3, [r7, #12]

	return fb;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	461d      	mov	r5, r3
 800a78a:	f107 040c 	add.w	r4, r7, #12
 800a78e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a796:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a79a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	3738      	adds	r7, #56	; 0x38
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bdb0      	pop	{r4, r5, r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	0800a5f1 	.word	0x0800a5f1

0800a7ac <fb_number_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_number.h"

//output fb
uint8_t fb_number_parser(uint8_t* p){
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
	uint16_t value = (uint16_t) p[0] <<8 | p[1];
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	021b      	lsls	r3, r3, #8
 800a7ba:	b21a      	sxth	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	b21b      	sxth	r3, r3
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	b21b      	sxth	r3, r3
 800a7c8:	81fb      	strh	r3, [r7, #14]
	create_fb_number(value);
 800a7ca:	89fb      	ldrh	r3, [r7, #14]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 f811 	bl	800a7f4 <create_fb_number>
	return 1;
 800a7d2:	2301      	movs	r3, #1
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <fb_number>:

void fb_number(uint8_t p){
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	71fb      	strb	r3, [r7, #7]
}
 800a7e6:	bf00      	nop
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
	...

0800a7f4 <create_fb_number>:

type_fb_number create_fb_number(uint16_t value){
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	80fb      	strh	r3, [r7, #6]
	type_fb_number fb;
	s_Param* pAddrTable = get_paramAddrTable();
 800a7fe:	f7fd f9df 	bl	8007bc0 <get_paramAddrTable>
 800a802:	6178      	str	r0, [r7, #20]

	fb.startParamIndex = pAddrTable->currentIndex;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	737b      	strb	r3, [r7, #13]

	fb.value = createParameter(value);
 800a80a:	88fb      	ldrh	r3, [r7, #6]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7fd fa05 	bl	8007c1c <createParameter>
 800a812:	4603      	mov	r3, r0
 800a814:	b29b      	uxth	r3, r3
 800a816:	81fb      	strh	r3, [r7, #14]

	fb.fb_index = writeToFBTable(fb_number, fb.startParamIndex);
 800a818:	7b7b      	ldrb	r3, [r7, #13]
 800a81a:	4619      	mov	r1, r3
 800a81c:	4808      	ldr	r0, [pc, #32]	; (800a840 <create_fb_number+0x4c>)
 800a81e:	f7fd f9d9 	bl	8007bd4 <writeToFBTable>
 800a822:	4603      	mov	r3, r0
 800a824:	733b      	strb	r3, [r7, #12]
	return fb;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	613b      	str	r3, [r7, #16]
 800a82a:	2300      	movs	r3, #0
 800a82c:	8a3a      	ldrh	r2, [r7, #16]
 800a82e:	f362 030f 	bfi	r3, r2, #0, #16
 800a832:	8a7a      	ldrh	r2, [r7, #18]
 800a834:	f362 431f 	bfi	r3, r2, #16, #16
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3718      	adds	r7, #24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	0800a7dd 	.word	0x0800a7dd

0800a844 <fb_output_pin_parser>:
#include "fb_outputpin.h"
#include "adaptor.h"


//output fb
uint8_t fb_output_pin_parser(uint8_t* p){
 800a844:	b580      	push	{r7, lr}
 800a846:	b08a      	sub	sp, #40	; 0x28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	61f8      	str	r0, [r7, #28]
	uint8_t ch = p[0];
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t val = p[1];
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	785b      	ldrb	r3, [r3, #1]
 800a858:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t mode = p[2];
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	789b      	ldrb	r3, [r3, #2]
 800a860:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	create_fb_outputpin(ch, val, mode);
 800a864:	4638      	mov	r0, r7
 800a866:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a86a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a86e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800a872:	f000 f86d 	bl	800a950 <create_fb_outputpin>
	return 1;
 800a876:	2301      	movs	r3, #1
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3728      	adds	r7, #40	; 0x28
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <fb_outputpin>:

void fb_outputpin(uint8_t p){
 800a880:	b580      	push	{r7, lr}
 800a882:	b088      	sub	sp, #32
 800a884:	af00      	add	r7, sp, #0
 800a886:	4603      	mov	r3, r0
 800a888:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800a88a:	f7fd f999 	bl	8007bc0 <get_paramAddrTable>
 800a88e:	61f8      	str	r0, [r7, #28]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p]];
 800a890:	79fb      	ldrb	r3, [r7, #7]
 800a892:	69fa      	ldr	r2, [r7, #28]
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	69fa      	ldr	r2, [r7, #28]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	61bb      	str	r3, [r7, #24]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+1]];
 800a8a8:	79fb      	ldrb	r3, [r7, #7]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	69fa      	ldr	r2, [r7, #28]
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4413      	add	r3, r2
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	69fa      	ldr	r2, [r7, #28]
 800a8bc:	4413      	add	r3, r2
 800a8be:	3304      	adds	r3, #4
 800a8c0:	617b      	str	r3, [r7, #20]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 800a8c2:	79fb      	ldrb	r3, [r7, #7]
 800a8c4:	3302      	adds	r3, #2
 800a8c6:	69fa      	ldr	r2, [r7, #28]
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	69fa      	ldr	r2, [r7, #28]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	3304      	adds	r3, #4
 800a8da:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 800a8dc:	79fb      	ldrb	r3, [r7, #7]
 800a8de:	3303      	adds	r3, #3
 800a8e0:	69fa      	ldr	r2, [r7, #28]
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	69fa      	ldr	r2, [r7, #28]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	60fb      	str	r3, [r7, #12]
	int32_t* last_val = &pAddrTable->value[pAddrTable->addr[p+4]];
 800a8f6:	79fb      	ldrb	r3, [r7, #7]
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	69fa      	ldr	r2, [r7, #28]
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	69fa      	ldr	r2, [r7, #28]
 800a90a:	4413      	add	r3, r2
 800a90c:	3304      	adds	r3, #4
 800a90e:	60bb      	str	r3, [r7, #8]

	if ( *val != *last_val){
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d015      	beq.n	800a948 <fb_outputpin+0xc8>
		*last_val = *val;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	601a      	str	r2, [r3, #0]
		if(*val >1) *val = 1;
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	dd02      	ble.n	800a932 <fb_outputpin+0xb2>
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	2201      	movs	r2, #1
 800a930:	601a      	str	r2, [r3, #0]

		hal_gpio_write_pin((uint16_t)*ch, (uint8_t)*val);
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	b29b      	uxth	r3, r3
 800a938:	461a      	mov	r2, r3
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	4619      	mov	r1, r3
 800a942:	4610      	mov	r0, r2
 800a944:	f7f5 fe50 	bl	80005e8 <hal_gpio_write_pin>
	}
}
 800a948:	bf00      	nop
 800a94a:	3720      	adds	r7, #32
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <create_fb_outputpin>:

type_fb_outputpin create_fb_outputpin(uint8_t ch, uint8_t val, uint8_t mode){
 800a950:	b5b0      	push	{r4, r5, r7, lr}
 800a952:	b08a      	sub	sp, #40	; 0x28
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	4608      	mov	r0, r1
 800a95a:	4611      	mov	r1, r2
 800a95c:	461a      	mov	r2, r3
 800a95e:	4603      	mov	r3, r0
 800a960:	70fb      	strb	r3, [r7, #3]
 800a962:	460b      	mov	r3, r1
 800a964:	70bb      	strb	r3, [r7, #2]
 800a966:	4613      	mov	r3, r2
 800a968:	707b      	strb	r3, [r7, #1]
	type_fb_outputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 800a96a:	f7fd f929 	bl	8007bc0 <get_paramAddrTable>
 800a96e:	6278      	str	r0, [r7, #36]	; 0x24

	fb.startParamIndex = pAddrTable->currentIndex;
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	737b      	strb	r3, [r7, #13]

	//input ports
	fb.fp.ch = createParameter(ch); //output
 800a976:	78fb      	ldrb	r3, [r7, #3]
 800a978:	4618      	mov	r0, r3
 800a97a:	f7fd f94f 	bl	8007c1c <createParameter>
 800a97e:	4603      	mov	r3, r0
 800a980:	613b      	str	r3, [r7, #16]
	fb.fp.val = createParameter(val); //pin
 800a982:	78bb      	ldrb	r3, [r7, #2]
 800a984:	4618      	mov	r0, r3
 800a986:	f7fd f949 	bl	8007c1c <createParameter>
 800a98a:	4603      	mov	r3, r0
 800a98c:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode); //pin
 800a98e:	787b      	ldrb	r3, [r7, #1]
 800a990:	4618      	mov	r0, r3
 800a992:	f7fd f943 	bl	8007c1c <createParameter>
 800a996:	4603      	mov	r3, r0
 800a998:	61bb      	str	r3, [r7, #24]

	//output ports
	fb.fp.stat = createParameter(0);
 800a99a:	2000      	movs	r0, #0
 800a99c:	f7fd f93e 	bl	8007c1c <createParameter>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	61fb      	str	r3, [r7, #28]

	//internal values
	fb.fp.last_val = createParameter(-1);
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	f7fd f938 	bl	8007c1c <createParameter>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	623b      	str	r3, [r7, #32]



	fb.fb_index = writeToFBTable(fb_outputpin, fb.startParamIndex);
 800a9b0:	7b7b      	ldrb	r3, [r7, #13]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	4809      	ldr	r0, [pc, #36]	; (800a9dc <create_fb_outputpin+0x8c>)
 800a9b6:	f7fd f90d 	bl	8007bd4 <writeToFBTable>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	733b      	strb	r3, [r7, #12]
	return fb;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	461d      	mov	r5, r3
 800a9c2:	f107 040c 	add.w	r4, r7, #12
 800a9c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a9ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a9ce:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	3728      	adds	r7, #40	; 0x28
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	0800a881 	.word	0x0800a881

0800a9e0 <fb_rmhr_parser>:
#include "persistent_vars.h"
#include "modbus_slave.h"
#include <fb_rmhr.h>

//cyclic event fb
uint8_t fb_rmhr_parser(uint8_t* p){
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08a      	sub	sp, #40	; 0x28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	61f8      	str	r0, [r7, #28]
	uint8_t reg = p[0];
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t mode = p[1];
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	785b      	ldrb	r3, [r3, #1]
 800a9f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_rmhr(reg, mode);
 800a9f8:	463b      	mov	r3, r7
 800a9fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a9fe:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 f852 	bl	800aaac <create_fb_rmhr>
	return 1;
 800aa08:	2301      	movs	r3, #1
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3728      	adds	r7, #40	; 0x28
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <fb_rmhr>:

void fb_rmhr(uint8_t p){
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b088      	sub	sp, #32
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	4603      	mov	r3, r0
 800aa1a:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800aa1c:	f7fd f8d0 	bl	8007bc0 <get_paramAddrTable>
 800aa20:	61f8      	str	r0, [r7, #28]
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 800aa22:	79fb      	ldrb	r3, [r7, #7]
 800aa24:	69fa      	ldr	r2, [r7, #28]
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4413      	add	r3, r2
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	69fa      	ldr	r2, [r7, #28]
 800aa34:	4413      	add	r3, r2
 800aa36:	3304      	adds	r3, #4
 800aa38:	61bb      	str	r3, [r7, #24]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+1]];
 800aa3a:	79fb      	ldrb	r3, [r7, #7]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	69fa      	ldr	r2, [r7, #28]
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	4413      	add	r3, r2
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	69fa      	ldr	r2, [r7, #28]
 800aa4e:	4413      	add	r3, r2
 800aa50:	3304      	adds	r3, #4
 800aa52:	617b      	str	r3, [r7, #20]
	uint32_t* dout = &pAddrTable->value[pAddrTable->addr[p+2]];
 800aa54:	79fb      	ldrb	r3, [r7, #7]
 800aa56:	3302      	adds	r3, #2
 800aa58:	69fa      	ldr	r2, [r7, #28]
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4413      	add	r3, r2
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	69fa      	ldr	r2, [r7, #28]
 800aa68:	4413      	add	r3, r2
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	613b      	str	r3, [r7, #16]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 800aa6e:	79fb      	ldrb	r3, [r7, #7]
 800aa70:	3303      	adds	r3, #3
 800aa72:	69fa      	ldr	r2, [r7, #28]
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4413      	add	r3, r2
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	69fa      	ldr	r2, [r7, #28]
 800aa82:	4413      	add	r3, r2
 800aa84:	3304      	adds	r3, #4
 800aa86:	60fb      	str	r3, [r7, #12]

	uint16_t* modbus_holding_reg = get_Modbus_Buf_Holding_Registers_40001();
 800aa88:	f7fd fc12 	bl	80082b0 <get_Modbus_Buf_Holding_Registers_40001>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	60bb      	str	r3, [r7, #8]

	*dout = modbus_holding_reg[*reg];
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	005b      	lsls	r3, r3, #1
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	4413      	add	r3, r2
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	601a      	str	r2, [r3, #0]
}
 800aaa2:	bf00      	nop
 800aaa4:	3720      	adds	r7, #32
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
	...

0800aaac <create_fb_rmhr>:

type_fb_rmhr create_fb_rmhr(uint8_t reg, uint8_t mode){
 800aaac:	b5b0      	push	{r4, r5, r7, lr}
 800aaae:	b088      	sub	sp, #32
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	70fb      	strb	r3, [r7, #3]
 800aab8:	4613      	mov	r3, r2
 800aaba:	70bb      	strb	r3, [r7, #2]
	type_fb_rmhr fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800aabc:	f7fd f880 	bl	8007bc0 <get_paramAddrTable>
 800aac0:	61f8      	str	r0, [r7, #28]
	//uint8_t* p_modbus_slave_addr = get_MODBUS_SLAVE_ADDR();
	//if(addr > 1) *p_modbus_slave_addr = addr; //addr is set to 1 default, if something comes greater than 1, than new addr set to this new value

	fb.startParamIndex = pAddrTable->currentIndex;
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	727b      	strb	r3, [r7, #9]

	fb.fp.reg = createParameter(reg);
 800aac8:	78fb      	ldrb	r3, [r7, #3]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fd f8a6 	bl	8007c1c <createParameter>
 800aad0:	4603      	mov	r3, r0
 800aad2:	60fb      	str	r3, [r7, #12]
	fb.fp.mode = createParameter(mode);
 800aad4:	78bb      	ldrb	r3, [r7, #2]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fd f8a0 	bl	8007c1c <createParameter>
 800aadc:	4603      	mov	r3, r0
 800aade:	613b      	str	r3, [r7, #16]
	fb.fp.dout = createParameter(0);
 800aae0:	2000      	movs	r0, #0
 800aae2:	f7fd f89b 	bl	8007c1c <createParameter>
 800aae6:	4603      	mov	r3, r0
 800aae8:	617b      	str	r3, [r7, #20]
	fb.fp.stat = createParameter(0);
 800aaea:	2000      	movs	r0, #0
 800aaec:	f7fd f896 	bl	8007c1c <createParameter>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	61bb      	str	r3, [r7, #24]

	fb.fb_index = writeToFBTable(fb_rmhr, fb.startParamIndex);
 800aaf4:	7a7b      	ldrb	r3, [r7, #9]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	4808      	ldr	r0, [pc, #32]	; (800ab1c <create_fb_rmhr+0x70>)
 800aafa:	f7fd f86b 	bl	8007bd4 <writeToFBTable>
 800aafe:	4603      	mov	r3, r0
 800ab00:	723b      	strb	r3, [r7, #8]

	return fb;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	461d      	mov	r5, r3
 800ab06:	f107 0408 	add.w	r4, r7, #8
 800ab0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	602b      	str	r3, [r5, #0]
}
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	3720      	adds	r7, #32
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bdb0      	pop	{r4, r5, r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	0800aa13 	.word	0x0800aa13

0800ab20 <fb_step_parser>:
#define FB_STEP_ST_WAIT 0
#define FB_STEP_ST_ACTIVE 1
#define FB_STEP_ST_CHECK 2

//cyclic event fb
uint8_t fb_step_parser(uint8_t* p){
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08c      	sub	sp, #48	; 0x30
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	62f8      	str	r0, [r7, #44]	; 0x2c
	create_fb_step(p[0], p[1]);
 800ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2a:	7819      	ldrb	r1, [r3, #0]
 800ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2e:	3301      	adds	r3, #1
 800ab30:	781a      	ldrb	r2, [r3, #0]
 800ab32:	463b      	mov	r3, r7
 800ab34:	4618      	mov	r0, r3
 800ab36:	f000 f8ad 	bl	800ac94 <create_fb_step>
	return 1;
 800ab3a:	2301      	movs	r3, #1
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3730      	adds	r7, #48	; 0x30
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <fb_step>:

void fb_step(uint8_t p){
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b08c      	sub	sp, #48	; 0x30
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800ab4e:	f7fd f837 	bl	8007bc0 <get_paramAddrTable>
 800ab52:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t* tk_in1 = &pAddrTable->value[pAddrTable->addr[p]];
 800ab54:	79fb      	ldrb	r3, [r7, #7]
 800ab56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab66:	4413      	add	r3, r2
 800ab68:	3304      	adds	r3, #4
 800ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t* tk_in2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800ab6c:	79fb      	ldrb	r3, [r7, #7]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab80:	4413      	add	r3, r2
 800ab82:	3304      	adds	r3, #4
 800ab84:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t* tr_in = &pAddrTable->value[pAddrTable->addr[p+2]];
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	3302      	adds	r3, #2
 800ab8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab9a:	4413      	add	r3, r2
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	623b      	str	r3, [r7, #32]
	uint32_t* param = &pAddrTable->value[pAddrTable->addr[p+3]];
 800aba0:	79fb      	ldrb	r3, [r7, #7]
 800aba2:	3303      	adds	r3, #3
 800aba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	4413      	add	r3, r2
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abb4:	4413      	add	r3, r2
 800abb6:	3304      	adds	r3, #4
 800abb8:	61fb      	str	r3, [r7, #28]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+4]];
 800abba:	79fb      	ldrb	r3, [r7, #7]
 800abbc:	3304      	adds	r3, #4
 800abbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abce:	4413      	add	r3, r2
 800abd0:	3304      	adds	r3, #4
 800abd2:	61bb      	str	r3, [r7, #24]
	uint32_t* tk_out = &pAddrTable->value[pAddrTable->addr[p+5]];
 800abd4:	79fb      	ldrb	r3, [r7, #7]
 800abd6:	3305      	adds	r3, #5
 800abd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abe8:	4413      	add	r3, r2
 800abea:	3304      	adds	r3, #4
 800abec:	617b      	str	r3, [r7, #20]
	uint32_t* obv_out = &pAddrTable->value[pAddrTable->addr[p+6]];
 800abee:	79fb      	ldrb	r3, [r7, #7]
 800abf0:	3306      	adds	r3, #6
 800abf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac02:	4413      	add	r3, r2
 800ac04:	3304      	adds	r3, #4
 800ac06:	613b      	str	r3, [r7, #16]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+7]];
 800ac08:	79fb      	ldrb	r3, [r7, #7]
 800ac0a:	3307      	adds	r3, #7
 800ac0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac1c:	4413      	add	r3, r2
 800ac1e:	3304      	adds	r3, #4
 800ac20:	60fb      	str	r3, [r7, #12]

	//function block algorithm
	//function block algorithm
	switch(*state){
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d021      	beq.n	800ac6e <fb_step+0x12a>
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d82d      	bhi.n	800ac8a <fb_step+0x146>
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <fb_step+0xf4>
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d014      	beq.n	800ac60 <fb_step+0x11c>
			* state = FB_STEP_ST_WAIT; //switch to active state
		}
		break;

	}
}
 800ac36:	e028      	b.n	800ac8a <fb_step+0x146>
		* tk_out = 0;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	601a      	str	r2, [r3, #0]
		* obv_out = 0;
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	2200      	movs	r2, #0
 800ac42:	601a      	str	r2, [r3, #0]
		if(* tk_in1 > 0 | * tk_in2 > 0){
 800ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d018      	beq.n	800ac84 <fb_step+0x140>
			* obv_out = 1;
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	2201      	movs	r2, #1
 800ac56:	601a      	str	r2, [r3, #0]
			* state = FB_STEP_ST_ACTIVE; //switch to active state
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	601a      	str	r2, [r3, #0]
		break;
 800ac5e:	e011      	b.n	800ac84 <fb_step+0x140>
		* obv_out = 1;
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	2201      	movs	r2, #1
 800ac64:	601a      	str	r2, [r3, #0]
		* state = FB_STEP_ST_CHECK; //switch to active state
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2202      	movs	r2, #2
 800ac6a:	601a      	str	r2, [r3, #0]
		break;
 800ac6c:	e00d      	b.n	800ac8a <fb_step+0x146>
		if(* tr_in > 0){
 800ac6e:	6a3b      	ldr	r3, [r7, #32]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d008      	beq.n	800ac88 <fb_step+0x144>
			* tk_out = 1;
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	601a      	str	r2, [r3, #0]
			* state = FB_STEP_ST_WAIT; //switch to active state
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]
		break;
 800ac82:	e001      	b.n	800ac88 <fb_step+0x144>
		break;
 800ac84:	bf00      	nop
 800ac86:	e000      	b.n	800ac8a <fb_step+0x146>
		break;
 800ac88:	bf00      	nop
}
 800ac8a:	bf00      	nop
 800ac8c:	3730      	adds	r7, #48	; 0x30
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
	...

0800ac94 <create_fb_step>:

type_fb_step create_fb_step(uint8_t param, uint8_t mode){
 800ac94:	b5b0      	push	{r4, r5, r7, lr}
 800ac96:	b08c      	sub	sp, #48	; 0x30
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	70fb      	strb	r3, [r7, #3]
 800aca0:	4613      	mov	r3, r2
 800aca2:	70bb      	strb	r3, [r7, #2]
	type_fb_step fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800aca4:	f7fc ff8c 	bl	8007bc0 <get_paramAddrTable>
 800aca8:	62f8      	str	r0, [r7, #44]	; 0x2c

	fb.startParamIndex = pAddrTable->currentIndex;
 800acaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	727b      	strb	r3, [r7, #9]

	fb.fp.tk_in1 = createParameter(0);
 800acb0:	2000      	movs	r0, #0
 800acb2:	f7fc ffb3 	bl	8007c1c <createParameter>
 800acb6:	4603      	mov	r3, r0
 800acb8:	60fb      	str	r3, [r7, #12]
	fb.fp.tk_in2 = createParameter(0);
 800acba:	2000      	movs	r0, #0
 800acbc:	f7fc ffae 	bl	8007c1c <createParameter>
 800acc0:	4603      	mov	r3, r0
 800acc2:	613b      	str	r3, [r7, #16]
	fb.fp.tr_in = createParameter(0);
 800acc4:	2000      	movs	r0, #0
 800acc6:	f7fc ffa9 	bl	8007c1c <createParameter>
 800acca:	4603      	mov	r3, r0
 800accc:	617b      	str	r3, [r7, #20]
	fb.fp.param = createParameter(param);
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fc ffa3 	bl	8007c1c <createParameter>
 800acd6:	4603      	mov	r3, r0
 800acd8:	61bb      	str	r3, [r7, #24]
	fb.fp.mode = createParameter(mode);
 800acda:	78bb      	ldrb	r3, [r7, #2]
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fc ff9d 	bl	8007c1c <createParameter>
 800ace2:	4603      	mov	r3, r0
 800ace4:	61fb      	str	r3, [r7, #28]
	fb.fp.tk_out = createParameter(0);
 800ace6:	2000      	movs	r0, #0
 800ace8:	f7fc ff98 	bl	8007c1c <createParameter>
 800acec:	4603      	mov	r3, r0
 800acee:	623b      	str	r3, [r7, #32]
	fb.fp.obv_out = createParameter(0);
 800acf0:	2000      	movs	r0, #0
 800acf2:	f7fc ff93 	bl	8007c1c <createParameter>
 800acf6:	4603      	mov	r3, r0
 800acf8:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.state = createParameter(param); //first state will have token initially
 800acfa:	78fb      	ldrb	r3, [r7, #3]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fc ff8d 	bl	8007c1c <createParameter>
 800ad02:	4603      	mov	r3, r0
 800ad04:	62bb      	str	r3, [r7, #40]	; 0x28

	fb.fb_index = writeToFBTable(fb_step, fb.startParamIndex);
 800ad06:	7a7b      	ldrb	r3, [r7, #9]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	4809      	ldr	r0, [pc, #36]	; (800ad30 <create_fb_step+0x9c>)
 800ad0c:	f7fc ff62 	bl	8007bd4 <writeToFBTable>
 800ad10:	4603      	mov	r3, r0
 800ad12:	723b      	strb	r3, [r7, #8]

	return fb;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	461d      	mov	r5, r3
 800ad18:	f107 0408 	add.w	r4, r7, #8
 800ad1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	602b      	str	r3, [r5, #0]
}
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	3730      	adds	r7, #48	; 0x30
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bdb0      	pop	{r4, r5, r7, pc}
 800ad30:	0800ab45 	.word	0x0800ab45

0800ad34 <fb_timer_tp_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_timer_tp.h"

//cyclic event fb
uint8_t fb_timer_tp_parser(uint8_t* p){
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08c      	sub	sp, #48	; 0x30
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t period = (uint32_t) p[0] << 24 | p[1] << 16 | p[2] <<8 | p[3];
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	061b      	lsls	r3, r3, #24
 800ad42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad44:	3201      	adds	r2, #1
 800ad46:	7812      	ldrb	r2, [r2, #0]
 800ad48:	0412      	lsls	r2, r2, #16
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad4e:	3202      	adds	r2, #2
 800ad50:	7812      	ldrb	r2, [r2, #0]
 800ad52:	0212      	lsls	r2, r2, #8
 800ad54:	4313      	orrs	r3, r2
 800ad56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad58:	3203      	adds	r2, #3
 800ad5a:	7812      	ldrb	r2, [r2, #0]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	create_fb_timer_tp(period);
 800ad60:	463b      	mov	r3, r7
 800ad62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad64:	4618      	mov	r0, r3
 800ad66:	f000 f8c9 	bl	800aefc <create_fb_timer_tp>
	return 1;
 800ad6a:	2301      	movs	r3, #1
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3730      	adds	r7, #48	; 0x30
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <fb_timer_tp>:

void fb_timer_tp(uint8_t p){
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08c      	sub	sp, #48	; 0x30
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800ad7e:	f7fc ff1f 	bl	8007bc0 <get_paramAddrTable>
 800ad82:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t delta = 0, tick = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad88:	2300      	movs	r3, #0
 800ad8a:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t* et = &pAddrTable->value[pAddrTable->addr[p]];
 800ad8c:	79fb      	ldrb	r3, [r7, #7]
 800ad8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad9e:	4413      	add	r3, r2
 800ada0:	3304      	adds	r3, #4
 800ada2:	623b      	str	r3, [r7, #32]
	uint32_t* in = &pAddrTable->value[pAddrTable->addr[p+1]];
 800ada4:	79fb      	ldrb	r3, [r7, #7]
 800ada6:	3301      	adds	r3, #1
 800ada8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	4413      	add	r3, r2
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adb8:	4413      	add	r3, r2
 800adba:	3304      	adds	r3, #4
 800adbc:	61fb      	str	r3, [r7, #28]
	uint32_t* pt = &pAddrTable->value[pAddrTable->addr[p+2]];
 800adbe:	79fb      	ldrb	r3, [r7, #7]
 800adc0:	3302      	adds	r3, #2
 800adc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800add2:	4413      	add	r3, r2
 800add4:	3304      	adds	r3, #4
 800add6:	61bb      	str	r3, [r7, #24]
	uint32_t* q = &pAddrTable->value[pAddrTable->addr[p+3]];
 800add8:	79fb      	ldrb	r3, [r7, #7]
 800adda:	3303      	adds	r3, #3
 800addc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	4413      	add	r3, r2
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adec:	4413      	add	r3, r2
 800adee:	3304      	adds	r3, #4
 800adf0:	617b      	str	r3, [r7, #20]
	uint32_t* inold = &pAddrTable->value[pAddrTable->addr[p+4]];
 800adf2:	79fb      	ldrb	r3, [r7, #7]
 800adf4:	3304      	adds	r3, #4
 800adf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae06:	4413      	add	r3, r2
 800ae08:	3304      	adds	r3, #4
 800ae0a:	613b      	str	r3, [r7, #16]
	uint32_t* counter = &pAddrTable->value[pAddrTable->addr[p+5]];
 800ae0c:	79fb      	ldrb	r3, [r7, #7]
 800ae0e:	3305      	adds	r3, #5
 800ae10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	4413      	add	r3, r2
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae20:	4413      	add	r3, r2
 800ae22:	3304      	adds	r3, #4
 800ae24:	60fb      	str	r3, [r7, #12]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+6]];
 800ae26:	79fb      	ldrb	r3, [r7, #7]
 800ae28:	3306      	adds	r3, #6
 800ae2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae3a:	4413      	add	r3, r2
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	60bb      	str	r3, [r7, #8]

	tick = HAL_GetTick();
 800ae40:	f7f7 f814 	bl	8001e6c <HAL_GetTick>
 800ae44:	4603      	mov	r3, r0
 800ae46:	627b      	str	r3, [r7, #36]	; 0x24

	switch(*state){
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <fb_timer_tp+0xe2>
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d02e      	beq.n	800aeb2 <fb_timer_tp+0x13e>
		if(delta > *pt){
			*state = 0;
		}
		break;
	}
}
 800ae54:	e04d      	b.n	800aef2 <fb_timer_tp+0x17e>
		*q = 0;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]
		if(*in == 0) {
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d106      	bne.n	800ae72 <fb_timer_tp+0xfe>
			*et = 0;
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	2200      	movs	r2, #0
 800ae68:	601a      	str	r2, [r3, #0]
			*inold = 0;
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	601a      	str	r2, [r3, #0]
		break;
 800ae70:	e03c      	b.n	800aeec <fb_timer_tp+0x178>
		else if(*inold == 0 & *in==1) //0->1 transition
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	bf0c      	ite	eq
 800ae7a:	2301      	moveq	r3, #1
 800ae7c:	2300      	movne	r3, #0
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	bf0c      	ite	eq
 800ae88:	2301      	moveq	r3, #1
 800ae8a:	2300      	movne	r3, #0
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	4013      	ands	r3, r2
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d02a      	beq.n	800aeec <fb_timer_tp+0x178>
			*inold = *in;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	601a      	str	r2, [r3, #0]
			*counter = tick;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aea2:	601a      	str	r2, [r3, #0]
			*q = 1;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	2201      	movs	r2, #1
 800aea8:	601a      	str	r2, [r3, #0]
			*state = 1; //active state
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	2201      	movs	r2, #1
 800aeae:	601a      	str	r2, [r3, #0]
		break;
 800aeb0:	e01c      	b.n	800aeec <fb_timer_tp+0x178>
		if(tick >= *counter){
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d305      	bcc.n	800aec8 <fb_timer_tp+0x154>
			delta = tick - *counter;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aec6:	e005      	b.n	800aed4 <fb_timer_tp+0x160>
			delta = tick + ((0xFFFFFFFF) - *counter);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	3b01      	subs	r3, #1
 800aed2:	62fb      	str	r3, [r7, #44]	; 0x2c
		*et = delta;
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aed8:	601a      	str	r2, [r3, #0]
		if(delta > *pt){
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d905      	bls.n	800aef0 <fb_timer_tp+0x17c>
			*state = 0;
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2200      	movs	r2, #0
 800aee8:	601a      	str	r2, [r3, #0]
		break;
 800aeea:	e001      	b.n	800aef0 <fb_timer_tp+0x17c>
		break;
 800aeec:	bf00      	nop
 800aeee:	e000      	b.n	800aef2 <fb_timer_tp+0x17e>
		break;
 800aef0:	bf00      	nop
}
 800aef2:	bf00      	nop
 800aef4:	3730      	adds	r7, #48	; 0x30
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
	...

0800aefc <create_fb_timer_tp>:

type_fb_timer_tp create_fb_timer_tp(uint32_t pt){
 800aefc:	b5b0      	push	{r4, r5, r7, lr}
 800aefe:	b08c      	sub	sp, #48	; 0x30
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
	type_fb_timer_tp fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800af06:	f7fc fe5b 	bl	8007bc0 <get_paramAddrTable>
 800af0a:	62f8      	str	r0, [r7, #44]	; 0x2c

	fb.startParamIndex = pAddrTable->currentIndex;
 800af0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	737b      	strb	r3, [r7, #13]

	fb.fp.et = createParameter(0);
 800af12:	2000      	movs	r0, #0
 800af14:	f7fc fe82 	bl	8007c1c <createParameter>
 800af18:	4603      	mov	r3, r0
 800af1a:	61fb      	str	r3, [r7, #28]
	fb.fp.in = createParameter(0);
 800af1c:	2000      	movs	r0, #0
 800af1e:	f7fc fe7d 	bl	8007c1c <createParameter>
 800af22:	4603      	mov	r3, r0
 800af24:	613b      	str	r3, [r7, #16]
	fb.fp.pt = createParameter(pt);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fc fe77 	bl	8007c1c <createParameter>
 800af2e:	4603      	mov	r3, r0
 800af30:	617b      	str	r3, [r7, #20]
	fb.fp.q = createParameter(0);
 800af32:	2000      	movs	r0, #0
 800af34:	f7fc fe72 	bl	8007c1c <createParameter>
 800af38:	4603      	mov	r3, r0
 800af3a:	61bb      	str	r3, [r7, #24]
	fb.fp.inold = createParameter(0);
 800af3c:	2000      	movs	r0, #0
 800af3e:	f7fc fe6d 	bl	8007c1c <createParameter>
 800af42:	4603      	mov	r3, r0
 800af44:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.counter = createParameter(0);
 800af46:	2000      	movs	r0, #0
 800af48:	f7fc fe68 	bl	8007c1c <createParameter>
 800af4c:	4603      	mov	r3, r0
 800af4e:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.state = createParameter(0);
 800af50:	2000      	movs	r0, #0
 800af52:	f7fc fe63 	bl	8007c1c <createParameter>
 800af56:	4603      	mov	r3, r0
 800af58:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_timer_tp, fb.startParamIndex);
 800af5a:	7b7b      	ldrb	r3, [r7, #13]
 800af5c:	4619      	mov	r1, r3
 800af5e:	4809      	ldr	r0, [pc, #36]	; (800af84 <create_fb_timer_tp+0x88>)
 800af60:	f7fc fe38 	bl	8007bd4 <writeToFBTable>
 800af64:	4603      	mov	r3, r0
 800af66:	733b      	strb	r3, [r7, #12]

	return fb;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	461d      	mov	r5, r3
 800af6c:	f107 040c 	add.w	r4, r7, #12
 800af70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800af78:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	3730      	adds	r7, #48	; 0x30
 800af80:	46bd      	mov	sp, r7
 800af82:	bdb0      	pop	{r4, r5, r7, pc}
 800af84:	0800ad75 	.word	0x0800ad75

0800af88 <fb_wmhr_parser>:
#include "persistent_vars.h"
#include "modbus_slave.h"
#include <fb_wmhr.h>

//cyclic event fb
uint8_t fb_wmhr_parser(uint8_t* p){
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08c      	sub	sp, #48	; 0x30
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t reg = p[0];
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t mode = p[1];
 800af98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9a:	785b      	ldrb	r3, [r3, #1]
 800af9c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	create_fb_wmhr(reg, mode);
 800afa0:	463b      	mov	r3, r7
 800afa2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800afa6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 f8a8 	bl	800b100 <create_fb_wmhr>
	return 1;
 800afb0:	2301      	movs	r3, #1
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3730      	adds	r7, #48	; 0x30
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <fb_wmhr>:

void fb_wmhr(uint8_t p){
 800afba:	b580      	push	{r7, lr}
 800afbc:	b08a      	sub	sp, #40	; 0x28
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	4603      	mov	r3, r0
 800afc2:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800afc4:	f7fc fdfc 	bl	8007bc0 <get_paramAddrTable>
 800afc8:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 800afca:	79fb      	ldrb	r3, [r7, #7]
 800afcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afdc:	4413      	add	r3, r2
 800afde:	3304      	adds	r3, #4
 800afe0:	623b      	str	r3, [r7, #32]
	uint32_t* din = &pAddrTable->value[pAddrTable->addr[p+1]];
 800afe2:	79fb      	ldrb	r3, [r7, #7]
 800afe4:	3301      	adds	r3, #1
 800afe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	4413      	add	r3, r2
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aff6:	4413      	add	r3, r2
 800aff8:	3304      	adds	r3, #4
 800affa:	61fb      	str	r3, [r7, #28]
	uint32_t* wren = &pAddrTable->value[pAddrTable->addr[p+2]];
 800affc:	79fb      	ldrb	r3, [r7, #7]
 800affe:	3302      	adds	r3, #2
 800b000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	4413      	add	r3, r2
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b010:	4413      	add	r3, r2
 800b012:	3304      	adds	r3, #4
 800b014:	61bb      	str	r3, [r7, #24]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+3]];
 800b016:	79fb      	ldrb	r3, [r7, #7]
 800b018:	3303      	adds	r3, #3
 800b01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b02a:	4413      	add	r3, r2
 800b02c:	3304      	adds	r3, #4
 800b02e:	617b      	str	r3, [r7, #20]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 800b030:	79fb      	ldrb	r3, [r7, #7]
 800b032:	3304      	adds	r3, #4
 800b034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b044:	4413      	add	r3, r2
 800b046:	3304      	adds	r3, #4
 800b048:	613b      	str	r3, [r7, #16]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+5]];
 800b04a:	79fb      	ldrb	r3, [r7, #7]
 800b04c:	3305      	adds	r3, #5
 800b04e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b05e:	4413      	add	r3, r2
 800b060:	3304      	adds	r3, #4
 800b062:	60fb      	str	r3, [r7, #12]

	uint16_t* modbus_holding_reg = get_Modbus_Buf_Holding_Registers_40001();
 800b064:	f7fd f924 	bl	80082b0 <get_Modbus_Buf_Holding_Registers_40001>
 800b068:	4603      	mov	r3, r0
 800b06a:	60bb      	str	r3, [r7, #8]

	//detech rising edge of wren and then write to register
	switch(*state){
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b02      	cmp	r3, #2
 800b072:	d016      	beq.n	800b0a2 <fb_wmhr+0xe8>
 800b074:	2b02      	cmp	r3, #2
 800b076:	d835      	bhi.n	800b0e4 <fb_wmhr+0x12a>
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <fb_wmhr+0xc8>
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d008      	beq.n	800b092 <fb_wmhr+0xd8>
 800b080:	e030      	b.n	800b0e4 <fb_wmhr+0x12a>
		case 0:
			if(*wren == 0) *state = 1;
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d130      	bne.n	800b0ec <fb_wmhr+0x132>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2201      	movs	r2, #1
 800b08e:	601a      	str	r2, [r3, #0]
			break;
 800b090:	e02c      	b.n	800b0ec <fb_wmhr+0x132>
		case 1:
			if(*wren == 1) *state = 2;
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d12a      	bne.n	800b0f0 <fb_wmhr+0x136>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2202      	movs	r2, #2
 800b09e:	601a      	str	r2, [r3, #0]
			break;
 800b0a0:	e026      	b.n	800b0f0 <fb_wmhr+0x136>

		case 2:
			//write to register
			modbus_holding_reg[*reg] = *din;
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	6819      	ldr	r1, [r3, #0]
 800b0a6:	6a3b      	ldr	r3, [r7, #32]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	005b      	lsls	r3, r3, #1
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	b28a      	uxth	r2, r1
 800b0b2:	801a      	strh	r2, [r3, #0]
			*state = 0;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	601a      	str	r2, [r3, #0]
			//record to flash
			if(*reg > 7) {
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b07      	cmp	r3, #7
 800b0c0:	d918      	bls.n	800b0f4 <fb_wmhr+0x13a>
				Record_To_Modbus_GPD(*reg-8, modbus_holding_reg[*reg]);
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	3b08      	subs	r3, #8
 800b0ca:	b2d8      	uxtb	r0, r3
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	005b      	lsls	r3, r3, #1
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	4619      	mov	r1, r3
 800b0da:	f7fc fee7 	bl	8007eac <Record_To_Modbus_GPD>
				write_persistent_data_structure();
 800b0de:	f7fc fed9 	bl	8007e94 <write_persistent_data_structure>
			}
			break;
 800b0e2:	e007      	b.n	800b0f4 <fb_wmhr+0x13a>
		default:
			*state = 0;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	601a      	str	r2, [r3, #0]
	}
}
 800b0ea:	e004      	b.n	800b0f6 <fb_wmhr+0x13c>
			break;
 800b0ec:	bf00      	nop
 800b0ee:	e002      	b.n	800b0f6 <fb_wmhr+0x13c>
			break;
 800b0f0:	bf00      	nop
 800b0f2:	e000      	b.n	800b0f6 <fb_wmhr+0x13c>
			break;
 800b0f4:	bf00      	nop
}
 800b0f6:	bf00      	nop
 800b0f8:	3728      	adds	r7, #40	; 0x28
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
	...

0800b100 <create_fb_wmhr>:

type_fb_wmhr create_fb_wmhr(uint8_t reg, uint8_t mode){
 800b100:	b5b0      	push	{r4, r5, r7, lr}
 800b102:	b08a      	sub	sp, #40	; 0x28
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	70fb      	strb	r3, [r7, #3]
 800b10c:	4613      	mov	r3, r2
 800b10e:	70bb      	strb	r3, [r7, #2]
	type_fb_wmhr fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800b110:	f7fc fd56 	bl	8007bc0 <get_paramAddrTable>
 800b114:	6278      	str	r0, [r7, #36]	; 0x24
	//uint8_t* p_modbus_slave_addr = get_MODBUS_SLAVE_ADDR();
	//if(addr > 1) *p_modbus_slave_addr = addr; //addr is set to 1 default, if something comes greater than 1, than new addr set to this new value

	fb.startParamIndex = pAddrTable->currentIndex;
 800b116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	727b      	strb	r3, [r7, #9]

	fb.fp.reg = createParameter(reg);
 800b11c:	78fb      	ldrb	r3, [r7, #3]
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fc fd7c 	bl	8007c1c <createParameter>
 800b124:	4603      	mov	r3, r0
 800b126:	60fb      	str	r3, [r7, #12]
	fb.fp.din = createParameter(0);
 800b128:	2000      	movs	r0, #0
 800b12a:	f7fc fd77 	bl	8007c1c <createParameter>
 800b12e:	4603      	mov	r3, r0
 800b130:	613b      	str	r3, [r7, #16]
	fb.fp.wren = createParameter(0);
 800b132:	2000      	movs	r0, #0
 800b134:	f7fc fd72 	bl	8007c1c <createParameter>
 800b138:	4603      	mov	r3, r0
 800b13a:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode);
 800b13c:	78bb      	ldrb	r3, [r7, #2]
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fc fd6c 	bl	8007c1c <createParameter>
 800b144:	4603      	mov	r3, r0
 800b146:	61bb      	str	r3, [r7, #24]
	fb.fp.stat = createParameter(0);
 800b148:	2000      	movs	r0, #0
 800b14a:	f7fc fd67 	bl	8007c1c <createParameter>
 800b14e:	4603      	mov	r3, r0
 800b150:	61fb      	str	r3, [r7, #28]

	//internal
	fb.fp.state = createParameter(0);
 800b152:	2000      	movs	r0, #0
 800b154:	f7fc fd62 	bl	8007c1c <createParameter>
 800b158:	4603      	mov	r3, r0
 800b15a:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_wmhr, fb.startParamIndex);
 800b15c:	7a7b      	ldrb	r3, [r7, #9]
 800b15e:	4619      	mov	r1, r3
 800b160:	4809      	ldr	r0, [pc, #36]	; (800b188 <create_fb_wmhr+0x88>)
 800b162:	f7fc fd37 	bl	8007bd4 <writeToFBTable>
 800b166:	4603      	mov	r3, r0
 800b168:	723b      	strb	r3, [r7, #8]

	return fb;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	461d      	mov	r5, r3
 800b16e:	f107 0408 	add.w	r4, r7, #8
 800b172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b176:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800b17a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	3728      	adds	r7, #40	; 0x28
 800b182:	46bd      	mov	sp, r7
 800b184:	bdb0      	pop	{r4, r5, r7, pc}
 800b186:	bf00      	nop
 800b188:	0800afbb 	.word	0x0800afbb

0800b18c <__libc_init_array>:
 800b18c:	b570      	push	{r4, r5, r6, lr}
 800b18e:	4d0d      	ldr	r5, [pc, #52]	; (800b1c4 <__libc_init_array+0x38>)
 800b190:	4c0d      	ldr	r4, [pc, #52]	; (800b1c8 <__libc_init_array+0x3c>)
 800b192:	1b64      	subs	r4, r4, r5
 800b194:	10a4      	asrs	r4, r4, #2
 800b196:	2600      	movs	r6, #0
 800b198:	42a6      	cmp	r6, r4
 800b19a:	d109      	bne.n	800b1b0 <__libc_init_array+0x24>
 800b19c:	4d0b      	ldr	r5, [pc, #44]	; (800b1cc <__libc_init_array+0x40>)
 800b19e:	4c0c      	ldr	r4, [pc, #48]	; (800b1d0 <__libc_init_array+0x44>)
 800b1a0:	f000 f88a 	bl	800b2b8 <_init>
 800b1a4:	1b64      	subs	r4, r4, r5
 800b1a6:	10a4      	asrs	r4, r4, #2
 800b1a8:	2600      	movs	r6, #0
 800b1aa:	42a6      	cmp	r6, r4
 800b1ac:	d105      	bne.n	800b1ba <__libc_init_array+0x2e>
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}
 800b1b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1b4:	4798      	blx	r3
 800b1b6:	3601      	adds	r6, #1
 800b1b8:	e7ee      	b.n	800b198 <__libc_init_array+0xc>
 800b1ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1be:	4798      	blx	r3
 800b1c0:	3601      	adds	r6, #1
 800b1c2:	e7f2      	b.n	800b1aa <__libc_init_array+0x1e>
 800b1c4:	0800bd28 	.word	0x0800bd28
 800b1c8:	0800bd28 	.word	0x0800bd28
 800b1cc:	0800bd28 	.word	0x0800bd28
 800b1d0:	0800bd2c 	.word	0x0800bd2c

0800b1d4 <__itoa>:
 800b1d4:	1e93      	subs	r3, r2, #2
 800b1d6:	2b22      	cmp	r3, #34	; 0x22
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	460c      	mov	r4, r1
 800b1dc:	d904      	bls.n	800b1e8 <__itoa+0x14>
 800b1de:	2300      	movs	r3, #0
 800b1e0:	700b      	strb	r3, [r1, #0]
 800b1e2:	461c      	mov	r4, r3
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	bd10      	pop	{r4, pc}
 800b1e8:	2a0a      	cmp	r2, #10
 800b1ea:	d109      	bne.n	800b200 <__itoa+0x2c>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	da07      	bge.n	800b200 <__itoa+0x2c>
 800b1f0:	232d      	movs	r3, #45	; 0x2d
 800b1f2:	700b      	strb	r3, [r1, #0]
 800b1f4:	4240      	negs	r0, r0
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	4421      	add	r1, r4
 800b1fa:	f000 f81b 	bl	800b234 <__utoa>
 800b1fe:	e7f1      	b.n	800b1e4 <__itoa+0x10>
 800b200:	2100      	movs	r1, #0
 800b202:	e7f9      	b.n	800b1f8 <__itoa+0x24>

0800b204 <itoa>:
 800b204:	f7ff bfe6 	b.w	800b1d4 <__itoa>

0800b208 <memcpy>:
 800b208:	440a      	add	r2, r1
 800b20a:	4291      	cmp	r1, r2
 800b20c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b210:	d100      	bne.n	800b214 <memcpy+0xc>
 800b212:	4770      	bx	lr
 800b214:	b510      	push	{r4, lr}
 800b216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b21a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b21e:	4291      	cmp	r1, r2
 800b220:	d1f9      	bne.n	800b216 <memcpy+0xe>
 800b222:	bd10      	pop	{r4, pc}

0800b224 <memset>:
 800b224:	4402      	add	r2, r0
 800b226:	4603      	mov	r3, r0
 800b228:	4293      	cmp	r3, r2
 800b22a:	d100      	bne.n	800b22e <memset+0xa>
 800b22c:	4770      	bx	lr
 800b22e:	f803 1b01 	strb.w	r1, [r3], #1
 800b232:	e7f9      	b.n	800b228 <memset+0x4>

0800b234 <__utoa>:
 800b234:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b236:	4c1f      	ldr	r4, [pc, #124]	; (800b2b4 <__utoa+0x80>)
 800b238:	b08b      	sub	sp, #44	; 0x2c
 800b23a:	4605      	mov	r5, r0
 800b23c:	460b      	mov	r3, r1
 800b23e:	466e      	mov	r6, sp
 800b240:	f104 0c20 	add.w	ip, r4, #32
 800b244:	6820      	ldr	r0, [r4, #0]
 800b246:	6861      	ldr	r1, [r4, #4]
 800b248:	4637      	mov	r7, r6
 800b24a:	c703      	stmia	r7!, {r0, r1}
 800b24c:	3408      	adds	r4, #8
 800b24e:	4564      	cmp	r4, ip
 800b250:	463e      	mov	r6, r7
 800b252:	d1f7      	bne.n	800b244 <__utoa+0x10>
 800b254:	7921      	ldrb	r1, [r4, #4]
 800b256:	7139      	strb	r1, [r7, #4]
 800b258:	1e91      	subs	r1, r2, #2
 800b25a:	6820      	ldr	r0, [r4, #0]
 800b25c:	6038      	str	r0, [r7, #0]
 800b25e:	2922      	cmp	r1, #34	; 0x22
 800b260:	f04f 0100 	mov.w	r1, #0
 800b264:	d904      	bls.n	800b270 <__utoa+0x3c>
 800b266:	7019      	strb	r1, [r3, #0]
 800b268:	460b      	mov	r3, r1
 800b26a:	4618      	mov	r0, r3
 800b26c:	b00b      	add	sp, #44	; 0x2c
 800b26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b270:	1e58      	subs	r0, r3, #1
 800b272:	4684      	mov	ip, r0
 800b274:	fbb5 f7f2 	udiv	r7, r5, r2
 800b278:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b27c:	fb02 5617 	mls	r6, r2, r7, r5
 800b280:	4476      	add	r6, lr
 800b282:	460c      	mov	r4, r1
 800b284:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b288:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b28c:	462e      	mov	r6, r5
 800b28e:	42b2      	cmp	r2, r6
 800b290:	f101 0101 	add.w	r1, r1, #1
 800b294:	463d      	mov	r5, r7
 800b296:	d9ed      	bls.n	800b274 <__utoa+0x40>
 800b298:	2200      	movs	r2, #0
 800b29a:	545a      	strb	r2, [r3, r1]
 800b29c:	1919      	adds	r1, r3, r4
 800b29e:	1aa5      	subs	r5, r4, r2
 800b2a0:	42aa      	cmp	r2, r5
 800b2a2:	dae2      	bge.n	800b26a <__utoa+0x36>
 800b2a4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b2a8:	780e      	ldrb	r6, [r1, #0]
 800b2aa:	7006      	strb	r6, [r0, #0]
 800b2ac:	3201      	adds	r2, #1
 800b2ae:	f801 5901 	strb.w	r5, [r1], #-1
 800b2b2:	e7f4      	b.n	800b29e <__utoa+0x6a>
 800b2b4:	0800bcf8 	.word	0x0800bcf8

0800b2b8 <_init>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	bf00      	nop
 800b2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2be:	bc08      	pop	{r3}
 800b2c0:	469e      	mov	lr, r3
 800b2c2:	4770      	bx	lr

0800b2c4 <_fini>:
 800b2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c6:	bf00      	nop
 800b2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ca:	bc08      	pop	{r3}
 800b2cc:	469e      	mov	lr, r3
 800b2ce:	4770      	bx	lr
