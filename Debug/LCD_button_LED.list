
LCD_Button_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008800  08008800  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008800  08008800  00018800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008808  08008808  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008808  08008808  00018808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800880c  0800880c  0001880c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  20000090  080088a0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a34  080088a0  00020a34  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6d3  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059a0  00000000  00000000  0003b791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  00041138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a30  00000000  00000000  000429b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028625  00000000  00000000  000443e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001976b  00000000  00000000  0006ca05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100d01  00000000  00000000  00086170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009c  00000000  00000000  00186e71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be8  00000000  00000000  00186f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000546f  00000000  00000000  0018caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000090 	.word	0x20000090
 8000214:	00000000 	.word	0x00000000
 8000218:	080085c8 	.word	0x080085c8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000094 	.word	0x20000094
 8000234:	080085c8 	.word	0x080085c8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <initiate_input_channels>:
static Digital_Channel outputChannel[3];

#define ANALOG_INPUT_CH_COUNT 2
static Analog_Input_Channel analog_input_channel[ANALOG_INPUT_CH_COUNT];

void initiate_input_channels(){
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	inputChannel[0].port = GPIOF;
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <initiate_input_channels+0x40>)
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <initiate_input_channels+0x44>)
 8000538:	601a      	str	r2, [r3, #0]
	inputChannel[0].pin = GPIO_PIN_3; //EXT3
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <initiate_input_channels+0x40>)
 800053c:	2208      	movs	r2, #8
 800053e:	605a      	str	r2, [r3, #4]

	inputChannel[1].port = GPIOF;
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <initiate_input_channels+0x40>)
 8000542:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <initiate_input_channels+0x44>)
 8000544:	609a      	str	r2, [r3, #8]
	inputChannel[1].pin = GPIO_PIN_5; //EXT5
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <initiate_input_channels+0x40>)
 8000548:	2220      	movs	r2, #32
 800054a:	60da      	str	r2, [r3, #12]

	inputChannel[2].port = GPIOF;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <initiate_input_channels+0x40>)
 800054e:	4a09      	ldr	r2, [pc, #36]	; (8000574 <initiate_input_channels+0x44>)
 8000550:	611a      	str	r2, [r3, #16]
	inputChannel[2].pin = GPIO_PIN_10; //EXT10
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <initiate_input_channels+0x40>)
 8000554:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000558:	615a      	str	r2, [r3, #20]

	inputChannel[3].port = GPIOA; //Joystick button
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <initiate_input_channels+0x40>)
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <initiate_input_channels+0x48>)
 800055e:	619a      	str	r2, [r3, #24]
	inputChannel[3].pin = GPIO_PIN_6; //EXT10
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <initiate_input_channels+0x40>)
 8000562:	2240      	movs	r2, #64	; 0x40
 8000564:	61da      	str	r2, [r3, #28]
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	200000ac 	.word	0x200000ac
 8000574:	40021400 	.word	0x40021400
 8000578:	40020000 	.word	0x40020000

0800057c <initiate_output_channels>:

void initiate_output_channels(){
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	outputChannel[0].port = GPIOF;
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <initiate_output_channels+0x34>)
 8000582:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <initiate_output_channels+0x38>)
 8000584:	601a      	str	r2, [r3, #0]
	outputChannel[0].pin = GPIO_PIN_0;
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <initiate_output_channels+0x34>)
 8000588:	2201      	movs	r2, #1
 800058a:	605a      	str	r2, [r3, #4]

	outputChannel[1].port = GPIOF;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <initiate_output_channels+0x34>)
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <initiate_output_channels+0x38>)
 8000590:	609a      	str	r2, [r3, #8]
	outputChannel[1].pin = GPIO_PIN_2;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <initiate_output_channels+0x34>)
 8000594:	2204      	movs	r2, #4
 8000596:	60da      	str	r2, [r3, #12]

	outputChannel[2].port = GPIOF;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <initiate_output_channels+0x34>)
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <initiate_output_channels+0x38>)
 800059c:	611a      	str	r2, [r3, #16]
	outputChannel[2].pin = GPIO_PIN_13;
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <initiate_output_channels+0x34>)
 80005a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a4:	615a      	str	r2, [r3, #20]
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	200000cc 	.word	0x200000cc
 80005b4:	40021400 	.word	0x40021400

080005b8 <initate_analog_channels>:

void initate_analog_channels(){
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	analog_input_channel[0].ai = &adc_info;
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <initate_analog_channels+0x28>)
 80005be:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <initate_analog_channels+0x2c>)
 80005c0:	605a      	str	r2, [r3, #4]
	analog_input_channel[0].data = 0;
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <initate_analog_channels+0x28>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	801a      	strh	r2, [r3, #0]

	analog_input_channel[1].ai = &adc_info;
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <initate_analog_channels+0x28>)
 80005ca:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <initate_analog_channels+0x2c>)
 80005cc:	60da      	str	r2, [r3, #12]
	analog_input_channel[1].data = 0;
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <initate_analog_channels+0x28>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	811a      	strh	r2, [r3, #8]

}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200000e4 	.word	0x200000e4
 80005e4:	20000000 	.word	0x20000000

080005e8 <hal_gpio_write_pin>:

uint8_t uart_rx_data;

//Leds are connected to: PF0-PF2-PF13
//Please write down GPIO output function in your hardware
void hal_gpio_write_pin(uint16_t chNum, uint8_t value){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	80fb      	strh	r3, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(outputChannel[chNum].port, outputChannel[chNum].pin, value);
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <hal_gpio_write_pin+0x38>)
 80005fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000600:	4618      	mov	r0, r3
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <hal_gpio_write_pin+0x38>)
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	4413      	add	r3, r2
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	b29b      	uxth	r3, r3
 800060e:	797a      	ldrb	r2, [r7, #5]
 8000610:	4619      	mov	r1, r3
 8000612:	f002 ffa7 	bl	8003564 <HAL_GPIO_WritePin>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000cc 	.word	0x200000cc

08000624 <hal_gpio_read_pin>:

uint8_t  hal_gpio_read_pin(uint32_t chNum){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	//return values >= 2, depicts error
	return HAL_GPIO_ReadPin(inputChannel[chNum].port, inputChannel[chNum].pin);
 800062c:	4a09      	ldr	r2, [pc, #36]	; (8000654 <hal_gpio_read_pin+0x30>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000634:	4618      	mov	r0, r3
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <hal_gpio_read_pin+0x30>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	00db      	lsls	r3, r3, #3
 800063c:	4413      	add	r3, r2
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	b29b      	uxth	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	f002 ff76 	bl	8003534 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0

}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000ac 	.word	0x200000ac

08000658 <hal_read_analog_ch>:

//------------------ADC readings with DMA---------------------------------------
uint32_t counter_hal_dma = 0, counter_dma_callback = 0;

uint32_t hal_read_analog_ch(uint32_t chNum){
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	Analog_Input_Channel* ch = &analog_input_channel[chNum];
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	4a11      	ldr	r2, [pc, #68]	; (80006ac <hal_read_analog_ch+0x54>)
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
	ADC_Info* ai = ch->ai;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60bb      	str	r3, [r7, #8]
	if(ai->ready_flag == 1){ //check for the conv finish
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d111      	bne.n	800069c <hal_read_analog_ch+0x44>
		//Start DMA controlled ADC single convertion
		//this adc is working on two channels IN3 and IN10
		//so there will be two channel value after one conversion
		ai->ready_flag = 0; //disable the flag to notify there is an ongoing process
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	2200      	movs	r2, #0
 800067c:	711a      	strb	r2, [r3, #4]
		HAL_ADC_Start_DMA(ai->adc, (uint32_t*) &ai->data, ai->ch_count);
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1d99      	adds	r1, r3, #6
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800068c:	461a      	mov	r2, r3
 800068e:	f001 f9e5 	bl	8001a5c <HAL_ADC_Start_DMA>
		counter_hal_dma++;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <hal_read_analog_ch+0x58>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <hal_read_analog_ch+0x58>)
 800069a:	6013      	str	r3, [r2, #0]
	}

	return analog_input_channel[chNum].data;
 800069c:	4a03      	ldr	r2, [pc, #12]	; (80006ac <hal_read_analog_ch+0x54>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000e4 	.word	0x200000e4
 80006b0:	200000f4 	.word	0x200000f4

080006b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	Analog_Input_Channel* ch;
	ADC_Info* ai;
	for(uint8_t i=0;i<ANALOG_INPUT_CH_COUNT;i++){
 80006bc:	2300      	movs	r3, #0
 80006be:	75fb      	strb	r3, [r7, #23]
 80006c0:	e01e      	b.n	8000700 <HAL_ADC_ConvCpltCallback+0x4c>
		ch = &analog_input_channel[i];
 80006c2:	7dfb      	ldrb	r3, [r7, #23]
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <HAL_ADC_ConvCpltCallback+0x60>)
 80006c8:	4413      	add	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
		ai = ch->ai;
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	60fb      	str	r3, [r7, #12]
		if(hadc == ai->adc){
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d10e      	bne.n	80006fa <HAL_ADC_ConvCpltCallback+0x46>
			ch->data = ai->data[i];
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	88da      	ldrh	r2, [r3, #6]
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	801a      	strh	r2, [r3, #0]
			ai->ready_flag = 1;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2201      	movs	r2, #1
 80006ee:	711a      	strb	r2, [r3, #4]
			counter_dma_callback++;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_ADC_ConvCpltCallback+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_ADC_ConvCpltCallback+0x64>)
 80006f8:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0;i<ANALOG_INPUT_CH_COUNT;i++){
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
 80006fc:	3301      	adds	r3, #1
 80006fe:	75fb      	strb	r3, [r7, #23]
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d9dd      	bls.n	80006c2 <HAL_ADC_ConvCpltCallback+0xe>
		}
	}
}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	371c      	adds	r7, #28
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	200000e4 	.word	0x200000e4
 8000718:	200000f8 	.word	0x200000f8

0800071c <hal_get_tick>:
//-------------------------------------------------------------------------------

//Please write down "get system tick" function in your hardware
uint32_t hal_get_tick(){
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000720:	f001 f80a 	bl	8001738 <HAL_GetTick>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	bd80      	pop	{r7, pc}

0800072a <hal_init_tick>:

void /*__attribute__((weak))*/ hal_init_tick(){
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
	HAL_InitTick(0);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 ffbe 	bl	80016b0 <HAL_InitTick>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <init_comm_data_service>:

//Communication Channel Adaptation

//Please write down functions for your communication channel
//And put this function right after your initialisations
void init_comm_data_service(){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(ra.comm_huart, &uart_rx_data, 1);
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <init_comm_data_service+0x18>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	4904      	ldr	r1, [pc, #16]	; (8000754 <init_comm_data_service+0x1c>)
 8000744:	4618      	mov	r0, r3
 8000746:	f005 fb53 	bl	8005df0 <HAL_UART_Receive_IT>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000028 	.word	0x20000028
 8000754:	200000fc 	.word	0x200000fc

08000758 <init_comm_timing_service>:

//Please write down functions for communication timing services
//And put this function right after your initialisations
void init_comm_timing_service(){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(ra.comm_htim);
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <init_comm_timing_service+0x1c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f004 f905 	bl	8004970 <HAL_TIM_Base_Start_IT>
	stop_comm_timer(ra.comm_htim);
 8000766:	4b03      	ldr	r3, [pc, #12]	; (8000774 <init_comm_timing_service+0x1c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f822 	bl	80007b4 <stop_comm_timer>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000028 	.word	0x20000028

08000778 <start_comm_timer>:

void start_comm_timer(TIM_HandleTypeDef* htim){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f022 0201 	bic.w	r2, r2, #1
 800078e:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
	htim->Instance->CR1 |= 0x01; //Start Timer
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0201 	orr.w	r2, r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <stop_comm_timer>:

void stop_comm_timer(TIM_HandleTypeDef* htim){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f022 0201 	bic.w	r2, r2, #1
 80007ca:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2200      	movs	r2, #0
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <HAL_UART_RxCpltCallback>:

//Callbacks
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &uart_rx_data, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	4909      	ldr	r1, [pc, #36]	; (8000810 <HAL_UART_RxCpltCallback+0x30>)
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f005 faff 	bl	8005df0 <HAL_UART_Receive_IT>
	start_comm_timer(ra.comm_htim);
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_UART_RxCpltCallback+0x34>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ffbe 	bl	8000778 <start_comm_timer>

	//When new data received copy this data to the runtime buffers
	Runtime_CommDataService_NewData_Received(0, &uart_rx_data, 1);
 80007fc:	2201      	movs	r2, #1
 80007fe:	4904      	ldr	r1, [pc, #16]	; (8000810 <HAL_UART_RxCpltCallback+0x30>)
 8000800:	2000      	movs	r0, #0
 8000802:	f006 fb55 	bl	8006eb0 <Runtime_CommDataService_NewData_Received>
	User_Callback_Function* ucf = get_ucf();
	if(ucf[MODBUS_UART_CALLBACK_FUNCTION_SLOT].f != 0){
		ucf[MODBUS_UART_CALLBACK_FUNCTION_SLOT].f(&uart_rx_data);
	}
	*/
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000fc 	.word	0x200000fc
 8000814:	20000028 	.word	0x20000028

08000818 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	if(htim == ra.comm_htim){
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	d107      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x22>
		stop_comm_timer(ra.comm_htim);
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ffc0 	bl	80007b4 <stop_comm_timer>

		//External trigger makes runtime to process data
		//This trigging is needed for Modbus (3.5 Char)
		Runtime_CommDataService_Process_DataBuffer(0);
 8000834:	2000      	movs	r0, #0
 8000836:	f006 fb55 	bl	8006ee4 <Runtime_CommDataService_Process_DataBuffer>
	}
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000028 	.word	0x20000028

08000848 <hal_modbus_uart_tx>:

//Modbus UART Transmit Functions
void /*__attribute__((weak))*/ hal_modbus_uart_tx(uint8_t* pData, uint16_t Size){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(ra.comm_huart, pData, Size);
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <hal_modbus_uart_tx+0x24>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	887a      	ldrh	r2, [r7, #2]
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	4618      	mov	r0, r3
 800085e:	f005 fa6b 	bl	8005d38 <HAL_UART_Transmit_IT>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000028 	.word	0x20000028

08000870 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <get_uniqueid>:

//-----------------------UNIQUE ID-----------------------------------------
void get_uniqueid(uint8_t* id, uint16_t len){
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	807b      	strh	r3, [r7, #2]
	uint32_t* buf = id;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	60fb      	str	r3, [r7, #12]
	buf[0] 	= (uint32_t) READ_REG(*((uint32_t *)UID_BASE));
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <get_uniqueid+0x38>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	601a      	str	r2, [r3, #0]
	buf[1] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x04U)));
 800089c:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <get_uniqueid+0x3c>)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3304      	adds	r3, #4
 80008a2:	6812      	ldr	r2, [r2, #0]
 80008a4:	601a      	str	r2, [r3, #0]
	buf[2] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x14U)));
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <get_uniqueid+0x40>)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3308      	adds	r3, #8
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	1ff0f420 	.word	0x1ff0f420
 80008c0:	1ff0f424 	.word	0x1ff0f424
 80008c4:	1ff0f434 	.word	0x1ff0f434

080008c8 <get_flash_memory_info>:

//---------------------Flash functions---------------------------------------
#define ADDR_FLASH_SECTOR_23     ((uint32_t)0x081E0000)
#define FLASH_MEMORY_SIZE (128*1024)

void get_flash_memory_info(uint32_t* start_addr, uint32_t* size){
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
	*start_addr = ADDR_FLASH_SECTOR_23;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a05      	ldr	r2, [pc, #20]	; (80008ec <get_flash_memory_info+0x24>)
 80008d6:	601a      	str	r2, [r3, #0]
	*size = FLASH_MEMORY_SIZE;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008de:	601a      	str	r2, [r3, #0]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	081e0000 	.word	0x081e0000

080008f0 <write_to_flash>:

uint8_t write_to_flash(uint8_t* p, uint32_t start_addr, uint16_t size)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	4613      	mov	r3, r2
 80008fc:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	757b      	strb	r3, [r7, #21]
	uint16_t i;
	uint32_t data;

	HAL_FLASH_Unlock();
 8000902:	f002 fa0b 	bl	8002d1c <HAL_FLASH_Unlock>

	for (i = 0; i < size; i+=4) {
 8000906:	2300      	movs	r3, #0
 8000908:	82fb      	strh	r3, [r7, #22]
 800090a:	e01a      	b.n	8000942 <write_to_flash+0x52>
                data = *(uint32_t*)(p+i);
 800090c:	8afb      	ldrh	r3, [r7, #22]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	613b      	str	r3, [r7, #16]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_addr + i, data) == HAL_OK) ret = 1;
 8000916:	8afa      	ldrh	r2, [r7, #22]
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	18d1      	adds	r1, r2, r3
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	461a      	mov	r2, r3
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	2002      	movs	r0, #2
 8000926:	f002 f99d 	bl	8002c64 <HAL_FLASH_Program>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <write_to_flash+0x46>
 8000930:	2301      	movs	r3, #1
 8000932:	757b      	strb	r3, [r7, #21]
 8000934:	e002      	b.n	800093c <write_to_flash+0x4c>
		else {
			ret = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	757b      	strb	r3, [r7, #21]
			break;
 800093a:	e006      	b.n	800094a <write_to_flash+0x5a>
	for (i = 0; i < size; i+=4) {
 800093c:	8afb      	ldrh	r3, [r7, #22]
 800093e:	3304      	adds	r3, #4
 8000940:	82fb      	strh	r3, [r7, #22]
 8000942:	8afa      	ldrh	r2, [r7, #22]
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	429a      	cmp	r2, r3
 8000948:	d3e0      	bcc.n	800090c <write_to_flash+0x1c>
		}
	}

	HAL_FLASH_Lock();
 800094a:	f002 fa09 	bl	8002d60 <HAL_FLASH_Lock>
}
 800094e:	bf00      	nop
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <erase_flash>:

uint8_t erase_flash(uint32_t start_addr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint32_t SectorError = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
    FLASH_EraseInitTypeDef EraseInitStruct;


	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 800096a:	f002 f9d7 	bl	8002d1c <HAL_FLASH_Unlock>

	/* Erase the user Flash area
	(area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS         ;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors = 1;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.Sector = FLASH_SECTOR_23;
 8000976:	2317      	movs	r3, #23
 8000978:	617b      	str	r3, [r7, #20]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 800097a:	f107 0220 	add.w	r2, r7, #32
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fb2b 	bl	8002fe0 <HAL_FLASHEx_Erase>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d003      	beq.n	8000998 <erase_flash+0x40>
	{
		ret = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000996:	e002      	b.n	800099e <erase_flash+0x46>
	}

	else ret = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return ret;
 800099e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <hal_get_encoder_value>:

//---------------------Encoder Function---------------------------------------------------
int8_t hal_get_encoder_value()
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	return (htim1.Instance->CNT>>2);
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <hal_get_encoder_value+0x18>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	b25b      	sxtb	r3, r3
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	20000964 	.word	0x20000964

080009c8 <initiate_runtime>:

void initiate_runtime()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	  init_comm_data_service();
 80009cc:	f7ff feb4 	bl	8000738 <init_comm_data_service>
	  init_comm_timing_service();
 80009d0:	f7ff fec2 	bl	8000758 <init_comm_timing_service>
	  initiate_input_channels();
 80009d4:	f7ff fdac 	bl	8000530 <initiate_input_channels>
	  initiate_output_channels();
 80009d8:	f7ff fdd0 	bl	800057c <initiate_output_channels>
	  initate_analog_channels();
 80009dc:	f7ff fdec 	bl	80005b8 <initate_analog_channels>
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e8:	f000 fe55 	bl	8001696 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ec:	f000 f81c 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f0:	f000 fa9a 	bl	8000f28 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009f4:	f000 f904 	bl	8000c00 <MX_SPI1_Init>
  MX_DMA_Init();
 80009f8:	f000 fa78 	bl	8000eec <MX_DMA_Init>
  MX_ADC1_Init();
 80009fc:	f000 f8a0 	bl	8000b40 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000a00:	f000 f996 	bl	8000d30 <MX_TIM4_Init>
  MX_UART7_Init();
 8000a04:	f000 fa42 	bl	8000e8c <MX_UART7_Init>
  MX_TIM6_Init();
 8000a08:	f000 fa0a 	bl	8000e20 <MX_TIM6_Init>
  MX_TIM1_Init();
 8000a0c:	f000 f936 	bl	8000c7c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000a10:	213c      	movs	r1, #60	; 0x3c
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <main+0x40>)
 8000a14:	f004 f92c 	bl	8004c70 <HAL_TIM_Encoder_Start>

  initiate_runtime();
 8000a18:	f7ff ffd6 	bl	80009c8 <initiate_runtime>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  mcCore_SM();
 8000a1c:	f006 fad2 	bl	8006fc4 <mcCore_SM>
 8000a20:	e7fc      	b.n	8000a1c <main+0x38>
 8000a22:	bf00      	nop
 8000a24:	20000964 	.word	0x20000964

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0b8      	sub	sp, #224	; 0xe0
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a32:	2234      	movs	r2, #52	; 0x34
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f007 fdbe 	bl	80085b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	2290      	movs	r2, #144	; 0x90
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f007 fdaf 	bl	80085b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <SystemClock_Config+0x110>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a36      	ldr	r2, [pc, #216]	; (8000b38 <SystemClock_Config+0x110>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <SystemClock_Config+0x110>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a72:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <SystemClock_Config+0x114>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a7a:	4a30      	ldr	r2, [pc, #192]	; (8000b3c <SystemClock_Config+0x114>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <SystemClock_Config+0x114>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a94:	2301      	movs	r3, #1
 8000a96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aac:	2308      	movs	r3, #8
 8000aae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000ab2:	2390      	movs	r3, #144	; 0x90
 8000ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 fda3 	bl	8003614 <HAL_RCC_OscConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000ad4:	f000 fb34 	bl	8001140 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad8:	230f      	movs	r3, #15
 8000ada:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000afa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000afe:	2102      	movs	r1, #2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 f835 	bl	8003b70 <HAL_RCC_ClockConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000b0c:	f000 fb18 	bl	8001140 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f003 f9fc 	bl	8003f1c <HAL_RCCEx_PeriphCLKConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000b2a:	f000 fb09 	bl	8001140 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	37e0      	adds	r7, #224	; 0xe0
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40007000 	.word	0x40007000

08000b40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b52:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000b54:	4a28      	ldr	r2, [pc, #160]	; (8000bf8 <MX_ADC1_Init+0xb8>)
 8000b56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b58:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b5e:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b6a:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b70:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000b80:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <MX_ADC1_Init+0xbc>)
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b9e:	4815      	ldr	r0, [pc, #84]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000ba0:	f000 fdd6 	bl	8001750 <HAL_ADC_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000baa:	f000 fac9 	bl	8001140 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000bc0:	f001 f864 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bca:	f000 fab9 	bl	8001140 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bce:	230a      	movs	r3, #10
 8000bd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <MX_ADC1_Init+0xb4>)
 8000bdc:	f001 f856 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000be6:	f000 faab 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000086c 	.word	0x2000086c
 8000bf8:	40012000 	.word	0x40012000
 8000bfc:	0f000001 	.word	0x0f000001

08000c00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <MX_SPI1_Init+0x78>)
 8000c08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c18:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c1c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c38:	2220      	movs	r2, #32
 8000c3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c5c:	2208      	movs	r2, #8
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c62:	f003 fd83 	bl	800476c <HAL_SPI_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000c6c:	f000 fa68 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200009b0 	.word	0x200009b0
 8000c78:	40013000 	.word	0x40013000

08000c7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2224      	movs	r2, #36	; 0x24
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f007 fc94 	bl	80085b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <MX_TIM1_Init+0xac>)
 8000c9c:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <MX_TIM1_Init+0xb0>)
 8000c9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <MX_TIM1_Init+0xac>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <MX_TIM1_Init+0xac>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <MX_TIM1_Init+0xac>)
 8000cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_TIM1_Init+0xac>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <MX_TIM1_Init+0xac>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_TIM1_Init+0xac>)
 8000cc2:	2280      	movs	r2, #128	; 0x80
 8000cc4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_TIM1_Init+0xac>)
 8000cf2:	f003 ff17 	bl	8004b24 <HAL_TIM_Encoder_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000cfc:	f000 fa20 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_TIM1_Init+0xac>)
 8000d12:	f004 ff17 	bl	8005b44 <HAL_TIMEx_MasterConfigSynchronization>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000d1c:	f000 fa10 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	3730      	adds	r7, #48	; 0x30
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000964 	.word	0x20000964
 8000d2c:	40010000 	.word	0x40010000

08000d30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08e      	sub	sp, #56	; 0x38
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d50:	463b      	mov	r3, r7
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
 8000d5e:	615a      	str	r2, [r3, #20]
 8000d60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <MX_TIM4_Init+0xe8>)
 8000d64:	4a2d      	ldr	r2, [pc, #180]	; (8000e1c <MX_TIM4_Init+0xec>)
 8000d66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <MX_TIM4_Init+0xe8>)
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <MX_TIM4_Init+0xe8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 360;
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <MX_TIM4_Init+0xe8>)
 8000d76:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000d7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <MX_TIM4_Init+0xe8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d82:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <MX_TIM4_Init+0xe8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d88:	4823      	ldr	r0, [pc, #140]	; (8000e18 <MX_TIM4_Init+0xe8>)
 8000d8a:	f003 fd9a 	bl	80048c2 <HAL_TIM_Base_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d94:	f000 f9d4 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da2:	4619      	mov	r1, r3
 8000da4:	481c      	ldr	r0, [pc, #112]	; (8000e18 <MX_TIM4_Init+0xe8>)
 8000da6:	f004 fa21 	bl	80051ec <HAL_TIM_ConfigClockSource>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000db0:	f000 f9c6 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000db4:	4818      	ldr	r0, [pc, #96]	; (8000e18 <MX_TIM4_Init+0xe8>)
 8000db6:	f003 fe53 	bl	8004a60 <HAL_TIM_PWM_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000dc0:	f000 f9be 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4811      	ldr	r0, [pc, #68]	; (8000e18 <MX_TIM4_Init+0xe8>)
 8000dd4:	f004 feb6 	bl	8005b44 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000dde:	f000 f9af 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de2:	2360      	movs	r3, #96	; 0x60
 8000de4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	4619      	mov	r1, r3
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <MX_TIM4_Init+0xe8>)
 8000dfa:	f004 f8e7 	bl	8004fcc <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000e04:	f000 f99c 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <MX_TIM4_Init+0xe8>)
 8000e0a:	f000 fb21 	bl	8001450 <HAL_TIM_MspPostInit>

}
 8000e0e:	bf00      	nop
 8000e10:	3738      	adds	r7, #56	; 0x38
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200007d0 	.word	0x200007d0
 8000e1c:	40000800 	.word	0x40000800

08000e20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_TIM6_Init+0x64>)
 8000e32:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <MX_TIM6_Init+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_TIM6_Init+0x64>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_TIM6_Init+0x64>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_TIM6_Init+0x64>)
 8000e44:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e48:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_TIM6_Init+0x64>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <MX_TIM6_Init+0x64>)
 8000e52:	f003 fd36 	bl	80048c2 <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e5c:	f000 f970 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_TIM6_Init+0x64>)
 8000e6e:	f004 fe69 	bl	8005b44 <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e78:	f000 f962 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000918 	.word	0x20000918
 8000e88:	40001000 	.word	0x40001000

08000e8c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_UART7_Init+0x58>)
 8000e92:	4a15      	ldr	r2, [pc, #84]	; (8000ee8 <MX_UART7_Init+0x5c>)
 8000e94:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_UART7_Init+0x58>)
 8000e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e9c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_UART7_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_UART7_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_UART7_Init+0x58>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_UART7_Init+0x58>)
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_UART7_Init+0x58>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_UART7_Init+0x58>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_UART7_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_UART7_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_UART7_Init+0x58>)
 8000ed0:	f004 fee4 	bl	8005c9c <HAL_UART_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000eda:	f000 f931 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000074c 	.word	0x2000074c
 8000ee8:	40007800 	.word	0x40007800

08000eec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_DMA_Init+0x38>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <MX_DMA_Init+0x38>)
 8000ef8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_DMA_Init+0x38>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2038      	movs	r0, #56	; 0x38
 8000f10:	f001 fa67 	bl	80023e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f14:	2038      	movs	r0, #56	; 0x38
 8000f16:	f001 fa80 	bl	800241a <HAL_NVIC_EnableIRQ>

}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3e:	4b78      	ldr	r3, [pc, #480]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a77      	ldr	r2, [pc, #476]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000f44:	f043 0320 	orr.w	r3, r3, #32
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b75      	ldr	r3, [pc, #468]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f56:	4b72      	ldr	r3, [pc, #456]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a71      	ldr	r2, [pc, #452]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b6f      	ldr	r3, [pc, #444]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b6c      	ldr	r3, [pc, #432]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a6b      	ldr	r2, [pc, #428]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b69      	ldr	r3, [pc, #420]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b66      	ldr	r3, [pc, #408]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a65      	ldr	r2, [pc, #404]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b63      	ldr	r3, [pc, #396]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	4b60      	ldr	r3, [pc, #384]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a5f      	ldr	r2, [pc, #380]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b5d      	ldr	r3, [pc, #372]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb6:	4b5a      	ldr	r3, [pc, #360]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a59      	ldr	r2, [pc, #356]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b57      	ldr	r3, [pc, #348]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fce:	4b54      	ldr	r3, [pc, #336]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a53      	ldr	r2, [pc, #332]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b51      	ldr	r3, [pc, #324]	; (8001120 <MX_GPIO_Init+0x1f8>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LD4_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f242 0105 	movw	r1, #8197	; 0x2005
 8000fec:	484d      	ldr	r0, [pc, #308]	; (8001124 <MX_GPIO_Init+0x1fc>)
 8000fee:	f002 fab9 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2110      	movs	r1, #16
 8000ff6:	484c      	ldr	r0, [pc, #304]	; (8001128 <MX_GPIO_Init+0x200>)
 8000ff8:	f002 fab4 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f244 0181 	movw	r1, #16513	; 0x4081
 8001002:	484a      	ldr	r0, [pc, #296]	; (800112c <MX_GPIO_Init+0x204>)
 8001004:	f002 faae 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800100e:	4848      	ldr	r0, [pc, #288]	; (8001130 <MX_GPIO_Init+0x208>)
 8001010:	f002 faa8 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD5_Pin|LD6_Pin;
 8001014:	f242 0305 	movw	r3, #8197	; 0x2005
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	483d      	ldr	r0, [pc, #244]	; (8001124 <MX_GPIO_Init+0x1fc>)
 800102e:	f002 f8d5 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF5 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10;
 8001032:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4837      	ldr	r0, [pc, #220]	; (8001124 <MX_GPIO_Init+0x1fc>)
 8001048:	f002 f8c8 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800104c:	2310      	movs	r3, #16
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	4831      	ldr	r0, [pc, #196]	; (8001128 <MX_GPIO_Init+0x200>)
 8001064:	f002 f8ba 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Joystick_Button_Pin */
  GPIO_InitStruct.Pin = Joystick_Button_Pin;
 8001068:	2340      	movs	r3, #64	; 0x40
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800106c:	4b31      	ldr	r3, [pc, #196]	; (8001134 <MX_GPIO_Init+0x20c>)
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001070:	2301      	movs	r3, #1
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Joystick_Button_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	482b      	ldr	r0, [pc, #172]	; (8001128 <MX_GPIO_Init+0x200>)
 800107c:	f002 f8ae 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001080:	f244 0381 	movw	r3, #16513	; 0x4081
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4824      	ldr	r0, [pc, #144]	; (800112c <MX_GPIO_Init+0x204>)
 800109a:	f002 f89f 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 800109e:	f44f 7390 	mov.w	r3, #288	; 0x120
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <MX_GPIO_Init+0x210>)
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4822      	ldr	r0, [pc, #136]	; (800113c <MX_GPIO_Init+0x214>)
 80010b4:	f002 f892 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <MX_GPIO_Init+0x20c>)
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	481c      	ldr	r0, [pc, #112]	; (800113c <MX_GPIO_Init+0x214>)
 80010cc:	f002 f886 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Key1_Pin LCD_Key2_Pin LCD_Key3_Pin LCD_Key0_Pin */
  GPIO_InitStruct.Pin = LCD_Key1_Pin|LCD_Key2_Pin|LCD_Key3_Pin|LCD_Key0_Pin;
 80010d0:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010da:	2301      	movs	r3, #1
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	4812      	ldr	r0, [pc, #72]	; (8001130 <MX_GPIO_Init+0x208>)
 80010e6:	f002 f879 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	480b      	ldr	r0, [pc, #44]	; (8001130 <MX_GPIO_Init+0x208>)
 8001104:	f002 f86a 	bl	80031dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2017      	movs	r0, #23
 800110e:	f001 f968 	bl	80023e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001112:	2017      	movs	r0, #23
 8001114:	f001 f981 	bl	800241a <HAL_NVIC_EnableIRQ>

}
 8001118:	bf00      	nop
 800111a:	3730      	adds	r7, #48	; 0x30
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40021400 	.word	0x40021400
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800
 8001134:	10210000 	.word	0x10210000
 8001138:	10310000 	.word	0x10310000
 800113c:	40021800 	.word	0x40021800

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001148:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114c:	4801      	ldr	r0, [pc, #4]	; (8001154 <Error_Handler+0x14>)
 800114e:	f002 fa22 	bl	8003596 <HAL_GPIO_TogglePin>
 8001152:	e7f9      	b.n	8001148 <Error_Handler+0x8>
 8001154:	40020400 	.word	0x40020400

08001158 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_MspInit+0x44>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <HAL_MspInit+0x44>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_MspInit+0x44>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_MspInit+0x44>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_MspInit+0x44>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_MspInit+0x44>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800

080011a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a3d      	ldr	r2, [pc, #244]	; (80012b4 <HAL_ADC_MspInit+0x114>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d173      	bne.n	80012aa <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c2:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <HAL_ADC_MspInit+0x118>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a3c      	ldr	r2, [pc, #240]	; (80012b8 <HAL_ADC_MspInit+0x118>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <HAL_ADC_MspInit+0x118>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <HAL_ADC_MspInit+0x118>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a36      	ldr	r2, [pc, #216]	; (80012b8 <HAL_ADC_MspInit+0x118>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <HAL_ADC_MspInit+0x118>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <HAL_ADC_MspInit+0x118>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a30      	ldr	r2, [pc, #192]	; (80012b8 <HAL_ADC_MspInit+0x118>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <HAL_ADC_MspInit+0x118>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800120a:	2301      	movs	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4827      	ldr	r0, [pc, #156]	; (80012bc <HAL_ADC_MspInit+0x11c>)
 800121e:	f001 ffdd 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001222:	2308      	movs	r3, #8
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4822      	ldr	r0, [pc, #136]	; (80012c0 <HAL_ADC_MspInit+0x120>)
 8001236:	f001 ffd1 	bl	80031dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <HAL_ADC_MspInit+0x124>)
 800123c:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <HAL_ADC_MspInit+0x128>)
 800123e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <HAL_ADC_MspInit+0x124>)
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_ADC_MspInit+0x124>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_ADC_MspInit+0x124>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <HAL_ADC_MspInit+0x124>)
 8001254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001258:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <HAL_ADC_MspInit+0x124>)
 800125c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001260:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_ADC_MspInit+0x124>)
 8001264:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001268:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_ADC_MspInit+0x124>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <HAL_ADC_MspInit+0x124>)
 8001272:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001276:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_ADC_MspInit+0x124>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <HAL_ADC_MspInit+0x124>)
 8001280:	f001 f8e6 	bl	8002450 <HAL_DMA_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800128a:	f7ff ff59 	bl	8001140 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <HAL_ADC_MspInit+0x124>)
 8001292:	639a      	str	r2, [r3, #56]	; 0x38
 8001294:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <HAL_ADC_MspInit+0x124>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2012      	movs	r0, #18
 80012a0:	f001 f89f 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012a4:	2012      	movs	r0, #18
 80012a6:	f001 f8b8 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40012000 	.word	0x40012000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	200008b8 	.word	0x200008b8
 80012c8:	40026410 	.word	0x40026410

080012cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_SPI_MspInit+0x7c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d127      	bne.n	800133e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_SPI_MspInit+0x80>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a16      	ldr	r2, [pc, #88]	; (800134c <HAL_SPI_MspInit+0x80>)
 80012f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_SPI_MspInit+0x80>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_SPI_MspInit+0x80>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a10      	ldr	r2, [pc, #64]	; (800134c <HAL_SPI_MspInit+0x80>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_SPI_MspInit+0x80>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800131e:	23a0      	movs	r3, #160	; 0xa0
 8001320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800132e:	2305      	movs	r3, #5
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <HAL_SPI_MspInit+0x84>)
 800133a:	f001 ff4f 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40013000 	.word	0x40013000
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d128      	bne.n	80013c8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <HAL_TIM_Encoder_MspInit+0x80>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001394:	f043 0310 	orr.w	r3, r3, #16
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_TIM_Encoder_MspInit+0x80>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80013a6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <HAL_TIM_Encoder_MspInit+0x84>)
 80013c4:	f001 ff0a 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010000 	.word	0x40010000
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a16      	ldr	r2, [pc, #88]	; (8001444 <HAL_TIM_Base_MspInit+0x68>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d10c      	bne.n	8001408 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_TIM_Base_MspInit+0x6c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a15      	ldr	r2, [pc, #84]	; (8001448 <HAL_TIM_Base_MspInit+0x6c>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_TIM_Base_MspInit+0x6c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001406:	e018      	b.n	800143a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_TIM_Base_MspInit+0x70>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d113      	bne.n	800143a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_TIM_Base_MspInit+0x6c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <HAL_TIM_Base_MspInit+0x6c>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_TIM_Base_MspInit+0x6c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2036      	movs	r0, #54	; 0x36
 8001430:	f000 ffd7 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001434:	2036      	movs	r0, #54	; 0x36
 8001436:	f000 fff0 	bl	800241a <HAL_NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40000800 	.word	0x40000800
 8001448:	40023800 	.word	0x40023800
 800144c:	40001000 	.word	0x40001000

08001450 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a11      	ldr	r2, [pc, #68]	; (80014b4 <HAL_TIM_MspPostInit+0x64>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d11b      	bne.n	80014aa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_TIM_MspPostInit+0x68>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <HAL_TIM_MspPostInit+0x68>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_TIM_MspPostInit+0x68>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = LCD_BackLight_Pin;
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800149a:	2302      	movs	r3, #2
 800149c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BackLight_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_TIM_MspPostInit+0x6c>)
 80014a6:	f001 fe99 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40000800 	.word	0x40000800
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020400 	.word	0x40020400

080014c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <HAL_UART_MspInit+0x8c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d12f      	bne.n	8001542 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_UART_MspInit+0x90>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_UART_MspInit+0x90>)
 80014e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_UART_MspInit+0x90>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_UART_MspInit+0x90>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_UART_MspInit+0x90>)
 8001500:	f043 0320 	orr.w	r3, r3, #32
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_UART_MspInit+0x90>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0320 	and.w	r3, r3, #32
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001512:	23c0      	movs	r3, #192	; 0xc0
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001522:	2308      	movs	r3, #8
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	4809      	ldr	r0, [pc, #36]	; (8001554 <HAL_UART_MspInit+0x94>)
 800152e:	f001 fe55 	bl	80031dc <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2052      	movs	r0, #82	; 0x52
 8001538:	f000 ff53 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800153c:	2052      	movs	r0, #82	; 0x52
 800153e:	f000 ff6c 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40007800 	.word	0x40007800
 8001550:	40023800 	.word	0x40023800
 8001554:	40021400 	.word	0x40021400

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800155c:	e7fe      	b.n	800155c <NMI_Handler+0x4>

0800155e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a4:	f000 f8b4 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <ADC_IRQHandler+0x10>)
 80015b2:	f000 f911 	bl	80017d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000086c 	.word	0x2000086c

080015c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80015c4:	2020      	movs	r0, #32
 80015c6:	f002 f801 	bl	80035cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80015ca:	2040      	movs	r0, #64	; 0x40
 80015cc:	f001 fffe 	bl	80035cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80015d0:	2080      	movs	r0, #128	; 0x80
 80015d2:	f001 fffb 	bl	80035cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80015d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015da:	f001 fff7 	bl	80035cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <TIM6_DAC_IRQHandler+0x10>)
 80015ea:	f003 fbcf 	bl	8004d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000918 	.word	0x20000918

080015f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <DMA2_Stream0_IRQHandler+0x10>)
 80015fe:	f001 f8c7 	bl	8002790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200008b8 	.word	0x200008b8

0800160c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <UART7_IRQHandler+0x10>)
 8001612:	f004 fc2b 	bl	8005e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000074c 	.word	0x2000074c

08001620 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <SystemInit+0x20>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <SystemInit+0x20>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164a:	490e      	ldr	r1, [pc, #56]	; (8001684 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001660:	4c0b      	ldr	r4, [pc, #44]	; (8001690 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800166e:	f7ff ffd7 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001672:	f006 ff6f 	bl	8008554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001676:	f7ff f9b5 	bl	80009e4 <main>
  bx  lr    
 800167a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001688:	08008810 	.word	0x08008810
  ldr r2, =_sbss
 800168c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001690:	20000a34 	.word	0x20000a34

08001694 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <CAN1_RX0_IRQHandler>

08001696 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169a:	2003      	movs	r0, #3
 800169c:	f000 fe96 	bl	80023cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f000 f805 	bl	80016b0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80016a6:	f7ff fd57 	bl	8001158 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 feb1 	bl	8002436 <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f000 fe79 	bl	80023e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000030 	.word	0x20000030
 8001708:	20000038 	.word	0x20000038
 800170c:	20000034 	.word	0x20000034

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000038 	.word	0x20000038
 8001734:	20000a14 	.word	0x20000a14

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000a14 	.word	0x20000a14

08001750 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e031      	b.n	80017ca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fd16 	bl	80011a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b00      	cmp	r3, #0
 800178c:	d116      	bne.n	80017bc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_ADC_Init+0x84>)
 8001794:	4013      	ands	r3, r2
 8001796:	f043 0202 	orr.w	r2, r3, #2
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 fbbe 	bl	8001f20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f023 0303 	bic.w	r3, r3, #3
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ba:	e001      	b.n	80017c0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	ffffeefd 	.word	0xffffeefd

080017d8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	bf0c      	ite	eq
 80017f6:	2301      	moveq	r3, #1
 80017f8:	2300      	movne	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	2b20      	cmp	r3, #32
 800180a:	bf0c      	ite	eq
 800180c:	2301      	moveq	r3, #1
 800180e:	2300      	movne	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d049      	beq.n	80018ae <HAL_ADC_IRQHandler+0xd6>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d046      	beq.n	80018ae <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d12b      	bne.n	800189e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800184a:	2b00      	cmp	r3, #0
 800184c:	d127      	bne.n	800189e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001866:	2b00      	cmp	r3, #0
 8001868:	d119      	bne.n	800189e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0220 	bic.w	r2, r2, #32
 8001878:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d105      	bne.n	800189e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7fe ff08 	bl	80006b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f06f 0212 	mvn.w	r2, #18
 80018ac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ce:	2b80      	cmp	r3, #128	; 0x80
 80018d0:	bf0c      	ite	eq
 80018d2:	2301      	moveq	r3, #1
 80018d4:	2300      	movne	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d057      	beq.n	8001990 <HAL_ADC_IRQHandler+0x1b8>
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d054      	beq.n	8001990 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d105      	bne.n	80018fe <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d139      	bne.n	8001980 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001912:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001924:	2b00      	cmp	r3, #0
 8001926:	d12b      	bne.n	8001980 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001932:	2b00      	cmp	r3, #0
 8001934:	d124      	bne.n	8001980 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001940:	2b00      	cmp	r3, #0
 8001942:	d11d      	bne.n	8001980 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001948:	2b00      	cmp	r3, #0
 800194a:	d119      	bne.n	8001980 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800195a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d105      	bne.n	8001980 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	f043 0201 	orr.w	r2, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fc49 	bl	8002218 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f06f 020c 	mvn.w	r2, #12
 800198e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b01      	cmp	r3, #1
 800199c:	bf0c      	ite	eq
 800199e:	2301      	moveq	r3, #1
 80019a0:	2300      	movne	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b0:	2b40      	cmp	r3, #64	; 0x40
 80019b2:	bf0c      	ite	eq
 80019b4:	2301      	moveq	r3, #1
 80019b6:	2300      	movne	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d017      	beq.n	80019f2 <HAL_ADC_IRQHandler+0x21a>
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d014      	beq.n	80019f2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d10d      	bne.n	80019f2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f93e 	bl	8001c64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f06f 0201 	mvn.w	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d015      	beq.n	8001a52 <HAL_ADC_IRQHandler+0x27a>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d012      	beq.n	8001a52 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	f043 0202 	orr.w	r2, r3, #2
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0220 	mvn.w	r2, #32
 8001a40:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f918 	bl	8001c78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f06f 0220 	mvn.w	r2, #32
 8001a50:	601a      	str	r2, [r3, #0]
  }
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_Start_DMA+0x1e>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e0d4      	b.n	8001c24 <HAL_ADC_Start_DMA+0x1c8>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d018      	beq.n	8001ac2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001aa0:	4b62      	ldr	r3, [pc, #392]	; (8001c2c <HAL_ADC_Start_DMA+0x1d0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a62      	ldr	r2, [pc, #392]	; (8001c30 <HAL_ADC_Start_DMA+0x1d4>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	0c9a      	lsrs	r2, r3, #18
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001ab4:	e002      	b.n	8001abc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f9      	bne.n	8001ab6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	f040 809c 	bne.w	8001c0a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad6:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <HAL_ADC_Start_DMA+0x1d8>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001af8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b0c:	d106      	bne.n	8001b1c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f023 0206 	bic.w	r2, r3, #6
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44
 8001b1a:	e002      	b.n	8001b22 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2e:	4a42      	ldr	r2, [pc, #264]	; (8001c38 <HAL_ADC_Start_DMA+0x1dc>)
 8001b30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b36:	4a41      	ldr	r2, [pc, #260]	; (8001c3c <HAL_ADC_Start_DMA+0x1e0>)
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3e:	4a40      	ldr	r2, [pc, #256]	; (8001c40 <HAL_ADC_Start_DMA+0x1e4>)
 8001b40:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b5a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b6a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	334c      	adds	r3, #76	; 0x4c
 8001b76:	4619      	mov	r1, r3
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f000 fd16 	bl	80025ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001b80:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <HAL_ADC_Start_DMA+0x1e8>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10f      	bne.n	8001bac <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d143      	bne.n	8001c22 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	e03a      	b.n	8001c22 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a25      	ldr	r2, [pc, #148]	; (8001c48 <HAL_ADC_Start_DMA+0x1ec>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_ADC_Start_DMA+0x178>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d107      	bne.n	8001bd4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bd2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_ADC_Start_DMA+0x1e8>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d120      	bne.n	8001c22 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <HAL_ADC_Start_DMA+0x1f0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d11b      	bne.n	8001c22 <HAL_ADC_Start_DMA+0x1c6>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d114      	bne.n	8001c22 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	e00b      	b.n	8001c22 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f043 0210 	orr.w	r2, r3, #16
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f043 0201 	orr.w	r2, r3, #1
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000030 	.word	0x20000030
 8001c30:	431bde83 	.word	0x431bde83
 8001c34:	fffff8fe 	.word	0xfffff8fe
 8001c38:	08002115 	.word	0x08002115
 8001c3c:	080021cf 	.word	0x080021cf
 8001c40:	080021eb 	.word	0x080021eb
 8001c44:	40012300 	.word	0x40012300
 8001c48:	40012000 	.word	0x40012000
 8001c4c:	40012200 	.word	0x40012200

08001c50 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x1c>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e12a      	b.n	8001efe <HAL_ADC_ConfigChannel+0x272>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b09      	cmp	r3, #9
 8001cb6:	d93a      	bls.n	8001d2e <HAL_ADC_ConfigChannel+0xa2>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cc0:	d035      	beq.n	8001d2e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68d9      	ldr	r1, [r3, #12]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b1e      	subs	r3, #30
 8001cd8:	2207      	movs	r2, #7
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a87      	ldr	r2, [pc, #540]	; (8001f0c <HAL_ADC_ConfigChannel+0x280>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d10a      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68d9      	ldr	r1, [r3, #12]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	061a      	lsls	r2, r3, #24
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d06:	e035      	b.n	8001d74 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68d9      	ldr	r1, [r3, #12]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4403      	add	r3, r0
 8001d20:	3b1e      	subs	r3, #30
 8001d22:	409a      	lsls	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d2c:	e022      	b.n	8001d74 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6919      	ldr	r1, [r3, #16]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	2207      	movs	r2, #7
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	400a      	ands	r2, r1
 8001d50:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6919      	ldr	r1, [r3, #16]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	4603      	mov	r3, r0
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4403      	add	r3, r0
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b06      	cmp	r3, #6
 8001d7a:	d824      	bhi.n	8001dc6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3b05      	subs	r3, #5
 8001d8e:	221f      	movs	r2, #31
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43da      	mvns	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	3b05      	subs	r3, #5
 8001db8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	635a      	str	r2, [r3, #52]	; 0x34
 8001dc4:	e04c      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d824      	bhi.n	8001e18 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b23      	subs	r3, #35	; 0x23
 8001de0:	221f      	movs	r2, #31
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	400a      	ands	r2, r1
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	3b23      	subs	r3, #35	; 0x23
 8001e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
 8001e16:	e023      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	3b41      	subs	r3, #65	; 0x41
 8001e2a:	221f      	movs	r2, #31
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43da      	mvns	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	400a      	ands	r2, r1
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	3b41      	subs	r3, #65	; 0x41
 8001e54:	fa00 f203 	lsl.w	r2, r0, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a2a      	ldr	r2, [pc, #168]	; (8001f10 <HAL_ADC_ConfigChannel+0x284>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10a      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x1f4>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e72:	d105      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_ADC_ConfigChannel+0x288>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a26      	ldr	r2, [pc, #152]	; (8001f14 <HAL_ADC_ConfigChannel+0x288>)
 8001e7a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e7e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <HAL_ADC_ConfigChannel+0x284>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d109      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x212>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b12      	cmp	r3, #18
 8001e90:	d105      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_ADC_ConfigChannel+0x288>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <HAL_ADC_ConfigChannel+0x288>)
 8001e98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e9c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <HAL_ADC_ConfigChannel+0x284>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d125      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x268>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_ADC_ConfigChannel+0x280>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d003      	beq.n	8001eba <HAL_ADC_ConfigChannel+0x22e>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b11      	cmp	r3, #17
 8001eb8:	d11c      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <HAL_ADC_ConfigChannel+0x288>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <HAL_ADC_ConfigChannel+0x288>)
 8001ec0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ec4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <HAL_ADC_ConfigChannel+0x280>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d111      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_ADC_ConfigChannel+0x28c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <HAL_ADC_ConfigChannel+0x290>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0c9a      	lsrs	r2, r3, #18
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ee6:	e002      	b.n	8001eee <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f9      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	10000012 	.word	0x10000012
 8001f10:	40012000 	.word	0x40012000
 8001f14:	40012300 	.word	0x40012300
 8001f18:	20000030 	.word	0x20000030
 8001f1c:	431bde83 	.word	0x431bde83

08001f20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f28:	4b78      	ldr	r3, [pc, #480]	; (800210c <ADC_Init+0x1ec>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a77      	ldr	r2, [pc, #476]	; (800210c <ADC_Init+0x1ec>)
 8001f2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f32:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f34:	4b75      	ldr	r3, [pc, #468]	; (800210c <ADC_Init+0x1ec>)
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4973      	ldr	r1, [pc, #460]	; (800210c <ADC_Init+0x1ec>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	021a      	lsls	r2, r3, #8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6899      	ldr	r1, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	4a58      	ldr	r2, [pc, #352]	; (8002110 <ADC_Init+0x1f0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d022      	beq.n	8001ffa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6899      	ldr	r1, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6899      	ldr	r1, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	e00f      	b.n	800201a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002008:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002018:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0202 	bic.w	r2, r2, #2
 8002028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6899      	ldr	r1, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	005a      	lsls	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d01b      	beq.n	8002080 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002056:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002066:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6859      	ldr	r1, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	3b01      	subs	r3, #1
 8002074:	035a      	lsls	r2, r3, #13
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	e007      	b.n	8002090 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	051a      	lsls	r2, r3, #20
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6899      	ldr	r1, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020d2:	025a      	lsls	r2, r3, #9
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6899      	ldr	r1, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	029a      	lsls	r2, r3, #10
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	609a      	str	r2, [r3, #8]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40012300 	.word	0x40012300
 8002110:	0f000001 	.word	0x0f000001

08002114 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002120:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800212a:	2b00      	cmp	r3, #0
 800212c:	d13c      	bne.n	80021a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d12b      	bne.n	80021a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800214c:	2b00      	cmp	r3, #0
 800214e:	d127      	bne.n	80021a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002168:	2b00      	cmp	r3, #0
 800216a:	d119      	bne.n	80021a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0220 	bic.w	r2, r2, #32
 800217a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f7fe fa87 	bl	80006b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021a6:	e00e      	b.n	80021c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7ff fd5f 	bl	8001c78 <HAL_ADC_ErrorCallback>
}
 80021ba:	e004      	b.n	80021c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7ff fd37 	bl	8001c50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2240      	movs	r2, #64	; 0x40
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f043 0204 	orr.w	r2, r3, #4
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7ff fd34 	bl	8001c78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <__NVIC_SetPriorityGrouping+0x40>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	4313      	orrs	r3, r2
 8002258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225a:	4a04      	ldr	r2, [pc, #16]	; (800226c <__NVIC_SetPriorityGrouping+0x40>)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60d3      	str	r3, [r2, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00
 8002270:	05fa0000 	.word	0x05fa0000

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4907      	ldr	r1, [pc, #28]	; (80022c8 <__NVIC_EnableIRQ+0x38>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db0a      	blt.n	80022f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	490c      	ldr	r1, [pc, #48]	; (8002318 <__NVIC_SetPriority+0x4c>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	440b      	add	r3, r1
 80022f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f4:	e00a      	b.n	800230c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4908      	ldr	r1, [pc, #32]	; (800231c <__NVIC_SetPriority+0x50>)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3b04      	subs	r3, #4
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	440b      	add	r3, r1
 800230a:	761a      	strb	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f1c3 0307 	rsb	r3, r3, #7
 800233a:	2b04      	cmp	r3, #4
 800233c:	bf28      	it	cs
 800233e:	2304      	movcs	r3, #4
 8002340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3304      	adds	r3, #4
 8002346:	2b06      	cmp	r3, #6
 8002348:	d902      	bls.n	8002350 <NVIC_EncodePriority+0x30>
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3b03      	subs	r3, #3
 800234e:	e000      	b.n	8002352 <NVIC_EncodePriority+0x32>
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	f04f 32ff 	mov.w	r2, #4294967295
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	401a      	ands	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43d9      	mvns	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	4313      	orrs	r3, r2
         );
}
 800237a:	4618      	mov	r0, r3
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002398:	d301      	bcc.n	800239e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239a:	2301      	movs	r3, #1
 800239c:	e00f      	b.n	80023be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <SysTick_Config+0x40>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a6:	210f      	movs	r1, #15
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f7ff ff8e 	bl	80022cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <SysTick_Config+0x40>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <SysTick_Config+0x40>)
 80023b8:	2207      	movs	r2, #7
 80023ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	e000e010 	.word	0xe000e010

080023cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff29 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f4:	f7ff ff3e 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7ff ff8e 	bl	8002320 <NVIC_EncodePriority>
 8002404:	4602      	mov	r2, r0
 8002406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff5d 	bl	80022cc <__NVIC_SetPriority>
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff31 	bl	8002290 <__NVIC_EnableIRQ>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffa2 	bl	8002388 <SysTick_Config>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff f96c 	bl	8001738 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e099      	b.n	80025a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248c:	e00f      	b.n	80024ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800248e:	f7ff f953 	bl	8001738 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b05      	cmp	r3, #5
 800249a:	d908      	bls.n	80024ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2203      	movs	r2, #3
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e078      	b.n	80025a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e8      	bne.n	800248e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <HAL_DMA_Init+0x158>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	2b04      	cmp	r3, #4
 8002506:	d107      	bne.n	8002518 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	4313      	orrs	r3, r2
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f023 0307 	bic.w	r3, r3, #7
 800252e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	2b04      	cmp	r3, #4
 8002540:	d117      	bne.n	8002572 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00e      	beq.n	8002572 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fb09 	bl	8002b6c <DMA_CheckFifoParam>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800256e:	2301      	movs	r3, #1
 8002570:	e016      	b.n	80025a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fac0 	bl	8002b00 <DMA_CalcBaseAndBitshift>
 8002580:	4603      	mov	r3, r0
 8002582:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	223f      	movs	r2, #63	; 0x3f
 800258a:	409a      	lsls	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	e010803f 	.word	0xe010803f

080025ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_DMA_Start_IT+0x26>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e048      	b.n	8002664 <HAL_DMA_Start_IT+0xb8>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d137      	bne.n	8002656 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2202      	movs	r2, #2
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 fa52 	bl	8002aa4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002604:	223f      	movs	r2, #63	; 0x3f
 8002606:	409a      	lsls	r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0216 	orr.w	r2, r2, #22
 800261a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800262a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0208 	orr.w	r2, r2, #8
 8002642:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e005      	b.n	8002662 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800265e:	2302      	movs	r3, #2
 8002660:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002662:	7dfb      	ldrb	r3, [r7, #23]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800267a:	f7ff f85d 	bl	8001738 <HAL_GetTick>
 800267e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d008      	beq.n	800269e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2280      	movs	r2, #128	; 0x80
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e052      	b.n	8002744 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0216 	bic.w	r2, r2, #22
 80026ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <HAL_DMA_Abort+0x62>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0208 	bic.w	r2, r2, #8
 80026dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ee:	e013      	b.n	8002718 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026f0:	f7ff f822 	bl	8001738 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b05      	cmp	r3, #5
 80026fc:	d90c      	bls.n	8002718 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2220      	movs	r2, #32
 8002702:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2203      	movs	r2, #3
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e015      	b.n	8002744 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1e4      	bne.n	80026f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272a:	223f      	movs	r2, #63	; 0x3f
 800272c:	409a      	lsls	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d004      	beq.n	800276a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2280      	movs	r2, #128	; 0x80
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e00c      	b.n	8002784 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2205      	movs	r2, #5
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800279c:	4b92      	ldr	r3, [pc, #584]	; (80029e8 <HAL_DMA_IRQHandler+0x258>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a92      	ldr	r2, [pc, #584]	; (80029ec <HAL_DMA_IRQHandler+0x25c>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	0a9b      	lsrs	r3, r3, #10
 80027a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	2208      	movs	r2, #8
 80027bc:	409a      	lsls	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d01a      	beq.n	80027fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d013      	beq.n	80027fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0204 	bic.w	r2, r2, #4
 80027e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	2208      	movs	r2, #8
 80027ea:	409a      	lsls	r2, r3
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	2201      	movs	r2, #1
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d012      	beq.n	8002832 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	2201      	movs	r2, #1
 8002820:	409a      	lsls	r2, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f043 0202 	orr.w	r2, r3, #2
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002836:	2204      	movs	r2, #4
 8002838:	409a      	lsls	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d012      	beq.n	8002868 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00b      	beq.n	8002868 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	2204      	movs	r2, #4
 8002856:	409a      	lsls	r2, r3
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002860:	f043 0204 	orr.w	r2, r3, #4
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	2210      	movs	r2, #16
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d043      	beq.n	8002900 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d03c      	beq.n	8002900 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	2210      	movs	r2, #16
 800288c:	409a      	lsls	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d018      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d108      	bne.n	80028c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d024      	beq.n	8002900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
 80028be:	e01f      	b.n	8002900 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01b      	beq.n	8002900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
 80028d0:	e016      	b.n	8002900 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0208 	bic.w	r2, r2, #8
 80028ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	2220      	movs	r2, #32
 8002906:	409a      	lsls	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 808e 	beq.w	8002a2e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8086 	beq.w	8002a2e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	2220      	movs	r2, #32
 8002928:	409a      	lsls	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b05      	cmp	r3, #5
 8002938:	d136      	bne.n	80029a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0216 	bic.w	r2, r2, #22
 8002948:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002958:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <HAL_DMA_IRQHandler+0x1da>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0208 	bic.w	r2, r2, #8
 8002978:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297e:	223f      	movs	r2, #63	; 0x3f
 8002980:	409a      	lsls	r2, r3
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299a:	2b00      	cmp	r3, #0
 800299c:	d07d      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	4798      	blx	r3
        }
        return;
 80029a6:	e078      	b.n	8002a9a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01c      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d108      	bne.n	80029d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d030      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
 80029d4:	e02b      	b.n	8002a2e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d027      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	4798      	blx	r3
 80029e6:	e022      	b.n	8002a2e <HAL_DMA_IRQHandler+0x29e>
 80029e8:	20000030 	.word	0x20000030
 80029ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0210 	bic.w	r2, r2, #16
 8002a0c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d032      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d022      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2205      	movs	r2, #5
 8002a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d307      	bcc.n	8002a76 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f2      	bne.n	8002a5a <HAL_DMA_IRQHandler+0x2ca>
 8002a74:	e000      	b.n	8002a78 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a76:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
 8002a98:	e000      	b.n	8002a9c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a9a:	bf00      	nop
    }
  }
}
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop

08002aa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	d108      	bne.n	8002ae4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ae2:	e007      	b.n	8002af4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	60da      	str	r2, [r3, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	3b10      	subs	r3, #16
 8002b10:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <DMA_CalcBaseAndBitshift+0x60>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b1a:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <DMA_CalcBaseAndBitshift+0x64>)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d908      	bls.n	8002b40 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <DMA_CalcBaseAndBitshift+0x68>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	1d1a      	adds	r2, r3, #4
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	659a      	str	r2, [r3, #88]	; 0x58
 8002b3e:	e006      	b.n	8002b4e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <DMA_CalcBaseAndBitshift+0x68>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	aaaaaaab 	.word	0xaaaaaaab
 8002b64:	080085f8 	.word	0x080085f8
 8002b68:	fffffc00 	.word	0xfffffc00

08002b6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d11f      	bne.n	8002bc6 <DMA_CheckFifoParam+0x5a>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d856      	bhi.n	8002c3a <DMA_CheckFifoParam+0xce>
 8002b8c:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <DMA_CheckFifoParam+0x28>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002ba5 	.word	0x08002ba5
 8002b98:	08002bb7 	.word	0x08002bb7
 8002b9c:	08002ba5 	.word	0x08002ba5
 8002ba0:	08002c3b 	.word	0x08002c3b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d046      	beq.n	8002c3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb4:	e043      	b.n	8002c3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bbe:	d140      	bne.n	8002c42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc4:	e03d      	b.n	8002c42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bce:	d121      	bne.n	8002c14 <DMA_CheckFifoParam+0xa8>
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d837      	bhi.n	8002c46 <DMA_CheckFifoParam+0xda>
 8002bd6:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <DMA_CheckFifoParam+0x70>)
 8002bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bf3 	.word	0x08002bf3
 8002be4:	08002bed 	.word	0x08002bed
 8002be8:	08002c05 	.word	0x08002c05
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf0:	e030      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d025      	beq.n	8002c4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c02:	e022      	b.n	8002c4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c0c:	d11f      	bne.n	8002c4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c12:	e01c      	b.n	8002c4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d903      	bls.n	8002c22 <DMA_CheckFifoParam+0xb6>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d003      	beq.n	8002c28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c20:	e018      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
      break;
 8002c26:	e015      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00e      	beq.n	8002c52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e00b      	b.n	8002c52 <DMA_CheckFifoParam+0xe6>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e00a      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e008      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
 8002c44:	e006      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c46:	bf00      	nop
 8002c48:	e004      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e002      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c4e:	bf00      	nop
 8002c50:	e000      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c52:	bf00      	nop
    }
  } 
  
  return status; 
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c76:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <HAL_FLASH_Program+0xb0>)
 8002c78:	7d1b      	ldrb	r3, [r3, #20]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_FLASH_Program+0x1e>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e043      	b.n	8002d0a <HAL_FLASH_Program+0xa6>
 8002c82:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <HAL_FLASH_Program+0xb0>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c8c:	f000 f878 	bl	8002d80 <FLASH_WaitForLastOperation>
 8002c90:	4603      	mov	r3, r0
 8002c92:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d133      	bne.n	8002d02 <HAL_FLASH_Program+0x9e>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d823      	bhi.n	8002ce8 <HAL_FLASH_Program+0x84>
 8002ca0:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <HAL_FLASH_Program+0x44>)
 8002ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca6:	bf00      	nop
 8002ca8:	08002cb9 	.word	0x08002cb9
 8002cac:	08002cc5 	.word	0x08002cc5
 8002cb0:	08002cd1 	.word	0x08002cd1
 8002cb4:	08002cdd 	.word	0x08002cdd
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8002cb8:	783b      	ldrb	r3, [r7, #0]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	68b8      	ldr	r0, [r7, #8]
 8002cbe:	f000 f921 	bl	8002f04 <FLASH_Program_Byte>
        break;
 8002cc2:	e012      	b.n	8002cea <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002cc4:	883b      	ldrh	r3, [r7, #0]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	68b8      	ldr	r0, [r7, #8]
 8002cca:	f000 f8f5 	bl	8002eb8 <FLASH_Program_HalfWord>
        break;
 8002cce:	e00c      	b.n	8002cea <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	68b8      	ldr	r0, [r7, #8]
 8002cd6:	f000 f8c9 	bl	8002e6c <FLASH_Program_Word>
        break;
 8002cda:	e006      	b.n	8002cea <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8002cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ce0:	68b8      	ldr	r0, [r7, #8]
 8002ce2:	f000 f88d 	bl	8002e00 <FLASH_Program_DoubleWord>
        break;
 8002ce6:	e000      	b.n	8002cea <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8002ce8:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cea:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cee:	f000 f847 	bl	8002d80 <FLASH_WaitForLastOperation>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002cf6:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_FLASH_Program+0xb4>)
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_FLASH_Program+0xb4>)
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <HAL_FLASH_Program+0xb0>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	751a      	strb	r2, [r3, #20]

  return status;
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000a18 	.word	0x20000a18
 8002d18:	40023c00 	.word	0x40023c00

08002d1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_FLASH_Unlock+0x38>)
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	da0b      	bge.n	8002d46 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_FLASH_Unlock+0x38>)
 8002d30:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <HAL_FLASH_Unlock+0x3c>)
 8002d32:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <HAL_FLASH_Unlock+0x38>)
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <HAL_FLASH_Unlock+0x40>)
 8002d38:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_FLASH_Unlock+0x38>)
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	da01      	bge.n	8002d46 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002d46:	79fb      	ldrb	r3, [r7, #7]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	40023c00 	.word	0x40023c00
 8002d58:	45670123 	.word	0x45670123
 8002d5c:	cdef89ab 	.word	0xcdef89ab

08002d60 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_FLASH_Lock+0x1c>)
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_FLASH_Lock+0x1c>)
 8002d6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d6e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40023c00 	.word	0x40023c00

08002d80 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <FLASH_WaitForLastOperation+0x78>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d92:	f7fe fcd1 	bl	8001738 <HAL_GetTick>
 8002d96:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002d98:	e010      	b.n	8002dbc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d00c      	beq.n	8002dbc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <FLASH_WaitForLastOperation+0x38>
 8002da8:	f7fe fcc6 	bl	8001738 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d201      	bcs.n	8002dbc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e019      	b.n	8002df0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <FLASH_WaitForLastOperation+0x7c>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e8      	bne.n	8002d9a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <FLASH_WaitForLastOperation+0x7c>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002dd4:	f000 f8ba 	bl	8002f4c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e009      	b.n	8002df0 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <FLASH_WaitForLastOperation+0x7c>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <FLASH_WaitForLastOperation+0x7c>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
  
}  
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000a18 	.word	0x20000a18
 8002dfc:	40023c00 	.word	0x40023c00

08002e00 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002e0c:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <FLASH_Program_DoubleWord+0x68>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	4a15      	ldr	r2, [pc, #84]	; (8002e68 <FLASH_Program_DoubleWord+0x68>)
 8002e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <FLASH_Program_DoubleWord+0x68>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <FLASH_Program_DoubleWord+0x68>)
 8002e1e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002e22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e24:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <FLASH_Program_DoubleWord+0x68>)
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	4a0f      	ldr	r2, [pc, #60]	; (8002e68 <FLASH_Program_DoubleWord+0x68>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002e36:	f3bf 8f6f 	isb	sy
}
 8002e3a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002e3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	000a      	movs	r2, r1
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	68f9      	ldr	r1, [r7, #12]
 8002e4e:	3104      	adds	r1, #4
 8002e50:	4613      	mov	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e54:	f3bf 8f4f 	dsb	sy
}
 8002e58:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40023c00 	.word	0x40023c00

08002e6c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002e76:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <FLASH_Program_Word+0x48>)
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <FLASH_Program_Word+0x48>)
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <FLASH_Program_Word+0x48>)
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	4a0b      	ldr	r2, [pc, #44]	; (8002eb4 <FLASH_Program_Word+0x48>)
 8002e88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <FLASH_Program_Word+0x48>)
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <FLASH_Program_Word+0x48>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ea0:	f3bf 8f4f 	dsb	sy
}
 8002ea4:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023c00 	.word	0x40023c00

08002eb8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <FLASH_Program_HalfWord+0x48>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <FLASH_Program_HalfWord+0x48>)
 8002eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ece:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <FLASH_Program_HalfWord+0x48>)
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <FLASH_Program_HalfWord+0x48>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <FLASH_Program_HalfWord+0x48>)
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	4a07      	ldr	r2, [pc, #28]	; (8002f00 <FLASH_Program_HalfWord+0x48>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002eee:	f3bf 8f4f 	dsb	sy
}
 8002ef2:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40023c00 	.word	0x40023c00

08002f04 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <FLASH_Program_Byte+0x44>)
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <FLASH_Program_Byte+0x44>)
 8002f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <FLASH_Program_Byte+0x44>)
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <FLASH_Program_Byte+0x44>)
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002f24:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <FLASH_Program_Byte+0x44>)
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <FLASH_Program_Byte+0x44>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f36:	f3bf 8f4f 	dsb	sy
}
 8002f3a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	40023c00 	.word	0x40023c00

08002f4c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002f50:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <FLASH_SetErrorCode+0x8c>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002f5c:	4b1f      	ldr	r3, [pc, #124]	; (8002fdc <FLASH_SetErrorCode+0x90>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f043 0320 	orr.w	r3, r3, #32
 8002f64:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <FLASH_SetErrorCode+0x90>)
 8002f66:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <FLASH_SetErrorCode+0x8c>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <FLASH_SetErrorCode+0x90>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f043 0310 	orr.w	r3, r3, #16
 8002f7c:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <FLASH_SetErrorCode+0x90>)
 8002f7e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002f80:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <FLASH_SetErrorCode+0x8c>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f8c:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <FLASH_SetErrorCode+0x90>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f043 0308 	orr.w	r3, r3, #8
 8002f94:	4a11      	ldr	r2, [pc, #68]	; (8002fdc <FLASH_SetErrorCode+0x90>)
 8002f96:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <FLASH_SetErrorCode+0x8c>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <FLASH_SetErrorCode+0x90>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <FLASH_SetErrorCode+0x90>)
 8002fae:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <FLASH_SetErrorCode+0x8c>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <FLASH_SetErrorCode+0x90>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <FLASH_SetErrorCode+0x90>)
 8002fc6:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <FLASH_SetErrorCode+0x8c>)
 8002fca:	22f2      	movs	r2, #242	; 0xf2
 8002fcc:	60da      	str	r2, [r3, #12]
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	40023c00 	.word	0x40023c00
 8002fdc:	20000a18 	.word	0x20000a18

08002fe0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ff2:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_FLASHEx_Erase+0xd4>)
 8002ff4:	7d1b      	ldrb	r3, [r3, #20]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_FLASHEx_Erase+0x1e>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e056      	b.n	80030ac <HAL_FLASHEx_Erase+0xcc>
 8002ffe:	4b2d      	ldr	r3, [pc, #180]	; (80030b4 <HAL_FLASHEx_Erase+0xd4>)
 8003000:	2201      	movs	r2, #1
 8003002:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003004:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003008:	f7ff feba 	bl	8002d80 <FLASH_WaitForLastOperation>
 800300c:	4603      	mov	r3, r0
 800300e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d146      	bne.n	80030a4 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	f04f 32ff 	mov.w	r2, #4294967295
 800301c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d115      	bne.n	8003052 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f000 f844 	bl	80030c0 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003038:	f24c 3050 	movw	r0, #50000	; 0xc350
 800303c:	f7ff fea0 	bl	8002d80 <FLASH_WaitForLastOperation>
 8003040:	4603      	mov	r3, r0
 8003042:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003044:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_FLASHEx_Erase+0xd8>)
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	491b      	ldr	r1, [pc, #108]	; (80030b8 <HAL_FLASHEx_Erase+0xd8>)
 800304a:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <HAL_FLASHEx_Erase+0xdc>)
 800304c:	4013      	ands	r3, r2
 800304e:	610b      	str	r3, [r1, #16]
 8003050:	e028      	b.n	80030a4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	e01c      	b.n	8003094 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4619      	mov	r1, r3
 8003062:	68b8      	ldr	r0, [r7, #8]
 8003064:	f000 f868 	bl	8003138 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003068:	f24c 3050 	movw	r0, #50000	; 0xc350
 800306c:	f7ff fe88 	bl	8002d80 <FLASH_WaitForLastOperation>
 8003070:	4603      	mov	r3, r0
 8003072:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_FLASHEx_Erase+0xd8>)
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <HAL_FLASHEx_Erase+0xd8>)
 800307a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800307e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	601a      	str	r2, [r3, #0]
          break;
 800308c:	e00a      	b.n	80030a4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	3301      	adds	r3, #1
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4413      	add	r3, r2
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d3da      	bcc.n	800305a <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <HAL_FLASHEx_Erase+0xd4>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	751a      	strb	r2, [r3, #20]

  return status;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000a18 	.word	0x20000a18
 80030b8:	40023c00 	.word	0x40023c00
 80030bc:	ffff7ffb 	.word	0xffff7ffb

080030c0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 80030cc:	4b19      	ldr	r3, [pc, #100]	; (8003134 <FLASH_MassErase+0x74>)
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	4a18      	ldr	r2, [pc, #96]	; (8003134 <FLASH_MassErase+0x74>)
 80030d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d6:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d107      	bne.n	80030ee <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <FLASH_MassErase+0x74>)
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	4914      	ldr	r1, [pc, #80]	; (8003134 <FLASH_MassErase+0x74>)
 80030e4:	f248 0304 	movw	r3, #32772	; 0x8004
 80030e8:	4313      	orrs	r3, r2
 80030ea:	610b      	str	r3, [r1, #16]
 80030ec:	e00f      	b.n	800310e <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d106      	bne.n	8003102 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <FLASH_MassErase+0x74>)
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	4a0e      	ldr	r2, [pc, #56]	; (8003134 <FLASH_MassErase+0x74>)
 80030fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030fe:	6113      	str	r3, [r2, #16]
 8003100:	e005      	b.n	800310e <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <FLASH_MassErase+0x74>)
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	4a0b      	ldr	r2, [pc, #44]	; (8003134 <FLASH_MassErase+0x74>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <FLASH_MassErase+0x74>)
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	4313      	orrs	r3, r2
 8003118:	4a06      	ldr	r2, [pc, #24]	; (8003134 <FLASH_MassErase+0x74>)
 800311a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8003120:	f3bf 8f4f 	dsb	sy
}
 8003124:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40023c00 	.word	0x40023c00

08003138 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e010      	b.n	8003176 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d103      	bne.n	8003162 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800315a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e009      	b.n	8003176 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d103      	bne.n	8003170 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e002      	b.n	8003176 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003170:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003174:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b0b      	cmp	r3, #11
 800317a:	d902      	bls.n	8003182 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8003182:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <FLASH_Erase_Sector+0xa0>)
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <FLASH_Erase_Sector+0xa0>)
 8003188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <FLASH_Erase_Sector+0xa0>)
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	4911      	ldr	r1, [pc, #68]	; (80031d8 <FLASH_Erase_Sector+0xa0>)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <FLASH_Erase_Sector+0xa0>)
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <FLASH_Erase_Sector+0xa0>)
 80031a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80031a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80031a6:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <FLASH_Erase_Sector+0xa0>)
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4313      	orrs	r3, r2
 80031b0:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <FLASH_Erase_Sector+0xa0>)
 80031b2:	f043 0302 	orr.w	r3, r3, #2
 80031b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80031b8:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <FLASH_Erase_Sector+0xa0>)
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	4a06      	ldr	r2, [pc, #24]	; (80031d8 <FLASH_Erase_Sector+0xa0>)
 80031be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80031c4:	f3bf 8f4f 	dsb	sy
}
 80031c8:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40023c00 	.word	0x40023c00

080031dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	; 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	e175      	b.n	80034e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031fc:	2201      	movs	r2, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	429a      	cmp	r2, r3
 8003216:	f040 8164 	bne.w	80034e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d00b      	beq.n	800323a <HAL_GPIO_Init+0x5e>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d007      	beq.n	800323a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800322e:	2b11      	cmp	r3, #17
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b12      	cmp	r3, #18
 8003238:	d130      	bne.n	800329c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	2203      	movs	r2, #3
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003270:	2201      	movs	r2, #1
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 0201 	and.w	r2, r3, #1
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x100>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b12      	cmp	r3, #18
 80032da:	d123      	bne.n	8003324 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	08da      	lsrs	r2, r3, #3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3208      	adds	r2, #8
 80032e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	220f      	movs	r2, #15
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	08da      	lsrs	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3208      	adds	r2, #8
 800331e:	69b9      	ldr	r1, [r7, #24]
 8003320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0203 	and.w	r2, r3, #3
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80be 	beq.w	80034e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003366:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_GPIO_Init+0x324>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	4a65      	ldr	r2, [pc, #404]	; (8003500 <HAL_GPIO_Init+0x324>)
 800336c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003370:	6453      	str	r3, [r2, #68]	; 0x44
 8003372:	4b63      	ldr	r3, [pc, #396]	; (8003500 <HAL_GPIO_Init+0x324>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800337e:	4a61      	ldr	r2, [pc, #388]	; (8003504 <HAL_GPIO_Init+0x328>)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	3302      	adds	r3, #2
 8003386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a58      	ldr	r2, [pc, #352]	; (8003508 <HAL_GPIO_Init+0x32c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d037      	beq.n	800341a <HAL_GPIO_Init+0x23e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a57      	ldr	r2, [pc, #348]	; (800350c <HAL_GPIO_Init+0x330>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d031      	beq.n	8003416 <HAL_GPIO_Init+0x23a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a56      	ldr	r2, [pc, #344]	; (8003510 <HAL_GPIO_Init+0x334>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d02b      	beq.n	8003412 <HAL_GPIO_Init+0x236>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a55      	ldr	r2, [pc, #340]	; (8003514 <HAL_GPIO_Init+0x338>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d025      	beq.n	800340e <HAL_GPIO_Init+0x232>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a54      	ldr	r2, [pc, #336]	; (8003518 <HAL_GPIO_Init+0x33c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01f      	beq.n	800340a <HAL_GPIO_Init+0x22e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a53      	ldr	r2, [pc, #332]	; (800351c <HAL_GPIO_Init+0x340>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d019      	beq.n	8003406 <HAL_GPIO_Init+0x22a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a52      	ldr	r2, [pc, #328]	; (8003520 <HAL_GPIO_Init+0x344>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_GPIO_Init+0x226>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a51      	ldr	r2, [pc, #324]	; (8003524 <HAL_GPIO_Init+0x348>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00d      	beq.n	80033fe <HAL_GPIO_Init+0x222>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a50      	ldr	r2, [pc, #320]	; (8003528 <HAL_GPIO_Init+0x34c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <HAL_GPIO_Init+0x21e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a4f      	ldr	r2, [pc, #316]	; (800352c <HAL_GPIO_Init+0x350>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_GPIO_Init+0x21a>
 80033f2:	2309      	movs	r3, #9
 80033f4:	e012      	b.n	800341c <HAL_GPIO_Init+0x240>
 80033f6:	230a      	movs	r3, #10
 80033f8:	e010      	b.n	800341c <HAL_GPIO_Init+0x240>
 80033fa:	2308      	movs	r3, #8
 80033fc:	e00e      	b.n	800341c <HAL_GPIO_Init+0x240>
 80033fe:	2307      	movs	r3, #7
 8003400:	e00c      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003402:	2306      	movs	r3, #6
 8003404:	e00a      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003406:	2305      	movs	r3, #5
 8003408:	e008      	b.n	800341c <HAL_GPIO_Init+0x240>
 800340a:	2304      	movs	r3, #4
 800340c:	e006      	b.n	800341c <HAL_GPIO_Init+0x240>
 800340e:	2303      	movs	r3, #3
 8003410:	e004      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003412:	2302      	movs	r3, #2
 8003414:	e002      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_GPIO_Init+0x240>
 800341a:	2300      	movs	r3, #0
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	f002 0203 	and.w	r2, r2, #3
 8003422:	0092      	lsls	r2, r2, #2
 8003424:	4093      	lsls	r3, r2
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800342c:	4935      	ldr	r1, [pc, #212]	; (8003504 <HAL_GPIO_Init+0x328>)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	089b      	lsrs	r3, r3, #2
 8003432:	3302      	adds	r3, #2
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800343a:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_GPIO_Init+0x354>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800345e:	4a34      	ldr	r2, [pc, #208]	; (8003530 <HAL_GPIO_Init+0x354>)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003464:	4b32      	ldr	r3, [pc, #200]	; (8003530 <HAL_GPIO_Init+0x354>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003488:	4a29      	ldr	r2, [pc, #164]	; (8003530 <HAL_GPIO_Init+0x354>)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800348e:	4b28      	ldr	r3, [pc, #160]	; (8003530 <HAL_GPIO_Init+0x354>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b2:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <HAL_GPIO_Init+0x354>)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_GPIO_Init+0x354>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034dc:	4a14      	ldr	r2, [pc, #80]	; (8003530 <HAL_GPIO_Init+0x354>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3301      	adds	r3, #1
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b0f      	cmp	r3, #15
 80034ec:	f67f ae86 	bls.w	80031fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	3724      	adds	r7, #36	; 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800
 8003504:	40013800 	.word	0x40013800
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400
 8003510:	40020800 	.word	0x40020800
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40021000 	.word	0x40021000
 800351c:	40021400 	.word	0x40021400
 8003520:	40021800 	.word	0x40021800
 8003524:	40021c00 	.word	0x40021c00
 8003528:	40022000 	.word	0x40022000
 800352c:	40022400 	.word	0x40022400
 8003530:	40013c00 	.word	0x40013c00

08003534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
 8003550:	e001      	b.n	8003556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	807b      	strh	r3, [r7, #2]
 8003570:	4613      	mov	r3, r2
 8003572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003574:	787b      	ldrb	r3, [r7, #1]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003580:	e003      	b.n	800358a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003582:	887b      	ldrh	r3, [r7, #2]
 8003584:	041a      	lsls	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	619a      	str	r2, [r3, #24]
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	460b      	mov	r3, r1
 80035a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035a8:	887a      	ldrh	r2, [r7, #2]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4013      	ands	r3, r2
 80035ae:	041a      	lsls	r2, r3, #16
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	43d9      	mvns	r1, r3
 80035b4:	887b      	ldrh	r3, [r7, #2]
 80035b6:	400b      	ands	r3, r1
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	619a      	str	r2, [r3, #24]
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	4013      	ands	r3, r2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d006      	beq.n	80035f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035e2:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f806 	bl	80035fc <HAL_GPIO_EXTI_Callback>
  }
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40013c00 	.word	0x40013c00

080035fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800361c:	2300      	movs	r3, #0
 800361e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e29b      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8087 	beq.w	8003746 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003638:	4b96      	ldr	r3, [pc, #600]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b04      	cmp	r3, #4
 8003642:	d00c      	beq.n	800365e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003644:	4b93      	ldr	r3, [pc, #588]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b08      	cmp	r3, #8
 800364e:	d112      	bne.n	8003676 <HAL_RCC_OscConfig+0x62>
 8003650:	4b90      	ldr	r3, [pc, #576]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800365c:	d10b      	bne.n	8003676 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365e:	4b8d      	ldr	r3, [pc, #564]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d06c      	beq.n	8003744 <HAL_RCC_OscConfig+0x130>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d168      	bne.n	8003744 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e275      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367e:	d106      	bne.n	800368e <HAL_RCC_OscConfig+0x7a>
 8003680:	4b84      	ldr	r3, [pc, #528]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a83      	ldr	r2, [pc, #524]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	e02e      	b.n	80036ec <HAL_RCC_OscConfig+0xd8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x9c>
 8003696:	4b7f      	ldr	r3, [pc, #508]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7e      	ldr	r2, [pc, #504]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 800369c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	4b7c      	ldr	r3, [pc, #496]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a7b      	ldr	r2, [pc, #492]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80036a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e01d      	b.n	80036ec <HAL_RCC_OscConfig+0xd8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCC_OscConfig+0xc0>
 80036ba:	4b76      	ldr	r3, [pc, #472]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a75      	ldr	r2, [pc, #468]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80036c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	4b73      	ldr	r3, [pc, #460]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a72      	ldr	r2, [pc, #456]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80036cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e00b      	b.n	80036ec <HAL_RCC_OscConfig+0xd8>
 80036d4:	4b6f      	ldr	r3, [pc, #444]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a6e      	ldr	r2, [pc, #440]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80036da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	4b6c      	ldr	r3, [pc, #432]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6b      	ldr	r2, [pc, #428]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80036e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d013      	beq.n	800371c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7fe f820 	bl	8001738 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fe f81c 	bl	8001738 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	; 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e229      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	4b61      	ldr	r3, [pc, #388]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0xe8>
 800371a:	e014      	b.n	8003746 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe f80c 	bl	8001738 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe f808 	bl	8001738 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e215      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003736:	4b57      	ldr	r3, [pc, #348]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x110>
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d069      	beq.n	8003826 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003752:	4b50      	ldr	r3, [pc, #320]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375e:	4b4d      	ldr	r3, [pc, #308]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b08      	cmp	r3, #8
 8003768:	d11c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x190>
 800376a:	4b4a      	ldr	r3, [pc, #296]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d116      	bne.n	80037a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003776:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_RCC_OscConfig+0x17a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d001      	beq.n	800378e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e1e9      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378e:	4b41      	ldr	r3, [pc, #260]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	493d      	ldr	r1, [pc, #244]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a2:	e040      	b.n	8003826 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d023      	beq.n	80037f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ac:	4b39      	ldr	r3, [pc, #228]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a38      	ldr	r2, [pc, #224]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fd ffbe 	bl	8001738 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c0:	f7fd ffba 	bl	8001738 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e1c7      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	4b30      	ldr	r3, [pc, #192]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037de:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4929      	ldr	r1, [pc, #164]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]
 80037f2:	e018      	b.n	8003826 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f4:	4b27      	ldr	r3, [pc, #156]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a26      	ldr	r2, [pc, #152]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fd ff9a 	bl	8001738 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003808:	f7fd ff96 	bl	8001738 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1a3      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d038      	beq.n	80038a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d019      	beq.n	800386e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383a:	4b16      	ldr	r3, [pc, #88]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 800383c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383e:	4a15      	ldr	r2, [pc, #84]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003846:	f7fd ff77 	bl	8001738 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384e:	f7fd ff73 	bl	8001738 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e180      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x23a>
 800386c:	e01a      	b.n	80038a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003872:	4a08      	ldr	r2, [pc, #32]	; (8003894 <HAL_RCC_OscConfig+0x280>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387a:	f7fd ff5d 	bl	8001738 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003880:	e00a      	b.n	8003898 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003882:	f7fd ff59 	bl	8001738 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d903      	bls.n	8003898 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e166      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
 8003894:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	4b92      	ldr	r3, [pc, #584]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 800389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ee      	bne.n	8003882 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80a4 	beq.w	80039fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b2:	4b8c      	ldr	r3, [pc, #560]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10d      	bne.n	80038da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038be:	4b89      	ldr	r3, [pc, #548]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	4a88      	ldr	r2, [pc, #544]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 80038c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ca:	4b86      	ldr	r3, [pc, #536]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d6:	2301      	movs	r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038da:	4b83      	ldr	r3, [pc, #524]	; (8003ae8 <HAL_RCC_OscConfig+0x4d4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d118      	bne.n	8003918 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038e6:	4b80      	ldr	r3, [pc, #512]	; (8003ae8 <HAL_RCC_OscConfig+0x4d4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a7f      	ldr	r2, [pc, #508]	; (8003ae8 <HAL_RCC_OscConfig+0x4d4>)
 80038ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f2:	f7fd ff21 	bl	8001738 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fa:	f7fd ff1d 	bl	8001738 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	; 0x64
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e12a      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800390c:	4b76      	ldr	r3, [pc, #472]	; (8003ae8 <HAL_RCC_OscConfig+0x4d4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x31a>
 8003920:	4b70      	ldr	r3, [pc, #448]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	4a6f      	ldr	r2, [pc, #444]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6713      	str	r3, [r2, #112]	; 0x70
 800392c:	e02d      	b.n	800398a <HAL_RCC_OscConfig+0x376>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x33c>
 8003936:	4b6b      	ldr	r3, [pc, #428]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	4a6a      	ldr	r2, [pc, #424]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	6713      	str	r3, [r2, #112]	; 0x70
 8003942:	4b68      	ldr	r3, [pc, #416]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	4a67      	ldr	r2, [pc, #412]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003948:	f023 0304 	bic.w	r3, r3, #4
 800394c:	6713      	str	r3, [r2, #112]	; 0x70
 800394e:	e01c      	b.n	800398a <HAL_RCC_OscConfig+0x376>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b05      	cmp	r3, #5
 8003956:	d10c      	bne.n	8003972 <HAL_RCC_OscConfig+0x35e>
 8003958:	4b62      	ldr	r3, [pc, #392]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	4a61      	ldr	r2, [pc, #388]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 800395e:	f043 0304 	orr.w	r3, r3, #4
 8003962:	6713      	str	r3, [r2, #112]	; 0x70
 8003964:	4b5f      	ldr	r3, [pc, #380]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a5e      	ldr	r2, [pc, #376]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
 8003970:	e00b      	b.n	800398a <HAL_RCC_OscConfig+0x376>
 8003972:	4b5c      	ldr	r3, [pc, #368]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	4a5b      	ldr	r2, [pc, #364]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	6713      	str	r3, [r2, #112]	; 0x70
 800397e:	4b59      	ldr	r3, [pc, #356]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4a58      	ldr	r2, [pc, #352]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003984:	f023 0304 	bic.w	r3, r3, #4
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d015      	beq.n	80039be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003992:	f7fd fed1 	bl	8001738 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003998:	e00a      	b.n	80039b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399a:	f7fd fecd 	bl	8001738 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e0d8      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b0:	4b4c      	ldr	r3, [pc, #304]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0ee      	beq.n	800399a <HAL_RCC_OscConfig+0x386>
 80039bc:	e014      	b.n	80039e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039be:	f7fd febb 	bl	8001738 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c4:	e00a      	b.n	80039dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c6:	f7fd feb7 	bl	8001738 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0c2      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039dc:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1ee      	bne.n	80039c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d105      	bne.n	80039fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ee:	4b3d      	ldr	r3, [pc, #244]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	4a3c      	ldr	r2, [pc, #240]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 80039f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80ae 	beq.w	8003b60 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a04:	4b37      	ldr	r3, [pc, #220]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 030c 	and.w	r3, r3, #12
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d06d      	beq.n	8003aec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d14b      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a18:	4b32      	ldr	r3, [pc, #200]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a31      	ldr	r2, [pc, #196]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fd fe88 	bl	8001738 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7fd fe84 	bl	8001738 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e091      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3e:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69da      	ldr	r2, [r3, #28]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	019b      	lsls	r3, r3, #6
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	085b      	lsrs	r3, r3, #1
 8003a62:	3b01      	subs	r3, #1
 8003a64:	041b      	lsls	r3, r3, #16
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	061b      	lsls	r3, r3, #24
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	071b      	lsls	r3, r3, #28
 8003a76:	491b      	ldr	r1, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a7c:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fd fe56 	bl	8001738 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fd fe52 	bl	8001738 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e05f      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa2:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x47c>
 8003aae:	e057      	b.n	8003b60 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0b      	ldr	r2, [pc, #44]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd fe3c 	bl	8001738 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fe38 	bl	8001738 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e045      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <HAL_RCC_OscConfig+0x4d0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x4b0>
 8003ae2:	e03d      	b.n	8003b60 <HAL_RCC_OscConfig+0x54c>
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003aec:	4b1f      	ldr	r3, [pc, #124]	; (8003b6c <HAL_RCC_OscConfig+0x558>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d030      	beq.n	8003b5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d129      	bne.n	8003b5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d122      	bne.n	8003b5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d119      	bne.n	8003b5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	3b01      	subs	r3, #1
 8003b36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d10f      	bne.n	8003b5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800

08003b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0d0      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b88:	4b6a      	ldr	r3, [pc, #424]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d910      	bls.n	8003bb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4b67      	ldr	r3, [pc, #412]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 020f 	bic.w	r2, r3, #15
 8003b9e:	4965      	ldr	r1, [pc, #404]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b63      	ldr	r3, [pc, #396]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0b8      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d020      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd0:	4b59      	ldr	r3, [pc, #356]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4a58      	ldr	r2, [pc, #352]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be8:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a52      	ldr	r2, [pc, #328]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bf2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf4:	4b50      	ldr	r3, [pc, #320]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	494d      	ldr	r1, [pc, #308]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d040      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d115      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e07f      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c32:	4b41      	ldr	r3, [pc, #260]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e073      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	4b3d      	ldr	r3, [pc, #244]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e06b      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c52:	4b39      	ldr	r3, [pc, #228]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f023 0203 	bic.w	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4936      	ldr	r1, [pc, #216]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c64:	f7fd fd68 	bl	8001738 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6c:	f7fd fd64 	bl	8001738 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e053      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 020c 	and.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1eb      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c94:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d210      	bcs.n	8003cc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 020f 	bic.w	r2, r3, #15
 8003caa:	4922      	ldr	r1, [pc, #136]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e032      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd0:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4916      	ldr	r1, [pc, #88]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	490e      	ldr	r1, [pc, #56]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d02:	f000 f821 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8003d06:	4602      	mov	r2, r0
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	490a      	ldr	r1, [pc, #40]	; (8003d3c <HAL_RCC_ClockConfig+0x1cc>)
 8003d14:	5ccb      	ldrb	r3, [r1, r3]
 8003d16:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1a:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <HAL_RCC_ClockConfig+0x1d0>)
 8003d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCC_ClockConfig+0x1d4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd fcc4 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023c00 	.word	0x40023c00
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	080085e0 	.word	0x080085e0
 8003d40:	20000030 	.word	0x20000030
 8003d44:	20000034 	.word	0x20000034

08003d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d48:	b5b0      	push	{r4, r5, r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d4e:	2100      	movs	r1, #0
 8003d50:	6079      	str	r1, [r7, #4]
 8003d52:	2100      	movs	r1, #0
 8003d54:	60f9      	str	r1, [r7, #12]
 8003d56:	2100      	movs	r1, #0
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d5e:	4952      	ldr	r1, [pc, #328]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d60:	6889      	ldr	r1, [r1, #8]
 8003d62:	f001 010c 	and.w	r1, r1, #12
 8003d66:	2908      	cmp	r1, #8
 8003d68:	d00d      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x3e>
 8003d6a:	2908      	cmp	r1, #8
 8003d6c:	f200 8094 	bhi.w	8003e98 <HAL_RCC_GetSysClockFreq+0x150>
 8003d70:	2900      	cmp	r1, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_RCC_GetSysClockFreq+0x32>
 8003d74:	2904      	cmp	r1, #4
 8003d76:	d003      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x38>
 8003d78:	e08e      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d7a:	4b4c      	ldr	r3, [pc, #304]	; (8003eac <HAL_RCC_GetSysClockFreq+0x164>)
 8003d7c:	60bb      	str	r3, [r7, #8]
      break;
 8003d7e:	e08e      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d80:	4b4b      	ldr	r3, [pc, #300]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d82:	60bb      	str	r3, [r7, #8]
      break;
 8003d84:	e08b      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d86:	4948      	ldr	r1, [pc, #288]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d88:	6849      	ldr	r1, [r1, #4]
 8003d8a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d8e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d90:	4945      	ldr	r1, [pc, #276]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d92:	6849      	ldr	r1, [r1, #4]
 8003d94:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d98:	2900      	cmp	r1, #0
 8003d9a:	d024      	beq.n	8003de6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9c:	4942      	ldr	r1, [pc, #264]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d9e:	6849      	ldr	r1, [r1, #4]
 8003da0:	0989      	lsrs	r1, r1, #6
 8003da2:	4608      	mov	r0, r1
 8003da4:	f04f 0100 	mov.w	r1, #0
 8003da8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003dac:	f04f 0500 	mov.w	r5, #0
 8003db0:	ea00 0204 	and.w	r2, r0, r4
 8003db4:	ea01 0305 	and.w	r3, r1, r5
 8003db8:	493d      	ldr	r1, [pc, #244]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003dba:	fb01 f003 	mul.w	r0, r1, r3
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	fb01 f102 	mul.w	r1, r1, r2
 8003dc4:	1844      	adds	r4, r0, r1
 8003dc6:	493a      	ldr	r1, [pc, #232]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003dc8:	fba2 0101 	umull	r0, r1, r2, r1
 8003dcc:	1863      	adds	r3, r4, r1
 8003dce:	4619      	mov	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	f7fc fa2e 	bl	8000238 <__aeabi_uldivmod>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4613      	mov	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	e04a      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de6:	4b30      	ldr	r3, [pc, #192]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	099b      	lsrs	r3, r3, #6
 8003dec:	461a      	mov	r2, r3
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003df6:	f04f 0100 	mov.w	r1, #0
 8003dfa:	ea02 0400 	and.w	r4, r2, r0
 8003dfe:	ea03 0501 	and.w	r5, r3, r1
 8003e02:	4620      	mov	r0, r4
 8003e04:	4629      	mov	r1, r5
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	014b      	lsls	r3, r1, #5
 8003e10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e14:	0142      	lsls	r2, r0, #5
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	1b00      	subs	r0, r0, r4
 8003e1c:	eb61 0105 	sbc.w	r1, r1, r5
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	018b      	lsls	r3, r1, #6
 8003e2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e2e:	0182      	lsls	r2, r0, #6
 8003e30:	1a12      	subs	r2, r2, r0
 8003e32:	eb63 0301 	sbc.w	r3, r3, r1
 8003e36:	f04f 0000 	mov.w	r0, #0
 8003e3a:	f04f 0100 	mov.w	r1, #0
 8003e3e:	00d9      	lsls	r1, r3, #3
 8003e40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e44:	00d0      	lsls	r0, r2, #3
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	1912      	adds	r2, r2, r4
 8003e4c:	eb45 0303 	adc.w	r3, r5, r3
 8003e50:	f04f 0000 	mov.w	r0, #0
 8003e54:	f04f 0100 	mov.w	r1, #0
 8003e58:	0299      	lsls	r1, r3, #10
 8003e5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e5e:	0290      	lsls	r0, r2, #10
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4610      	mov	r0, r2
 8003e66:	4619      	mov	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	f7fc f9e2 	bl	8000238 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4613      	mov	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	3301      	adds	r3, #1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	60bb      	str	r3, [r7, #8]
      break;
 8003e96:	e002      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <HAL_RCC_GetSysClockFreq+0x164>)
 8003e9a:	60bb      	str	r3, [r7, #8]
      break;
 8003e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	00f42400 	.word	0x00f42400
 8003eb0:	017d7840 	.word	0x017d7840

08003eb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	20000030 	.word	0x20000030

08003ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ed0:	f7ff fff0 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	0a9b      	lsrs	r3, r3, #10
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	4903      	ldr	r1, [pc, #12]	; (8003ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee2:	5ccb      	ldrb	r3, [r1, r3]
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	080085f0 	.word	0x080085f0

08003ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ef8:	f7ff ffdc 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	0b5b      	lsrs	r3, r3, #13
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	4903      	ldr	r1, [pc, #12]	; (8003f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f0a:	5ccb      	ldrb	r3, [r1, r3]
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40023800 	.word	0x40023800
 8003f18:	080085f0 	.word	0x080085f0

08003f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d012      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f44:	4b69      	ldr	r3, [pc, #420]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a68      	ldr	r2, [pc, #416]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f4e:	6093      	str	r3, [r2, #8]
 8003f50:	4b66      	ldr	r3, [pc, #408]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f58:	4964      	ldr	r1, [pc, #400]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f66:	2301      	movs	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d017      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f76:	4b5d      	ldr	r3, [pc, #372]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	4959      	ldr	r1, [pc, #356]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f94:	d101      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f96:	2301      	movs	r3, #1
 8003f98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d017      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fb2:	4b4e      	ldr	r3, [pc, #312]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	494a      	ldr	r1, [pc, #296]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 808b 	beq.w	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004000:	4b3a      	ldr	r3, [pc, #232]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	4a39      	ldr	r2, [pc, #228]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400a:	6413      	str	r3, [r2, #64]	; 0x40
 800400c:	4b37      	ldr	r3, [pc, #220]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004018:	4b35      	ldr	r3, [pc, #212]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800401e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004024:	f7fd fb88 	bl	8001738 <HAL_GetTick>
 8004028:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402c:	f7fd fb84 	bl	8001738 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e38f      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800404a:	4b28      	ldr	r3, [pc, #160]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004052:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d035      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	429a      	cmp	r2, r3
 8004066:	d02e      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004068:	4b20      	ldr	r3, [pc, #128]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004070:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004072:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800407e:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4a1a      	ldr	r2, [pc, #104]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004088:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800408a:	4a18      	ldr	r2, [pc, #96]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004090:	4b16      	ldr	r3, [pc, #88]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d114      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fd fb4c 	bl	8001738 <HAL_GetTick>
 80040a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a2:	e00a      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a4:	f7fd fb48 	bl	8001738 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e351      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ba:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0ee      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d2:	d111      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040e0:	4b04      	ldr	r3, [pc, #16]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040e2:	400b      	ands	r3, r1
 80040e4:	4901      	ldr	r1, [pc, #4]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
 80040ea:	e00b      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40007000 	.word	0x40007000
 80040f4:	0ffffcff 	.word	0x0ffffcff
 80040f8:	4bb3      	ldr	r3, [pc, #716]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4ab2      	ldr	r2, [pc, #712]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004102:	6093      	str	r3, [r2, #8]
 8004104:	4bb0      	ldr	r3, [pc, #704]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004106:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004110:	49ad      	ldr	r1, [pc, #692]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004112:	4313      	orrs	r3, r2
 8004114:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b00      	cmp	r3, #0
 8004120:	d010      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004122:	4ba9      	ldr	r3, [pc, #676]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004128:	4aa7      	ldr	r2, [pc, #668]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800412a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800412e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004132:	4ba5      	ldr	r3, [pc, #660]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004134:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	49a2      	ldr	r1, [pc, #648]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004150:	4b9d      	ldr	r3, [pc, #628]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004156:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800415e:	499a      	ldr	r1, [pc, #616]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004172:	4b95      	ldr	r3, [pc, #596]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004178:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004180:	4991      	ldr	r1, [pc, #580]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004194:	4b8c      	ldr	r3, [pc, #560]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a2:	4989      	ldr	r1, [pc, #548]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041b6:	4b84      	ldr	r3, [pc, #528]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	4980      	ldr	r1, [pc, #512]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041d8:	4b7b      	ldr	r3, [pc, #492]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	4978      	ldr	r1, [pc, #480]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041fa:	4b73      	ldr	r3, [pc, #460]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	f023 020c 	bic.w	r2, r3, #12
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004208:	496f      	ldr	r1, [pc, #444]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800421c:	4b6a      	ldr	r3, [pc, #424]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422a:	4967      	ldr	r1, [pc, #412]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800423e:	4b62      	ldr	r3, [pc, #392]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424c:	495e      	ldr	r1, [pc, #376]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004260:	4b59      	ldr	r3, [pc, #356]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	4956      	ldr	r1, [pc, #344]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004282:	4b51      	ldr	r3, [pc, #324]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	494d      	ldr	r1, [pc, #308]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80042a4:	4b48      	ldr	r3, [pc, #288]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b2:	4945      	ldr	r1, [pc, #276]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042c6:	4b40      	ldr	r3, [pc, #256]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d4:	493c      	ldr	r1, [pc, #240]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042e8:	4b37      	ldr	r3, [pc, #220]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042f6:	4934      	ldr	r1, [pc, #208]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d011      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800430a:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004318:	492b      	ldr	r1, [pc, #172]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004328:	d101      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800432a:	2301      	movs	r3, #1
 800432c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800433a:	2301      	movs	r3, #1
 800433c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800434a:	4b1f      	ldr	r3, [pc, #124]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004358:	491b      	ldr	r1, [pc, #108]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00b      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800436c:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800437c:	4912      	ldr	r1, [pc, #72]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00b      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004390:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004396:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a0:	4909      	ldr	r1, [pc, #36]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00f      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	e002      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80043c6:	bf00      	nop
 80043c8:	40023800 	.word	0x40023800
 80043cc:	4986      	ldr	r1, [pc, #536]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00b      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043e0:	4b81      	ldr	r3, [pc, #516]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f0:	497d      	ldr	r1, [pc, #500]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d006      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80d6 	beq.w	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800440c:	4b76      	ldr	r3, [pc, #472]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a75      	ldr	r2, [pc, #468]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004412:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004418:	f7fd f98e 	bl	8001738 <HAL_GetTick>
 800441c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004420:	f7fd f98a 	bl	8001738 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	; 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e195      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004432:	4b6d      	ldr	r3, [pc, #436]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d021      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	2b00      	cmp	r3, #0
 8004450:	d11d      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004452:	4b65      	ldr	r3, [pc, #404]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004460:	4b61      	ldr	r3, [pc, #388]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004466:	0e1b      	lsrs	r3, r3, #24
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	019a      	lsls	r2, r3, #6
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	041b      	lsls	r3, r3, #16
 8004478:	431a      	orrs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	061b      	lsls	r3, r3, #24
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	071b      	lsls	r3, r3, #28
 8004486:	4958      	ldr	r1, [pc, #352]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a2:	d00a      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d02e      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044b8:	d129      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044ba:	4b4b      	ldr	r3, [pc, #300]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044c8:	4b47      	ldr	r3, [pc, #284]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ce:	0f1b      	lsrs	r3, r3, #28
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	019a      	lsls	r2, r3, #6
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	041b      	lsls	r3, r3, #16
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	061b      	lsls	r3, r3, #24
 80044e8:	431a      	orrs	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	071b      	lsls	r3, r3, #28
 80044ee:	493e      	ldr	r1, [pc, #248]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044f6:	4b3c      	ldr	r3, [pc, #240]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044fc:	f023 021f 	bic.w	r2, r3, #31
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	3b01      	subs	r3, #1
 8004506:	4938      	ldr	r1, [pc, #224]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01d      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800451a:	4b33      	ldr	r3, [pc, #204]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800451c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004520:	0e1b      	lsrs	r3, r3, #24
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004528:	4b2f      	ldr	r3, [pc, #188]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800452a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800452e:	0f1b      	lsrs	r3, r3, #28
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	019a      	lsls	r2, r3, #6
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	041b      	lsls	r3, r3, #16
 8004542:	431a      	orrs	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	061b      	lsls	r3, r3, #24
 8004548:	431a      	orrs	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	071b      	lsls	r3, r3, #28
 800454e:	4926      	ldr	r1, [pc, #152]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d011      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	019a      	lsls	r2, r3, #6
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	061b      	lsls	r3, r3, #24
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	071b      	lsls	r3, r3, #28
 800457e:	491a      	ldr	r1, [pc, #104]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004586:	4b18      	ldr	r3, [pc, #96]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004592:	f7fd f8d1 	bl	8001738 <HAL_GetTick>
 8004596:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800459a:	f7fd f8cd 	bl	8001738 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b64      	cmp	r3, #100	; 0x64
 80045a6:	d901      	bls.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0d8      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045ac:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	f040 80ce 	bne.w	800475c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a08      	ldr	r2, [pc, #32]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045cc:	f7fd f8b4 	bl	8001738 <HAL_GetTick>
 80045d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045d2:	e00b      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045d4:	f7fd f8b0 	bl	8001738 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	; 0x64
 80045e0:	d904      	bls.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e0bb      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80045e6:	bf00      	nop
 80045e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045ec:	4b5e      	ldr	r3, [pc, #376]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045f8:	d0ec      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004616:	2b00      	cmp	r3, #0
 8004618:	d02e      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d12a      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004622:	4b51      	ldr	r3, [pc, #324]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004630:	4b4d      	ldr	r3, [pc, #308]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	0f1b      	lsrs	r3, r3, #28
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	019a      	lsls	r2, r3, #6
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	041b      	lsls	r3, r3, #16
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	061b      	lsls	r3, r3, #24
 8004650:	431a      	orrs	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	071b      	lsls	r3, r3, #28
 8004656:	4944      	ldr	r1, [pc, #272]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800465e:	4b42      	ldr	r3, [pc, #264]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004664:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	3b01      	subs	r3, #1
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	493d      	ldr	r1, [pc, #244]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d022      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800468c:	d11d      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800468e:	4b36      	ldr	r3, [pc, #216]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	0e1b      	lsrs	r3, r3, #24
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800469c:	4b32      	ldr	r3, [pc, #200]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a2:	0f1b      	lsrs	r3, r3, #28
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	019a      	lsls	r2, r3, #6
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	431a      	orrs	r2, r3
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	061b      	lsls	r3, r3, #24
 80046bc:	431a      	orrs	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	071b      	lsls	r3, r3, #28
 80046c2:	4929      	ldr	r1, [pc, #164]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d028      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046d6:	4b24      	ldr	r3, [pc, #144]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	0e1b      	lsrs	r3, r3, #24
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046e4:	4b20      	ldr	r3, [pc, #128]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	0c1b      	lsrs	r3, r3, #16
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	019a      	lsls	r2, r3, #6
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	431a      	orrs	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	061b      	lsls	r3, r3, #24
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	071b      	lsls	r3, r3, #28
 800470a:	4917      	ldr	r1, [pc, #92]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004712:	4b15      	ldr	r3, [pc, #84]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004718:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	4911      	ldr	r1, [pc, #68]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004728:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a0e      	ldr	r2, [pc, #56]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800472e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004734:	f7fd f800 	bl	8001738 <HAL_GetTick>
 8004738:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800473a:	e008      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800473c:	f7fc fffc 	bl	8001738 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b64      	cmp	r3, #100	; 0x64
 8004748:	d901      	bls.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e007      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800475a:	d1ef      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3720      	adds	r7, #32
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800

0800476c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e09d      	b.n	80048ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	2b00      	cmp	r3, #0
 8004784:	d108      	bne.n	8004798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800478e:	d009      	beq.n	80047a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	61da      	str	r2, [r3, #28]
 8004796:	e005      	b.n	80047a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fc fd84 	bl	80012cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047e4:	d902      	bls.n	80047ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e002      	b.n	80047f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047fa:	d007      	beq.n	800480c <HAL_SPI_Init+0xa0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004804:	d002      	beq.n	800480c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484e:	ea42 0103 	orr.w	r1, r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	0c1b      	lsrs	r3, r3, #16
 8004868:	f003 0204 	and.w	r2, r3, #4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004888:	ea42 0103 	orr.w	r1, r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e049      	b.n	8004968 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d106      	bne.n	80048ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7fc fd77 	bl	80013dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f000 fd61 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d001      	beq.n	8004988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e054      	b.n	8004a32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a26      	ldr	r2, [pc, #152]	; (8004a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d022      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b2:	d01d      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a22      	ldr	r2, [pc, #136]	; (8004a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d018      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a21      	ldr	r2, [pc, #132]	; (8004a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00e      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <HAL_TIM_Base_Start_IT+0xe0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <HAL_TIM_Base_Start_IT+0xe4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <HAL_TIM_Base_Start_IT+0xe8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d115      	bne.n	8004a1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <HAL_TIM_Base_Start_IT+0xec>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d015      	beq.n	8004a2e <HAL_TIM_Base_Start_IT+0xbe>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a08:	d011      	beq.n	8004a2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1a:	e008      	b.n	8004a2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e000      	b.n	8004a30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40010400 	.word	0x40010400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40001800 	.word	0x40001800
 8004a5c:	00010007 	.word	0x00010007

08004a60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e049      	b.n	8004b06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f841 	bl	8004b0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	f000 fc92 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e08f      	b.n	8004c58 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fc fc01 	bl	8001354 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2202      	movs	r2, #2
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6899      	ldr	r1, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b3e      	ldr	r3, [pc, #248]	; (8004c60 <HAL_TIM_Encoder_Init+0x13c>)
 8004b66:	400b      	ands	r3, r1
 8004b68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3304      	adds	r3, #4
 8004b72:	4619      	mov	r1, r3
 8004b74:	4610      	mov	r0, r2
 8004b76:	f000 fc27 	bl	80053c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4b31      	ldr	r3, [pc, #196]	; (8004c64 <HAL_TIM_Encoder_Init+0x140>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4b2b      	ldr	r3, [pc, #172]	; (8004c68 <HAL_TIM_Encoder_Init+0x144>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <HAL_TIM_Encoder_Init+0x148>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	011a      	lsls	r2, r3, #4
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	031b      	lsls	r3, r3, #12
 8004be4:	4313      	orrs	r3, r2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004bfa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	4313      	orrs	r3, r2
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	fffebff8 	.word	0xfffebff8
 8004c64:	fffffcfc 	.word	0xfffffcfc
 8004c68:	fffff3f3 	.word	0xfffff3f3
 8004c6c:	ffff0f0f 	.word	0xffff0f0f

08004c70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d110      	bne.n	8004cc2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d102      	bne.n	8004cac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ca6:	7b7b      	ldrb	r3, [r7, #13]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d001      	beq.n	8004cb0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e069      	b.n	8004d84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc0:	e031      	b.n	8004d26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d110      	bne.n	8004cea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cc8:	7bbb      	ldrb	r3, [r7, #14]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d102      	bne.n	8004cd4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cce:	7b3b      	ldrb	r3, [r7, #12]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d001      	beq.n	8004cd8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e055      	b.n	8004d84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce8:	e01d      	b.n	8004d26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d108      	bne.n	8004d02 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf0:	7bbb      	ldrb	r3, [r7, #14]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d105      	bne.n	8004d02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf6:	7b7b      	ldrb	r3, [r7, #13]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d102      	bne.n	8004d02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cfc:	7b3b      	ldrb	r3, [r7, #12]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d001      	beq.n	8004d06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e03e      	b.n	8004d84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2202      	movs	r2, #2
 8004d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_TIM_Encoder_Start+0xc4>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d008      	beq.n	8004d44 <HAL_TIM_Encoder_Start+0xd4>
 8004d32:	e00f      	b.n	8004d54 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fedb 	bl	8005af8 <TIM_CCxChannelCmd>
      break;
 8004d42:	e016      	b.n	8004d72 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	2104      	movs	r1, #4
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fed3 	bl	8005af8 <TIM_CCxChannelCmd>
      break;
 8004d52:	e00e      	b.n	8004d72 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fecb 	bl	8005af8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2201      	movs	r2, #1
 8004d68:	2104      	movs	r1, #4
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fec4 	bl	8005af8 <TIM_CCxChannelCmd>
      break;
 8004d70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0201 	orr.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d122      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d11b      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0202 	mvn.w	r2, #2
 8004db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fadc 	bl	800538c <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 face 	bl	8005378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fadf 	bl	80053a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d122      	bne.n	8004e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d11b      	bne.n	8004e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0204 	mvn.w	r2, #4
 8004e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fab2 	bl	800538c <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 faa4 	bl	8005378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fab5 	bl	80053a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d122      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d11b      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0208 	mvn.w	r2, #8
 8004e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2204      	movs	r2, #4
 8004e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fa88 	bl	800538c <HAL_TIM_IC_CaptureCallback>
 8004e7c:	e005      	b.n	8004e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fa7a 	bl	8005378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fa8b 	bl	80053a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b10      	cmp	r3, #16
 8004e9c:	d122      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d11b      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0210 	mvn.w	r2, #16
 8004eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2208      	movs	r2, #8
 8004eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fa5e 	bl	800538c <HAL_TIM_IC_CaptureCallback>
 8004ed0:	e005      	b.n	8004ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa50 	bl	8005378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fa61 	bl	80053a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d10e      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0201 	mvn.w	r2, #1
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fb fc84 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1a:	2b80      	cmp	r3, #128	; 0x80
 8004f1c:	d10e      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d107      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fe9c 	bl	8005c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4a:	d10e      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f56:	2b80      	cmp	r3, #128	; 0x80
 8004f58:	d107      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fe8f 	bl	8005c88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d10e      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b40      	cmp	r3, #64	; 0x40
 8004f84:	d107      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fa0f 	bl	80053b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d10e      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d107      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f06f 0220 	mvn.w	r2, #32
 8004fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fe4f 	bl	8005c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e0fd      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b14      	cmp	r3, #20
 8004ff2:	f200 80f0 	bhi.w	80051d6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004ff6:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	08005051 	.word	0x08005051
 8005000:	080051d7 	.word	0x080051d7
 8005004:	080051d7 	.word	0x080051d7
 8005008:	080051d7 	.word	0x080051d7
 800500c:	08005091 	.word	0x08005091
 8005010:	080051d7 	.word	0x080051d7
 8005014:	080051d7 	.word	0x080051d7
 8005018:	080051d7 	.word	0x080051d7
 800501c:	080050d3 	.word	0x080050d3
 8005020:	080051d7 	.word	0x080051d7
 8005024:	080051d7 	.word	0x080051d7
 8005028:	080051d7 	.word	0x080051d7
 800502c:	08005113 	.word	0x08005113
 8005030:	080051d7 	.word	0x080051d7
 8005034:	080051d7 	.word	0x080051d7
 8005038:	080051d7 	.word	0x080051d7
 800503c:	08005155 	.word	0x08005155
 8005040:	080051d7 	.word	0x080051d7
 8005044:	080051d7 	.word	0x080051d7
 8005048:	080051d7 	.word	0x080051d7
 800504c:	08005195 	.word	0x08005195
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fa56 	bl	8005508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0208 	orr.w	r2, r2, #8
 800506a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0204 	bic.w	r2, r2, #4
 800507a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6999      	ldr	r1, [r3, #24]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	619a      	str	r2, [r3, #24]
      break;
 800508e:	e0a3      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 faa8 	bl	80055ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6999      	ldr	r1, [r3, #24]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	021a      	lsls	r2, r3, #8
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	619a      	str	r2, [r3, #24]
      break;
 80050d0:	e082      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68b9      	ldr	r1, [r7, #8]
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 faff 	bl	80056dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69da      	ldr	r2, [r3, #28]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0208 	orr.w	r2, r2, #8
 80050ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0204 	bic.w	r2, r2, #4
 80050fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69d9      	ldr	r1, [r3, #28]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	61da      	str	r2, [r3, #28]
      break;
 8005110:	e062      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fb55 	bl	80057c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800512c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69d9      	ldr	r1, [r3, #28]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	021a      	lsls	r2, r3, #8
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	61da      	str	r2, [r3, #28]
      break;
 8005152:	e041      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fb8c 	bl	8005878 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0208 	orr.w	r2, r2, #8
 800516e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0204 	bic.w	r2, r2, #4
 800517e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005192:	e021      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68b9      	ldr	r1, [r7, #8]
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fbbe 	bl	800591c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	021a      	lsls	r2, r3, #8
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051d4:	e000      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80051d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop

080051ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIM_ConfigClockSource+0x18>
 8005200:	2302      	movs	r3, #2
 8005202:	e0b3      	b.n	800536c <HAL_TIM_ConfigClockSource+0x180>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4b55      	ldr	r3, [pc, #340]	; (8005374 <HAL_TIM_ConfigClockSource+0x188>)
 8005220:	4013      	ands	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523c:	d03e      	beq.n	80052bc <HAL_TIM_ConfigClockSource+0xd0>
 800523e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005242:	f200 8087 	bhi.w	8005354 <HAL_TIM_ConfigClockSource+0x168>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524a:	f000 8085 	beq.w	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005252:	d87f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d01a      	beq.n	800528e <HAL_TIM_ConfigClockSource+0xa2>
 8005258:	2b70      	cmp	r3, #112	; 0x70
 800525a:	d87b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d050      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x116>
 8005260:	2b60      	cmp	r3, #96	; 0x60
 8005262:	d877      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d03c      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0xf6>
 8005268:	2b50      	cmp	r3, #80	; 0x50
 800526a:	d873      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d058      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x136>
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d86f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 8005274:	2b30      	cmp	r3, #48	; 0x30
 8005276:	d064      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x156>
 8005278:	2b30      	cmp	r3, #48	; 0x30
 800527a:	d86b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 800527c:	2b20      	cmp	r3, #32
 800527e:	d060      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x156>
 8005280:	2b20      	cmp	r3, #32
 8005282:	d867      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d05c      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x156>
 8005288:	2b10      	cmp	r3, #16
 800528a:	d05a      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800528c:	e062      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6899      	ldr	r1, [r3, #8]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f000 fc0b 	bl	8005ab8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	609a      	str	r2, [r3, #8]
      break;
 80052ba:	e04e      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6899      	ldr	r1, [r3, #8]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f000 fbf4 	bl	8005ab8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052de:	609a      	str	r2, [r3, #8]
      break;
 80052e0:	e03b      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6859      	ldr	r1, [r3, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f000 fb68 	bl	80059c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2150      	movs	r1, #80	; 0x50
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fbc1 	bl	8005a82 <TIM_ITRx_SetConfig>
      break;
 8005300:	e02b      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	461a      	mov	r2, r3
 8005310:	f000 fb87 	bl	8005a22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2160      	movs	r1, #96	; 0x60
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fbb1 	bl	8005a82 <TIM_ITRx_SetConfig>
      break;
 8005320:	e01b      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6859      	ldr	r1, [r3, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	461a      	mov	r2, r3
 8005330:	f000 fb48 	bl	80059c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2140      	movs	r1, #64	; 0x40
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fba1 	bl	8005a82 <TIM_ITRx_SetConfig>
      break;
 8005340:	e00b      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f000 fb98 	bl	8005a82 <TIM_ITRx_SetConfig>
        break;
 8005352:	e002      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005354:	bf00      	nop
 8005356:	e000      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005358:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	fffeff88 	.word	0xfffeff88

08005378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a40      	ldr	r2, [pc, #256]	; (80054dc <TIM_Base_SetConfig+0x114>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e6:	d00f      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a3d      	ldr	r2, [pc, #244]	; (80054e0 <TIM_Base_SetConfig+0x118>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00b      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a3c      	ldr	r2, [pc, #240]	; (80054e4 <TIM_Base_SetConfig+0x11c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a3b      	ldr	r2, [pc, #236]	; (80054e8 <TIM_Base_SetConfig+0x120>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a3a      	ldr	r2, [pc, #232]	; (80054ec <TIM_Base_SetConfig+0x124>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a2f      	ldr	r2, [pc, #188]	; (80054dc <TIM_Base_SetConfig+0x114>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d02b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005428:	d027      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a2c      	ldr	r2, [pc, #176]	; (80054e0 <TIM_Base_SetConfig+0x118>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d023      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2b      	ldr	r2, [pc, #172]	; (80054e4 <TIM_Base_SetConfig+0x11c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01f      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a2a      	ldr	r2, [pc, #168]	; (80054e8 <TIM_Base_SetConfig+0x120>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a29      	ldr	r2, [pc, #164]	; (80054ec <TIM_Base_SetConfig+0x124>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d017      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a28      	ldr	r2, [pc, #160]	; (80054f0 <TIM_Base_SetConfig+0x128>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a27      	ldr	r2, [pc, #156]	; (80054f4 <TIM_Base_SetConfig+0x12c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00f      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a26      	ldr	r2, [pc, #152]	; (80054f8 <TIM_Base_SetConfig+0x130>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a25      	ldr	r2, [pc, #148]	; (80054fc <TIM_Base_SetConfig+0x134>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d007      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a24      	ldr	r2, [pc, #144]	; (8005500 <TIM_Base_SetConfig+0x138>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a23      	ldr	r2, [pc, #140]	; (8005504 <TIM_Base_SetConfig+0x13c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d108      	bne.n	800548c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <TIM_Base_SetConfig+0x114>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_Base_SetConfig+0xf8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a0c      	ldr	r2, [pc, #48]	; (80054ec <TIM_Base_SetConfig+0x124>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d103      	bne.n	80054c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	615a      	str	r2, [r3, #20]
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40010000 	.word	0x40010000
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40010400 	.word	0x40010400
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800
 80054fc:	40001800 	.word	0x40001800
 8005500:	40001c00 	.word	0x40001c00
 8005504:	40002000 	.word	0x40002000

08005508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f023 0201 	bic.w	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4b2b      	ldr	r3, [pc, #172]	; (80055e0 <TIM_OC1_SetConfig+0xd8>)
 8005534:	4013      	ands	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f023 0302 	bic.w	r3, r3, #2
 8005550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a21      	ldr	r2, [pc, #132]	; (80055e4 <TIM_OC1_SetConfig+0xdc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_OC1_SetConfig+0x64>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a20      	ldr	r2, [pc, #128]	; (80055e8 <TIM_OC1_SetConfig+0xe0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d10c      	bne.n	8005586 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f023 0308 	bic.w	r3, r3, #8
 8005572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f023 0304 	bic.w	r3, r3, #4
 8005584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <TIM_OC1_SetConfig+0xdc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_OC1_SetConfig+0x8e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <TIM_OC1_SetConfig+0xe0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d111      	bne.n	80055ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800559c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	621a      	str	r2, [r3, #32]
}
 80055d4:	bf00      	nop
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	fffeff8f 	.word	0xfffeff8f
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40010400 	.word	0x40010400

080055ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f023 0210 	bic.w	r2, r3, #16
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4b2e      	ldr	r3, [pc, #184]	; (80056d0 <TIM_OC2_SetConfig+0xe4>)
 8005618:	4013      	ands	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f023 0320 	bic.w	r3, r3, #32
 8005636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a23      	ldr	r2, [pc, #140]	; (80056d4 <TIM_OC2_SetConfig+0xe8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_OC2_SetConfig+0x68>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a22      	ldr	r2, [pc, #136]	; (80056d8 <TIM_OC2_SetConfig+0xec>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d10d      	bne.n	8005670 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800565a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800566e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <TIM_OC2_SetConfig+0xe8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_OC2_SetConfig+0x94>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <TIM_OC2_SetConfig+0xec>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d113      	bne.n	80056a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005686:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800568e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	feff8fff 	.word	0xfeff8fff
 80056d4:	40010000 	.word	0x40010000
 80056d8:	40010400 	.word	0x40010400

080056dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4b2d      	ldr	r3, [pc, #180]	; (80057bc <TIM_OC3_SetConfig+0xe0>)
 8005708:	4013      	ands	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0303 	bic.w	r3, r3, #3
 8005712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	021b      	lsls	r3, r3, #8
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a22      	ldr	r2, [pc, #136]	; (80057c0 <TIM_OC3_SetConfig+0xe4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <TIM_OC3_SetConfig+0x66>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a21      	ldr	r2, [pc, #132]	; (80057c4 <TIM_OC3_SetConfig+0xe8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d10d      	bne.n	800575e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	021b      	lsls	r3, r3, #8
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800575c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a17      	ldr	r2, [pc, #92]	; (80057c0 <TIM_OC3_SetConfig+0xe4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_OC3_SetConfig+0x92>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a16      	ldr	r2, [pc, #88]	; (80057c4 <TIM_OC3_SetConfig+0xe8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d113      	bne.n	8005796 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800577c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	621a      	str	r2, [r3, #32]
}
 80057b0:	bf00      	nop
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	fffeff8f 	.word	0xfffeff8f
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40010400 	.word	0x40010400

080057c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4b1e      	ldr	r3, [pc, #120]	; (800586c <TIM_OC4_SetConfig+0xa4>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	021b      	lsls	r3, r3, #8
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	031b      	lsls	r3, r3, #12
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a13      	ldr	r2, [pc, #76]	; (8005870 <TIM_OC4_SetConfig+0xa8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_OC4_SetConfig+0x68>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a12      	ldr	r2, [pc, #72]	; (8005874 <TIM_OC4_SetConfig+0xac>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d109      	bne.n	8005844 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	019b      	lsls	r3, r3, #6
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	feff8fff 	.word	0xfeff8fff
 8005870:	40010000 	.word	0x40010000
 8005874:	40010400 	.word	0x40010400

08005878 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <TIM_OC5_SetConfig+0x98>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	041b      	lsls	r3, r3, #16
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a12      	ldr	r2, [pc, #72]	; (8005914 <TIM_OC5_SetConfig+0x9c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <TIM_OC5_SetConfig+0x5e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a11      	ldr	r2, [pc, #68]	; (8005918 <TIM_OC5_SetConfig+0xa0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d109      	bne.n	80058ea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	621a      	str	r2, [r3, #32]
}
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	fffeff8f 	.word	0xfffeff8f
 8005914:	40010000 	.word	0x40010000
 8005918:	40010400 	.word	0x40010400

0800591c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4b1c      	ldr	r3, [pc, #112]	; (80059b8 <TIM_OC6_SetConfig+0x9c>)
 8005948:	4013      	ands	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800595e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	051b      	lsls	r3, r3, #20
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a13      	ldr	r2, [pc, #76]	; (80059bc <TIM_OC6_SetConfig+0xa0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_OC6_SetConfig+0x60>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a12      	ldr	r2, [pc, #72]	; (80059c0 <TIM_OC6_SetConfig+0xa4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d109      	bne.n	8005990 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005982:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	029b      	lsls	r3, r3, #10
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	621a      	str	r2, [r3, #32]
}
 80059aa:	bf00      	nop
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	feff8fff 	.word	0xfeff8fff
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40010400 	.word	0x40010400

080059c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	f023 0201 	bic.w	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f023 030a 	bic.w	r3, r3, #10
 8005a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b087      	sub	sp, #28
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f023 0210 	bic.w	r2, r3, #16
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	031b      	lsls	r3, r3, #12
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	621a      	str	r2, [r3, #32]
}
 8005a76:	bf00      	nop
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f043 0307 	orr.w	r3, r3, #7
 8005aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	609a      	str	r2, [r3, #8]
}
 8005aac:	bf00      	nop
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	021a      	lsls	r2, r3, #8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	609a      	str	r2, [r3, #8]
}
 8005aec:	bf00      	nop
 8005aee:	371c      	adds	r7, #28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a1a      	ldr	r2, [r3, #32]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1a      	ldr	r2, [r3, #32]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b30:	431a      	orrs	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e06d      	b.n	8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a30      	ldr	r2, [pc, #192]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d004      	beq.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2f      	ldr	r2, [pc, #188]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d108      	bne.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a20      	ldr	r2, [pc, #128]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d022      	beq.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bce:	d01d      	beq.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d018      	beq.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d013      	beq.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1a      	ldr	r2, [pc, #104]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00e      	beq.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d009      	beq.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a16      	ldr	r2, [pc, #88]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d004      	beq.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a15      	ldr	r2, [pc, #84]	; (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d10c      	bne.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	40010000 	.word	0x40010000
 8005c48:	40010400 	.word	0x40010400
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40000800 	.word	0x40000800
 8005c54:	40000c00 	.word	0x40000c00
 8005c58:	40014000 	.word	0x40014000
 8005c5c:	40001800 	.word	0x40001800

08005c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e040      	b.n	8005d30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fb fbfe 	bl	80014c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2224      	movs	r2, #36	; 0x24
 8005cc8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0201 	bic.w	r2, r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fae6 	bl	80062ac <UART_SetConfig>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e022      	b.n	8005d30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fd3c 	bl	8006770 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fdc3 	bl	80068b4 <UART_CheckIdleState>
 8005d2e:	4603      	mov	r3, r0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	4613      	mov	r3, r2
 8005d44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d145      	bne.n	8005dda <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <HAL_UART_Transmit_IT+0x22>
 8005d54:	88fb      	ldrh	r3, [r7, #6]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e03e      	b.n	8005ddc <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_UART_Transmit_IT+0x34>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e037      	b.n	8005ddc <HAL_UART_Transmit_IT+0xa4>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	88fa      	ldrh	r2, [r7, #6]
 8005d7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	88fa      	ldrh	r2, [r7, #6]
 8005d86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2221      	movs	r2, #33	; 0x21
 8005d9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da6:	d107      	bne.n	8005db8 <HAL_UART_Transmit_IT+0x80>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d103      	bne.n	8005db8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4a0d      	ldr	r2, [pc, #52]	; (8005de8 <HAL_UART_Transmit_IT+0xb0>)
 8005db4:	669a      	str	r2, [r3, #104]	; 0x68
 8005db6:	e002      	b.n	8005dbe <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4a0c      	ldr	r2, [pc, #48]	; (8005dec <HAL_UART_Transmit_IT+0xb4>)
 8005dbc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005dd4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e000      	b.n	8005ddc <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8005dda:	2302      	movs	r3, #2
  }
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	08006c4d 	.word	0x08006c4d
 8005dec:	08006bdb 	.word	0x08006bdb

08005df0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d12c      	bne.n	8005e60 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <HAL_UART_Receive_IT+0x22>
 8005e0c:	88fb      	ldrh	r3, [r7, #6]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e025      	b.n	8005e62 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_UART_Receive_IT+0x34>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e01e      	b.n	8005e62 <HAL_UART_Receive_IT+0x72>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005e4e:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	461a      	mov	r2, r3
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fdf2 	bl	8006a40 <UART_Start_Receive_IT>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	e000      	b.n	8005e62 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005e60:	2302      	movs	r3, #2
  }
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e92:	4013      	ands	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d113      	bne.n	8005ec4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d009      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 81cc 	beq.w	8006252 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	4798      	blx	r3
      }
      return;
 8005ec2:	e1c6      	b.n	8006252 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 80e3 	beq.w	8006092 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d105      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	4ba5      	ldr	r3, [pc, #660]	; (8006170 <HAL_UART_IRQHandler+0x304>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80d8 	beq.w	8006092 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d010      	beq.n	8005f0e <HAL_UART_IRQHandler+0xa2>
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2201      	movs	r2, #1
 8005efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f04:	f043 0201 	orr.w	r2, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d010      	beq.n	8005f3a <HAL_UART_IRQHandler+0xce>
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2202      	movs	r2, #2
 8005f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f30:	f043 0204 	orr.w	r2, r3, #4
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d010      	beq.n	8005f66 <HAL_UART_IRQHandler+0xfa>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2204      	movs	r2, #4
 8005f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f5c:	f043 0202 	orr.w	r2, r3, #2
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d015      	beq.n	8005f9c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d104      	bne.n	8005f84 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2208      	movs	r2, #8
 8005f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f92:	f043 0208 	orr.w	r2, r3, #8
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d011      	beq.n	8005fca <HAL_UART_IRQHandler+0x15e>
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00c      	beq.n	8005fca <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc0:	f043 0220 	orr.w	r2, r3, #32
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8140 	beq.w	8006256 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00c      	beq.n	8005ffa <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d007      	beq.n	8005ffa <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006000:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600c:	2b40      	cmp	r3, #64	; 0x40
 800600e:	d004      	beq.n	800601a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006016:	2b00      	cmp	r3, #0
 8006018:	d031      	beq.n	800607e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fd98 	bl	8006b50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b40      	cmp	r3, #64	; 0x40
 800602c:	d123      	bne.n	8006076 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800603c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	2b00      	cmp	r3, #0
 8006044:	d013      	beq.n	800606e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	4a4a      	ldr	r2, [pc, #296]	; (8006174 <HAL_UART_IRQHandler+0x308>)
 800604c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	4618      	mov	r0, r3
 8006054:	f7fc fb7a 	bl	800274c <HAL_DMA_Abort_IT>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d017      	beq.n	800608e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006068:	4610      	mov	r0, r2
 800606a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606c:	e00f      	b.n	800608e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f8fc 	bl	800626c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006074:	e00b      	b.n	800608e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f8f8 	bl	800626c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800607c:	e007      	b.n	800608e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8f4 	bl	800626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800608c:	e0e3      	b.n	8006256 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608e:	bf00      	nop
    return;
 8006090:	e0e1      	b.n	8006256 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006096:	2b01      	cmp	r3, #1
 8006098:	f040 80a7 	bne.w	80061ea <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	f003 0310 	and.w	r3, r3, #16
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 80a1 	beq.w	80061ea <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 809b 	beq.w	80061ea <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2210      	movs	r2, #16
 80060ba:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d156      	bne.n	8006178 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80060d4:	893b      	ldrh	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 80bf 	beq.w	800625a <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060e2:	893a      	ldrh	r2, [r7, #8]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	f080 80b8 	bcs.w	800625a <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	893a      	ldrh	r2, [r7, #8]
 80060ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fc:	d02a      	beq.n	8006154 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800610c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0201 	bic.w	r2, r2, #1
 800611c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800612c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0210 	bic.w	r2, r2, #16
 8006148:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614e:	4618      	mov	r0, r3
 8006150:	f7fc fa8c 	bl	800266c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006160:	b29b      	uxth	r3, r3
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	b29b      	uxth	r3, r3
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f889 	bl	8006280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800616e:	e074      	b.n	800625a <HAL_UART_IRQHandler+0x3ee>
 8006170:	04000120 	.word	0x04000120
 8006174:	08006baf 	.word	0x08006baf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006184:	b29b      	uxth	r3, r3
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006190:	b29b      	uxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d063      	beq.n	800625e <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8006196:	897b      	ldrh	r3, [r7, #10]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d060      	beq.n	800625e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061aa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2220      	movs	r2, #32
 80061c0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0210 	bic.w	r2, r2, #16
 80061dc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061de:	897b      	ldrh	r3, [r7, #10]
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f84c 	bl	8006280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061e8:	e039      	b.n	800625e <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00d      	beq.n	8006210 <HAL_UART_IRQHandler+0x3a4>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d008      	beq.n	8006210 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f845 	bl	8006298 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800620e:	e029      	b.n	8006264 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00d      	beq.n	8006236 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006220:	2b00      	cmp	r3, #0
 8006222:	d008      	beq.n	8006236 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01a      	beq.n	8006262 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	4798      	blx	r3
    }
    return;
 8006234:	e015      	b.n	8006262 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623c:	2b00      	cmp	r3, #0
 800623e:	d011      	beq.n	8006264 <HAL_UART_IRQHandler+0x3f8>
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00c      	beq.n	8006264 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fd3c 	bl	8006cc8 <UART_EndTransmit_IT>
    return;
 8006250:	e008      	b.n	8006264 <HAL_UART_IRQHandler+0x3f8>
      return;
 8006252:	bf00      	nop
 8006254:	e006      	b.n	8006264 <HAL_UART_IRQHandler+0x3f8>
    return;
 8006256:	bf00      	nop
 8006258:	e004      	b.n	8006264 <HAL_UART_IRQHandler+0x3f8>
      return;
 800625a:	bf00      	nop
 800625c:	e002      	b.n	8006264 <HAL_UART_IRQHandler+0x3f8>
      return;
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <HAL_UART_IRQHandler+0x3f8>
    return;
 8006262:	bf00      	nop
  }

}
 8006264:	3720      	adds	r7, #32
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop

0800626c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4ba7      	ldr	r3, [pc, #668]	; (8006574 <UART_SetConfig+0x2c8>)
 80062d8:	4013      	ands	r3, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	6979      	ldr	r1, [r7, #20]
 80062e0:	430b      	orrs	r3, r1
 80062e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	430a      	orrs	r2, r1
 800631c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a95      	ldr	r2, [pc, #596]	; (8006578 <UART_SetConfig+0x2cc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d120      	bne.n	800636a <UART_SetConfig+0xbe>
 8006328:	4b94      	ldr	r3, [pc, #592]	; (800657c <UART_SetConfig+0x2d0>)
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	2b03      	cmp	r3, #3
 8006334:	d816      	bhi.n	8006364 <UART_SetConfig+0xb8>
 8006336:	a201      	add	r2, pc, #4	; (adr r2, 800633c <UART_SetConfig+0x90>)
 8006338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633c:	0800634d 	.word	0x0800634d
 8006340:	08006359 	.word	0x08006359
 8006344:	08006353 	.word	0x08006353
 8006348:	0800635f 	.word	0x0800635f
 800634c:	2301      	movs	r3, #1
 800634e:	77fb      	strb	r3, [r7, #31]
 8006350:	e14f      	b.n	80065f2 <UART_SetConfig+0x346>
 8006352:	2302      	movs	r3, #2
 8006354:	77fb      	strb	r3, [r7, #31]
 8006356:	e14c      	b.n	80065f2 <UART_SetConfig+0x346>
 8006358:	2304      	movs	r3, #4
 800635a:	77fb      	strb	r3, [r7, #31]
 800635c:	e149      	b.n	80065f2 <UART_SetConfig+0x346>
 800635e:	2308      	movs	r3, #8
 8006360:	77fb      	strb	r3, [r7, #31]
 8006362:	e146      	b.n	80065f2 <UART_SetConfig+0x346>
 8006364:	2310      	movs	r3, #16
 8006366:	77fb      	strb	r3, [r7, #31]
 8006368:	e143      	b.n	80065f2 <UART_SetConfig+0x346>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a84      	ldr	r2, [pc, #528]	; (8006580 <UART_SetConfig+0x2d4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d132      	bne.n	80063da <UART_SetConfig+0x12e>
 8006374:	4b81      	ldr	r3, [pc, #516]	; (800657c <UART_SetConfig+0x2d0>)
 8006376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637a:	f003 030c 	and.w	r3, r3, #12
 800637e:	2b0c      	cmp	r3, #12
 8006380:	d828      	bhi.n	80063d4 <UART_SetConfig+0x128>
 8006382:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <UART_SetConfig+0xdc>)
 8006384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006388:	080063bd 	.word	0x080063bd
 800638c:	080063d5 	.word	0x080063d5
 8006390:	080063d5 	.word	0x080063d5
 8006394:	080063d5 	.word	0x080063d5
 8006398:	080063c9 	.word	0x080063c9
 800639c:	080063d5 	.word	0x080063d5
 80063a0:	080063d5 	.word	0x080063d5
 80063a4:	080063d5 	.word	0x080063d5
 80063a8:	080063c3 	.word	0x080063c3
 80063ac:	080063d5 	.word	0x080063d5
 80063b0:	080063d5 	.word	0x080063d5
 80063b4:	080063d5 	.word	0x080063d5
 80063b8:	080063cf 	.word	0x080063cf
 80063bc:	2300      	movs	r3, #0
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e117      	b.n	80065f2 <UART_SetConfig+0x346>
 80063c2:	2302      	movs	r3, #2
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e114      	b.n	80065f2 <UART_SetConfig+0x346>
 80063c8:	2304      	movs	r3, #4
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e111      	b.n	80065f2 <UART_SetConfig+0x346>
 80063ce:	2308      	movs	r3, #8
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e10e      	b.n	80065f2 <UART_SetConfig+0x346>
 80063d4:	2310      	movs	r3, #16
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e10b      	b.n	80065f2 <UART_SetConfig+0x346>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a69      	ldr	r2, [pc, #420]	; (8006584 <UART_SetConfig+0x2d8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d120      	bne.n	8006426 <UART_SetConfig+0x17a>
 80063e4:	4b65      	ldr	r3, [pc, #404]	; (800657c <UART_SetConfig+0x2d0>)
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063ee:	2b30      	cmp	r3, #48	; 0x30
 80063f0:	d013      	beq.n	800641a <UART_SetConfig+0x16e>
 80063f2:	2b30      	cmp	r3, #48	; 0x30
 80063f4:	d814      	bhi.n	8006420 <UART_SetConfig+0x174>
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d009      	beq.n	800640e <UART_SetConfig+0x162>
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	d810      	bhi.n	8006420 <UART_SetConfig+0x174>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <UART_SetConfig+0x15c>
 8006402:	2b10      	cmp	r3, #16
 8006404:	d006      	beq.n	8006414 <UART_SetConfig+0x168>
 8006406:	e00b      	b.n	8006420 <UART_SetConfig+0x174>
 8006408:	2300      	movs	r3, #0
 800640a:	77fb      	strb	r3, [r7, #31]
 800640c:	e0f1      	b.n	80065f2 <UART_SetConfig+0x346>
 800640e:	2302      	movs	r3, #2
 8006410:	77fb      	strb	r3, [r7, #31]
 8006412:	e0ee      	b.n	80065f2 <UART_SetConfig+0x346>
 8006414:	2304      	movs	r3, #4
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e0eb      	b.n	80065f2 <UART_SetConfig+0x346>
 800641a:	2308      	movs	r3, #8
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e0e8      	b.n	80065f2 <UART_SetConfig+0x346>
 8006420:	2310      	movs	r3, #16
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e0e5      	b.n	80065f2 <UART_SetConfig+0x346>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a57      	ldr	r2, [pc, #348]	; (8006588 <UART_SetConfig+0x2dc>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d120      	bne.n	8006472 <UART_SetConfig+0x1c6>
 8006430:	4b52      	ldr	r3, [pc, #328]	; (800657c <UART_SetConfig+0x2d0>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006436:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800643a:	2bc0      	cmp	r3, #192	; 0xc0
 800643c:	d013      	beq.n	8006466 <UART_SetConfig+0x1ba>
 800643e:	2bc0      	cmp	r3, #192	; 0xc0
 8006440:	d814      	bhi.n	800646c <UART_SetConfig+0x1c0>
 8006442:	2b80      	cmp	r3, #128	; 0x80
 8006444:	d009      	beq.n	800645a <UART_SetConfig+0x1ae>
 8006446:	2b80      	cmp	r3, #128	; 0x80
 8006448:	d810      	bhi.n	800646c <UART_SetConfig+0x1c0>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <UART_SetConfig+0x1a8>
 800644e:	2b40      	cmp	r3, #64	; 0x40
 8006450:	d006      	beq.n	8006460 <UART_SetConfig+0x1b4>
 8006452:	e00b      	b.n	800646c <UART_SetConfig+0x1c0>
 8006454:	2300      	movs	r3, #0
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	e0cb      	b.n	80065f2 <UART_SetConfig+0x346>
 800645a:	2302      	movs	r3, #2
 800645c:	77fb      	strb	r3, [r7, #31]
 800645e:	e0c8      	b.n	80065f2 <UART_SetConfig+0x346>
 8006460:	2304      	movs	r3, #4
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e0c5      	b.n	80065f2 <UART_SetConfig+0x346>
 8006466:	2308      	movs	r3, #8
 8006468:	77fb      	strb	r3, [r7, #31]
 800646a:	e0c2      	b.n	80065f2 <UART_SetConfig+0x346>
 800646c:	2310      	movs	r3, #16
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e0bf      	b.n	80065f2 <UART_SetConfig+0x346>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a45      	ldr	r2, [pc, #276]	; (800658c <UART_SetConfig+0x2e0>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d125      	bne.n	80064c8 <UART_SetConfig+0x21c>
 800647c:	4b3f      	ldr	r3, [pc, #252]	; (800657c <UART_SetConfig+0x2d0>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800648a:	d017      	beq.n	80064bc <UART_SetConfig+0x210>
 800648c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006490:	d817      	bhi.n	80064c2 <UART_SetConfig+0x216>
 8006492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006496:	d00b      	beq.n	80064b0 <UART_SetConfig+0x204>
 8006498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800649c:	d811      	bhi.n	80064c2 <UART_SetConfig+0x216>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <UART_SetConfig+0x1fe>
 80064a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a6:	d006      	beq.n	80064b6 <UART_SetConfig+0x20a>
 80064a8:	e00b      	b.n	80064c2 <UART_SetConfig+0x216>
 80064aa:	2300      	movs	r3, #0
 80064ac:	77fb      	strb	r3, [r7, #31]
 80064ae:	e0a0      	b.n	80065f2 <UART_SetConfig+0x346>
 80064b0:	2302      	movs	r3, #2
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e09d      	b.n	80065f2 <UART_SetConfig+0x346>
 80064b6:	2304      	movs	r3, #4
 80064b8:	77fb      	strb	r3, [r7, #31]
 80064ba:	e09a      	b.n	80065f2 <UART_SetConfig+0x346>
 80064bc:	2308      	movs	r3, #8
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e097      	b.n	80065f2 <UART_SetConfig+0x346>
 80064c2:	2310      	movs	r3, #16
 80064c4:	77fb      	strb	r3, [r7, #31]
 80064c6:	e094      	b.n	80065f2 <UART_SetConfig+0x346>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a30      	ldr	r2, [pc, #192]	; (8006590 <UART_SetConfig+0x2e4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d125      	bne.n	800651e <UART_SetConfig+0x272>
 80064d2:	4b2a      	ldr	r3, [pc, #168]	; (800657c <UART_SetConfig+0x2d0>)
 80064d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064e0:	d017      	beq.n	8006512 <UART_SetConfig+0x266>
 80064e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064e6:	d817      	bhi.n	8006518 <UART_SetConfig+0x26c>
 80064e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ec:	d00b      	beq.n	8006506 <UART_SetConfig+0x25a>
 80064ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f2:	d811      	bhi.n	8006518 <UART_SetConfig+0x26c>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <UART_SetConfig+0x254>
 80064f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064fc:	d006      	beq.n	800650c <UART_SetConfig+0x260>
 80064fe:	e00b      	b.n	8006518 <UART_SetConfig+0x26c>
 8006500:	2301      	movs	r3, #1
 8006502:	77fb      	strb	r3, [r7, #31]
 8006504:	e075      	b.n	80065f2 <UART_SetConfig+0x346>
 8006506:	2302      	movs	r3, #2
 8006508:	77fb      	strb	r3, [r7, #31]
 800650a:	e072      	b.n	80065f2 <UART_SetConfig+0x346>
 800650c:	2304      	movs	r3, #4
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e06f      	b.n	80065f2 <UART_SetConfig+0x346>
 8006512:	2308      	movs	r3, #8
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e06c      	b.n	80065f2 <UART_SetConfig+0x346>
 8006518:	2310      	movs	r3, #16
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e069      	b.n	80065f2 <UART_SetConfig+0x346>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a1c      	ldr	r2, [pc, #112]	; (8006594 <UART_SetConfig+0x2e8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d137      	bne.n	8006598 <UART_SetConfig+0x2ec>
 8006528:	4b14      	ldr	r3, [pc, #80]	; (800657c <UART_SetConfig+0x2d0>)
 800652a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006532:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006536:	d017      	beq.n	8006568 <UART_SetConfig+0x2bc>
 8006538:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800653c:	d817      	bhi.n	800656e <UART_SetConfig+0x2c2>
 800653e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006542:	d00b      	beq.n	800655c <UART_SetConfig+0x2b0>
 8006544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006548:	d811      	bhi.n	800656e <UART_SetConfig+0x2c2>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <UART_SetConfig+0x2aa>
 800654e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006552:	d006      	beq.n	8006562 <UART_SetConfig+0x2b6>
 8006554:	e00b      	b.n	800656e <UART_SetConfig+0x2c2>
 8006556:	2300      	movs	r3, #0
 8006558:	77fb      	strb	r3, [r7, #31]
 800655a:	e04a      	b.n	80065f2 <UART_SetConfig+0x346>
 800655c:	2302      	movs	r3, #2
 800655e:	77fb      	strb	r3, [r7, #31]
 8006560:	e047      	b.n	80065f2 <UART_SetConfig+0x346>
 8006562:	2304      	movs	r3, #4
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e044      	b.n	80065f2 <UART_SetConfig+0x346>
 8006568:	2308      	movs	r3, #8
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e041      	b.n	80065f2 <UART_SetConfig+0x346>
 800656e:	2310      	movs	r3, #16
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e03e      	b.n	80065f2 <UART_SetConfig+0x346>
 8006574:	efff69f3 	.word	0xefff69f3
 8006578:	40011000 	.word	0x40011000
 800657c:	40023800 	.word	0x40023800
 8006580:	40004400 	.word	0x40004400
 8006584:	40004800 	.word	0x40004800
 8006588:	40004c00 	.word	0x40004c00
 800658c:	40005000 	.word	0x40005000
 8006590:	40011400 	.word	0x40011400
 8006594:	40007800 	.word	0x40007800
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a71      	ldr	r2, [pc, #452]	; (8006764 <UART_SetConfig+0x4b8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d125      	bne.n	80065ee <UART_SetConfig+0x342>
 80065a2:	4b71      	ldr	r3, [pc, #452]	; (8006768 <UART_SetConfig+0x4bc>)
 80065a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065b0:	d017      	beq.n	80065e2 <UART_SetConfig+0x336>
 80065b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065b6:	d817      	bhi.n	80065e8 <UART_SetConfig+0x33c>
 80065b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065bc:	d00b      	beq.n	80065d6 <UART_SetConfig+0x32a>
 80065be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c2:	d811      	bhi.n	80065e8 <UART_SetConfig+0x33c>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <UART_SetConfig+0x324>
 80065c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065cc:	d006      	beq.n	80065dc <UART_SetConfig+0x330>
 80065ce:	e00b      	b.n	80065e8 <UART_SetConfig+0x33c>
 80065d0:	2300      	movs	r3, #0
 80065d2:	77fb      	strb	r3, [r7, #31]
 80065d4:	e00d      	b.n	80065f2 <UART_SetConfig+0x346>
 80065d6:	2302      	movs	r3, #2
 80065d8:	77fb      	strb	r3, [r7, #31]
 80065da:	e00a      	b.n	80065f2 <UART_SetConfig+0x346>
 80065dc:	2304      	movs	r3, #4
 80065de:	77fb      	strb	r3, [r7, #31]
 80065e0:	e007      	b.n	80065f2 <UART_SetConfig+0x346>
 80065e2:	2308      	movs	r3, #8
 80065e4:	77fb      	strb	r3, [r7, #31]
 80065e6:	e004      	b.n	80065f2 <UART_SetConfig+0x346>
 80065e8:	2310      	movs	r3, #16
 80065ea:	77fb      	strb	r3, [r7, #31]
 80065ec:	e001      	b.n	80065f2 <UART_SetConfig+0x346>
 80065ee:	2310      	movs	r3, #16
 80065f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fa:	d15b      	bne.n	80066b4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80065fc:	7ffb      	ldrb	r3, [r7, #31]
 80065fe:	2b08      	cmp	r3, #8
 8006600:	d827      	bhi.n	8006652 <UART_SetConfig+0x3a6>
 8006602:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <UART_SetConfig+0x35c>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	0800662d 	.word	0x0800662d
 800660c:	08006635 	.word	0x08006635
 8006610:	0800663d 	.word	0x0800663d
 8006614:	08006653 	.word	0x08006653
 8006618:	08006643 	.word	0x08006643
 800661c:	08006653 	.word	0x08006653
 8006620:	08006653 	.word	0x08006653
 8006624:	08006653 	.word	0x08006653
 8006628:	0800664b 	.word	0x0800664b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800662c:	f7fd fc4e 	bl	8003ecc <HAL_RCC_GetPCLK1Freq>
 8006630:	61b8      	str	r0, [r7, #24]
        break;
 8006632:	e013      	b.n	800665c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006634:	f7fd fc5e 	bl	8003ef4 <HAL_RCC_GetPCLK2Freq>
 8006638:	61b8      	str	r0, [r7, #24]
        break;
 800663a:	e00f      	b.n	800665c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800663c:	4b4b      	ldr	r3, [pc, #300]	; (800676c <UART_SetConfig+0x4c0>)
 800663e:	61bb      	str	r3, [r7, #24]
        break;
 8006640:	e00c      	b.n	800665c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006642:	f7fd fb81 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8006646:	61b8      	str	r0, [r7, #24]
        break;
 8006648:	e008      	b.n	800665c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800664e:	61bb      	str	r3, [r7, #24]
        break;
 8006650:	e004      	b.n	800665c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	77bb      	strb	r3, [r7, #30]
        break;
 800665a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d074      	beq.n	800674c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	005a      	lsls	r2, r3, #1
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	441a      	add	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	fbb2 f3f3 	udiv	r3, r2, r3
 8006676:	b29b      	uxth	r3, r3
 8006678:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b0f      	cmp	r3, #15
 800667e:	d916      	bls.n	80066ae <UART_SetConfig+0x402>
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006686:	d212      	bcs.n	80066ae <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f023 030f 	bic.w	r3, r3, #15
 8006690:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	085b      	lsrs	r3, r3, #1
 8006696:	b29b      	uxth	r3, r3
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	b29a      	uxth	r2, r3
 800669e:	89fb      	ldrh	r3, [r7, #14]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	89fa      	ldrh	r2, [r7, #14]
 80066aa:	60da      	str	r2, [r3, #12]
 80066ac:	e04e      	b.n	800674c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	77bb      	strb	r3, [r7, #30]
 80066b2:	e04b      	b.n	800674c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066b4:	7ffb      	ldrb	r3, [r7, #31]
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d827      	bhi.n	800670a <UART_SetConfig+0x45e>
 80066ba:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <UART_SetConfig+0x414>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	080066e5 	.word	0x080066e5
 80066c4:	080066ed 	.word	0x080066ed
 80066c8:	080066f5 	.word	0x080066f5
 80066cc:	0800670b 	.word	0x0800670b
 80066d0:	080066fb 	.word	0x080066fb
 80066d4:	0800670b 	.word	0x0800670b
 80066d8:	0800670b 	.word	0x0800670b
 80066dc:	0800670b 	.word	0x0800670b
 80066e0:	08006703 	.word	0x08006703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e4:	f7fd fbf2 	bl	8003ecc <HAL_RCC_GetPCLK1Freq>
 80066e8:	61b8      	str	r0, [r7, #24]
        break;
 80066ea:	e013      	b.n	8006714 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066ec:	f7fd fc02 	bl	8003ef4 <HAL_RCC_GetPCLK2Freq>
 80066f0:	61b8      	str	r0, [r7, #24]
        break;
 80066f2:	e00f      	b.n	8006714 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f4:	4b1d      	ldr	r3, [pc, #116]	; (800676c <UART_SetConfig+0x4c0>)
 80066f6:	61bb      	str	r3, [r7, #24]
        break;
 80066f8:	e00c      	b.n	8006714 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066fa:	f7fd fb25 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 80066fe:	61b8      	str	r0, [r7, #24]
        break;
 8006700:	e008      	b.n	8006714 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006706:	61bb      	str	r3, [r7, #24]
        break;
 8006708:	e004      	b.n	8006714 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	77bb      	strb	r3, [r7, #30]
        break;
 8006712:	bf00      	nop
    }

    if (pclk != 0U)
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d018      	beq.n	800674c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	085a      	lsrs	r2, r3, #1
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	441a      	add	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	fbb2 f3f3 	udiv	r3, r2, r3
 800672c:	b29b      	uxth	r3, r3
 800672e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	2b0f      	cmp	r3, #15
 8006734:	d908      	bls.n	8006748 <UART_SetConfig+0x49c>
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800673c:	d204      	bcs.n	8006748 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	60da      	str	r2, [r3, #12]
 8006746:	e001      	b.n	800674c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006758:	7fbb      	ldrb	r3, [r7, #30]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3720      	adds	r7, #32
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40007c00 	.word	0x40007c00
 8006768:	40023800 	.word	0x40023800
 800676c:	00f42400 	.word	0x00f42400

08006770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01a      	beq.n	8006886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800686e:	d10a      	bne.n	8006886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	605a      	str	r2, [r3, #4]
  }
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068c4:	f7fa ff38 	bl	8001738 <HAL_GetTick>
 80068c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0308 	and.w	r3, r3, #8
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d10e      	bne.n	80068f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f82d 	bl	8006946 <UART_WaitOnFlagUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e023      	b.n	800693e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b04      	cmp	r3, #4
 8006902:	d10e      	bne.n	8006922 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f817 	bl	8006946 <UART_WaitOnFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e00d      	b.n	800693e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	603b      	str	r3, [r7, #0]
 8006952:	4613      	mov	r3, r2
 8006954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006956:	e05e      	b.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695e:	d05a      	beq.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006960:	f7fa feea 	bl	8001738 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	429a      	cmp	r2, r3
 800696e:	d302      	bcc.n	8006976 <UART_WaitOnFlagUntilTimeout+0x30>
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d11b      	bne.n	80069ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006984:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0201 	bic.w	r2, r2, #1
 8006994:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e043      	b.n	8006a36 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d02c      	beq.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ca:	d124      	bne.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0201 	bic.w	r2, r2, #1
 80069f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2220      	movs	r2, #32
 80069fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2220      	movs	r2, #32
 8006a00:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e00f      	b.n	8006a36 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69da      	ldr	r2, [r3, #28]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	bf0c      	ite	eq
 8006a26:	2301      	moveq	r3, #1
 8006a28:	2300      	movne	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d091      	beq.n	8006958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	88fa      	ldrh	r2, [r7, #6]
 8006a58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	88fa      	ldrh	r2, [r7, #6]
 8006a60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a72:	d10e      	bne.n	8006a92 <UART_Start_Receive_IT+0x52>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d105      	bne.n	8006a88 <UART_Start_Receive_IT+0x48>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a86:	e02d      	b.n	8006ae4 <UART_Start_Receive_IT+0xa4>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	22ff      	movs	r2, #255	; 0xff
 8006a8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a90:	e028      	b.n	8006ae4 <UART_Start_Receive_IT+0xa4>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10d      	bne.n	8006ab6 <UART_Start_Receive_IT+0x76>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d104      	bne.n	8006aac <UART_Start_Receive_IT+0x6c>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	22ff      	movs	r2, #255	; 0xff
 8006aa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aaa:	e01b      	b.n	8006ae4 <UART_Start_Receive_IT+0xa4>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	227f      	movs	r2, #127	; 0x7f
 8006ab0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ab4:	e016      	b.n	8006ae4 <UART_Start_Receive_IT+0xa4>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006abe:	d10d      	bne.n	8006adc <UART_Start_Receive_IT+0x9c>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d104      	bne.n	8006ad2 <UART_Start_Receive_IT+0x92>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	227f      	movs	r2, #127	; 0x7f
 8006acc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ad0:	e008      	b.n	8006ae4 <UART_Start_Receive_IT+0xa4>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	223f      	movs	r2, #63	; 0x3f
 8006ad6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ada:	e003      	b.n	8006ae4 <UART_Start_Receive_IT+0xa4>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2222      	movs	r2, #34	; 0x22
 8006af0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f042 0201 	orr.w	r2, r2, #1
 8006b00:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0a:	d107      	bne.n	8006b1c <UART_Start_Receive_IT+0xdc>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d103      	bne.n	8006b1c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4a0c      	ldr	r2, [pc, #48]	; (8006b48 <UART_Start_Receive_IT+0x108>)
 8006b18:	665a      	str	r2, [r3, #100]	; 0x64
 8006b1a:	e002      	b.n	8006b22 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4a0b      	ldr	r2, [pc, #44]	; (8006b4c <UART_Start_Receive_IT+0x10c>)
 8006b20:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006b38:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	08006dcf 	.word	0x08006dcf
 8006b4c:	08006cfb 	.word	0x08006cfb

08006b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b66:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689a      	ldr	r2, [r3, #8]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0201 	bic.w	r2, r2, #1
 8006b76:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d107      	bne.n	8006b90 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0210 	bic.w	r2, r2, #16
 8006b8e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2220      	movs	r2, #32
 8006b94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff fb4d 	bl	800626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006be6:	2b21      	cmp	r3, #33	; 0x21
 8006be8:	d12a      	bne.n	8006c40 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d110      	bne.n	8006c18 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c04:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c14:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006c16:	e013      	b.n	8006c40 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1c:	781a      	ldrb	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c58:	2b21      	cmp	r3, #33	; 0x21
 8006c5a:	d12f      	bne.n	8006cbc <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d110      	bne.n	8006c8a <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c76:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c86:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006c88:	e018      	b.n	8006cbc <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c9e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca4:	1c9a      	adds	r2, r3, #2
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006cbc:	bf00      	nop
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cde:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7f9 fdbf 	bl	8000870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cf2:	bf00      	nop
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d08:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d0e:	2b22      	cmp	r3, #34	; 0x22
 8006d10:	d151      	bne.n	8006db6 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d1a:	89bb      	ldrh	r3, [r7, #12]
 8006d1c:	b2d9      	uxtb	r1, r3
 8006d1e:	89fb      	ldrh	r3, [r7, #14]
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d26:	400a      	ands	r2, r1
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d138      	bne.n	8006dc6 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d62:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0201 	bic.w	r2, r2, #1
 8006d72:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d10f      	bne.n	8006da8 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0210 	bic.w	r2, r2, #16
 8006d96:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff fa6d 	bl	8006280 <HAL_UARTEx_RxEventCallback>
 8006da6:	e002      	b.n	8006dae <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7f9 fd19 	bl	80007e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006db4:	e007      	b.n	8006dc6 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0208 	orr.w	r2, r2, #8
 8006dc4:	619a      	str	r2, [r3, #24]
}
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ddc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006de2:	2b22      	cmp	r3, #34	; 0x22
 8006de4:	d151      	bne.n	8006e8a <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006df4:	89ba      	ldrh	r2, [r7, #12]
 8006df6:	89fb      	ldrh	r3, [r7, #14]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e04:	1c9a      	adds	r2, r3, #2
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	3b01      	subs	r3, #1
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d138      	bne.n	8006e9a <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e36:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0201 	bic.w	r2, r2, #1
 8006e46:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10f      	bne.n	8006e7c <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0210 	bic.w	r2, r2, #16
 8006e6a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff fa03 	bl	8006280 <HAL_UARTEx_RxEventCallback>
 8006e7a:	e002      	b.n	8006e82 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7f9 fcaf 	bl	80007e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e88:	e007      	b.n	8006e9a <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699a      	ldr	r2, [r3, #24]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f042 0208 	orr.w	r2, r2, #8
 8006e98:	619a      	str	r2, [r3, #24]
}
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <Channel_Mapping>:

Communication_Ch* Channel_Mapping(uint32_t channel){
	Communication_Ch* comm_ch;

	//channel mappings
	if(channel == 0){
 8006ea4:	b108      	cbz	r0, 8006eaa <Channel_Mapping+0x6>
		comm_ch = get_deployment_ch();
	}
	return comm_ch;
}
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	4770      	bx	lr
		comm_ch = get_deployment_ch();
 8006eaa:	f000 b84b 	b.w	8006f44 <get_deployment_ch>
 8006eae:	bf00      	nop

08006eb0 <Runtime_CommDataService_NewData_Received>:

void Runtime_CommDataService_NewData_Received(uint32_t channel, uint8_t* buf, uint32_t len)
{
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	4615      	mov	r5, r2
	if(channel == 0){
 8006eb6:	b188      	cbz	r0, 8006edc <Runtime_CommDataService_NewData_Received+0x2c>
	Communication_Ch* comm_ch = Channel_Mapping(channel);

	//put data to the channel buffer
	for(uint32_t i= 0;i<len;i++)
 8006eb8:	b17d      	cbz	r5, 8006eda <Runtime_CommDataService_NewData_Received+0x2a>
 8006eba:	4621      	mov	r1, r4
 8006ebc:	1962      	adds	r2, r4, r5
	if(comm_ch->rx_data_cntr < CH_RX_DATA_BUF_LEN){ //parse edilmeyi bekleyen bir data varsa üzerine yazma.
 8006ebe:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8006ec2:	2b3f      	cmp	r3, #63	; 0x3f
		comm_ch->rx_data_buf[comm_ch->rx_data_cntr++] = buf[i];
 8006ec4:	f103 0001 	add.w	r0, r3, #1
 8006ec8:	4463      	add	r3, ip
	if(comm_ch->rx_data_cntr < CH_RX_DATA_BUF_LEN){ //parse edilmeyi bekleyen bir data varsa üzerine yazma.
 8006eca:	d803      	bhi.n	8006ed4 <Runtime_CommDataService_NewData_Received+0x24>
		comm_ch->rx_data_buf[comm_ch->rx_data_cntr++] = buf[i];
 8006ecc:	f88c 0005 	strb.w	r0, [ip, #5]
 8006ed0:	7808      	ldrb	r0, [r1, #0]
 8006ed2:	7198      	strb	r0, [r3, #6]
	for(uint32_t i= 0;i<len;i++)
 8006ed4:	3101      	adds	r1, #1
 8006ed6:	4291      	cmp	r1, r2
 8006ed8:	d1f1      	bne.n	8006ebe <Runtime_CommDataService_NewData_Received+0xe>
	}
}
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
		comm_ch = get_deployment_ch();
 8006edc:	f000 f832 	bl	8006f44 <get_deployment_ch>
 8006ee0:	4684      	mov	ip, r0
 8006ee2:	e7e9      	b.n	8006eb8 <Runtime_CommDataService_NewData_Received+0x8>

08006ee4 <Runtime_CommDataService_Process_DataBuffer>:

uint8_t Runtime_CommDataService_Process_DataBuffer(uint32_t channel)
{
 8006ee4:	b570      	push	{r4, r5, r6, lr}
	if(channel == 0){
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	b1b8      	cbz	r0, 8006f1a <Runtime_CommDataService_Process_DataBuffer+0x36>
	Communication_Ch* comm_ch = Channel_Mapping(channel);
	if(comm_ch->rx_data_cntr < 2) {
 8006eea:	7973      	ldrb	r3, [r6, #5]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d90f      	bls.n	8006f10 <Runtime_CommDataService_Process_DataBuffer+0x2c>
		comm_ch->rx_data_cntr = 0;
	}
	else if(comm_ch->data_validity_check_callback()  == 0) {
 8006ef0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8006ef2:	4798      	blx	r3
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	b940      	cbnz	r0, 8006f0a <Runtime_CommDataService_Process_DataBuffer+0x26>
		comm_ch->fdata_ready = 1;
 8006ef8:	2201      	movs	r2, #1
		comm_ch->process_callback(channel);
 8006efa:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8006efc:	4620      	mov	r0, r4
		comm_ch->fdata_ready = 1;
 8006efe:	f886 2046 	strb.w	r2, [r6, #70]	; 0x46
		comm_ch->process_callback(channel);
 8006f02:	4798      	blx	r3
	else{
		return 1;
	}

	return 0;
}
 8006f04:	4628      	mov	r0, r5
		comm_ch->rx_data_cntr = 0;
 8006f06:	7175      	strb	r5, [r6, #5]
}
 8006f08:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8006f0a:	2501      	movs	r5, #1
}
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}
		comm_ch->rx_data_cntr = 0;
 8006f10:	2300      	movs	r3, #0
	return 0;
 8006f12:	461d      	mov	r5, r3
		comm_ch->rx_data_cntr = 0;
 8006f14:	7173      	strb	r3, [r6, #5]
}
 8006f16:	4628      	mov	r0, r5
 8006f18:	bd70      	pop	{r4, r5, r6, pc}
		comm_ch = get_deployment_ch();
 8006f1a:	f000 f813 	bl	8006f44 <get_deployment_ch>
 8006f1e:	4606      	mov	r6, r0
 8006f20:	e7e3      	b.n	8006eea <Runtime_CommDataService_Process_DataBuffer+0x6>
 8006f22:	bf00      	nop

08006f24 <deployment_data_validity_check>:
	return &deployment_ch;
}

uint8_t deployment_data_validity_check()
{
	if(deployment_ch.rx_data_cntr <2) {
 8006f24:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <deployment_data_validity_check+0x1c>)
 8006f26:	795a      	ldrb	r2, [r3, #5]
 8006f28:	2a01      	cmp	r2, #1
 8006f2a:	d901      	bls.n	8006f30 <deployment_data_validity_check+0xc>
		deployment_ch.data_error_counter = deployment_ch.data_error_counter + 1;
		return 1;
	}
	else{
		return 0;
 8006f2c:	2000      	movs	r0, #0
	}
}
 8006f2e:	4770      	bx	lr
		deployment_ch.data_error_counter = deployment_ch.data_error_counter + 1;
 8006f30:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8006f34:	2001      	movs	r0, #1
 8006f36:	4402      	add	r2, r0
 8006f38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		return 1;
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20000100 	.word	0x20000100

08006f44 <get_deployment_ch>:
}
 8006f44:	4800      	ldr	r0, [pc, #0]	; (8006f48 <get_deployment_ch+0x4>)
 8006f46:	4770      	bx	lr
 8006f48:	20000100 	.word	0x20000100

08006f4c <init_deployment_ch>:

void init_deployment_ch(){
	deployment_ch.process_callback = modbus_slave_rx;
 8006f4c:	4b02      	ldr	r3, [pc, #8]	; (8006f58 <init_deployment_ch+0xc>)
 8006f4e:	4903      	ldr	r1, [pc, #12]	; (8006f5c <init_deployment_ch+0x10>)
	deployment_ch.data_validity_check_callback = deployment_data_validity_check;
 8006f50:	4a03      	ldr	r2, [pc, #12]	; (8006f60 <init_deployment_ch+0x14>)
 8006f52:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
}
 8006f56:	4770      	bx	lr
 8006f58:	20000100 	.word	0x20000100
 8006f5c:	080082d5 	.word	0x080082d5
 8006f60:	08006f25 	.word	0x08006f25

08006f64 <get_paramAddrTable>:

s_FBTable fbTable; //table holding function blocks
s_FBTable* get_fbTable(){return &fbTable;}

s_Param paramAddrTable; //parameters pointing function block in/out arguments
s_Param* get_paramAddrTable(){return &paramAddrTable;}
 8006f64:	4800      	ldr	r0, [pc, #0]	; (8006f68 <get_paramAddrTable+0x4>)
 8006f66:	4770      	bx	lr
 8006f68:	20000258 	.word	0x20000258

08006f6c <writeToFBTable>:
*/

//general functions

uint8_t writeToFBTable(void* callback, uint8_t startParamIndex){
	uint8_t fb_index = fbTable.length;
 8006f6c:	4b07      	ldr	r3, [pc, #28]	; (8006f8c <writeToFBTable+0x20>)
uint8_t writeToFBTable(void* callback, uint8_t startParamIndex){
 8006f6e:	b500      	push	{lr}
	uint8_t fb_index = fbTable.length;
 8006f70:	781a      	ldrb	r2, [r3, #0]
	fbTable.fb[fb_index].callback = callback;
 8006f72:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
	fbTable.fb[fb_index].param_start_index = startParamIndex;
	fbTable.length++;
 8006f76:	f102 0e01 	add.w	lr, r2, #1
	fbTable.fb[fb_index].callback = callback;
 8006f7a:	f8cc 0008 	str.w	r0, [ip, #8]
	return fb_index;
}
 8006f7e:	4610      	mov	r0, r2
	fbTable.fb[fb_index].param_start_index = startParamIndex;
 8006f80:	f88c 1004 	strb.w	r1, [ip, #4]
	fbTable.length++;
 8006f84:	f883 e000 	strb.w	lr, [r3]
}
 8006f88:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f8c:	20000150 	.word	0x20000150

08006f90 <createParameter>:

uint32_t createParameter(int32_t init_val){
	paramAddrTable.value[paramAddrTable.currentIndex] = init_val;
 8006f90:	4906      	ldr	r1, [pc, #24]	; (8006fac <createParameter+0x1c>)
 8006f92:	780b      	ldrb	r3, [r1, #0]
	paramAddrTable.addr[paramAddrTable.currentIndex] = paramAddrTable.currentIndex;
	paramAddrTable.currentIndex++;
 8006f94:	1c5a      	adds	r2, r3, #1
	paramAddrTable.value[paramAddrTable.currentIndex] = init_val;
 8006f96:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
	paramAddrTable.currentIndex++;
 8006f9a:	b2d2      	uxtb	r2, r2
	paramAddrTable.value[paramAddrTable.currentIndex] = init_val;
 8006f9c:	f8cc 0204 	str.w	r0, [ip, #516]	; 0x204
	paramAddrTable.addr[paramAddrTable.currentIndex] = paramAddrTable.currentIndex;
 8006fa0:	f8cc 3004 	str.w	r3, [ip, #4]
	return paramAddrTable.currentIndex-1;
}
 8006fa4:	1e50      	subs	r0, r2, #1
	paramAddrTable.currentIndex++;
 8006fa6:	700a      	strb	r2, [r1, #0]
}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	20000258 	.word	0x20000258

08006fb0 <make_connection>:

void make_connection(uint32_t dest_port_i, uint32_t src_port_i)
{
	paramAddrTable.addr[dest_port_i] = paramAddrTable.addr[src_port_i] ;
 8006fb0:	4b03      	ldr	r3, [pc, #12]	; (8006fc0 <make_connection+0x10>)
 8006fb2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006fb6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006fba:	684b      	ldr	r3, [r1, #4]
 8006fbc:	6043      	str	r3, [r0, #4]
}
 8006fbe:	4770      	bx	lr
 8006fc0:	20000258 	.word	0x20000258

08006fc4 <mcCore_SM>:
	//run the output related function blocks
}


void mcCore_SM()
{
 8006fc4:	b538      	push	{r3, r4, r5, lr}
#ifdef TEST_CIRCUIT
	static uint8_t mcCore_state = ST_MCCORE_TEST;
#else
	static uint8_t mcCore_state = ST_MCCORE_INIT;
#endif
	switch (mcCore_state){
 8006fc6:	4c26      	ldr	r4, [pc, #152]	; (8007060 <mcCore_SM+0x9c>)
 8006fc8:	7823      	ldrb	r3, [r4, #0]
 8006fca:	2b05      	cmp	r3, #5
 8006fcc:	d811      	bhi.n	8006ff2 <mcCore_SM+0x2e>
 8006fce:	e8df f003 	tbb	[pc, r3]
 8006fd2:	2d03      	.short	0x2d03
 8006fd4:	11102210 	.word	0x11102210
	fbTable.length = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4922      	ldr	r1, [pc, #136]	; (8007064 <mcCore_SM+0xa0>)
	paramAddrTable.currentIndex = 0;
 8006fdc:	4a22      	ldr	r2, [pc, #136]	; (8007068 <mcCore_SM+0xa4>)
	fbTable.length = 0;
 8006fde:	700b      	strb	r3, [r1, #0]
	paramAddrTable.currentIndex = 0;
 8006fe0:	7013      	strb	r3, [r2, #0]
	read_persistent_data_structure();
 8006fe2:	f000 f883 	bl	80070ec <read_persistent_data_structure>
	init_uniqueid();
 8006fe6:	f000 f8cd 	bl	8007184 <init_uniqueid>
	init_deployment_ch();
 8006fea:	f7ff ffaf 	bl	8006f4c <init_deployment_ch>
		case ST_MCCORE_INIT:
			initiate_mccore(); //kill all the program memory
			mcCore_state = ST_WAIT_RUN;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	7023      	strb	r3, [r4, #0]
#endif
		case ST_MCCORE_TEST_RUN:
			run_one_cycle();
			break;
	}
}
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
	for(uint8_t i= 0;i<fbTable.length;i++){
 8006ff4:	4c1b      	ldr	r4, [pc, #108]	; (8007064 <mcCore_SM+0xa0>)
 8006ff6:	7823      	ldrb	r3, [r4, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0fa      	beq.n	8006ff2 <mcCore_SM+0x2e>
 8006ffc:	2500      	movs	r5, #0
 8006ffe:	462b      	mov	r3, r5
		(*fbTable.fb[i].callback)((uint8_t)fbTable.fb[i].param_start_index);
 8007000:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
	for(uint8_t i= 0;i<fbTable.length;i++){
 8007004:	3501      	adds	r5, #1
		(*fbTable.fb[i].callback)((uint8_t)fbTable.fb[i].param_start_index);
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	7918      	ldrb	r0, [r3, #4]
 800700a:	4790      	blx	r2
	for(uint8_t i= 0;i<fbTable.length;i++){
 800700c:	7822      	ldrb	r2, [r4, #0]
 800700e:	b2eb      	uxtb	r3, r5
 8007010:	429a      	cmp	r2, r3
 8007012:	d8f5      	bhi.n	8007000 <mcCore_SM+0x3c>
}
 8007014:	bd38      	pop	{r3, r4, r5, pc}
			if(Parser(get_deployment_ch()) == CMD_RUN){
 8007016:	f7ff ff95 	bl	8006f44 <get_deployment_ch>
 800701a:	f000 f827 	bl	800706c <Parser>
 800701e:	2867      	cmp	r0, #103	; 0x67
 8007020:	d1e7      	bne.n	8006ff2 <mcCore_SM+0x2e>
	hal_init_tick();
 8007022:	f7f9 fb82 	bl	800072a <hal_init_tick>
				mcCore_state = ST_MCCORE_RUN;
 8007026:	2301      	movs	r3, #1
 8007028:	7023      	strb	r3, [r4, #0]
}
 800702a:	bd38      	pop	{r3, r4, r5, pc}
			if(Parser(get_deployment_ch()) == CMD_KILL){ //when running if KILL cmd received go to the initial state
 800702c:	f7ff ff8a 	bl	8006f44 <get_deployment_ch>
 8007030:	f000 f81c 	bl	800706c <Parser>
 8007034:	2868      	cmp	r0, #104	; 0x68
 8007036:	d102      	bne.n	800703e <mcCore_SM+0x7a>
				mcCore_state = ST_MCCORE_INIT;
 8007038:	2300      	movs	r3, #0
 800703a:	7023      	strb	r3, [r4, #0]
}
 800703c:	bd38      	pop	{r3, r4, r5, pc}
	for(uint8_t i= 0;i<fbTable.length;i++){
 800703e:	4c09      	ldr	r4, [pc, #36]	; (8007064 <mcCore_SM+0xa0>)
 8007040:	7823      	ldrb	r3, [r4, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0d5      	beq.n	8006ff2 <mcCore_SM+0x2e>
 8007046:	2500      	movs	r5, #0
 8007048:	462b      	mov	r3, r5
		(*fbTable.fb[i].callback)((uint8_t)fbTable.fb[i].param_start_index);
 800704a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
	for(uint8_t i= 0;i<fbTable.length;i++){
 800704e:	3501      	adds	r5, #1
		(*fbTable.fb[i].callback)((uint8_t)fbTable.fb[i].param_start_index);
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	7918      	ldrb	r0, [r3, #4]
 8007054:	4790      	blx	r2
	for(uint8_t i= 0;i<fbTable.length;i++){
 8007056:	7822      	ldrb	r2, [r4, #0]
 8007058:	b2eb      	uxtb	r3, r5
 800705a:	429a      	cmp	r2, r3
 800705c:	d8f5      	bhi.n	800704a <mcCore_SM+0x86>
}
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	20000254 	.word	0x20000254
 8007064:	20000150 	.word	0x20000150
 8007068:	20000258 	.word	0x20000258

0800706c <Parser>:
uint8_t parser_monitor(uint8_t* p){
	monitor();
	return 0;
}

uint8_t Parser(Communication_Ch* dep_ch){
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4604      	mov	r4, r0
	uint8_t cmd = 0, addr = 0;
	uint8_t modbus_slave_addr = *get_MODBUS_SLAVE_ADDR();
 8007070:	f001 f870 	bl	8008154 <get_MODBUS_SLAVE_ADDR>
	if(dep_ch->fdata_ready){
 8007074:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
 8007078:	b125      	cbz	r5, 8007084 <Parser+0x18>
		addr = dep_ch->rx_data_buf[0];
		if (addr != modbus_slave_addr) return 0;
 800707a:	7802      	ldrb	r2, [r0, #0]
 800707c:	79a3      	ldrb	r3, [r4, #6]
 800707e:	429a      	cmp	r2, r3
 8007080:	d002      	beq.n	8007088 <Parser+0x1c>
		dep_ch->fdata_ready = 0; //data process finished and ready for new data.
		return cmd;
	}

	else{
		return 0; //no new deployment data
 8007082:	2500      	movs	r5, #0
	}
}
 8007084:	4628      	mov	r0, r5
 8007086:	bd38      	pop	{r3, r4, r5, pc}
		cmd = dep_ch->rx_data_buf[1]; //function
 8007088:	79e5      	ldrb	r5, [r4, #7]
		switch (cmd)
 800708a:	f1a5 0365 	sub.w	r3, r5, #101	; 0x65
 800708e:	2b06      	cmp	r3, #6
 8007090:	d823      	bhi.n	80070da <Parser+0x6e>
 8007092:	e8df f003 	tbb	[pc, r3]
 8007096:	0411      	.short	0x0411
 8007098:	1f1b0808 	.word	0x1f1b0808
 800709c:	0d          	.byte	0x0d
 800709d:	00          	.byte	0x00
	make_connection(p[0], p[1]); //dest,src
 800709e:	7a61      	ldrb	r1, [r4, #9]
 80070a0:	7a20      	ldrb	r0, [r4, #8]
 80070a2:	f7ff ff85 	bl	8006fb0 <make_connection>
		dep_ch->fdata_ready = 0; //data process finished and ready for new data.
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4628      	mov	r0, r5
		dep_ch->fdata_ready = 0; //data process finished and ready for new data.
 80070aa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
	removeWatch(p[0]);
 80070b0:	7a20      	ldrb	r0, [r4, #8]
 80070b2:	f001 fa0b 	bl	80084cc <removeWatch>
	return 0;
 80070b6:	e7f6      	b.n	80070a6 <Parser+0x3a>
			if(dep_ch->rx_data_buf[2]<FB_PARSERS_SIZE){
 80070b8:	7a23      	ldrb	r3, [r4, #8]
 80070ba:	2b13      	cmp	r3, #19
 80070bc:	d8f3      	bhi.n	80070a6 <Parser+0x3a>
				fb_parsers[dep_ch->rx_data_buf[2]](&(dep_ch->rx_data_buf[3]));
 80070be:	4a0a      	ldr	r2, [pc, #40]	; (80070e8 <Parser+0x7c>)
 80070c0:	f104 0009 	add.w	r0, r4, #9
 80070c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070c8:	4798      	blx	r3
 80070ca:	e7ec      	b.n	80070a6 <Parser+0x3a>
	addWatch(p[0]);
 80070cc:	7a20      	ldrb	r0, [r4, #8]
 80070ce:	f001 f9f1 	bl	80084b4 <addWatch>
	return 0;
 80070d2:	e7e8      	b.n	80070a6 <Parser+0x3a>
	monitor();
 80070d4:	f001 fa1c 	bl	8008510 <monitor>
	return 0;
 80070d8:	e7e5      	b.n	80070a6 <Parser+0x3a>
			dep_ch->data_error_counter++;
 80070da:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80070de:	3301      	adds	r3, #1
 80070e0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 80070e4:	e7df      	b.n	80070a6 <Parser+0x3a>
 80070e6:	bf00      	nop
 80070e8:	2000003c 	.word	0x2000003c

080070ec <read_persistent_data_structure>:
	for(uint16_t i;i<MODBUS_PERSISTENT_DATA;i++){
		gpd.modbus_persistent_data[i] = 0;
	}
}

uint8_t read_persistent_data_structure(){
 80070ec:	b570      	push	{r4, r5, r6, lr}
	gpd.baudrate = 0; //0->115200, 1-->57600, 2-->38400, 3-->19200, 4-->9600
 80070ee:	4c1b      	ldr	r4, [pc, #108]	; (800715c <read_persistent_data_structure+0x70>)
uint8_t read_persistent_data_structure(){
 80070f0:	2500      	movs	r5, #0
	void* fb = get_flash_data();
 80070f2:	f001 f9bd 	bl	8008470 <get_flash_data>
	gpd.modbus_slave_address = 101;
 80070f6:	2365      	movs	r3, #101	; 0x65
	void* fb = get_flash_data();
 80070f8:	4606      	mov	r6, r0
		gpd.modbus_persistent_data[i] = 0;
 80070fa:	2220      	movs	r2, #32
 80070fc:	4629      	mov	r1, r5
 80070fe:	f104 0008 	add.w	r0, r4, #8
	gpd.modbus_slave_address = 101;
 8007102:	e9c4 5300 	strd	r5, r3, [r4]
		gpd.modbus_persistent_data[i] = 0;
 8007106:	f001 fa57 	bl	80085b8 <memset>
	uint8_t* p_gpd = (uint8_t*)get_gpd();
	uint8_t ret = 0;

	init_persistent_data_structure();

	if(((Flash_Block*)fb)->length == sizeof(Global_Persistent_Data)){
 800710a:	6873      	ldr	r3, [r6, #4]
 800710c:	2b28      	cmp	r3, #40	; 0x28
 800710e:	d00e      	beq.n	800712e <read_persistent_data_structure+0x42>
		memcpy(p_gpd, p_flash, ((Flash_Block*)fb)->length);
		ret = 1;
	}

	//transfer the modbus and user contents of the gpd to the modbus and fb registers
	uint16_t* modbus_data = get_Modbus_Buf_Holding_Registers_40001();
 8007110:	f001 f818 	bl	8008144 <get_Modbus_Buf_Holding_Registers_40001>
	for(uint16_t i = 0;i<MODBUS_PERSISTENT_DATA;i++){
 8007114:	4b12      	ldr	r3, [pc, #72]	; (8007160 <read_persistent_data_structure+0x74>)
 8007116:	f100 0210 	add.w	r2, r0, #16
 800711a:	f103 0c20 	add.w	ip, r3, #32
		modbus_data[i+8] = (uint16_t )gpd.modbus_persistent_data[i];
 800711e:	f853 1b04 	ldr.w	r1, [r3], #4
	for(uint16_t i = 0;i<MODBUS_PERSISTENT_DATA;i++){
 8007122:	4563      	cmp	r3, ip
		modbus_data[i+8] = (uint16_t )gpd.modbus_persistent_data[i];
 8007124:	f822 1b02 	strh.w	r1, [r2], #2
	for(uint16_t i = 0;i<MODBUS_PERSISTENT_DATA;i++){
 8007128:	d1f9      	bne.n	800711e <read_persistent_data_structure+0x32>
	}

	return ret;
}
 800712a:	4628      	mov	r0, r5
 800712c:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t* p_flash = (uint8_t*)fb + FLASHBLOCK_HEADER_SIZE;
 800712e:	f106 0508 	add.w	r5, r6, #8
		memcpy(p_gpd, p_flash, ((Flash_Block*)fb)->length);
 8007132:	3628      	adds	r6, #40	; 0x28
 8007134:	6828      	ldr	r0, [r5, #0]
 8007136:	3510      	adds	r5, #16
 8007138:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 800713c:	46a4      	mov	ip, r4
 800713e:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8007142:	3410      	adds	r4, #16
 8007144:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007148:	42b5      	cmp	r5, r6
 800714a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800714e:	d1f1      	bne.n	8007134 <read_persistent_data_structure+0x48>
 8007150:	6828      	ldr	r0, [r5, #0]
 8007152:	6869      	ldr	r1, [r5, #4]
		ret = 1;
 8007154:	2501      	movs	r5, #1
		memcpy(p_gpd, p_flash, ((Flash_Block*)fb)->length);
 8007156:	c403      	stmia	r4!, {r0, r1}
		ret = 1;
 8007158:	e7da      	b.n	8007110 <read_persistent_data_structure+0x24>
 800715a:	bf00      	nop
 800715c:	2000065c 	.word	0x2000065c
 8007160:	20000664 	.word	0x20000664

08007164 <write_persistent_data_structure>:

uint8_t write_persistent_data_structure(){
	write_flash_data((uint8_t*)&gpd, sizeof(gpd));
 8007164:	2128      	movs	r1, #40	; 0x28
 8007166:	4802      	ldr	r0, [pc, #8]	; (8007170 <write_persistent_data_structure+0xc>)
uint8_t write_persistent_data_structure(){
 8007168:	b508      	push	{r3, lr}
	write_flash_data((uint8_t*)&gpd, sizeof(gpd));
 800716a:	f001 f97b 	bl	8008464 <write_flash_data>
}
 800716e:	bd08      	pop	{r3, pc}
 8007170:	2000065c 	.word	0x2000065c

08007174 <Record_To_Modbus_GPD>:

void Record_To_Modbus_GPD(uint8_t index, uint32_t datum){
	gpd.modbus_persistent_data[index] = datum;
 8007174:	4b02      	ldr	r3, [pc, #8]	; (8007180 <Record_To_Modbus_GPD+0xc>)
 8007176:	3002      	adds	r0, #2
 8007178:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	2000065c 	.word	0x2000065c

08007184 <init_uniqueid>:
#include "modbus_slave.h"
#include "adaptor.h"

#define UID_LEN 16

void init_uniqueid(){
 8007184:	b500      	push	{lr}
 8007186:	b085      	sub	sp, #20
	uint8_t uniqueid[UID_LEN];
	//clear uniqueid buffer
	for(uint8_t i = 0;i<UID_LEN;i++){
		uniqueid[i] = 0;
 8007188:	2300      	movs	r3, #0
	}
	//read unique id from the adaptor function
	get_uniqueid(uniqueid, UID_LEN);
 800718a:	2110      	movs	r1, #16
 800718c:	4668      	mov	r0, sp
		uniqueid[i] = 0;
 800718e:	e9cd 3300 	strd	r3, r3, [sp]
 8007192:	e9cd 3302 	strd	r3, r3, [sp, #8]
	get_uniqueid(uniqueid, UID_LEN);
 8007196:	f7f9 fb75 	bl	8000884 <get_uniqueid>

	//copy this value to the memory place where mapped to a modbus read only input registers
	uint8_t* modbus_p = (uint8_t*) get_Modbus_Buf_Input_Registers_30001();
 800719a:	f000 ffd7 	bl	800814c <get_Modbus_Buf_Input_Registers_30001>

	for(uint8_t i= 0; i<UID_LEN;i++){
 800719e:	f10d 33ff 	add.w	r3, sp, #4294967295
 80071a2:	f10d 010f 	add.w	r1, sp, #15
 80071a6:	3801      	subs	r0, #1
		modbus_p[i] = uniqueid[i];
 80071a8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	for(uint8_t i= 0; i<UID_LEN;i++){
 80071ac:	4299      	cmp	r1, r3
		modbus_p[i] = uniqueid[i];
 80071ae:	f800 2f01 	strb.w	r2, [r0, #1]!
	for(uint8_t i= 0; i<UID_LEN;i++){
 80071b2:	d1f9      	bne.n	80071a8 <init_uniqueid+0x24>
	}
}
 80071b4:	b005      	add	sp, #20
 80071b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80071ba:	bf00      	nop

080071bc <fb_and>:
	uint8_t type = p[0];
	create_fb_and(type);
	return 1;
}

void fb_and(uint8_t p){
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 80071c0:	f7ff fed0 	bl	8006f64 <get_paramAddrTable>
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 80071c4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];

	if(*type == 1){
 80071c8:	6859      	ldr	r1, [r3, #4]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 80071ca:	691d      	ldr	r5, [r3, #16]
	if(*type == 1){
 80071cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80071d0:	f8d1 7204 	ldr.w	r7, [r1, #516]	; 0x204
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 80071d4:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
	if(*type == 1){
 80071d8:	2f01      	cmp	r7, #1
		*output =  (*input1)&(*input2)&(*input3)&(*input4);
 80071da:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 80071de:	e9d3 6105 	ldrd	r6, r1, [r3, #20]
	if(*type == 1){
 80071e2:	d018      	beq.n	8007216 <fb_and+0x5a>
	}
	else{
		*output =  (*input1)&&(*input2)&&(*input3)&&(*input4);
 80071e4:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 80071e8:	b183      	cbz	r3, 800720c <fb_and+0x50>
 80071ea:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80071ee:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 80071f2:	b15b      	cbz	r3, 800720c <fb_and+0x50>
 80071f4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80071f8:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
 80071fc:	b133      	cbz	r3, 800720c <fb_and+0x50>
 80071fe:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007202:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
 8007206:	3b00      	subs	r3, #0
 8007208:	bf18      	it	ne
 800720a:	2301      	movne	r3, #1
 800720c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007210:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
	}

}
 8007214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*output =  (*input1)&(*input2)&(*input3)&(*input4);
 8007216:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800721a:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 800721e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007222:	f8d4 4204 	ldr.w	r4, [r4, #516]	; 0x204
 8007226:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800722a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800722e:	f8d5 1204 	ldr.w	r1, [r5, #516]	; 0x204
 8007232:	4023      	ands	r3, r4
 8007234:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8007238:	400b      	ands	r3, r1
 800723a:	4013      	ands	r3, r2
 800723c:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
}
 8007240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007242:	bf00      	nop

08007244 <create_fb_and>:

type_fb_and create_fb_and(uint8_t type){
 8007244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007248:	460d      	mov	r5, r1
 800724a:	b083      	sub	sp, #12
 800724c:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 800724e:	f7ff fe89 	bl	8006f64 <get_paramAddrTable>
 8007252:	4603      	mov	r3, r0
	type_fb_and fb;

	fb.startParamIndex = pAddrTable->currentIndex;

	fb.fp.type = createParameter(type); //in4
 8007254:	4628      	mov	r0, r5
	fb.startParamIndex = pAddrTable->currentIndex;
 8007256:	f893 b000 	ldrb.w	fp, [r3]
	fb.fp.type = createParameter(type); //in4
 800725a:	f7ff fe99 	bl	8006f90 <createParameter>
 800725e:	4606      	mov	r6, r0
	fb.fp.input1 = createParameter(1); //in1
 8007260:	2001      	movs	r0, #1
 8007262:	f7ff fe95 	bl	8006f90 <createParameter>
 8007266:	4682      	mov	sl, r0
	fb.fp.input2 = createParameter(1); //in2
 8007268:	2001      	movs	r0, #1
 800726a:	f7ff fe91 	bl	8006f90 <createParameter>
 800726e:	4681      	mov	r9, r0
	fb.fp.input3 = createParameter(1); //in3
 8007270:	2001      	movs	r0, #1
 8007272:	f7ff fe8d 	bl	8006f90 <createParameter>
 8007276:	4680      	mov	r8, r0
	fb.fp.input4 = createParameter(1); //in4
 8007278:	2001      	movs	r0, #1
 800727a:	f7ff fe89 	bl	8006f90 <createParameter>
 800727e:	4607      	mov	r7, r0
	fb.fp.output = createParameter(1); //output
 8007280:	2001      	movs	r0, #1
 8007282:	f7ff fe85 	bl	8006f90 <createParameter>
 8007286:	9001      	str	r0, [sp, #4]
	fb.fp.stat = createParameter(0); //output
 8007288:	2000      	movs	r0, #0
 800728a:	f7ff fe81 	bl	8006f90 <createParameter>



	fb.fb_index = writeToFBTable(fb_and, fb.startParamIndex);
 800728e:	4659      	mov	r1, fp
	fb.fp.stat = createParameter(0); //output
 8007290:	4605      	mov	r5, r0
	fb.fb_index = writeToFBTable(fb_and, fb.startParamIndex);
 8007292:	4809      	ldr	r0, [pc, #36]	; (80072b8 <create_fb_and+0x74>)
 8007294:	f7ff fe6a 	bl	8006f6c <writeToFBTable>

	return fb;
 8007298:	9b01      	ldr	r3, [sp, #4]
 800729a:	7020      	strb	r0, [r4, #0]
}
 800729c:	4620      	mov	r0, r4
	return fb;
 800729e:	f884 b001 	strb.w	fp, [r4, #1]
 80072a2:	6063      	str	r3, [r4, #4]
 80072a4:	e9c4 a902 	strd	sl, r9, [r4, #8]
 80072a8:	e9c4 8704 	strd	r8, r7, [r4, #16]
 80072ac:	e9c4 6506 	strd	r6, r5, [r4, #24]
}
 80072b0:	b003      	add	sp, #12
 80072b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b6:	bf00      	nop
 80072b8:	080071bd 	.word	0x080071bd

080072bc <fb_and_parser>:
uint8_t fb_and_parser(uint8_t* p){
 80072bc:	b500      	push	{lr}
 80072be:	4603      	mov	r3, r0
 80072c0:	b089      	sub	sp, #36	; 0x24
	create_fb_and(type);
 80072c2:	7819      	ldrb	r1, [r3, #0]
 80072c4:	4668      	mov	r0, sp
 80072c6:	f7ff ffbd 	bl	8007244 <create_fb_and>
}
 80072ca:	2001      	movs	r0, #1
 80072cc:	b009      	add	sp, #36	; 0x24
 80072ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80072d2:	bf00      	nop

080072d4 <fb_nand>:
	uint8_t type = p[0];
	create_fb_nand(type);
	return 1;
}

void fb_nand(uint8_t p){
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 80072d8:	f7ff fe44 	bl	8006f64 <get_paramAddrTable>
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 80072dc:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];

	if(*type == 1){
 80072e0:	6859      	ldr	r1, [r3, #4]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 80072e2:	691d      	ldr	r5, [r3, #16]
	if(*type == 1){
 80072e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80072e8:	f8d1 6204 	ldr.w	r6, [r1, #516]	; 0x204
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 80072ec:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
	if(*type == 1){
 80072f0:	2e01      	cmp	r6, #1
		*output =  !((*input1)&(*input2)&(*input3)&(*input4));
 80072f2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 80072f6:	e9d3 1305 	ldrd	r1, r3, [r3, #20]
	if(*type == 1){
 80072fa:	d01c      	beq.n	8007336 <fb_nand+0x62>
	}
	else{
		*output =  !((*input1)&&(*input2)&&(*input3)&&(*input4));
 80072fc:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8007300:	b92a      	cbnz	r2, 800730e <fb_nand+0x3a>
 8007302:	2201      	movs	r2, #1
 8007304:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007308:	f8c0 2204 	str.w	r2, [r0, #516]	; 0x204
	}
}
 800730c:	bd70      	pop	{r4, r5, r6, pc}
		*output =  !((*input1)&&(*input2)&&(*input3)&&(*input4));
 800730e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8007312:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 8007316:	2a00      	cmp	r2, #0
 8007318:	d0f3      	beq.n	8007302 <fb_nand+0x2e>
 800731a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800731e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8007322:	2a00      	cmp	r2, #0
 8007324:	d0ed      	beq.n	8007302 <fb_nand+0x2e>
 8007326:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800732a:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 800732e:	fab2 f282 	clz	r2, r2
 8007332:	0952      	lsrs	r2, r2, #5
 8007334:	e7e6      	b.n	8007304 <fb_nand+0x30>
		*output =  !((*input1)&(*input2)&(*input3)&(*input4));
 8007336:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800733a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800733e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007342:	f8d4 6204 	ldr.w	r6, [r4, #516]	; 0x204
 8007346:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800734a:	f8d5 4204 	ldr.w	r4, [r5, #516]	; 0x204
 800734e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007352:	4032      	ands	r2, r6
 8007354:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 8007358:	4022      	ands	r2, r4
 800735a:	421a      	tst	r2, r3
 800735c:	bf0c      	ite	eq
 800735e:	2301      	moveq	r3, #1
 8007360:	2300      	movne	r3, #0
 8007362:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
}
 8007366:	bd70      	pop	{r4, r5, r6, pc}

08007368 <create_fb_nand>:

type_fb_nand create_fb_nand(uint8_t type){
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	460d      	mov	r5, r1
 800736e:	b083      	sub	sp, #12
 8007370:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 8007372:	f7ff fdf7 	bl	8006f64 <get_paramAddrTable>
 8007376:	4603      	mov	r3, r0
	type_fb_nand fb;

	fb.startParamIndex = pAddrTable->currentIndex;

	fb.fp.type = createParameter(type); //in4
 8007378:	4628      	mov	r0, r5
	fb.startParamIndex = pAddrTable->currentIndex;
 800737a:	f893 b000 	ldrb.w	fp, [r3]
	fb.fp.type = createParameter(type); //in4
 800737e:	f7ff fe07 	bl	8006f90 <createParameter>
 8007382:	4606      	mov	r6, r0
	fb.fp.input1 = createParameter(1); //in1
 8007384:	2001      	movs	r0, #1
 8007386:	f7ff fe03 	bl	8006f90 <createParameter>
 800738a:	4682      	mov	sl, r0
	fb.fp.input2 = createParameter(1); //in2
 800738c:	2001      	movs	r0, #1
 800738e:	f7ff fdff 	bl	8006f90 <createParameter>
 8007392:	4681      	mov	r9, r0
	fb.fp.input3 = createParameter(1); //in3
 8007394:	2001      	movs	r0, #1
 8007396:	f7ff fdfb 	bl	8006f90 <createParameter>
 800739a:	4680      	mov	r8, r0
	fb.fp.input4 = createParameter(1); //in4
 800739c:	2001      	movs	r0, #1
 800739e:	f7ff fdf7 	bl	8006f90 <createParameter>
 80073a2:	4607      	mov	r7, r0
	fb.fp.output = createParameter(0); //output
 80073a4:	2000      	movs	r0, #0
 80073a6:	f7ff fdf3 	bl	8006f90 <createParameter>
 80073aa:	9001      	str	r0, [sp, #4]
	fb.fp.stat = createParameter(0);
 80073ac:	2000      	movs	r0, #0
 80073ae:	f7ff fdef 	bl	8006f90 <createParameter>


	fb.fb_index = writeToFBTable(fb_nand, fb.startParamIndex);
 80073b2:	4659      	mov	r1, fp
	fb.fp.stat = createParameter(0);
 80073b4:	4605      	mov	r5, r0
	fb.fb_index = writeToFBTable(fb_nand, fb.startParamIndex);
 80073b6:	4809      	ldr	r0, [pc, #36]	; (80073dc <create_fb_nand+0x74>)
 80073b8:	f7ff fdd8 	bl	8006f6c <writeToFBTable>

	return fb;
 80073bc:	9b01      	ldr	r3, [sp, #4]
 80073be:	7020      	strb	r0, [r4, #0]
}
 80073c0:	4620      	mov	r0, r4
	return fb;
 80073c2:	f884 b001 	strb.w	fp, [r4, #1]
 80073c6:	6063      	str	r3, [r4, #4]
 80073c8:	e9c4 a902 	strd	sl, r9, [r4, #8]
 80073cc:	e9c4 8704 	strd	r8, r7, [r4, #16]
 80073d0:	e9c4 6506 	strd	r6, r5, [r4, #24]
}
 80073d4:	b003      	add	sp, #12
 80073d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073da:	bf00      	nop
 80073dc:	080072d5 	.word	0x080072d5

080073e0 <fb_nand_parser>:
uint8_t fb_nand_parser(uint8_t* p){
 80073e0:	b500      	push	{lr}
 80073e2:	4603      	mov	r3, r0
 80073e4:	b089      	sub	sp, #36	; 0x24
	create_fb_nand(type);
 80073e6:	7819      	ldrb	r1, [r3, #0]
 80073e8:	4668      	mov	r0, sp
 80073ea:	f7ff ffbd 	bl	8007368 <create_fb_nand>
}
 80073ee:	2001      	movs	r0, #1
 80073f0:	b009      	add	sp, #36	; 0x24
 80073f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80073f6:	bf00      	nop

080073f8 <fb_nor>:
//logic fb
uint8_t fb_nor_parser(void){
	create_fb_nor();
	return 1;
}
void fb_nor(uint8_t p){
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 80073fc:	f7ff fdb2 	bl	8006f64 <get_paramAddrTable>
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p]];
 8007400:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+3]];
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+4]];
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+5]];


	*output =  !((*input1)|(*input2)|(*input3)|(*input4));
 8007404:	e9d3 4201 	ldrd	r4, r2, [r3, #4]
 8007408:	68d9      	ldr	r1, [r3, #12]
 800740a:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+4]];
 800740e:	695d      	ldr	r5, [r3, #20]
	*output =  !((*input1)|(*input2)|(*input3)|(*input4));
 8007410:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8007414:	691a      	ldr	r2, [r3, #16]
 8007416:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800741a:	f8dc 3204 	ldr.w	r3, [ip, #516]	; 0x204
 800741e:	f8d4 4204 	ldr.w	r4, [r4, #516]	; 0x204
 8007422:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007426:	f8d1 1204 	ldr.w	r1, [r1, #516]	; 0x204
 800742a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800742e:	4323      	orrs	r3, r4
 8007430:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8007434:	430b      	orrs	r3, r1
 8007436:	4313      	orrs	r3, r2
 8007438:	bf0c      	ite	eq
 800743a:	2301      	moveq	r3, #1
 800743c:	2300      	movne	r3, #0
 800743e:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204

}
 8007442:	bd38      	pop	{r3, r4, r5, pc}

08007444 <create_fb_nor>:


type_fb_nor create_fb_nor(void){
 8007444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007448:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 800744a:	f7ff fd8b 	bl	8006f64 <get_paramAddrTable>
 800744e:	4603      	mov	r3, r0
	type_fb_nor fb;

	fb.startParamIndex = pAddrTable->currentIndex;


	fb.fp.input1 = createParameter(0); //in1
 8007450:	2000      	movs	r0, #0
	fb.startParamIndex = pAddrTable->currentIndex;
 8007452:	f893 b000 	ldrb.w	fp, [r3]
	fb.fp.input1 = createParameter(0); //in1
 8007456:	f7ff fd9b 	bl	8006f90 <createParameter>
 800745a:	4681      	mov	r9, r0
	fb.fp.input2 = createParameter(0); //in2
 800745c:	2000      	movs	r0, #0
 800745e:	f7ff fd97 	bl	8006f90 <createParameter>
 8007462:	4680      	mov	r8, r0
	fb.fp.input3 = createParameter(0); //in3
 8007464:	2000      	movs	r0, #0
 8007466:	f7ff fd93 	bl	8006f90 <createParameter>
 800746a:	4607      	mov	r7, r0
	fb.fp.input4 = createParameter(0); //in4
 800746c:	2000      	movs	r0, #0
 800746e:	f7ff fd8f 	bl	8006f90 <createParameter>
 8007472:	4606      	mov	r6, r0
	fb.fp.output = createParameter(0); //output
 8007474:	2000      	movs	r0, #0
 8007476:	f7ff fd8b 	bl	8006f90 <createParameter>
 800747a:	4682      	mov	sl, r0
	fb.fp.stat = createParameter(0); //output
 800747c:	2000      	movs	r0, #0
 800747e:	f7ff fd87 	bl	8006f90 <createParameter>
 8007482:	4605      	mov	r5, r0


	fb.fb_index = writeToFBTable(fb_nor, fb.startParamIndex);
 8007484:	4659      	mov	r1, fp
 8007486:	4808      	ldr	r0, [pc, #32]	; (80074a8 <create_fb_nor+0x64>)
 8007488:	f7ff fd70 	bl	8006f6c <writeToFBTable>

	return fb;
 800748c:	f884 b001 	strb.w	fp, [r4, #1]
 8007490:	7020      	strb	r0, [r4, #0]
}
 8007492:	4620      	mov	r0, r4
	return fb;
 8007494:	f8c4 a004 	str.w	sl, [r4, #4]
 8007498:	61a5      	str	r5, [r4, #24]
 800749a:	e9c4 9802 	strd	r9, r8, [r4, #8]
 800749e:	e9c4 7604 	strd	r7, r6, [r4, #16]
}
 80074a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a6:	bf00      	nop
 80074a8:	080073f9 	.word	0x080073f9

080074ac <fb_nor_parser>:
uint8_t fb_nor_parser(void){
 80074ac:	b500      	push	{lr}
 80074ae:	b089      	sub	sp, #36	; 0x24
	create_fb_nor();
 80074b0:	4668      	mov	r0, sp
 80074b2:	f7ff ffc7 	bl	8007444 <create_fb_nor>
}
 80074b6:	2001      	movs	r0, #1
 80074b8:	b009      	add	sp, #36	; 0x24
 80074ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80074be:	bf00      	nop

080074c0 <fb_not>:
	uint8_t input = p[1];
	create_fb_not(type, input);
	return 1;
}

void fb_not(uint8_t p){
 80074c0:	b510      	push	{r4, lr}
 80074c2:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 80074c4:	f7ff fd4e 	bl	8006f64 <get_paramAddrTable>
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 80074c8:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	int32_t* input = &pAddrTable->value[pAddrTable->addr[p+1]];
 80074cc:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+2]];
 80074d0:	68dc      	ldr	r4, [r3, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];

	// returns true if the conditions is false
	// else returns false

	if(*type == 1){
 80074d2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
		*output =  ~(*input);
 80074d6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	if(*type == 1){
 80074da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80074de:	2b01      	cmp	r3, #1
		*output =  ~(*input);
 80074e0:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
	if(*type == 1){
 80074e4:	d007      	beq.n	80074f6 <fb_not+0x36>
	}
	else{
		*output =  !(*input);
 80074e6:	fab3 f383 	clz	r3, r3
 80074ea:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
	}

}
 80074f4:	bd10      	pop	{r4, pc}
		*output =  ~(*input);
 80074f6:	43db      	mvns	r3, r3
 80074f8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80074fc:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
}
 8007500:	bd10      	pop	{r4, pc}
 8007502:	bf00      	nop

08007504 <create_fb_not>:


type_fb_not create_fb_not(uint8_t type, uint8_t input){
 8007504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007508:	460e      	mov	r6, r1
 800750a:	4615      	mov	r5, r2
 800750c:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 800750e:	f7ff fd29 	bl	8006f64 <get_paramAddrTable>
 8007512:	4603      	mov	r3, r0
	type_fb_not fb;

	fb.startParamIndex = pAddrTable->currentIndex;

	//input not connected -> output = 1
	fb.fp.type = createParameter(type); //in
 8007514:	4630      	mov	r0, r6
	fb.startParamIndex = pAddrTable->currentIndex;
 8007516:	f893 9000 	ldrb.w	r9, [r3]
	fb.fp.type = createParameter(type); //in
 800751a:	f7ff fd39 	bl	8006f90 <createParameter>
 800751e:	4606      	mov	r6, r0
	fb.fp.input = createParameter(input); //in
 8007520:	4628      	mov	r0, r5
 8007522:	f7ff fd35 	bl	8006f90 <createParameter>
 8007526:	4607      	mov	r7, r0
	fb.fp.output = createParameter(0); //output
 8007528:	2000      	movs	r0, #0
 800752a:	f7ff fd31 	bl	8006f90 <createParameter>
 800752e:	4680      	mov	r8, r0
	fb.fp.stat = createParameter(0);
 8007530:	2000      	movs	r0, #0
 8007532:	f7ff fd2d 	bl	8006f90 <createParameter>
 8007536:	4605      	mov	r5, r0



	fb.fb_index = writeToFBTable(fb_not, fb.startParamIndex);
 8007538:	4649      	mov	r1, r9
 800753a:	4807      	ldr	r0, [pc, #28]	; (8007558 <create_fb_not+0x54>)
 800753c:	f7ff fd16 	bl	8006f6c <writeToFBTable>

	return fb;
 8007540:	f884 9001 	strb.w	r9, [r4, #1]
 8007544:	7020      	strb	r0, [r4, #0]
}
 8007546:	4620      	mov	r0, r4
	return fb;
 8007548:	f8c4 8004 	str.w	r8, [r4, #4]
 800754c:	6125      	str	r5, [r4, #16]
 800754e:	e9c4 7602 	strd	r7, r6, [r4, #8]
}
 8007552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007556:	bf00      	nop
 8007558:	080074c1 	.word	0x080074c1

0800755c <fb_not_parser>:
uint8_t fb_not_parser(uint8_t* p){
 800755c:	b500      	push	{lr}
 800755e:	4603      	mov	r3, r0
 8007560:	b087      	sub	sp, #28
	create_fb_not(type, input);
 8007562:	785a      	ldrb	r2, [r3, #1]
 8007564:	4668      	mov	r0, sp
 8007566:	7819      	ldrb	r1, [r3, #0]
 8007568:	f7ff ffcc 	bl	8007504 <create_fb_not>
}
 800756c:	2001      	movs	r0, #1
 800756e:	b007      	add	sp, #28
 8007570:	f85d fb04 	ldr.w	pc, [sp], #4

08007574 <fb_or>:
	uint8_t type = p[0];
	create_fb_or(type);
	return 1;
}

void fb_or(uint8_t p){
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 8007578:	f7ff fcf4 	bl	8006f64 <get_paramAddrTable>
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800757c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];

	if(*type == 1){
 8007580:	6859      	ldr	r1, [r3, #4]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 8007582:	691d      	ldr	r5, [r3, #16]
	if(*type == 1){
 8007584:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007588:	f8d1 6204 	ldr.w	r6, [r1, #516]	; 0x204
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800758c:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
	if(*type == 1){
 8007590:	2e01      	cmp	r6, #1
		*output =  (*input1)|(*input2)|(*input3)|(*input4);
 8007592:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 8007596:	e9d3 1305 	ldrd	r1, r3, [r3, #20]
	if(*type == 1){
 800759a:	d01c      	beq.n	80075d6 <fb_or+0x62>
	}
	else{
		*output =  (*input1)||(*input2)||(*input3)||(*input4);
 800759c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80075a0:	b12a      	cbz	r2, 80075ae <fb_or+0x3a>
 80075a2:	2201      	movs	r2, #1
 80075a4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80075a8:	f8c0 2204 	str.w	r2, [r0, #516]	; 0x204
	}


}
 80075ac:	bd70      	pop	{r4, r5, r6, pc}
		*output =  (*input1)||(*input2)||(*input3)||(*input4);
 80075ae:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80075b2:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 80075b6:	2a00      	cmp	r2, #0
 80075b8:	d1f3      	bne.n	80075a2 <fb_or+0x2e>
 80075ba:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80075be:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80075c2:	2a00      	cmp	r2, #0
 80075c4:	d1ed      	bne.n	80075a2 <fb_or+0x2e>
 80075c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80075ca:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 80075ce:	3a00      	subs	r2, #0
 80075d0:	bf18      	it	ne
 80075d2:	2201      	movne	r2, #1
 80075d4:	e7e6      	b.n	80075a4 <fb_or+0x30>
		*output =  (*input1)|(*input2)|(*input3)|(*input4);
 80075d6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80075da:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80075de:	f8d4 6204 	ldr.w	r6, [r4, #516]	; 0x204
 80075e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80075e6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80075ea:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 80075ee:	f8d5 4204 	ldr.w	r4, [r5, #516]	; 0x204
 80075f2:	4333      	orrs	r3, r6
 80075f4:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 80075f8:	4323      	orrs	r3, r4
 80075fa:	4313      	orrs	r3, r2
 80075fc:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
}
 8007600:	bd70      	pop	{r4, r5, r6, pc}
 8007602:	bf00      	nop

08007604 <create_fb_or>:


type_fb_or create_fb_or(uint8_t type){
 8007604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	460d      	mov	r5, r1
 800760a:	b083      	sub	sp, #12
 800760c:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 800760e:	f7ff fca9 	bl	8006f64 <get_paramAddrTable>
 8007612:	4603      	mov	r3, r0
	type_fb_or fb;

	fb.startParamIndex = pAddrTable->currentIndex;

	fb.fp.type = createParameter(type); //type
 8007614:	4628      	mov	r0, r5
	fb.startParamIndex = pAddrTable->currentIndex;
 8007616:	f893 b000 	ldrb.w	fp, [r3]
	fb.fp.type = createParameter(type); //type
 800761a:	f7ff fcb9 	bl	8006f90 <createParameter>
 800761e:	4606      	mov	r6, r0
	fb.fp.input1 = createParameter(0); //input1
 8007620:	2000      	movs	r0, #0
 8007622:	f7ff fcb5 	bl	8006f90 <createParameter>
 8007626:	4682      	mov	sl, r0
	fb.fp.input2 = createParameter(0); //input2
 8007628:	2000      	movs	r0, #0
 800762a:	f7ff fcb1 	bl	8006f90 <createParameter>
 800762e:	4681      	mov	r9, r0
	fb.fp.input3 = createParameter(0); //input3
 8007630:	2000      	movs	r0, #0
 8007632:	f7ff fcad 	bl	8006f90 <createParameter>
 8007636:	4680      	mov	r8, r0
	fb.fp.input4 = createParameter(0); //input4
 8007638:	2000      	movs	r0, #0
 800763a:	f7ff fca9 	bl	8006f90 <createParameter>
 800763e:	4607      	mov	r7, r0
	fb.fp.output = createParameter(0); //output
 8007640:	2000      	movs	r0, #0
 8007642:	f7ff fca5 	bl	8006f90 <createParameter>
 8007646:	9001      	str	r0, [sp, #4]
	fb.fp.stat = createParameter(0); //output
 8007648:	2000      	movs	r0, #0
 800764a:	f7ff fca1 	bl	8006f90 <createParameter>

	fb.fb_index = writeToFBTable(fb_or, fb.startParamIndex);
 800764e:	4659      	mov	r1, fp
	fb.fp.stat = createParameter(0); //output
 8007650:	4605      	mov	r5, r0
	fb.fb_index = writeToFBTable(fb_or, fb.startParamIndex);
 8007652:	4809      	ldr	r0, [pc, #36]	; (8007678 <create_fb_or+0x74>)
 8007654:	f7ff fc8a 	bl	8006f6c <writeToFBTable>

	return fb;
 8007658:	9b01      	ldr	r3, [sp, #4]
 800765a:	7020      	strb	r0, [r4, #0]
}
 800765c:	4620      	mov	r0, r4
	return fb;
 800765e:	f884 b001 	strb.w	fp, [r4, #1]
 8007662:	6063      	str	r3, [r4, #4]
 8007664:	e9c4 a902 	strd	sl, r9, [r4, #8]
 8007668:	e9c4 8704 	strd	r8, r7, [r4, #16]
 800766c:	e9c4 6506 	strd	r6, r5, [r4, #24]
}
 8007670:	b003      	add	sp, #12
 8007672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007676:	bf00      	nop
 8007678:	08007575 	.word	0x08007575

0800767c <fb_or_parser>:
uint8_t fb_or_parser(uint8_t* p){
 800767c:	b500      	push	{lr}
 800767e:	4603      	mov	r3, r0
 8007680:	b089      	sub	sp, #36	; 0x24
	create_fb_or(type);
 8007682:	7819      	ldrb	r1, [r3, #0]
 8007684:	4668      	mov	r0, sp
 8007686:	f7ff ffbd 	bl	8007604 <create_fb_or>
}
 800768a:	2001      	movs	r0, #1
 800768c:	b009      	add	sp, #36	; 0x24
 800768e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007692:	bf00      	nop

08007694 <fb_xor>:
//logic fb
uint8_t fb_xor_parser(void){
	create_fb_xor();
	return 1;
}
void fb_xor(uint8_t p){
 8007694:	b510      	push	{r4, lr}
 8007696:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 8007698:	f7ff fc64 	bl	8006f64 <get_paramAddrTable>
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p]];
 800769c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+1]];
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+3]];
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];

	*output =  (*input1)^(*input2);
 80076a0:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+3]];
 80076a4:	691c      	ldr	r4, [r3, #16]
	*output =  (*input1)^(*input2);
 80076a6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80076aa:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80076ae:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80076b2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80076b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80076ba:	4053      	eors	r3, r2
 80076bc:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
}
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	bf00      	nop

080076c4 <create_fb_xor>:


type_fb_xor create_fb_xor(void){
 80076c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c8:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 80076ca:	f7ff fc4b 	bl	8006f64 <get_paramAddrTable>
 80076ce:	4603      	mov	r3, r0
	type_fb_xor fb;

	fb.startParamIndex = pAddrTable->currentIndex;


	fb.fp.input1 = createParameter(0); //in
 80076d0:	2000      	movs	r0, #0
	fb.startParamIndex = pAddrTable->currentIndex;
 80076d2:	f893 a000 	ldrb.w	sl, [r3]
	fb.fp.input1 = createParameter(0); //in
 80076d6:	f7ff fc5b 	bl	8006f90 <createParameter>
 80076da:	4680      	mov	r8, r0
	fb.fp.input2 = createParameter(0); //in
 80076dc:	2000      	movs	r0, #0
 80076de:	f7ff fc57 	bl	8006f90 <createParameter>
 80076e2:	4607      	mov	r7, r0
	fb.fp.mode = createParameter(0); //in
 80076e4:	2000      	movs	r0, #0
 80076e6:	f7ff fc53 	bl	8006f90 <createParameter>
 80076ea:	4606      	mov	r6, r0
	fb.fp.output = createParameter(0); //output
 80076ec:	2000      	movs	r0, #0
 80076ee:	f7ff fc4f 	bl	8006f90 <createParameter>
 80076f2:	4681      	mov	r9, r0
	fb.fp.stat = createParameter(0); //in
 80076f4:	2000      	movs	r0, #0
 80076f6:	f7ff fc4b 	bl	8006f90 <createParameter>
 80076fa:	4605      	mov	r5, r0



	fb.fb_index = writeToFBTable(fb_xor, fb.startParamIndex);
 80076fc:	4651      	mov	r1, sl
 80076fe:	4807      	ldr	r0, [pc, #28]	; (800771c <create_fb_xor+0x58>)
 8007700:	f7ff fc34 	bl	8006f6c <writeToFBTable>

	return fb;
 8007704:	f884 a001 	strb.w	sl, [r4, #1]
 8007708:	7020      	strb	r0, [r4, #0]
}
 800770a:	4620      	mov	r0, r4
	return fb;
 800770c:	f8c4 9004 	str.w	r9, [r4, #4]
 8007710:	e9c4 8702 	strd	r8, r7, [r4, #8]
 8007714:	e9c4 6504 	strd	r6, r5, [r4, #16]
}
 8007718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771c:	08007695 	.word	0x08007695

08007720 <fb_xor_parser>:
uint8_t fb_xor_parser(void){
 8007720:	b500      	push	{lr}
 8007722:	b087      	sub	sp, #28
	create_fb_xor();
 8007724:	4668      	mov	r0, sp
 8007726:	f7ff ffcd 	bl	80076c4 <create_fb_xor>
}
 800772a:	2001      	movs	r0, #1
 800772c:	b007      	add	sp, #28
 800772e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007732:	bf00      	nop

08007734 <fb_condition>:
	uint8_t mode = p[0];
	create_fb_condition(mode);
	return 1;
}

void fb_condition(uint8_t p){
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 8007738:	f7ff fc14 	bl	8006f64 <get_paramAddrTable>
	int32_t* in1 = &pAddrTable->value[pAddrTable->addr[p]];
 800773c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	int32_t* in2 = &pAddrTable->value[pAddrTable->addr[p+1]];
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 8007740:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
	int32_t* in2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 8007744:	e9d3 4101 	ldrd	r4, r1, [r3, #4]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 8007748:	f102 0381 	add.w	r3, r2, #129	; 0x81
	uint32_t* output = &pAddrTable->value[pAddrTable->addr[p+3]];
 800774c:	f105 0281 	add.w	r2, r5, #129	; 0x81
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];

	switch ( *mode ){
 8007750:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007754:	2b05      	cmp	r3, #5
 8007756:	d80e      	bhi.n	8007776 <fb_condition+0x42>
 8007758:	e8df f003 	tbb	[pc, r3]
 800775c:	35032a1f 	.word	0x35032a1f
 8007760:	1140      	.short	0x1140
			else
				*output = 0;
			break;

		case 2:
			if( *in1 == *in2)
 8007762:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8007766:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800776a:	f8d4 4204 	ldr.w	r4, [r4, #516]	; 0x204
 800776e:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 8007772:	429c      	cmp	r4, r3
 8007774:	d00d      	beq.n	8007792 <fb_condition+0x5e>
			else
				*output = 0;
			break;

		default:
			*output = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	}

}
 800777c:	bd38      	pop	{r3, r4, r5, pc}
			if( *in1 < *in2)
 800777e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8007782:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007786:	f8d4 4204 	ldr.w	r4, [r4, #516]	; 0x204
 800778a:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 800778e:	429c      	cmp	r4, r3
 8007790:	daf1      	bge.n	8007776 <fb_condition+0x42>
				*output = 1;
 8007792:	2301      	movs	r3, #1
 8007794:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8007798:	bd38      	pop	{r3, r4, r5, pc}
			if( *in1 > *in2)
 800779a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800779e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80077a2:	f8d4 4204 	ldr.w	r4, [r4, #516]	; 0x204
 80077a6:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 80077aa:	429c      	cmp	r4, r3
 80077ac:	dde3      	ble.n	8007776 <fb_condition+0x42>
 80077ae:	e7f0      	b.n	8007792 <fb_condition+0x5e>
			if( *in1 >= *in2)
 80077b0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80077b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80077b8:	f8d4 4204 	ldr.w	r4, [r4, #516]	; 0x204
 80077bc:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 80077c0:	429c      	cmp	r4, r3
 80077c2:	dbd8      	blt.n	8007776 <fb_condition+0x42>
 80077c4:	e7e5      	b.n	8007792 <fb_condition+0x5e>
			if( *in1 != *in2)
 80077c6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80077ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80077ce:	f8d4 4204 	ldr.w	r4, [r4, #516]	; 0x204
 80077d2:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 80077d6:	429c      	cmp	r4, r3
 80077d8:	d1db      	bne.n	8007792 <fb_condition+0x5e>
 80077da:	e7cc      	b.n	8007776 <fb_condition+0x42>
			if( *in1 <= *in2)
 80077dc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80077e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80077e4:	f8d4 4204 	ldr.w	r4, [r4, #516]	; 0x204
 80077e8:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 80077ec:	429c      	cmp	r4, r3
 80077ee:	dcc2      	bgt.n	8007776 <fb_condition+0x42>
 80077f0:	e7cf      	b.n	8007792 <fb_condition+0x5e>
 80077f2:	bf00      	nop

080077f4 <create_fb_condition>:


type_fb_condition create_fb_condition(uint8_t mode){
 80077f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f8:	460d      	mov	r5, r1
 80077fa:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 80077fc:	f7ff fbb2 	bl	8006f64 <get_paramAddrTable>
 8007800:	4603      	mov	r3, r0
	type_fb_condition fb;

	fb.startParamIndex = pAddrTable->currentIndex;


	fb.fp.in1 = createParameter(0); //in1
 8007802:	2000      	movs	r0, #0
	fb.startParamIndex = pAddrTable->currentIndex;
 8007804:	f893 9000 	ldrb.w	r9, [r3]
	fb.fp.in1 = createParameter(0); //in1
 8007808:	f7ff fbc2 	bl	8006f90 <createParameter>
 800780c:	4682      	mov	sl, r0
	fb.fp.in2 = createParameter(0); //in2
 800780e:	2000      	movs	r0, #0
 8007810:	f7ff fbbe 	bl	8006f90 <createParameter>
 8007814:	4680      	mov	r8, r0
	fb.fp.mode = createParameter(mode); //op
 8007816:	4628      	mov	r0, r5
 8007818:	f7ff fbba 	bl	8006f90 <createParameter>
 800781c:	4607      	mov	r7, r0
	fb.fp.out = createParameter(0); //output
 800781e:	2000      	movs	r0, #0
 8007820:	f7ff fbb6 	bl	8006f90 <createParameter>
 8007824:	4606      	mov	r6, r0
	fb.fp.stat = createParameter(0); //output
 8007826:	2000      	movs	r0, #0
 8007828:	f7ff fbb2 	bl	8006f90 <createParameter>
 800782c:	4605      	mov	r5, r0

	fb.fb_index = writeToFBTable(fb_condition, fb.startParamIndex);
 800782e:	4649      	mov	r1, r9
 8007830:	4807      	ldr	r0, [pc, #28]	; (8007850 <create_fb_condition+0x5c>)
 8007832:	f7ff fb9b 	bl	8006f6c <writeToFBTable>

	return fb;
 8007836:	f884 9001 	strb.w	r9, [r4, #1]
 800783a:	7020      	strb	r0, [r4, #0]
}
 800783c:	4620      	mov	r0, r4
	return fb;
 800783e:	f8c4 a004 	str.w	sl, [r4, #4]
 8007842:	e9c4 8702 	strd	r8, r7, [r4, #8]
 8007846:	e9c4 6504 	strd	r6, r5, [r4, #16]
}
 800784a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784e:	bf00      	nop
 8007850:	08007735 	.word	0x08007735

08007854 <fb_condition_parser>:
uint8_t fb_condition_parser(uint8_t* p){
 8007854:	b500      	push	{lr}
 8007856:	4603      	mov	r3, r0
 8007858:	b087      	sub	sp, #28
	create_fb_condition(mode);
 800785a:	7819      	ldrb	r1, [r3, #0]
 800785c:	4668      	mov	r0, sp
 800785e:	f7ff ffc9 	bl	80077f4 <create_fb_condition>
}
 8007862:	2001      	movs	r0, #1
 8007864:	b007      	add	sp, #28
 8007866:	f85d fb04 	ldr.w	pc, [sp], #4
 800786a:	bf00      	nop

0800786c <fb_cycle>:
	uint8_t in = p[10];
	create_fb_cycle(rst,in, don,doff,mode);
	return 1;
}

void fb_cycle(uint8_t p){
 800786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007870:	4604      	mov	r4, r0
	int32_t delta_time = 0;

	s_Param* pAddrTable = get_paramAddrTable();
 8007872:	f7ff fb77 	bl	8006f64 <get_paramAddrTable>
	int32_t* doff = &pAddrTable->value[pAddrTable->addr[p+3]];
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+4]];
	int32_t* out = &pAddrTable->value[pAddrTable->addr[p+5]];
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+7]];
	int32_t* cycle_counter = &pAddrTable->value[pAddrTable->addr[p+8]];
 8007876:	eb00 0384 	add.w	r3, r0, r4, lsl #2

	//get cycle_counter
	if(*cycle_counter == 0xFFFFFFFF) //initial value
 800787a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800787c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8007880:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 8007884:	3201      	adds	r2, #1
 8007886:	d026      	beq.n	80078d6 <fb_cycle+0x6a>
	int32_t* out = &pAddrTable->value[pAddrTable->addr[p+5]];
 8007888:	f8d3 8018 	ldr.w	r8, [r3, #24]
	{
		*cycle_counter = hal_get_tick();
	}

	else {
		delta_time = hal_get_tick() - *cycle_counter;
 800788c:	4605      	mov	r5, r0
	int32_t* doff = &pAddrTable->value[pAddrTable->addr[p+3]];
 800788e:	e9d3 7603 	ldrd	r7, r6, [r3, #12]
		delta_time = hal_get_tick() - *cycle_counter;
 8007892:	f7f8 ff43 	bl	800071c <hal_get_tick>
 8007896:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204

		if(delta_time < 0){
 800789a:	1ac0      	subs	r0, r0, r3
 800789c:	d421      	bmi.n	80078e2 <fb_cycle+0x76>
			delta_time = 0xFFFFFFFF - *cycle_counter + hal_get_tick();
		}

		if(delta_time < *doff){
 800789e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80078a2:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
 80078a6:	4283      	cmp	r3, r0
 80078a8:	dc0d      	bgt.n	80078c6 <fb_cycle+0x5a>
			*out = 0;
		}
		else if(delta_time < *doff + *don){
 80078aa:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80078ae:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80078b2:	4413      	add	r3, r2
 80078b4:	4283      	cmp	r3, r0
 80078b6:	dd0e      	ble.n	80078d6 <fb_cycle+0x6a>
			*out = 1;
 80078b8:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 80078bc:	2301      	movs	r3, #1
 80078be:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
		}
		else{
			*cycle_counter = hal_get_tick(); //resample again
		}
	}
}
 80078c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*out = 0;
 80078c6:	f108 0880 	add.w	r8, r8, #128	; 0x80
 80078ca:	2300      	movs	r3, #0
 80078cc:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 80078d0:	606b      	str	r3, [r5, #4]
}
 80078d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*cycle_counter = hal_get_tick(); //resample again
 80078d6:	f7f8 ff21 	bl	800071c <hal_get_tick>
 80078da:	f8c4 0204 	str.w	r0, [r4, #516]	; 0x204
}
 80078de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			delta_time = 0xFFFFFFFF - *cycle_counter + hal_get_tick();
 80078e2:	f7f8 ff1b 	bl	800071c <hal_get_tick>
 80078e6:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
		if(delta_time < *doff){
 80078ea:	eb05 0686 	add.w	r6, r5, r6, lsl #2
			delta_time = 0xFFFFFFFF - *cycle_counter + hal_get_tick();
 80078ee:	43db      	mvns	r3, r3
 80078f0:	4418      	add	r0, r3
		if(delta_time < *doff){
 80078f2:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
 80078f6:	4283      	cmp	r3, r0
 80078f8:	ddd7      	ble.n	80078aa <fb_cycle+0x3e>
 80078fa:	e7e4      	b.n	80078c6 <fb_cycle+0x5a>

080078fc <create_fb_cycle>:

type_fb_cycle create_fb_cycle(uint8_t rst,
								uint8_t in,
									uint32_t don,
										uint32_t doff,
											uint8_t mode){
 80078fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007900:	b085      	sub	sp, #20
 8007902:	460f      	mov	r7, r1
 8007904:	4604      	mov	r4, r0
 8007906:	4616      	mov	r6, r2
 8007908:	461d      	mov	r5, r3
 800790a:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
	type_fb_cycle fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800790e:	f7ff fb29 	bl	8006f64 <get_paramAddrTable>
 8007912:	4603      	mov	r3, r0

	fb.startParamIndex = pAddrTable->currentIndex;

	//input ports
	fb.fp.rst = createParameter(rst);
 8007914:	4638      	mov	r0, r7
	fb.startParamIndex = pAddrTable->currentIndex;
 8007916:	f893 9000 	ldrb.w	r9, [r3]
	fb.fp.rst = createParameter(rst);
 800791a:	f7ff fb39 	bl	8006f90 <createParameter>
 800791e:	4602      	mov	r2, r0
	fb.fp.in = createParameter(in);
 8007920:	4630      	mov	r0, r6
	fb.fp.rst = createParameter(rst);
 8007922:	9203      	str	r2, [sp, #12]
	fb.fp.in = createParameter(in);
 8007924:	f7ff fb34 	bl	8006f90 <createParameter>
 8007928:	4603      	mov	r3, r0
	fb.fp.don = createParameter(don);
 800792a:	4628      	mov	r0, r5
	fb.fp.in = createParameter(in);
 800792c:	9302      	str	r3, [sp, #8]
	fb.fp.don = createParameter(don);
 800792e:	f7ff fb2f 	bl	8006f90 <createParameter>
 8007932:	4683      	mov	fp, r0
	fb.fp.doff = createParameter(doff);
 8007934:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007936:	f7ff fb2b 	bl	8006f90 <createParameter>
 800793a:	4682      	mov	sl, r0
	fb.fp.mode = createParameter(mode);
 800793c:	4640      	mov	r0, r8
 800793e:	f7ff fb27 	bl	8006f90 <createParameter>
 8007942:	9001      	str	r0, [sp, #4]

	//output ports
	fb.fp.out = createParameter(0);
 8007944:	2000      	movs	r0, #0
 8007946:	f7ff fb23 	bl	8006f90 <createParameter>
 800794a:	4680      	mov	r8, r0
	fb.fp.stat = createParameter(0);
 800794c:	2000      	movs	r0, #0
 800794e:	f7ff fb1f 	bl	8006f90 <createParameter>
 8007952:	4607      	mov	r7, r0
	fb.fp.val = createParameter(0);
 8007954:	2000      	movs	r0, #0
 8007956:	f7ff fb1b 	bl	8006f90 <createParameter>
 800795a:	4606      	mov	r6, r0

	//internal parameters
	fb.fp.cycle_counter = createParameter(0xFFFFFFFF);
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	f7ff fb16 	bl	8006f90 <createParameter>

	fb.fb_index = writeToFBTable(fb_cycle, fb.startParamIndex);
 8007964:	4649      	mov	r1, r9
	fb.fp.cycle_counter = createParameter(0xFFFFFFFF);
 8007966:	4605      	mov	r5, r0
	fb.fb_index = writeToFBTable(fb_cycle, fb.startParamIndex);
 8007968:	480b      	ldr	r0, [pc, #44]	; (8007998 <create_fb_cycle+0x9c>)
 800796a:	f7ff faff 	bl	8006f6c <writeToFBTable>

	return fb;
 800796e:	9b02      	ldr	r3, [sp, #8]
 8007970:	9a03      	ldr	r2, [sp, #12]
 8007972:	7020      	strb	r0, [r4, #0]
}
 8007974:	4620      	mov	r0, r4
	return fb;
 8007976:	f884 9001 	strb.w	r9, [r4, #1]
 800797a:	6062      	str	r2, [r4, #4]
 800797c:	f8c4 a010 	str.w	sl, [r4, #16]
 8007980:	6265      	str	r5, [r4, #36]	; 0x24
 8007982:	e9c4 3b02 	strd	r3, fp, [r4, #8]
 8007986:	9b01      	ldr	r3, [sp, #4]
 8007988:	e9c4 7607 	strd	r7, r6, [r4, #28]
 800798c:	e9c4 3805 	strd	r3, r8, [r4, #20]
}
 8007990:	b005      	add	sp, #20
 8007992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007996:	bf00      	nop
 8007998:	0800786d 	.word	0x0800786d

0800799c <fb_cycle_parser>:
uint8_t fb_cycle_parser(uint8_t* p){
 800799c:	4601      	mov	r1, r0
 800799e:	b510      	push	{r4, lr}
 80079a0:	f8d1 4005 	ldr.w	r4, [r1, #5]
 80079a4:	b08c      	sub	sp, #48	; 0x30
 80079a6:	f8d1 3001 	ldr.w	r3, [r1, #1]
	create_fb_cycle(rst,in, don,doff,mode);
 80079aa:	7a4a      	ldrb	r2, [r1, #9]
 80079ac:	ba24      	rev	r4, r4
 80079ae:	a802      	add	r0, sp, #8
 80079b0:	ba1b      	rev	r3, r3
 80079b2:	9201      	str	r2, [sp, #4]
 80079b4:	7a8a      	ldrb	r2, [r1, #10]
 80079b6:	7809      	ldrb	r1, [r1, #0]
 80079b8:	9400      	str	r4, [sp, #0]
 80079ba:	f7ff ff9f 	bl	80078fc <create_fb_cycle>
}
 80079be:	2001      	movs	r0, #1
 80079c0:	b00c      	add	sp, #48	; 0x30
 80079c2:	bd10      	pop	{r4, pc}

080079c4 <fb_hsc>:
	uint32_t preset = (uint32_t) p[3] << 24 | p[4] << 16 | p[5] <<8 | p[6];
	create_fb_hsc(p[0],p[1], p[2],preset);
	return 1;
}

void fb_hsc(uint8_t p){
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 80079c8:	f7ff facc 	bl	8006f64 <get_paramAddrTable>
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
	int32_t* ch1 = &pAddrTable->value[pAddrTable->addr[p+1]];
	int32_t* ch2 = &pAddrTable->value[pAddrTable->addr[p+2]];
	int32_t* pf = &pAddrTable->value[pAddrTable->addr[p+3]];
	int32_t* preset = &pAddrTable->value[pAddrTable->addr[p+4]];
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+5]];
 80079cc:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	int32_t* out = &pAddrTable->value[pAddrTable->addr[p+6]];
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+7]];
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+8]];

	if(*mode == 0){
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80079d6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80079da:	b102      	cbz	r2, 80079de <fb_hsc+0x1a>
		*val = hal_get_encoder_value();
	}
}
 80079dc:	bd38      	pop	{r3, r4, r5, pc}
 80079de:	4605      	mov	r5, r0
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+7]];
 80079e0:	6a1c      	ldr	r4, [r3, #32]
		*val = hal_get_encoder_value();
 80079e2:	f7f8 ffe3 	bl	80009ac <hal_get_encoder_value>
 80079e6:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80079ea:	f8c5 0204 	str.w	r0, [r5, #516]	; 0x204
}
 80079ee:	bd38      	pop	{r3, r4, r5, pc}

080079f0 <create_fb_hsc>:

type_fb_hsc create_fb_hsc(uint8_t ch1,
								uint8_t ch2,
									uint8_t mode,
											uint32_t preset){
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	b085      	sub	sp, #20
 80079f6:	460f      	mov	r7, r1
 80079f8:	4604      	mov	r4, r0
 80079fa:	4616      	mov	r6, r2
 80079fc:	461d      	mov	r5, r3
	type_fb_hsc fb;

	s_Param* pAddrTable = get_paramAddrTable();
 80079fe:	f7ff fab1 	bl	8006f64 <get_paramAddrTable>

	fb.startParamIndex = pAddrTable->currentIndex;
 8007a02:	f890 8000 	ldrb.w	r8, [r0]

	//input ports
	fb.fp.rst = createParameter(0);
 8007a06:	2000      	movs	r0, #0
 8007a08:	f7ff fac2 	bl	8006f90 <createParameter>
 8007a0c:	4603      	mov	r3, r0
	fb.fp.ch1 = createParameter(ch1);
 8007a0e:	4638      	mov	r0, r7
	fb.fp.rst = createParameter(0);
 8007a10:	9303      	str	r3, [sp, #12]
	fb.fp.ch1 = createParameter(ch1);
 8007a12:	f7ff fabd 	bl	8006f90 <createParameter>
 8007a16:	4602      	mov	r2, r0
	fb.fp.ch2 = createParameter(ch2);
 8007a18:	4630      	mov	r0, r6
	fb.fp.ch1 = createParameter(ch1);
 8007a1a:	9202      	str	r2, [sp, #8]
	fb.fp.ch2 = createParameter(ch2);
 8007a1c:	f7ff fab8 	bl	8006f90 <createParameter>
 8007a20:	4683      	mov	fp, r0
	fb.fp.pf = createParameter(0);
 8007a22:	2000      	movs	r0, #0
 8007a24:	f7ff fab4 	bl	8006f90 <createParameter>
 8007a28:	4682      	mov	sl, r0
	fb.fp.preset = createParameter(preset);
 8007a2a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007a2c:	f7ff fab0 	bl	8006f90 <createParameter>
 8007a30:	4681      	mov	r9, r0
	fb.fp.mode = createParameter(mode);
 8007a32:	4628      	mov	r0, r5
 8007a34:	f7ff faac 	bl	8006f90 <createParameter>
 8007a38:	9001      	str	r0, [sp, #4]

	//output ports
	fb.fp.out = createParameter(0);
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	f7ff faa8 	bl	8006f90 <createParameter>
 8007a40:	4607      	mov	r7, r0
	fb.fp.val = createParameter(0);
 8007a42:	2000      	movs	r0, #0
 8007a44:	f7ff faa4 	bl	8006f90 <createParameter>
 8007a48:	4606      	mov	r6, r0
	fb.fp.stat = createParameter(0);
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	f7ff faa0 	bl	8006f90 <createParameter>

	//internal parameters

	fb.fb_index = writeToFBTable(fb_hsc, fb.startParamIndex);
 8007a50:	4641      	mov	r1, r8
	fb.fp.stat = createParameter(0);
 8007a52:	4605      	mov	r5, r0
	fb.fb_index = writeToFBTable(fb_hsc, fb.startParamIndex);
 8007a54:	480a      	ldr	r0, [pc, #40]	; (8007a80 <create_fb_hsc+0x90>)
 8007a56:	f7ff fa89 	bl	8006f6c <writeToFBTable>

	return fb;
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	9a02      	ldr	r2, [sp, #8]
 8007a5e:	6063      	str	r3, [r4, #4]
 8007a60:	7020      	strb	r0, [r4, #0]
}
 8007a62:	4620      	mov	r0, r4
	return fb;
 8007a64:	9b01      	ldr	r3, [sp, #4]
 8007a66:	f884 8001 	strb.w	r8, [r4, #1]
 8007a6a:	e9c4 2b02 	strd	r2, fp, [r4, #8]
 8007a6e:	e9c4 a904 	strd	sl, r9, [r4, #16]
 8007a72:	e9c4 3706 	strd	r3, r7, [r4, #24]
 8007a76:	e9c4 6508 	strd	r6, r5, [r4, #32]
}
 8007a7a:	b005      	add	sp, #20
 8007a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a80:	080079c5 	.word	0x080079c5

08007a84 <fb_hsc_parser>:
uint8_t fb_hsc_parser(uint8_t* p){
 8007a84:	4601      	mov	r1, r0
 8007a86:	b510      	push	{r4, lr}
 8007a88:	f8d1 4003 	ldr.w	r4, [r1, #3]
 8007a8c:	b08c      	sub	sp, #48	; 0x30
	create_fb_hsc(p[0],p[1], p[2],preset);
 8007a8e:	788b      	ldrb	r3, [r1, #2]
 8007a90:	ba24      	rev	r4, r4
 8007a92:	784a      	ldrb	r2, [r1, #1]
 8007a94:	a802      	add	r0, sp, #8
 8007a96:	7809      	ldrb	r1, [r1, #0]
 8007a98:	9400      	str	r4, [sp, #0]
 8007a9a:	f7ff ffa9 	bl	80079f0 <create_fb_hsc>
}
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	b00c      	add	sp, #48	; 0x30
 8007aa2:	bd10      	pop	{r4, pc}

08007aa4 <fb_inputpin>:
	uint8_t mode = p[1];
	create_fb_inputpin(ch, mode);
	return 1;
}

void fb_inputpin(uint8_t p){
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	4605      	mov	r5, r0

	s_Param* pAddrTable = get_paramAddrTable();
 8007aa8:	f7ff fa5c 	bl	8006f64 <get_paramAddrTable>
 8007aac:	4604      	mov	r4, r0
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p]];
 8007aae:	eb00 0085 	add.w	r0, r0, r5, lsl #2
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+1]];
	int32_t* q = &pAddrTable->value[pAddrTable->addr[p+2]];
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];

	*q =  hal_gpio_read_pin((uint32_t)*ch);
 8007ab2:	6843      	ldr	r3, [r0, #4]
	int32_t* q = &pAddrTable->value[pAddrTable->addr[p+2]];
 8007ab4:	68c5      	ldr	r5, [r0, #12]
	*q =  hal_gpio_read_pin((uint32_t)*ch);
 8007ab6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007aba:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8007abe:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8007ac2:	f7f8 fdaf 	bl	8000624 <hal_gpio_read_pin>
 8007ac6:	f8c4 0204 	str.w	r0, [r4, #516]	; 0x204
}
 8007aca:	bd38      	pop	{r3, r4, r5, pc}

08007acc <create_fb_inputpin>:


type_fb_inputpin create_fb_inputpin(uint8_t ch, uint8_t mode){
 8007acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad0:	460e      	mov	r6, r1
 8007ad2:	4615      	mov	r5, r2
 8007ad4:	4604      	mov	r4, r0
	type_fb_inputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 8007ad6:	f7ff fa45 	bl	8006f64 <get_paramAddrTable>
 8007ada:	4603      	mov	r3, r0

	fb.startParamIndex = pAddrTable->currentIndex;

	fb.fp.ch = createParameter(ch); //input
 8007adc:	4630      	mov	r0, r6
	fb.startParamIndex = pAddrTable->currentIndex;
 8007ade:	f893 9000 	ldrb.w	r9, [r3]
	fb.fp.ch = createParameter(ch); //input
 8007ae2:	f7ff fa55 	bl	8006f90 <createParameter>
 8007ae6:	4680      	mov	r8, r0
	fb.fp.mode = createParameter(mode); //pin
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f7ff fa51 	bl	8006f90 <createParameter>
 8007aee:	4607      	mov	r7, r0
	fb.fp.q = createParameter(0);
 8007af0:	2000      	movs	r0, #0
 8007af2:	f7ff fa4d 	bl	8006f90 <createParameter>
 8007af6:	4606      	mov	r6, r0
	fb.fp.stat = createParameter(0);
 8007af8:	2000      	movs	r0, #0
 8007afa:	f7ff fa49 	bl	8006f90 <createParameter>
 8007afe:	4605      	mov	r5, r0

	fb.fb_index = writeToFBTable(fb_inputpin, fb.startParamIndex);
 8007b00:	4649      	mov	r1, r9
 8007b02:	4807      	ldr	r0, [pc, #28]	; (8007b20 <create_fb_inputpin+0x54>)
 8007b04:	f7ff fa32 	bl	8006f6c <writeToFBTable>

	return fb;
 8007b08:	f884 9001 	strb.w	r9, [r4, #1]
 8007b0c:	7020      	strb	r0, [r4, #0]
}
 8007b0e:	4620      	mov	r0, r4
	return fb;
 8007b10:	f8c4 8004 	str.w	r8, [r4, #4]
 8007b14:	6125      	str	r5, [r4, #16]
 8007b16:	e9c4 7602 	strd	r7, r6, [r4, #8]
}
 8007b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b1e:	bf00      	nop
 8007b20:	08007aa5 	.word	0x08007aa5

08007b24 <fb_inputpin_parser>:
uint8_t fb_inputpin_parser(uint8_t* p){
 8007b24:	b500      	push	{lr}
 8007b26:	4603      	mov	r3, r0
 8007b28:	b087      	sub	sp, #28
	create_fb_inputpin(ch, mode);
 8007b2a:	785a      	ldrb	r2, [r3, #1]
 8007b2c:	4668      	mov	r0, sp
 8007b2e:	7819      	ldrb	r1, [r3, #0]
 8007b30:	f7ff ffcc 	bl	8007acc <create_fb_inputpin>
}
 8007b34:	2001      	movs	r0, #1
 8007b36:	b007      	add	sp, #28
 8007b38:	f85d fb04 	ldr.w	pc, [sp], #4

08007b3c <fb_jy>:
uint8_t fb_jy_parser(uint8_t* p){
	create_fb_jy(p[0],p[1], p[2],p[3]);
	return 1;
}

void fb_jy(uint8_t p){
 8007b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b40:	4605      	mov	r5, r0
	s_Param* pAddrTable = get_paramAddrTable();
 8007b42:	f7ff fa0f 	bl	8006f64 <get_paramAddrTable>
 8007b46:	4604      	mov	r4, r0
	int32_t* ch_x = &pAddrTable->value[pAddrTable->addr[p]];
 8007b48:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	int32_t* x = &pAddrTable->value[pAddrTable->addr[p+4]];
	int32_t* y = &pAddrTable->value[pAddrTable->addr[p+5]];
	int32_t* btn = &pAddrTable->value[pAddrTable->addr[p+6]];
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+7]];

	*x = hal_read_analog_ch(*ch_x);
 8007b4c:	685a      	ldr	r2, [r3, #4]
	int32_t* x = &pAddrTable->value[pAddrTable->addr[p+4]];
 8007b4e:	f8d3 8014 	ldr.w	r8, [r3, #20]
	int32_t* ch_y = &pAddrTable->value[pAddrTable->addr[p+1]];
 8007b52:	689f      	ldr	r7, [r3, #8]
	*x = hal_read_analog_ch(*ch_x);
 8007b54:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	int32_t* ch_btn = &pAddrTable->value[pAddrTable->addr[p+2]];
 8007b58:	68dd      	ldr	r5, [r3, #12]
	*x = hal_read_analog_ch(*ch_x);
 8007b5a:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8007b5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
	*y = hal_read_analog_ch(*ch_y);
 8007b62:	eb04 0787 	add.w	r7, r4, r7, lsl #2
	*btn = hal_gpio_read_pin(*ch_btn);
 8007b66:	eb04 0585 	add.w	r5, r4, r5, lsl #2
	int32_t* btn = &pAddrTable->value[pAddrTable->addr[p+6]];
 8007b6a:	e9d3 6906 	ldrd	r6, r9, [r3, #24]
	*x = hal_read_analog_ch(*ch_x);
 8007b6e:	f7f8 fd73 	bl	8000658 <hal_read_analog_ch>
 8007b72:	f8c8 0204 	str.w	r0, [r8, #516]	; 0x204
	*y = hal_read_analog_ch(*ch_y);
 8007b76:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007b7a:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
	*btn = hal_gpio_read_pin(*ch_btn);
 8007b7e:	eb04 0489 	add.w	r4, r4, r9, lsl #2
	*y = hal_read_analog_ch(*ch_y);
 8007b82:	f7f8 fd69 	bl	8000658 <hal_read_analog_ch>
 8007b86:	f8c6 0204 	str.w	r0, [r6, #516]	; 0x204
	*btn = hal_gpio_read_pin(*ch_btn);
 8007b8a:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8007b8e:	f7f8 fd49 	bl	8000624 <hal_gpio_read_pin>
 8007b92:	f8c4 0204 	str.w	r0, [r4, #516]	; 0x204
}
 8007b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b9a:	bf00      	nop

08007b9c <create_fb_jy>:

type_fb_jy create_fb_jy(uint8_t ch_x,
								uint8_t ch_y,
									uint8_t ch_btn,
											uint8_t mode){
 8007b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	460f      	mov	r7, r1
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	4616      	mov	r6, r2
 8007ba8:	461d      	mov	r5, r3
 8007baa:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
	type_fb_jy fb;

	s_Param* pAddrTable = get_paramAddrTable();
 8007bae:	f7ff f9d9 	bl	8006f64 <get_paramAddrTable>
 8007bb2:	4603      	mov	r3, r0

	fb.startParamIndex = pAddrTable->currentIndex;

	//input ports
	fb.fp.ch_x = createParameter(ch_x);
 8007bb4:	4638      	mov	r0, r7
	fb.startParamIndex = pAddrTable->currentIndex;
 8007bb6:	f893 9000 	ldrb.w	r9, [r3]
	fb.fp.ch_x = createParameter(ch_x);
 8007bba:	f7ff f9e9 	bl	8006f90 <createParameter>
 8007bbe:	4602      	mov	r2, r0
	fb.fp.ch_y = createParameter(ch_y);
 8007bc0:	4630      	mov	r0, r6
	fb.fp.ch_x = createParameter(ch_x);
 8007bc2:	9201      	str	r2, [sp, #4]
	fb.fp.ch_y = createParameter(ch_y);
 8007bc4:	f7ff f9e4 	bl	8006f90 <createParameter>
 8007bc8:	4683      	mov	fp, r0
	fb.fp.ch_btn = createParameter(ch_btn);
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f7ff f9e0 	bl	8006f90 <createParameter>
 8007bd0:	4682      	mov	sl, r0
	fb.fp.mode = createParameter(mode);
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	f7ff f9dc 	bl	8006f90 <createParameter>
 8007bd8:	9000      	str	r0, [sp, #0]

	//output ports
	fb.fp.x = createParameter(0);
 8007bda:	2000      	movs	r0, #0
 8007bdc:	f7ff f9d8 	bl	8006f90 <createParameter>
 8007be0:	4680      	mov	r8, r0
	fb.fp.y = createParameter(0);
 8007be2:	2000      	movs	r0, #0
 8007be4:	f7ff f9d4 	bl	8006f90 <createParameter>
 8007be8:	4607      	mov	r7, r0
	fb.fp.btn = createParameter(0);
 8007bea:	2000      	movs	r0, #0
 8007bec:	f7ff f9d0 	bl	8006f90 <createParameter>
 8007bf0:	4606      	mov	r6, r0
	fb.fp.stat = createParameter(0);
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	f7ff f9cc 	bl	8006f90 <createParameter>

	//internal parameters

	fb.fb_index = writeToFBTable(fb_jy, fb.startParamIndex);
 8007bf8:	4649      	mov	r1, r9
	fb.fp.stat = createParameter(0);
 8007bfa:	4605      	mov	r5, r0
	fb.fb_index = writeToFBTable(fb_jy, fb.startParamIndex);
 8007bfc:	4809      	ldr	r0, [pc, #36]	; (8007c24 <create_fb_jy+0x88>)
 8007bfe:	f7ff f9b5 	bl	8006f6c <writeToFBTable>

	return fb;
 8007c02:	9a01      	ldr	r2, [sp, #4]
 8007c04:	9b00      	ldr	r3, [sp, #0]
 8007c06:	7020      	strb	r0, [r4, #0]
}
 8007c08:	4620      	mov	r0, r4
	return fb;
 8007c0a:	f884 9001 	strb.w	r9, [r4, #1]
 8007c0e:	6062      	str	r2, [r4, #4]
 8007c10:	6225      	str	r5, [r4, #32]
 8007c12:	e9c4 ba02 	strd	fp, sl, [r4, #8]
 8007c16:	e9c4 3804 	strd	r3, r8, [r4, #16]
 8007c1a:	e9c4 7606 	strd	r7, r6, [r4, #24]
}
 8007c1e:	b003      	add	sp, #12
 8007c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c24:	08007b3d 	.word	0x08007b3d

08007c28 <fb_jy_parser>:
uint8_t fb_jy_parser(uint8_t* p){
 8007c28:	4601      	mov	r1, r0
 8007c2a:	b510      	push	{r4, lr}
 8007c2c:	b08c      	sub	sp, #48	; 0x30
	create_fb_jy(p[0],p[1], p[2],p[3]);
 8007c2e:	78cc      	ldrb	r4, [r1, #3]
 8007c30:	788b      	ldrb	r3, [r1, #2]
 8007c32:	784a      	ldrb	r2, [r1, #1]
 8007c34:	a802      	add	r0, sp, #8
 8007c36:	7809      	ldrb	r1, [r1, #0]
 8007c38:	9400      	str	r4, [sp, #0]
 8007c3a:	f7ff ffaf 	bl	8007b9c <create_fb_jy>
}
 8007c3e:	2001      	movs	r0, #1
 8007c40:	b00c      	add	sp, #48	; 0x30
 8007c42:	bd10      	pop	{r4, pc}

08007c44 <fb_number>:
	create_fb_number(value);
	return 1;
}

void fb_number(uint8_t p){
}
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop

08007c48 <fb_number_parser>:
uint8_t fb_number_parser(uint8_t* p){
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	8804      	ldrh	r4, [r0, #0]
 8007c4c:	b082      	sub	sp, #8

type_fb_number create_fb_number(uint16_t value){
	type_fb_number fb;
	s_Param* pAddrTable = get_paramAddrTable();
 8007c4e:	f7ff f989 	bl	8006f64 <get_paramAddrTable>
 8007c52:	4603      	mov	r3, r0
 8007c54:	ba64      	rev16	r4, r4

	fb.startParamIndex = pAddrTable->currentIndex;
 8007c56:	7819      	ldrb	r1, [r3, #0]
 8007c58:	b2a4      	uxth	r4, r4
 8007c5a:	9101      	str	r1, [sp, #4]

	fb.value = createParameter(value);
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f7ff f997 	bl	8006f90 <createParameter>

	fb.fb_index = writeToFBTable(fb_number, fb.startParamIndex);
 8007c62:	9901      	ldr	r1, [sp, #4]
 8007c64:	4802      	ldr	r0, [pc, #8]	; (8007c70 <fb_number_parser+0x28>)
 8007c66:	f7ff f981 	bl	8006f6c <writeToFBTable>
}
 8007c6a:	2001      	movs	r0, #1
 8007c6c:	b002      	add	sp, #8
 8007c6e:	bd10      	pop	{r4, pc}
 8007c70:	08007c45 	.word	0x08007c45

08007c74 <fb_outputpin>:
	uint8_t mode = p[2];
	create_fb_outputpin(ch, val, mode);
	return 1;
}

void fb_outputpin(uint8_t p){
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 8007c78:	f7ff f974 	bl	8006f64 <get_paramAddrTable>
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p]];
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+1]];
 8007c7c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
	int32_t* last_val = &pAddrTable->value[pAddrTable->addr[p+4]];

	if ( *val != *last_val){
 8007c80:	689c      	ldr	r4, [r3, #8]
 8007c82:	695a      	ldr	r2, [r3, #20]
 8007c84:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8007c88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007c8c:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
 8007c90:	f8d2 5204 	ldr.w	r5, [r2, #516]	; 0x204
 8007c94:	42a9      	cmp	r1, r5
 8007c96:	d01a      	beq.n	8007cce <fb_outputpin+0x5a>
		*last_val = *val;
		if(*val >1) *val = 1;
 8007c98:	2901      	cmp	r1, #1
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p]];
 8007c9a:	685b      	ldr	r3, [r3, #4]
		*last_val = *val;
 8007c9c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		if(*val >1) *val = 1;
 8007ca0:	dd0b      	ble.n	8007cba <fb_outputpin+0x46>
 8007ca2:	2201      	movs	r2, #1

		hal_gpio_write_pin((uint16_t)*ch, (uint8_t)*val);
 8007ca4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		if(*val >1) *val = 1;
 8007ca8:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
 8007cac:	4611      	mov	r1, r2
		hal_gpio_write_pin((uint16_t)*ch, (uint8_t)*val);
 8007cae:	f8b0 0204 	ldrh.w	r0, [r0, #516]	; 0x204
	}
}
 8007cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		hal_gpio_write_pin((uint16_t)*ch, (uint8_t)*val);
 8007cb6:	f7f8 bc97 	b.w	80005e8 <hal_gpio_write_pin>
 8007cba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007cbe:	f894 1204 	ldrb.w	r1, [r4, #516]	; 0x204
 8007cc2:	f8b0 0204 	ldrh.w	r0, [r0, #516]	; 0x204
}
 8007cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		hal_gpio_write_pin((uint16_t)*ch, (uint8_t)*val);
 8007cca:	f7f8 bc8d 	b.w	80005e8 <hal_gpio_write_pin>
}
 8007cce:	bd38      	pop	{r3, r4, r5, pc}

08007cd0 <create_fb_outputpin>:

type_fb_outputpin create_fb_outputpin(uint8_t ch, uint8_t val, uint8_t mode){
 8007cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	460f      	mov	r7, r1
 8007cd6:	4616      	mov	r6, r2
 8007cd8:	4604      	mov	r4, r0
 8007cda:	461d      	mov	r5, r3
	type_fb_outputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 8007cdc:	f7ff f942 	bl	8006f64 <get_paramAddrTable>
 8007ce0:	4603      	mov	r3, r0

	fb.startParamIndex = pAddrTable->currentIndex;

	//input ports
	fb.fp.ch = createParameter(ch); //output
 8007ce2:	4638      	mov	r0, r7
	fb.startParamIndex = pAddrTable->currentIndex;
 8007ce4:	f893 9000 	ldrb.w	r9, [r3]
	fb.fp.ch = createParameter(ch); //output
 8007ce8:	f7ff f952 	bl	8006f90 <createParameter>
 8007cec:	4682      	mov	sl, r0
	fb.fp.val = createParameter(val); //pin
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f7ff f94e 	bl	8006f90 <createParameter>
 8007cf4:	4680      	mov	r8, r0
	fb.fp.mode = createParameter(mode); //pin
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f7ff f94a 	bl	8006f90 <createParameter>
 8007cfc:	4607      	mov	r7, r0

	//output ports
	fb.fp.stat = createParameter(0);
 8007cfe:	2000      	movs	r0, #0
 8007d00:	f7ff f946 	bl	8006f90 <createParameter>
 8007d04:	4606      	mov	r6, r0

	//internal values
	fb.fp.last_val = createParameter(-1);
 8007d06:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0a:	f7ff f941 	bl	8006f90 <createParameter>
 8007d0e:	4605      	mov	r5, r0



	fb.fb_index = writeToFBTable(fb_outputpin, fb.startParamIndex);
 8007d10:	4649      	mov	r1, r9
 8007d12:	4807      	ldr	r0, [pc, #28]	; (8007d30 <create_fb_outputpin+0x60>)
 8007d14:	f7ff f92a 	bl	8006f6c <writeToFBTable>
	return fb;
 8007d18:	f884 9001 	strb.w	r9, [r4, #1]
 8007d1c:	7020      	strb	r0, [r4, #0]
}
 8007d1e:	4620      	mov	r0, r4
	return fb;
 8007d20:	f8c4 a004 	str.w	sl, [r4, #4]
 8007d24:	e9c4 8702 	strd	r8, r7, [r4, #8]
 8007d28:	e9c4 6504 	strd	r6, r5, [r4, #16]
}
 8007d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d30:	08007c75 	.word	0x08007c75

08007d34 <fb_output_pin_parser>:
uint8_t fb_output_pin_parser(uint8_t* p){
 8007d34:	b500      	push	{lr}
 8007d36:	4601      	mov	r1, r0
 8007d38:	b087      	sub	sp, #28
	create_fb_outputpin(ch, val, mode);
 8007d3a:	788b      	ldrb	r3, [r1, #2]
 8007d3c:	4668      	mov	r0, sp
 8007d3e:	784a      	ldrb	r2, [r1, #1]
 8007d40:	7809      	ldrb	r1, [r1, #0]
 8007d42:	f7ff ffc5 	bl	8007cd0 <create_fb_outputpin>
}
 8007d46:	2001      	movs	r0, #1
 8007d48:	b007      	add	sp, #28
 8007d4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d4e:	bf00      	nop

08007d50 <fb_rmhr>:
	uint8_t mode = p[1];
	create_fb_rmhr(reg, mode);
	return 1;
}

void fb_rmhr(uint8_t p){
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 8007d54:	f7ff f906 	bl	8006f64 <get_paramAddrTable>
 8007d58:	4605      	mov	r5, r0
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 8007d5a:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8007d5e:	685e      	ldr	r6, [r3, #4]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+1]];
	uint32_t* dout = &pAddrTable->value[pAddrTable->addr[p+2]];
 8007d60:	68dc      	ldr	r4, [r3, #12]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];

	uint16_t* modbus_holding_reg = get_Modbus_Buf_Holding_Registers_40001();
 8007d62:	f000 f9ef 	bl	8008144 <get_Modbus_Buf_Holding_Registers_40001>
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 8007d66:	3681      	adds	r6, #129	; 0x81
	uint32_t* dout = &pAddrTable->value[pAddrTable->addr[p+2]];
 8007d68:	3481      	adds	r4, #129	; 0x81

	*dout = modbus_holding_reg[*reg];
 8007d6a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8007d6e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007d72:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
 8007d76:	bd70      	pop	{r4, r5, r6, pc}

08007d78 <create_fb_rmhr>:

type_fb_rmhr create_fb_rmhr(uint8_t reg, uint8_t mode){
 8007d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d7c:	460e      	mov	r6, r1
 8007d7e:	4615      	mov	r5, r2
 8007d80:	4604      	mov	r4, r0
	type_fb_rmhr fb;

	s_Param* pAddrTable = get_paramAddrTable();
 8007d82:	f7ff f8ef 	bl	8006f64 <get_paramAddrTable>
 8007d86:	4603      	mov	r3, r0
	//uint8_t* p_modbus_slave_addr = get_MODBUS_SLAVE_ADDR();
	//if(addr > 1) *p_modbus_slave_addr = addr; //addr is set to 1 default, if something comes greater than 1, than new addr set to this new value

	fb.startParamIndex = pAddrTable->currentIndex;

	fb.fp.reg = createParameter(reg);
 8007d88:	4630      	mov	r0, r6
	fb.startParamIndex = pAddrTable->currentIndex;
 8007d8a:	f893 9000 	ldrb.w	r9, [r3]
	fb.fp.reg = createParameter(reg);
 8007d8e:	f7ff f8ff 	bl	8006f90 <createParameter>
 8007d92:	4680      	mov	r8, r0
	fb.fp.mode = createParameter(mode);
 8007d94:	4628      	mov	r0, r5
 8007d96:	f7ff f8fb 	bl	8006f90 <createParameter>
 8007d9a:	4607      	mov	r7, r0
	fb.fp.dout = createParameter(0);
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	f7ff f8f7 	bl	8006f90 <createParameter>
 8007da2:	4606      	mov	r6, r0
	fb.fp.stat = createParameter(0);
 8007da4:	2000      	movs	r0, #0
 8007da6:	f7ff f8f3 	bl	8006f90 <createParameter>
 8007daa:	4605      	mov	r5, r0

	fb.fb_index = writeToFBTable(fb_rmhr, fb.startParamIndex);
 8007dac:	4649      	mov	r1, r9
 8007dae:	4807      	ldr	r0, [pc, #28]	; (8007dcc <create_fb_rmhr+0x54>)
 8007db0:	f7ff f8dc 	bl	8006f6c <writeToFBTable>

	return fb;
 8007db4:	f884 9001 	strb.w	r9, [r4, #1]
 8007db8:	7020      	strb	r0, [r4, #0]
}
 8007dba:	4620      	mov	r0, r4
	return fb;
 8007dbc:	f8c4 8004 	str.w	r8, [r4, #4]
 8007dc0:	6125      	str	r5, [r4, #16]
 8007dc2:	e9c4 7602 	strd	r7, r6, [r4, #8]
}
 8007dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dca:	bf00      	nop
 8007dcc:	08007d51 	.word	0x08007d51

08007dd0 <fb_rmhr_parser>:
uint8_t fb_rmhr_parser(uint8_t* p){
 8007dd0:	b500      	push	{lr}
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	b087      	sub	sp, #28
	create_fb_rmhr(reg, mode);
 8007dd6:	785a      	ldrb	r2, [r3, #1]
 8007dd8:	4668      	mov	r0, sp
 8007dda:	7819      	ldrb	r1, [r3, #0]
 8007ddc:	f7ff ffcc 	bl	8007d78 <create_fb_rmhr>
}
 8007de0:	2001      	movs	r0, #1
 8007de2:	b007      	add	sp, #28
 8007de4:	f85d fb04 	ldr.w	pc, [sp], #4

08007de8 <fb_step>:
uint8_t fb_step_parser(uint8_t* p){
	create_fb_step(p[0], p[1]);
	return 1;
}

void fb_step(uint8_t p){
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 8007dec:	f7ff f8ba 	bl	8006f64 <get_paramAddrTable>
	uint32_t* tk_in1 = &pAddrTable->value[pAddrTable->addr[p]];
	uint32_t* tk_in2 = &pAddrTable->value[pAddrTable->addr[p+1]];
	uint32_t* tr_in = &pAddrTable->value[pAddrTable->addr[p+2]];
	uint32_t* param = &pAddrTable->value[pAddrTable->addr[p+3]];
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+4]];
	uint32_t* tk_out = &pAddrTable->value[pAddrTable->addr[p+5]];
 8007df0:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	uint32_t* obv_out = &pAddrTable->value[pAddrTable->addr[p+6]];
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+7]];
 8007df4:	6a19      	ldr	r1, [r3, #32]
	uint32_t* obv_out = &pAddrTable->value[pAddrTable->addr[p+6]];
 8007df6:	e9d3 4206 	ldrd	r4, r2, [r3, #24]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+7]];
 8007dfa:	3181      	adds	r1, #129	; 0x81
	uint32_t* tk_out = &pAddrTable->value[pAddrTable->addr[p+5]];
 8007dfc:	f104 0c81 	add.w	ip, r4, #129	; 0x81
	uint32_t* obv_out = &pAddrTable->value[pAddrTable->addr[p+6]];
 8007e00:	f102 0481 	add.w	r4, r2, #129	; 0x81

	//function block algorithm
	//function block algorithm
	switch(*state){
 8007e04:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8007e08:	2a01      	cmp	r2, #1
 8007e0a:	d025      	beq.n	8007e58 <fb_step+0x70>
 8007e0c:	2a02      	cmp	r2, #2
 8007e0e:	d016      	beq.n	8007e3e <fb_step+0x56>
 8007e10:	b102      	cbz	r2, 8007e14 <fb_step+0x2c>
			* state = FB_STEP_ST_WAIT; //switch to active state
		}
		break;

	}
}
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t* tk_in2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 8007e14:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
		* tk_out = 0;
 8007e18:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
	uint32_t* tk_in2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 8007e1c:	3381      	adds	r3, #129	; 0x81
		* obv_out = 0;
 8007e1e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
	uint32_t* tk_in1 = &pAddrTable->value[pAddrTable->addr[p]];
 8007e22:	f105 0281 	add.w	r2, r5, #129	; 0x81
		if(* tk_in1 > 0 | * tk_in2 > 0){
 8007e26:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e2a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	d0ef      	beq.n	8007e12 <fb_step+0x2a>
			* obv_out = 1;
 8007e32:	2301      	movs	r3, #1
 8007e34:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
			* state = FB_STEP_ST_ACTIVE; //switch to active state
 8007e38:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 8007e3c:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t* tr_in = &pAddrTable->value[pAddrTable->addr[p+2]];
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	3381      	adds	r3, #129	; 0x81
		if(* tr_in > 0){
 8007e42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0e3      	beq.n	8007e12 <fb_step+0x2a>
			* tk_out = 1;
 8007e4a:	2201      	movs	r2, #1
			* state = FB_STEP_ST_WAIT; //switch to active state
 8007e4c:	2300      	movs	r3, #0
			* tk_out = 1;
 8007e4e:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
			* state = FB_STEP_ST_WAIT; //switch to active state
 8007e52:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 8007e56:	bd38      	pop	{r3, r4, r5, pc}
		* state = FB_STEP_ST_CHECK; //switch to active state
 8007e58:	2302      	movs	r3, #2
		* obv_out = 1;
 8007e5a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
		* state = FB_STEP_ST_CHECK; //switch to active state
 8007e5e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 8007e62:	bd38      	pop	{r3, r4, r5, pc}

08007e64 <create_fb_step>:

type_fb_step create_fb_step(uint8_t param, uint8_t mode){
 8007e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	460d      	mov	r5, r1
 8007e6c:	4616      	mov	r6, r2
 8007e6e:	4604      	mov	r4, r0
	type_fb_step fb;

	s_Param* pAddrTable = get_paramAddrTable();
 8007e70:	f7ff f878 	bl	8006f64 <get_paramAddrTable>
 8007e74:	4603      	mov	r3, r0

	fb.startParamIndex = pAddrTable->currentIndex;

	fb.fp.tk_in1 = createParameter(0);
 8007e76:	2000      	movs	r0, #0
	fb.startParamIndex = pAddrTable->currentIndex;
 8007e78:	f893 b000 	ldrb.w	fp, [r3]
	fb.fp.tk_in1 = createParameter(0);
 8007e7c:	f7ff f888 	bl	8006f90 <createParameter>
 8007e80:	9001      	str	r0, [sp, #4]
	fb.fp.tk_in2 = createParameter(0);
 8007e82:	2000      	movs	r0, #0
 8007e84:	f7ff f884 	bl	8006f90 <createParameter>
 8007e88:	4682      	mov	sl, r0
	fb.fp.tr_in = createParameter(0);
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	f7ff f880 	bl	8006f90 <createParameter>
 8007e90:	4681      	mov	r9, r0
	fb.fp.param = createParameter(param);
 8007e92:	4628      	mov	r0, r5
 8007e94:	f7ff f87c 	bl	8006f90 <createParameter>
 8007e98:	4680      	mov	r8, r0
	fb.fp.mode = createParameter(mode);
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7ff f878 	bl	8006f90 <createParameter>
 8007ea0:	4607      	mov	r7, r0
	fb.fp.tk_out = createParameter(0);
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	f7ff f874 	bl	8006f90 <createParameter>
 8007ea8:	4606      	mov	r6, r0
	fb.fp.obv_out = createParameter(0);
 8007eaa:	2000      	movs	r0, #0
 8007eac:	f7ff f870 	bl	8006f90 <createParameter>
 8007eb0:	4602      	mov	r2, r0
	fb.fp.state = createParameter(param); //first state will have token initially
 8007eb2:	4628      	mov	r0, r5
	fb.fp.obv_out = createParameter(0);
 8007eb4:	9200      	str	r2, [sp, #0]
	fb.fp.state = createParameter(param); //first state will have token initially
 8007eb6:	f7ff f86b 	bl	8006f90 <createParameter>

	fb.fb_index = writeToFBTable(fb_step, fb.startParamIndex);
 8007eba:	4659      	mov	r1, fp
	fb.fp.state = createParameter(param); //first state will have token initially
 8007ebc:	4605      	mov	r5, r0
	fb.fb_index = writeToFBTable(fb_step, fb.startParamIndex);
 8007ebe:	480a      	ldr	r0, [pc, #40]	; (8007ee8 <create_fb_step+0x84>)
 8007ec0:	f7ff f854 	bl	8006f6c <writeToFBTable>

	return fb;
 8007ec4:	9b01      	ldr	r3, [sp, #4]
 8007ec6:	9a00      	ldr	r2, [sp, #0]
 8007ec8:	7020      	strb	r0, [r4, #0]
}
 8007eca:	4620      	mov	r0, r4
	return fb;
 8007ecc:	f884 b001 	strb.w	fp, [r4, #1]
 8007ed0:	6063      	str	r3, [r4, #4]
 8007ed2:	61a6      	str	r6, [r4, #24]
 8007ed4:	e9c4 a902 	strd	sl, r9, [r4, #8]
 8007ed8:	e9c4 8704 	strd	r8, r7, [r4, #16]
 8007edc:	e9c4 2507 	strd	r2, r5, [r4, #28]
}
 8007ee0:	b003      	add	sp, #12
 8007ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee6:	bf00      	nop
 8007ee8:	08007de9 	.word	0x08007de9

08007eec <fb_step_parser>:
uint8_t fb_step_parser(uint8_t* p){
 8007eec:	b500      	push	{lr}
 8007eee:	4603      	mov	r3, r0
 8007ef0:	b08b      	sub	sp, #44	; 0x2c
	create_fb_step(p[0], p[1]);
 8007ef2:	785a      	ldrb	r2, [r3, #1]
 8007ef4:	4668      	mov	r0, sp
 8007ef6:	7819      	ldrb	r1, [r3, #0]
 8007ef8:	f7ff ffb4 	bl	8007e64 <create_fb_step>
}
 8007efc:	2001      	movs	r0, #1
 8007efe:	b00b      	add	sp, #44	; 0x2c
 8007f00:	f85d fb04 	ldr.w	pc, [sp], #4

08007f04 <fb_timer_tp>:
	uint32_t period = (uint32_t) p[0] << 24 | p[1] << 16 | p[2] <<8 | p[3];
	create_fb_timer_tp(period);
	return 1;
}

void fb_timer_tp(uint8_t p){
 8007f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f08:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 8007f0a:	f7ff f82b 	bl	8006f64 <get_paramAddrTable>
 8007f0e:	4605      	mov	r5, r0
	uint32_t delta = 0, tick = 0;

	uint32_t* et = &pAddrTable->value[pAddrTable->addr[p]];
 8007f10:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	uint32_t* in = &pAddrTable->value[pAddrTable->addr[p+1]];
	uint32_t* pt = &pAddrTable->value[pAddrTable->addr[p+2]];
	uint32_t* q = &pAddrTable->value[pAddrTable->addr[p+3]];
	uint32_t* inold = &pAddrTable->value[pAddrTable->addr[p+4]];
	uint32_t* counter = &pAddrTable->value[pAddrTable->addr[p+5]];
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+6]];
 8007f14:	69dc      	ldr	r4, [r3, #28]
	uint32_t* counter = &pAddrTable->value[pAddrTable->addr[p+5]];
 8007f16:	699f      	ldr	r7, [r3, #24]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+6]];
 8007f18:	3481      	adds	r4, #129	; 0x81
	uint32_t* pt = &pAddrTable->value[pAddrTable->addr[p+2]];
 8007f1a:	f8d3 900c 	ldr.w	r9, [r3, #12]
	uint32_t* counter = &pAddrTable->value[pAddrTable->addr[p+5]];
 8007f1e:	3781      	adds	r7, #129	; 0x81
	uint32_t* in = &pAddrTable->value[pAddrTable->addr[p+1]];
 8007f20:	e9d3 6a01 	ldrd	r6, sl, [r3, #4]
	uint32_t* inold = &pAddrTable->value[pAddrTable->addr[p+4]];
 8007f24:	e9d3 8b04 	ldrd	r8, fp, [r3, #16]

	tick = HAL_GetTick();
 8007f28:	f7f9 fc06 	bl	8001738 <HAL_GetTick>

	switch(*state){
 8007f2c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
	uint32_t* et = &pAddrTable->value[pAddrTable->addr[p]];
 8007f30:	3681      	adds	r6, #129	; 0x81
	switch(*state){
 8007f32:	b1ab      	cbz	r3, 8007f60 <fb_timer_tp+0x5c>
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d111      	bne.n	8007f5c <fb_timer_tp+0x58>
		}

		break;

	case 1:
		if(tick >= *counter){
 8007f38:	f855 3027 	ldr.w	r3, [r5, r7, lsl #2]
	uint32_t* pt = &pAddrTable->value[pAddrTable->addr[p+2]];
 8007f3c:	f109 0981 	add.w	r9, r9, #129	; 0x81
		if(tick >= *counter){
 8007f40:	4283      	cmp	r3, r0
			delta = tick - *counter;
		}
		else {
			delta = tick + ((0xFFFFFFFF) - *counter);
 8007f42:	bf88      	it	hi
 8007f44:	f100 30ff 	addhi.w	r0, r0, #4294967295
 8007f48:	1ac0      	subs	r0, r0, r3
		}

		*et = delta;
 8007f4a:	f845 0026 	str.w	r0, [r5, r6, lsl #2]

		if(delta > *pt){
 8007f4e:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
 8007f52:	4283      	cmp	r3, r0
 8007f54:	d202      	bcs.n	8007f5c <fb_timer_tp+0x58>
			*state = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
		}
		break;
	}
}
 8007f5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t* q = &pAddrTable->value[pAddrTable->addr[p+3]];
 8007f60:	f108 0881 	add.w	r8, r8, #129	; 0x81
	uint32_t* in = &pAddrTable->value[pAddrTable->addr[p+1]];
 8007f64:	f10a 0a81 	add.w	sl, sl, #129	; 0x81
	uint32_t* inold = &pAddrTable->value[pAddrTable->addr[p+4]];
 8007f68:	f10b 0b81 	add.w	fp, fp, #129	; 0x81
		*q = 0;
 8007f6c:	f845 3028 	str.w	r3, [r5, r8, lsl #2]
		if(*in == 0) {
 8007f70:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 8007f74:	b173      	cbz	r3, 8007f94 <fb_timer_tp+0x90>
		else if(*inold == 0 & *in==1) //0->1 transition
 8007f76:	f855 202b 	ldr.w	r2, [r5, fp, lsl #2]
 8007f7a:	2a00      	cmp	r2, #0
 8007f7c:	d1ee      	bne.n	8007f5c <fb_timer_tp+0x58>
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d1ec      	bne.n	8007f5c <fb_timer_tp+0x58>
			*inold = *in;
 8007f82:	f845 302b 	str.w	r3, [r5, fp, lsl #2]
			*counter = tick;
 8007f86:	f845 0027 	str.w	r0, [r5, r7, lsl #2]
			*q = 1;
 8007f8a:	f845 3028 	str.w	r3, [r5, r8, lsl #2]
			*state = 1; //active state
 8007f8e:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 8007f92:	e7e3      	b.n	8007f5c <fb_timer_tp+0x58>
			*et = 0;
 8007f94:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
			*inold = 0;
 8007f98:	f845 302b 	str.w	r3, [r5, fp, lsl #2]
}
 8007f9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007fa0 <create_fb_timer_tp>:

type_fb_timer_tp create_fb_timer_tp(uint32_t pt){
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	460d      	mov	r5, r1
 8007fa8:	4604      	mov	r4, r0
	type_fb_timer_tp fb;

	s_Param* pAddrTable = get_paramAddrTable();
 8007faa:	f7fe ffdb 	bl	8006f64 <get_paramAddrTable>
 8007fae:	4603      	mov	r3, r0

	fb.startParamIndex = pAddrTable->currentIndex;

	fb.fp.et = createParameter(0);
 8007fb0:	2000      	movs	r0, #0
	fb.startParamIndex = pAddrTable->currentIndex;
 8007fb2:	f893 b000 	ldrb.w	fp, [r3]
	fb.fp.et = createParameter(0);
 8007fb6:	f7fe ffeb 	bl	8006f90 <createParameter>
 8007fba:	4680      	mov	r8, r0
	fb.fp.in = createParameter(0);
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	f7fe ffe7 	bl	8006f90 <createParameter>
 8007fc2:	4603      	mov	r3, r0
	fb.fp.pt = createParameter(pt);
 8007fc4:	4628      	mov	r0, r5
	fb.fp.in = createParameter(0);
 8007fc6:	9301      	str	r3, [sp, #4]
	fb.fp.pt = createParameter(pt);
 8007fc8:	f7fe ffe2 	bl	8006f90 <createParameter>
 8007fcc:	4682      	mov	sl, r0
	fb.fp.q = createParameter(0);
 8007fce:	2000      	movs	r0, #0
 8007fd0:	f7fe ffde 	bl	8006f90 <createParameter>
 8007fd4:	4681      	mov	r9, r0
	fb.fp.inold = createParameter(0);
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	f7fe ffda 	bl	8006f90 <createParameter>
 8007fdc:	4606      	mov	r6, r0
	fb.fp.counter = createParameter(0);
 8007fde:	2000      	movs	r0, #0
 8007fe0:	f7fe ffd6 	bl	8006f90 <createParameter>
 8007fe4:	4605      	mov	r5, r0
	fb.fp.state = createParameter(0);
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	f7fe ffd2 	bl	8006f90 <createParameter>

	fb.fb_index = writeToFBTable(fb_timer_tp, fb.startParamIndex);
 8007fec:	4659      	mov	r1, fp
	fb.fp.state = createParameter(0);
 8007fee:	4607      	mov	r7, r0
	fb.fb_index = writeToFBTable(fb_timer_tp, fb.startParamIndex);
 8007ff0:	4808      	ldr	r0, [pc, #32]	; (8008014 <create_fb_timer_tp+0x74>)
 8007ff2:	f7fe ffbb 	bl	8006f6c <writeToFBTable>

	return fb;
 8007ff6:	9b01      	ldr	r3, [sp, #4]
 8007ff8:	7020      	strb	r0, [r4, #0]
}
 8007ffa:	4620      	mov	r0, r4
	return fb;
 8007ffc:	f884 b001 	strb.w	fp, [r4, #1]
 8008000:	6063      	str	r3, [r4, #4]
 8008002:	e9c4 a902 	strd	sl, r9, [r4, #8]
 8008006:	e9c4 8704 	strd	r8, r7, [r4, #16]
 800800a:	e9c4 6506 	strd	r6, r5, [r4, #24]
}
 800800e:	b003      	add	sp, #12
 8008010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008014:	08007f05 	.word	0x08007f05

08008018 <fb_timer_tp_parser>:
uint8_t fb_timer_tp_parser(uint8_t* p){
 8008018:	4603      	mov	r3, r0
 800801a:	b500      	push	{lr}
 800801c:	b089      	sub	sp, #36	; 0x24
 800801e:	6819      	ldr	r1, [r3, #0]
	create_fb_timer_tp(period);
 8008020:	4668      	mov	r0, sp
 8008022:	ba09      	rev	r1, r1
 8008024:	f7ff ffbc 	bl	8007fa0 <create_fb_timer_tp>
}
 8008028:	2001      	movs	r0, #1
 800802a:	b009      	add	sp, #36	; 0x24
 800802c:	f85d fb04 	ldr.w	pc, [sp], #4

08008030 <fb_wmhr>:
	uint8_t mode = p[1];
	create_fb_wmhr(reg, mode);
	return 1;
}

void fb_wmhr(uint8_t p){
 8008030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	4604      	mov	r4, r0
	s_Param* pAddrTable = get_paramAddrTable();
 8008036:	f7fe ff95 	bl	8006f64 <get_paramAddrTable>
 800803a:	4605      	mov	r5, r0
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 800803c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	uint32_t* din = &pAddrTable->value[pAddrTable->addr[p+1]];
	uint32_t* wren = &pAddrTable->value[pAddrTable->addr[p+2]];
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+3]];
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+5]];
 8008040:	699c      	ldr	r4, [r3, #24]
	uint32_t* wren = &pAddrTable->value[pAddrTable->addr[p+2]];
 8008042:	68de      	ldr	r6, [r3, #12]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+5]];
 8008044:	3481      	adds	r4, #129	; 0x81
	uint32_t* wren = &pAddrTable->value[pAddrTable->addr[p+2]];
 8008046:	3681      	adds	r6, #129	; 0x81
	uint32_t* din = &pAddrTable->value[pAddrTable->addr[p+1]];
 8008048:	e9d3 7801 	ldrd	r7, r8, [r3, #4]

	uint16_t* modbus_holding_reg = get_Modbus_Buf_Holding_Registers_40001();
 800804c:	f000 f87a 	bl	8008144 <get_Modbus_Buf_Holding_Registers_40001>

	//detech rising edge of wren and then write to register
	switch(*state){
 8008050:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d007      	beq.n	8008068 <fb_wmhr+0x38>
 8008058:	2b02      	cmp	r3, #2
 800805a:	d016      	beq.n	800808a <fb_wmhr+0x5a>
 800805c:	b163      	cbz	r3, 8008078 <fb_wmhr+0x48>
				Record_To_Modbus_GPD(*reg-8, modbus_holding_reg[*reg]);
				write_persistent_data_structure();
			}
			break;
		default:
			*state = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
	}
}
 8008064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(*wren == 1) *state = 2;
 8008068:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d1f9      	bne.n	8008064 <fb_wmhr+0x34>
 8008070:	2302      	movs	r3, #2
 8008072:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 8008076:	e7f5      	b.n	8008064 <fb_wmhr+0x34>
			if(*wren == 0) *state = 1;
 8008078:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1f1      	bne.n	8008064 <fb_wmhr+0x34>
 8008080:	2301      	movs	r3, #1
 8008082:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
 8008086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 800808a:	3781      	adds	r7, #129	; 0x81
	uint32_t* din = &pAddrTable->value[pAddrTable->addr[p+1]];
 800808c:	f108 0881 	add.w	r8, r8, #129	; 0x81
			modbus_holding_reg[*reg] = *din;
 8008090:	f855 3027 	ldr.w	r3, [r5, r7, lsl #2]
 8008094:	f855 2028 	ldr.w	r2, [r5, r8, lsl #2]
 8008098:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			*state = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
			if(*reg > 7) {
 80080a2:	f855 3027 	ldr.w	r3, [r5, r7, lsl #2]
 80080a6:	2b07      	cmp	r3, #7
 80080a8:	d9dc      	bls.n	8008064 <fb_wmhr+0x34>
				Record_To_Modbus_GPD(*reg-8, modbus_holding_reg[*reg]);
 80080aa:	f1a3 0208 	sub.w	r2, r3, #8
 80080ae:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 80080b2:	b2d0      	uxtb	r0, r2
 80080b4:	f7ff f85e 	bl	8007174 <Record_To_Modbus_GPD>
}
 80080b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				write_persistent_data_structure();
 80080bc:	f7ff b852 	b.w	8007164 <write_persistent_data_structure>

080080c0 <create_fb_wmhr>:

type_fb_wmhr create_fb_wmhr(uint8_t reg, uint8_t mode){
 80080c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	460e      	mov	r6, r1
 80080c6:	4615      	mov	r5, r2
 80080c8:	4604      	mov	r4, r0
	type_fb_wmhr fb;

	s_Param* pAddrTable = get_paramAddrTable();
 80080ca:	f7fe ff4b 	bl	8006f64 <get_paramAddrTable>
 80080ce:	4603      	mov	r3, r0
	//uint8_t* p_modbus_slave_addr = get_MODBUS_SLAVE_ADDR();
	//if(addr > 1) *p_modbus_slave_addr = addr; //addr is set to 1 default, if something comes greater than 1, than new addr set to this new value

	fb.startParamIndex = pAddrTable->currentIndex;

	fb.fp.reg = createParameter(reg);
 80080d0:	4630      	mov	r0, r6
	fb.startParamIndex = pAddrTable->currentIndex;
 80080d2:	f893 a000 	ldrb.w	sl, [r3]
	fb.fp.reg = createParameter(reg);
 80080d6:	f7fe ff5b 	bl	8006f90 <createParameter>
 80080da:	4683      	mov	fp, r0
	fb.fp.din = createParameter(0);
 80080dc:	2000      	movs	r0, #0
 80080de:	f7fe ff57 	bl	8006f90 <createParameter>
 80080e2:	4681      	mov	r9, r0
	fb.fp.wren = createParameter(0);
 80080e4:	2000      	movs	r0, #0
 80080e6:	f7fe ff53 	bl	8006f90 <createParameter>
 80080ea:	4680      	mov	r8, r0
	fb.fp.mode = createParameter(mode);
 80080ec:	4628      	mov	r0, r5
 80080ee:	f7fe ff4f 	bl	8006f90 <createParameter>
 80080f2:	4607      	mov	r7, r0
	fb.fp.stat = createParameter(0);
 80080f4:	2000      	movs	r0, #0
 80080f6:	f7fe ff4b 	bl	8006f90 <createParameter>
 80080fa:	4606      	mov	r6, r0

	//internal
	fb.fp.state = createParameter(0);
 80080fc:	2000      	movs	r0, #0
 80080fe:	f7fe ff47 	bl	8006f90 <createParameter>
 8008102:	4605      	mov	r5, r0

	fb.fb_index = writeToFBTable(fb_wmhr, fb.startParamIndex);
 8008104:	4651      	mov	r1, sl
 8008106:	4808      	ldr	r0, [pc, #32]	; (8008128 <create_fb_wmhr+0x68>)
 8008108:	f7fe ff30 	bl	8006f6c <writeToFBTable>

	return fb;
 800810c:	f884 a001 	strb.w	sl, [r4, #1]
 8008110:	7020      	strb	r0, [r4, #0]
}
 8008112:	4620      	mov	r0, r4
	return fb;
 8008114:	f8c4 b004 	str.w	fp, [r4, #4]
 8008118:	61a5      	str	r5, [r4, #24]
 800811a:	e9c4 9802 	strd	r9, r8, [r4, #8]
 800811e:	e9c4 7604 	strd	r7, r6, [r4, #16]
}
 8008122:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008126:	bf00      	nop
 8008128:	08008031 	.word	0x08008031

0800812c <fb_wmhr_parser>:
uint8_t fb_wmhr_parser(uint8_t* p){
 800812c:	b500      	push	{lr}
 800812e:	4603      	mov	r3, r0
 8008130:	b089      	sub	sp, #36	; 0x24
	create_fb_wmhr(reg, mode);
 8008132:	785a      	ldrb	r2, [r3, #1]
 8008134:	4668      	mov	r0, sp
 8008136:	7819      	ldrb	r1, [r3, #0]
 8008138:	f7ff ffc2 	bl	80080c0 <create_fb_wmhr>
}
 800813c:	2001      	movs	r0, #1
 800813e:	b009      	add	sp, #36	; 0x24
 8008140:	f85d fb04 	ldr.w	pc, [sp], #4

08008144 <get_Modbus_Buf_Holding_Registers_40001>:
//uint8_t Modbus_Buf_Discrete_Inputs_10001; //todo: implement
uint16_t Modbus_Buf_Input_Registers_30001[MODBUS_INPUT_REGISTER_COUNT]; //todo: implement
uint16_t Modbus_Buf_Holding_Registers_40001[MODBUS_HOLDING_REGISTER_COUNT];
Modbus_Slave_Responce_Data resp_data;

uint16_t* get_Modbus_Buf_Holding_Registers_40001(){return Modbus_Buf_Holding_Registers_40001;}
 8008144:	4800      	ldr	r0, [pc, #0]	; (8008148 <get_Modbus_Buf_Holding_Registers_40001+0x4>)
 8008146:	4770      	bx	lr
 8008148:	20000684 	.word	0x20000684

0800814c <get_Modbus_Buf_Input_Registers_30001>:
uint16_t* get_Modbus_Buf_Input_Registers_30001(){return Modbus_Buf_Input_Registers_30001;}
 800814c:	4800      	ldr	r0, [pc, #0]	; (8008150 <get_Modbus_Buf_Input_Registers_30001+0x4>)
 800814e:	4770      	bx	lr
 8008150:	200006a4 	.word	0x200006a4

08008154 <get_MODBUS_SLAVE_ADDR>:

uint8_t MODBUS_SLAVE_ADDR  = 0x01;
uint8_t* get_MODBUS_SLAVE_ADDR(){return &MODBUS_SLAVE_ADDR;}
 8008154:	4800      	ldr	r0, [pc, #0]	; (8008158 <get_MODBUS_SLAVE_ADDR+0x4>)
 8008156:	4770      	bx	lr
 8008158:	2000008c 	.word	0x2000008c

0800815c <modbus_slave_prep_resp_data>:
}

void modbus_slave_prep_resp_data(Modbus_Slave_Responce_Data* resp_data,
									uint8_t function,
									uint16_t register_addr,
									uint16_t register_qty){
 800815c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t i;

	uint16_t register_addr_0 = register_addr-1; //40001 means register 0
 800815e:	f102 3cff 	add.w	ip, r2, #4294967295

	resp_data->index = 0;
	resp_data->buf[resp_data->index++] = MODBUS_SLAVE_ADDR; //Slave address
 8008162:	4c58      	ldr	r4, [pc, #352]	; (80082c4 <modbus_slave_prep_resp_data+0x168>)
	resp_data->buf[resp_data->index++] = function; //Function
	if(function == MODBUS_READ_HOLDING_REGISTER){
 8008164:	2903      	cmp	r1, #3
	resp_data->buf[resp_data->index++] = function; //Function
 8008166:	7041      	strb	r1, [r0, #1]
	uint16_t register_addr_0 = register_addr-1; //40001 means register 0
 8008168:	fa1f fe8c 	uxth.w	lr, ip
	resp_data->buf[resp_data->index++] = MODBUS_SLAVE_ADDR; //Slave address
 800816c:	f894 c000 	ldrb.w	ip, [r4]
	resp_data->buf[resp_data->index++] = function; //Function
 8008170:	f04f 0402 	mov.w	r4, #2
	resp_data->buf[resp_data->index++] = MODBUS_SLAVE_ADDR; //Slave address
 8008174:	f880 c000 	strb.w	ip, [r0]
	resp_data->buf[resp_data->index++] = function; //Function
 8008178:	f880 4026 	strb.w	r4, [r0, #38]	; 0x26
	if(function == MODBUS_READ_HOLDING_REGISTER){
 800817c:	d050      	beq.n	8008220 <modbus_slave_prep_resp_data+0xc4>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_READ_INPUT_REGISTER){
 800817e:	2904      	cmp	r1, #4
 8008180:	d00a      	beq.n	8008198 <modbus_slave_prep_resp_data+0x3c>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_WRITE_SINGLE_REGISTER){
 8008182:	2906      	cmp	r1, #6
 8008184:	f000 808d 	beq.w	80082a2 <modbus_slave_prep_resp_data+0x146>
		resp_data->buf[resp_data->index++] = get_low_byte(register_addr);
		resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
		resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
	}

	else if(function == MODBUS_WRITE_MULTIPLE_REGISTER){
 8008188:	2910      	cmp	r1, #16
 800818a:	d076      	beq.n	800827a <modbus_slave_prep_resp_data+0x11e>
 800818c:	2603      	movs	r6, #3
 800818e:	2504      	movs	r5, #4
 8008190:	4621      	mov	r1, r4
 8008192:	f04f 0e01 	mov.w	lr, #1
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

uint8_t nTemp;
uint16_t wCRCWord = 0xFFFF;

   while (wLength--)
 8008196:	e027      	b.n	80081e8 <modbus_slave_prep_resp_data+0x8c>
		resp_data->buf[resp_data->index++] = register_qty*2;
 8008198:	2103      	movs	r1, #3
 800819a:	005a      	lsls	r2, r3, #1
 800819c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 80081a0:	7082      	strb	r2, [r0, #2]
		for(i = 0;i<register_qty;i++){
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d077      	beq.n	8008296 <modbus_slave_prep_resp_data+0x13a>
 80081a6:	4672      	mov	r2, lr
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 80081a8:	4f47      	ldr	r7, [pc, #284]	; (80082c8 <modbus_slave_prep_resp_data+0x16c>)
 80081aa:	449e      	add	lr, r3
 80081ac:	1c4b      	adds	r3, r1, #1
			if(register_addr_0+i <= MODBUS_INPUT_REGISTER_COUNT) {
 80081ae:	2a10      	cmp	r2, #16
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 80081b0:	f101 0402 	add.w	r4, r1, #2
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 80081b4:	b2db      	uxtb	r3, r3
			if(register_addr_0+i <= MODBUS_INPUT_REGISTER_COUNT) {
 80081b6:	dc07      	bgt.n	80081c8 <modbus_slave_prep_resp_data+0x6c>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 80081b8:	f837 5012 	ldrh.w	r5, [r7, r2, lsl #1]
	return (uint8_t)((word>>8) & 0xFF);
 80081bc:	0a2e      	lsrs	r6, r5, #8
 80081be:	5446      	strb	r6, [r0, r1]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 80081c0:	b2e1      	uxtb	r1, r4
 80081c2:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
	return (uint8_t)(word & 0xFF);
 80081c6:	54c5      	strb	r5, [r0, r3]
		for(i = 0;i<register_qty;i++){
 80081c8:	3201      	adds	r2, #1
 80081ca:	4596      	cmp	lr, r2
 80081cc:	d1ee      	bne.n	80081ac <modbus_slave_prep_resp_data+0x50>
   while (wLength--)
 80081ce:	f101 3eff 	add.w	lr, r1, #4294967295
	uint16_t crc = CRC16(resp_data->buf, resp_data->index);
 80081d2:	b28a      	uxth	r2, r1
   while (wLength--)
 80081d4:	fa1f fe8e 	uxth.w	lr, lr
 80081d8:	2900      	cmp	r1, #0
 80081da:	d042      	beq.n	8008262 <modbus_slave_prep_resp_data+0x106>
	resp_data->buf[resp_data->index++] = get_hi_byte(crc);
 80081dc:	1c8d      	adds	r5, r1, #2
	resp_data->buf[resp_data->index++] = get_low_byte(crc);
 80081de:	1c4e      	adds	r6, r1, #1
   {
      nTemp = *nData++ ^ wCRCWord;
 80081e0:	f890 c000 	ldrb.w	ip, [r0]
	resp_data->buf[resp_data->index++] = get_hi_byte(crc);
 80081e4:	b2ed      	uxtb	r5, r5
 80081e6:	b2f6      	uxtb	r6, r6
 80081e8:	4486      	add	lr, r0
 80081ea:	4602      	mov	r2, r0
		for(i = 0;i<register_qty;i++){
 80081ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081f0:	4c36      	ldr	r4, [pc, #216]	; (80082cc <modbus_slave_prep_resp_data+0x170>)
 80081f2:	e001      	b.n	80081f8 <modbus_slave_prep_resp_data+0x9c>
      nTemp = *nData++ ^ wCRCWord;
 80081f4:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80081f8:	ea8c 0c03 	eor.w	ip, ip, r3
   while (wLength--)
 80081fc:	4572      	cmp	r2, lr
      wCRCWord >>= 8;
      wCRCWord  ^= wCRCTable[nTemp];
 80081fe:	fa5f fc8c 	uxtb.w	ip, ip
 8008202:	f834 c01c 	ldrh.w	ip, [r4, ip, lsl #1]
 8008206:	ea8c 2313 	eor.w	r3, ip, r3, lsr #8
   while (wLength--)
 800820a:	d1f3      	bne.n	80081f4 <modbus_slave_prep_resp_data+0x98>
	return (uint8_t)((word>>8) & 0xFF);
 800820c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	return (uint8_t)(word & 0xFF);
 8008210:	b2db      	uxtb	r3, r3
	resp_data->buf[resp_data->index++] = get_low_byte(crc);
 8008212:	5443      	strb	r3, [r0, r1]
	resp_data->buf[resp_data->index++] = get_hi_byte(crc);
 8008214:	f880 5026 	strb.w	r5, [r0, #38]	; 0x26
 8008218:	5582      	strb	r2, [r0, r6]
	resp_data->len = resp_data->index;
 800821a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
}
 800821e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		resp_data->buf[resp_data->index++] = register_qty*2;
 8008220:	005a      	lsls	r2, r3, #1
 8008222:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8008226:	7082      	strb	r2, [r0, #2]
		for(i = 0;i<register_qty;i++){
 8008228:	b3ab      	cbz	r3, 8008296 <modbus_slave_prep_resp_data+0x13a>
 800822a:	4672      	mov	r2, lr
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 800822c:	4e28      	ldr	r6, [pc, #160]	; (80082d0 <modbus_slave_prep_resp_data+0x174>)
 800822e:	449e      	add	lr, r3
 8008230:	1c4b      	adds	r3, r1, #1
			if(register_addr_0+i <= MODBUS_HOLDING_REGISTER_COUNT) {
 8008232:	2a10      	cmp	r2, #16
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 8008234:	f101 0c02 	add.w	ip, r1, #2
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 8008238:	b2db      	uxtb	r3, r3
			if(register_addr_0+i <= MODBUS_HOLDING_REGISTER_COUNT) {
 800823a:	dc08      	bgt.n	800824e <modbus_slave_prep_resp_data+0xf2>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 800823c:	f836 4012 	ldrh.w	r4, [r6, r2, lsl #1]
	return (uint8_t)((word>>8) & 0xFF);
 8008240:	0a25      	lsrs	r5, r4, #8
 8008242:	5445      	strb	r5, [r0, r1]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 8008244:	fa5f f18c 	uxtb.w	r1, ip
 8008248:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
	return (uint8_t)(word & 0xFF);
 800824c:	54c4      	strb	r4, [r0, r3]
		for(i = 0;i<register_qty;i++){
 800824e:	3201      	adds	r2, #1
 8008250:	4596      	cmp	lr, r2
 8008252:	d1ed      	bne.n	8008230 <modbus_slave_prep_resp_data+0xd4>
   while (wLength--)
 8008254:	f101 3eff 	add.w	lr, r1, #4294967295
	uint16_t crc = CRC16(resp_data->buf, resp_data->index);
 8008258:	b28a      	uxth	r2, r1
   while (wLength--)
 800825a:	fa1f fe8e 	uxth.w	lr, lr
 800825e:	2900      	cmp	r1, #0
 8008260:	d1bc      	bne.n	80081dc <modbus_slave_prep_resp_data+0x80>
 8008262:	23ff      	movs	r3, #255	; 0xff
 8008264:	2502      	movs	r5, #2
 8008266:	4611      	mov	r1, r2
 8008268:	2601      	movs	r6, #1
 800826a:	461a      	mov	r2, r3
	resp_data->buf[resp_data->index++] = get_low_byte(crc);
 800826c:	5443      	strb	r3, [r0, r1]
	resp_data->buf[resp_data->index++] = get_hi_byte(crc);
 800826e:	f880 5026 	strb.w	r5, [r0, #38]	; 0x26
 8008272:	5582      	strb	r2, [r0, r6]
	resp_data->len = resp_data->index;
 8008274:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
}
 8008278:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (uint8_t)((word>>8) & 0xFF);
 800827a:	0a11      	lsrs	r1, r2, #8
	return (uint8_t)(word & 0xFF);
 800827c:	70c2      	strb	r2, [r0, #3]
	return (uint8_t)((word>>8) & 0xFF);
 800827e:	0a1a      	lsrs	r2, r3, #8
		resp_data->buf[resp_data->index++] = get_low_byte(register_qty);
 8008280:	2607      	movs	r6, #7
	return (uint8_t)((word>>8) & 0xFF);
 8008282:	7081      	strb	r1, [r0, #2]
		resp_data->buf[resp_data->index++] = get_low_byte(register_qty);
 8008284:	2106      	movs	r1, #6
 8008286:	2508      	movs	r5, #8
 8008288:	f04f 0e05 	mov.w	lr, #5
	return (uint8_t)(word & 0xFF);
 800828c:	7143      	strb	r3, [r0, #5]
	return (uint8_t)((word>>8) & 0xFF);
 800828e:	7102      	strb	r2, [r0, #4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_qty);
 8008290:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
	return (uint8_t)(word & 0xFF);
 8008294:	e7a8      	b.n	80081e8 <modbus_slave_prep_resp_data+0x8c>
   while (wLength--)
 8008296:	2604      	movs	r6, #4
 8008298:	2505      	movs	r5, #5
 800829a:	2103      	movs	r1, #3
 800829c:	f04f 0e02 	mov.w	lr, #2
 80082a0:	e7a2      	b.n	80081e8 <modbus_slave_prep_resp_data+0x8c>
	return (uint8_t)(word & 0xFF);
 80082a2:	70c2      	strb	r2, [r0, #3]
	return (uint8_t)((word>>8) & 0xFF);
 80082a4:	0a12      	lsrs	r2, r2, #8
		resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 80082a6:	4b0a      	ldr	r3, [pc, #40]	; (80082d0 <modbus_slave_prep_resp_data+0x174>)
 80082a8:	2607      	movs	r6, #7
	return (uint8_t)((word>>8) & 0xFF);
 80082aa:	7082      	strb	r2, [r0, #2]
		resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 80082ac:	2508      	movs	r5, #8
 80082ae:	f833 301e 	ldrh.w	r3, [r3, lr, lsl #1]
	return (uint8_t)((word>>8) & 0xFF);
 80082b2:	f04f 0e05 	mov.w	lr, #5
		resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 80082b6:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
	return (uint8_t)((word>>8) & 0xFF);
 80082ba:	0a1a      	lsrs	r2, r3, #8
	return (uint8_t)(word & 0xFF);
 80082bc:	7143      	strb	r3, [r0, #5]
	return (uint8_t)((word>>8) & 0xFF);
 80082be:	7102      	strb	r2, [r0, #4]
	return (uint8_t)(word & 0xFF);
 80082c0:	e792      	b.n	80081e8 <modbus_slave_prep_resp_data+0x8c>
 80082c2:	bf00      	nop
 80082c4:	2000008c 	.word	0x2000008c
 80082c8:	200006a4 	.word	0x200006a4
 80082cc:	08008600 	.word	0x08008600
 80082d0:	20000684 	.word	0x20000684

080082d4 <modbus_slave_rx>:
uint8_t modbus_slave_rx(uint32_t channel){
 80082d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Communication_Ch* ch = Channel_Mapping(channel);
 80082d8:	f7fe fde4 	bl	8006ea4 <Channel_Mapping>
	if(ch->rx_data_buf[0] == MODBUS_SLAVE_ADDR){
 80082dc:	4b36      	ldr	r3, [pc, #216]	; (80083b8 <modbus_slave_rx+0xe4>)
 80082de:	7982      	ldrb	r2, [r0, #6]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d002      	beq.n	80082ec <modbus_slave_rx+0x18>
}
 80082e6:	2000      	movs	r0, #0
 80082e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return ((p[0] << 8) + p[1]);
 80082ec:	7a02      	ldrb	r2, [r0, #8]
 80082ee:	4604      	mov	r4, r0
 80082f0:	7a47      	ldrb	r7, [r0, #9]
 80082f2:	7a83      	ldrb	r3, [r0, #10]
 80082f4:	eb07 2702 	add.w	r7, r7, r2, lsl #8
 80082f8:	7ac6      	ldrb	r6, [r0, #11]
		if(ch->rx_data_buf[1] == MODBUS_WRITE_SINGLE_REGISTER){
 80082fa:	79c1      	ldrb	r1, [r0, #7]
	return ((p[0] << 8) + p[1]);
 80082fc:	b2bf      	uxth	r7, r7
 80082fe:	eb06 2603 	add.w	r6, r6, r3, lsl #8
		if(ch->rx_data_buf[1] == MODBUS_WRITE_SINGLE_REGISTER){
 8008302:	2906      	cmp	r1, #6
		starting_addr = register_addr - 1;
 8008304:	f107 39ff 	add.w	r9, r7, #4294967295
	return ((p[0] << 8) + p[1]);
 8008308:	b2b6      	uxth	r6, r6
		starting_addr = register_addr - 1;
 800830a:	fa1f f989 	uxth.w	r9, r9
		if(ch->rx_data_buf[1] == MODBUS_WRITE_SINGLE_REGISTER){
 800830e:	d018      	beq.n	8008342 <modbus_slave_rx+0x6e>
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 8008310:	f1b9 0f0f 	cmp.w	r9, #15
 8008314:	d801      	bhi.n	800831a <modbus_slave_rx+0x46>
 8008316:	2910      	cmp	r1, #16
 8008318:	d026      	beq.n	8008368 <modbus_slave_rx+0x94>
		switch(ch->rx_data_buf[1]){
 800831a:	2910      	cmp	r1, #16
 800831c:	d8e3      	bhi.n	80082e6 <modbus_slave_rx+0x12>
 800831e:	2201      	movs	r2, #1
 8008320:	4b26      	ldr	r3, [pc, #152]	; (80083bc <modbus_slave_rx+0xe8>)
 8008322:	408a      	lsls	r2, r1
 8008324:	4013      	ands	r3, r2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0dd      	beq.n	80082e6 <modbus_slave_rx+0x12>
				modbus_slave_prep_resp_data(&resp_data,
 800832a:	4825      	ldr	r0, [pc, #148]	; (80083c0 <modbus_slave_rx+0xec>)
 800832c:	4633      	mov	r3, r6
 800832e:	463a      	mov	r2, r7
 8008330:	f7ff ff14 	bl	800815c <modbus_slave_prep_resp_data>
	hal_modbus_uart_tx(resp_data->buf, resp_data->len);
 8008334:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
 8008338:	f7f8 fa86 	bl	8000848 <hal_modbus_uart_tx>
}
 800833c:	2000      	movs	r0, #0
 800833e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 8008342:	f1b9 0f0f 	cmp.w	r9, #15
 8008346:	d8f0      	bhi.n	800832a <modbus_slave_rx+0x56>
				Modbus_Buf_Holding_Registers_40001[starting_addr] = modbus_byte2word(&ch->rx_data_buf[4]);
 8008348:	4b1e      	ldr	r3, [pc, #120]	; (80083c4 <modbus_slave_rx+0xf0>)
				if(starting_addr > 7) {
 800834a:	f1b9 0f07 	cmp.w	r9, #7
				Modbus_Buf_Holding_Registers_40001[starting_addr] = modbus_byte2word(&ch->rx_data_buf[4]);
 800834e:	f823 6019 	strh.w	r6, [r3, r9, lsl #1]
				if(starting_addr > 7) {
 8008352:	d9ea      	bls.n	800832a <modbus_slave_rx+0x56>
					Record_To_Modbus_GPD(starting_addr-8, Modbus_Buf_Holding_Registers_40001[starting_addr]);
 8008354:	f1a9 0008 	sub.w	r0, r9, #8
 8008358:	4631      	mov	r1, r6
 800835a:	b2c0      	uxtb	r0, r0
 800835c:	f7fe ff0a 	bl	8007174 <Record_To_Modbus_GPD>
					write_persistent_data_structure();
 8008360:	f7fe ff00 	bl	8007164 <write_persistent_data_structure>
		switch(ch->rx_data_buf[1]){
 8008364:	79e1      	ldrb	r1, [r4, #7]
 8008366:	e7d8      	b.n	800831a <modbus_slave_rx+0x46>
				for(uint8_t i = 0;i<register_qty;i++){
 8008368:	2e00      	cmp	r6, #0
 800836a:	d0de      	beq.n	800832a <modbus_slave_rx+0x56>
 800836c:	2500      	movs	r5, #0
 800836e:	f8df a054 	ldr.w	sl, [pc, #84]	; 80083c4 <modbus_slave_rx+0xf0>
						Record_To_Modbus_GPD(starting_addr+i-8, Modbus_Buf_Holding_Registers_40001[starting_addr+i]);
 8008372:	f1a9 0808 	sub.w	r8, r9, #8
	uint8_t gpd_recorded = 0;
 8008376:	4628      	mov	r0, r5
 8008378:	e004      	b.n	8008384 <modbus_slave_rx+0xb0>
				for(uint8_t i = 0;i<register_qty;i++){
 800837a:	3501      	adds	r5, #1
 800837c:	b2eb      	uxtb	r3, r5
 800837e:	42b3      	cmp	r3, r6
 8008380:	461d      	mov	r5, r3
 8008382:	d214      	bcs.n	80083ae <modbus_slave_rx+0xda>
	return ((p[0] << 8) + p[1]);
 8008384:	eb04 0245 	add.w	r2, r4, r5, lsl #1
					Modbus_Buf_Holding_Registers_40001[starting_addr+i] = modbus_byte2word(&ch->rx_data_buf[7+i*2]);
 8008388:	eb05 0309 	add.w	r3, r5, r9
	return ((p[0] << 8) + p[1]);
 800838c:	f892 c00d 	ldrb.w	ip, [r2, #13]
					if((starting_addr+i) > 7) {
 8008390:	2b07      	cmp	r3, #7
	return ((p[0] << 8) + p[1]);
 8008392:	7b91      	ldrb	r1, [r2, #14]
 8008394:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8008398:	b289      	uxth	r1, r1
					Modbus_Buf_Holding_Registers_40001[starting_addr+i] = modbus_byte2word(&ch->rx_data_buf[7+i*2]);
 800839a:	f82a 1013 	strh.w	r1, [sl, r3, lsl #1]
					if((starting_addr+i) > 7) {
 800839e:	ddec      	ble.n	800837a <modbus_slave_rx+0xa6>
						Record_To_Modbus_GPD(starting_addr+i-8, Modbus_Buf_Holding_Registers_40001[starting_addr+i]);
 80083a0:	eb05 0008 	add.w	r0, r5, r8
 80083a4:	b2c0      	uxtb	r0, r0
 80083a6:	f7fe fee5 	bl	8007174 <Record_To_Modbus_GPD>
						gpd_recorded = 1;
 80083aa:	2001      	movs	r0, #1
 80083ac:	e7e5      	b.n	800837a <modbus_slave_rx+0xa6>
				if(gpd_recorded){
 80083ae:	b108      	cbz	r0, 80083b4 <modbus_slave_rx+0xe0>
					write_persistent_data_structure();
 80083b0:	f7fe fed8 	bl	8007164 <write_persistent_data_structure>
		switch(ch->rx_data_buf[1]){
 80083b4:	79e1      	ldrb	r1, [r4, #7]
 80083b6:	e7b0      	b.n	800831a <modbus_slave_rx+0x46>
 80083b8:	2000008c 	.word	0x2000008c
 80083bc:	00010058 	.word	0x00010058
 80083c0:	200006c4 	.word	0x200006c4
 80083c4:	20000684 	.word	0x20000684

080083c8 <write_flash_data.part.0>:
	ret.flash_pointer = flashptr;

	return ret;
}

uint32_t write_flash_data(uint8_t* data, uint32_t length){
 80083c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083cc:	b086      	sub	sp, #24
 80083ce:	4606      	mov	r6, r0
 80083d0:	460d      	mov	r5, r1

	//Its very important length to be multiply of 4
	if(length%4 != 0) return 0;

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size);
 80083d2:	a801      	add	r0, sp, #4
 80083d4:	a902      	add	r1, sp, #8
 80083d6:	f7f8 fa77 	bl	80008c8 <get_flash_memory_info>
	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 80083da:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
 80083de:	eb04 0c03 	add.w	ip, r4, r3
 80083e2:	4564      	cmp	r4, ip
 80083e4:	d209      	bcs.n	80083fa <write_flash_data.part.0+0x32>
		if(temp_fb->block_start_marker1 ==BLOCK_START_MAGIC1){
 80083e6:	4a1e      	ldr	r2, [pc, #120]	; (8008460 <write_flash_data.part.0+0x98>)
 80083e8:	e004      	b.n	80083f4 <write_flash_data.part.0+0x2c>
			inc = temp_fb->length + FLASHBLOCK_HEADER_SIZE;
 80083ea:	6863      	ldr	r3, [r4, #4]
 80083ec:	3308      	adds	r3, #8
	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 80083ee:	441c      	add	r4, r3
 80083f0:	4564      	cmp	r4, ip
 80083f2:	d202      	bcs.n	80083fa <write_flash_data.part.0+0x32>
		if(temp_fb->block_start_marker1 ==BLOCK_START_MAGIC1){
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d0f7      	beq.n	80083ea <write_flash_data.part.0+0x22>
	get_flash_memory_info(&mem_start, &mem_size);
 80083fa:	a904      	add	r1, sp, #16
 80083fc:	a803      	add	r0, sp, #12
 80083fe:	f7f8 fa63 	bl	80008c8 <get_flash_memory_info>
	if(mem_end < start_addr+FLASHBLOCK_HEADER_SIZE+datalen){
 8008402:	f105 0808 	add.w	r8, r5, #8
	mem_end = mem_start+ mem_size;
 8008406:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
	if(mem_end < start_addr+FLASHBLOCK_HEADER_SIZE+datalen){
 800840a:	eb08 0704 	add.w	r7, r8, r4
	mem_end = mem_start+ mem_size;
 800840e:	4413      	add	r3, r2
	if(mem_end < start_addr+FLASHBLOCK_HEADER_SIZE+datalen){
 8008410:	42bb      	cmp	r3, r7
 8008412:	d205      	bcs.n	8008420 <write_flash_data.part.0+0x58>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);

	if(check_for_available_memory(lastrecord_info.flash_pointer, length) == 0){
		erase_flash(mem_start_address);
 8008414:	9801      	ldr	r0, [sp, #4]
 8008416:	f7f8 fa9f 	bl	8000958 <erase_flash>
		lastrecord_info.flash_pointer = mem_start_address;
 800841a:	9c01      	ldr	r4, [sp, #4]
	if(mem_end < start_addr+FLASHBLOCK_HEADER_SIZE+datalen){
 800841c:	eb08 0704 	add.w	r7, r8, r4
	get_flash_memory_info(&mem_start, &mem_size);
 8008420:	a803      	add	r0, sp, #12
 8008422:	a904      	add	r1, sp, #16
 8008424:	f7f8 fa50 	bl	80008c8 <get_flash_memory_info>
	mem_end = mem_start+ mem_size;
 8008428:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800842c:	4413      	add	r3, r2
	if(mem_end < start_addr+FLASHBLOCK_HEADER_SIZE+datalen){
 800842e:	42bb      	cmp	r3, r7
 8008430:	d311      	bcc.n	8008456 <write_flash_data.part.0+0x8e>
		Flash_Block fb = {.block_start_marker1= BLOCK_START_MAGIC1, .length = datalen};
 8008432:	4b0b      	ldr	r3, [pc, #44]	; (8008460 <write_flash_data.part.0+0x98>)
		write_to_flash((uint8_t*) (&fb), start_addr, FLASHBLOCK_HEADER_SIZE);
 8008434:	4621      	mov	r1, r4
 8008436:	a804      	add	r0, sp, #16
 8008438:	2208      	movs	r2, #8
		Flash_Block fb = {.block_start_marker1= BLOCK_START_MAGIC1, .length = datalen};
 800843a:	9304      	str	r3, [sp, #16]
 800843c:	9505      	str	r5, [sp, #20]
		write_to_flash((uint8_t*) (&fb), start_addr, FLASHBLOCK_HEADER_SIZE);
 800843e:	f7f8 fa57 	bl	80008f0 <write_to_flash>
		write_to_flash(data, start_addr+FLASHBLOCK_HEADER_SIZE, datalen);
 8008442:	462a      	mov	r2, r5
 8008444:	f104 0108 	add.w	r1, r4, #8
 8008448:	4630      	mov	r0, r6
 800844a:	f7f8 fa51 	bl	80008f0 <write_to_flash>
	}

	//write data to flash and return current flash pointer address
	return write_flash_block(lastrecord_info.flash_pointer, data, length);
}
 800844e:	4638      	mov	r0, r7
 8008450:	b006      	add	sp, #24
 8008452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0; //no available memory
 8008456:	2700      	movs	r7, #0
}
 8008458:	4638      	mov	r0, r7
 800845a:	b006      	add	sp, #24
 800845c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008460:	01234567 	.word	0x01234567

08008464 <write_flash_data>:
	if(length%4 != 0) return 0;
 8008464:	078b      	lsls	r3, r1, #30
 8008466:	d001      	beq.n	800846c <write_flash_data+0x8>
}
 8008468:	2000      	movs	r0, #0
 800846a:	4770      	bx	lr
 800846c:	f7ff bfac 	b.w	80083c8 <write_flash_data.part.0>

08008470 <get_flash_data>:

Flash_Block* get_flash_data(){
 8008470:	b510      	push	{r4, lr}
 8008472:	b082      	sub	sp, #8
	uint32_t mem_start_address, mem_size;

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size);
 8008474:	a901      	add	r1, sp, #4
 8008476:	4668      	mov	r0, sp
 8008478:	f7f8 fa26 	bl	80008c8 <get_flash_memory_info>
	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 800847c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008480:	eb03 0c02 	add.w	ip, r3, r2
 8008484:	4563      	cmp	r3, ip
 8008486:	d211      	bcs.n	80084ac <get_flash_data+0x3c>
 8008488:	4619      	mov	r1, r3
		if(temp_fb->block_start_marker1 ==BLOCK_START_MAGIC1){
 800848a:	4c09      	ldr	r4, [pc, #36]	; (80084b0 <get_flash_data+0x40>)
 800848c:	e004      	b.n	8008498 <get_flash_data+0x28>
			inc = temp_fb->length + FLASHBLOCK_HEADER_SIZE;
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	3208      	adds	r2, #8
	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 8008492:	4413      	add	r3, r2
 8008494:	4563      	cmp	r3, ip
 8008496:	d206      	bcs.n	80084a6 <get_flash_data+0x36>
		if(temp_fb->block_start_marker1 ==BLOCK_START_MAGIC1){
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	4608      	mov	r0, r1
		temp_fb = (Flash_Block*) flashptr;
 800849c:	4619      	mov	r1, r3
		if(temp_fb->block_start_marker1 ==BLOCK_START_MAGIC1){
 800849e:	42a2      	cmp	r2, r4
 80084a0:	d0f5      	beq.n	800848e <get_flash_data+0x1e>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);

	return lastrecord_info.last_record_fb;
}
 80084a2:	b002      	add	sp, #8
 80084a4:	bd10      	pop	{r4, pc}
 80084a6:	4608      	mov	r0, r1
 80084a8:	b002      	add	sp, #8
 80084aa:	bd10      	pop	{r4, pc}
	ret.last_record_fb = temp_fb; //If there is no record at flash to initiate last record
 80084ac:	4618      	mov	r0, r3
	return lastrecord_info.last_record_fb;
 80084ae:	e7f8      	b.n	80084a2 <get_flash_data+0x32>
 80084b0:	01234567 	.word	0x01234567

080084b4 <addWatch>:
	}
}

void addWatch(uint8_t index)
{
	if(watchList.index < MAX_WATCH_COUNT){
 80084b4:	4b04      	ldr	r3, [pc, #16]	; (80084c8 <addWatch+0x14>)
 80084b6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80084ba:	2a09      	cmp	r2, #9
 80084bc:	d803      	bhi.n	80084c6 <addWatch+0x12>
		watchList.data[watchList.index++] = index;
 80084be:	1c51      	adds	r1, r2, #1
 80084c0:	5498      	strb	r0, [r3, r2]
 80084c2:	f883 105c 	strb.w	r1, [r3, #92]	; 0x5c
	}
}
 80084c6:	4770      	bx	lr
 80084c8:	200006ec 	.word	0x200006ec

080084cc <removeWatch>:

void removeWatch(uint8_t index)
{
 80084cc:	b510      	push	{r4, lr}
	uint8_t tempWatchList[MAX_WATCH_COUNT] = {0};
	for(uint8_t i = 0;i<MAX_WATCH_COUNT;i++) tempWatchList[i] = watchList.data[i];
 80084ce:	4c0f      	ldr	r4, [pc, #60]	; (800850c <removeWatch+0x40>)
{
 80084d0:	4684      	mov	ip, r0
 80084d2:	b084      	sub	sp, #16

	for(uint8_t i = index;i<watchList.index;i++){
 80084d4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	for(uint8_t i = 0;i<MAX_WATCH_COUNT;i++) tempWatchList[i] = watchList.data[i];
 80084d8:	f10d 0e04 	add.w	lr, sp, #4
	for(uint8_t i = index;i<watchList.index;i++){
 80084dc:	459c      	cmp	ip, r3
	for(uint8_t i = 0;i<MAX_WATCH_COUNT;i++) tempWatchList[i] = watchList.data[i];
 80084de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80084e2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80084e6:	f8ae 2000 	strh.w	r2, [lr]
	for(uint8_t i = index;i<watchList.index;i++){
 80084ea:	d20c      	bcs.n	8008506 <removeWatch+0x3a>
		watchList.data[i] = tempWatchList[i+1];
 80084ec:	1e5a      	subs	r2, r3, #1
 80084ee:	f10c 0101 	add.w	r1, ip, #1
 80084f2:	eb04 000c 	add.w	r0, r4, ip
 80084f6:	eba2 030c 	sub.w	r3, r2, ip
 80084fa:	aa01      	add	r2, sp, #4
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	4411      	add	r1, r2
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	f000 f84b 	bl	800859c <memcpy>
	}
}
 8008506:	b004      	add	sp, #16
 8008508:	bd10      	pop	{r4, pc}
 800850a:	bf00      	nop
 800850c:	200006ec 	.word	0x200006ec

08008510 <monitor>:

void monitor()
{
 8008510:	b538      	push	{r3, r4, r5, lr}
	uint8_t dma_i = 0;
	s_Param* pAddrTable = get_paramAddrTable();
 8008512:	f7fe fd27 	bl	8006f64 <get_paramAddrTable>

	if(watchList.index == 0) return; //no watches at the list
 8008516:	4a0d      	ldr	r2, [pc, #52]	; (800854c <monitor+0x3c>)
 8008518:	f892 505c 	ldrb.w	r5, [r2, #92]	; 0x5c
 800851c:	b1a5      	cbz	r5, 8008548 <monitor+0x38>
 800851e:	1e6b      	subs	r3, r5, #1
 8008520:	1c51      	adds	r1, r2, #1

		for(uint8_t i = 0;i<watchList.index;i++){
			watchList.dmaBuffer[dma_i++] = watchList.data[i]; //first put the index of data
			uint32_t value = pAddrTable->addr[0];
 8008522:	6844      	ldr	r4, [r0, #4]
 8008524:	fa51 f083 	uxtab	r0, r1, r3
 8008528:	4613      	mov	r3, r2
			watchList.dmaBuffer[dma_i++] = watchList.data[i]; //first put the index of data
 800852a:	f812 1b01 	ldrb.w	r1, [r2], #1
		for(uint8_t i = 0;i<watchList.index;i++){
 800852e:	3308      	adds	r3, #8
 8008530:	4282      	cmp	r2, r0
			watchList.dmaBuffer[dma_i++] = watchList.data[i]; //first put the index of data
 8008532:	e9c3 1401 	strd	r1, r4, [r3, #4]
		for(uint8_t i = 0;i<watchList.index;i++){
 8008536:	d1f8      	bne.n	800852a <monitor+0x1a>
			watchList.dmaBuffer[dma_i++] = value;
		}
		//HAL_UART_Transmit_IT(&huart1, (uint8_t*)(watchList.dmaBuffer), dma_i*4);
		hal_modbus_uart_tx((uint8_t*)(watchList.dmaBuffer), dma_i*4);
 8008538:	00e9      	lsls	r1, r5, #3
 800853a:	4805      	ldr	r0, [pc, #20]	; (8008550 <monitor+0x40>)
 800853c:	f401 717e 	and.w	r1, r1, #1016	; 0x3f8
}
 8008540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		hal_modbus_uart_tx((uint8_t*)(watchList.dmaBuffer), dma_i*4);
 8008544:	f7f8 b980 	b.w	8000848 <hal_modbus_uart_tx>
}
 8008548:	bd38      	pop	{r3, r4, r5, pc}
 800854a:	bf00      	nop
 800854c:	200006ec 	.word	0x200006ec
 8008550:	200006f8 	.word	0x200006f8

08008554 <__libc_init_array>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	4d0d      	ldr	r5, [pc, #52]	; (800858c <__libc_init_array+0x38>)
 8008558:	4c0d      	ldr	r4, [pc, #52]	; (8008590 <__libc_init_array+0x3c>)
 800855a:	1b64      	subs	r4, r4, r5
 800855c:	10a4      	asrs	r4, r4, #2
 800855e:	2600      	movs	r6, #0
 8008560:	42a6      	cmp	r6, r4
 8008562:	d109      	bne.n	8008578 <__libc_init_array+0x24>
 8008564:	4d0b      	ldr	r5, [pc, #44]	; (8008594 <__libc_init_array+0x40>)
 8008566:	4c0c      	ldr	r4, [pc, #48]	; (8008598 <__libc_init_array+0x44>)
 8008568:	f000 f82e 	bl	80085c8 <_init>
 800856c:	1b64      	subs	r4, r4, r5
 800856e:	10a4      	asrs	r4, r4, #2
 8008570:	2600      	movs	r6, #0
 8008572:	42a6      	cmp	r6, r4
 8008574:	d105      	bne.n	8008582 <__libc_init_array+0x2e>
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	f855 3b04 	ldr.w	r3, [r5], #4
 800857c:	4798      	blx	r3
 800857e:	3601      	adds	r6, #1
 8008580:	e7ee      	b.n	8008560 <__libc_init_array+0xc>
 8008582:	f855 3b04 	ldr.w	r3, [r5], #4
 8008586:	4798      	blx	r3
 8008588:	3601      	adds	r6, #1
 800858a:	e7f2      	b.n	8008572 <__libc_init_array+0x1e>
 800858c:	08008808 	.word	0x08008808
 8008590:	08008808 	.word	0x08008808
 8008594:	08008808 	.word	0x08008808
 8008598:	0800880c 	.word	0x0800880c

0800859c <memcpy>:
 800859c:	440a      	add	r2, r1
 800859e:	4291      	cmp	r1, r2
 80085a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80085a4:	d100      	bne.n	80085a8 <memcpy+0xc>
 80085a6:	4770      	bx	lr
 80085a8:	b510      	push	{r4, lr}
 80085aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085b2:	4291      	cmp	r1, r2
 80085b4:	d1f9      	bne.n	80085aa <memcpy+0xe>
 80085b6:	bd10      	pop	{r4, pc}

080085b8 <memset>:
 80085b8:	4402      	add	r2, r0
 80085ba:	4603      	mov	r3, r0
 80085bc:	4293      	cmp	r3, r2
 80085be:	d100      	bne.n	80085c2 <memset+0xa>
 80085c0:	4770      	bx	lr
 80085c2:	f803 1b01 	strb.w	r1, [r3], #1
 80085c6:	e7f9      	b.n	80085bc <memset+0x4>

080085c8 <_init>:
 80085c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ca:	bf00      	nop
 80085cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ce:	bc08      	pop	{r3}
 80085d0:	469e      	mov	lr, r3
 80085d2:	4770      	bx	lr

080085d4 <_fini>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	bf00      	nop
 80085d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085da:	bc08      	pop	{r3}
 80085dc:	469e      	mov	lr, r3
 80085de:	4770      	bx	lr
