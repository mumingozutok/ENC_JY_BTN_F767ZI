
LCD_Button_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009058  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08009250  08009250  00019250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009470  08009470  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009470  08009470  00019470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009478  08009478  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009478  08009478  00019478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800947c  0800947c  0001947c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  2000007c  080094fc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  080094fc  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001881d  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004851  00000000  00000000  000388c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  0003d118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  0003e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f99  00000000  00000000  0003fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c049  00000000  00000000  00069da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100c9b  00000000  00000000  00085dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00186a85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d14  00000000  00000000  00186ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000007c 	.word	0x2000007c
 8000214:	00000000 	.word	0x00000000
 8000218:	08009238 	.word	0x08009238

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000080 	.word	0x20000080
 8000234:	08009238 	.word	0x08009238

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <initiate_input_channels>:
static Digital_Channel outputChannel[3];

#define ANALOG_INPUT_CH_COUNT 2
static Analog_Input_Channel analog_input_channel[ANALOG_INPUT_CH_COUNT];

void initiate_input_channels(){
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	inputChannel[0].port = GPIOF;
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <initiate_input_channels+0x40>)
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <initiate_input_channels+0x44>)
 8000538:	601a      	str	r2, [r3, #0]
	inputChannel[0].pin = GPIO_PIN_3; //EXT3
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <initiate_input_channels+0x40>)
 800053c:	2208      	movs	r2, #8
 800053e:	605a      	str	r2, [r3, #4]

	inputChannel[1].port = GPIOF;
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <initiate_input_channels+0x40>)
 8000542:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <initiate_input_channels+0x44>)
 8000544:	609a      	str	r2, [r3, #8]
	inputChannel[1].pin = GPIO_PIN_5; //EXT5
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <initiate_input_channels+0x40>)
 8000548:	2220      	movs	r2, #32
 800054a:	60da      	str	r2, [r3, #12]

	inputChannel[2].port = GPIOF;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <initiate_input_channels+0x40>)
 800054e:	4a09      	ldr	r2, [pc, #36]	; (8000574 <initiate_input_channels+0x44>)
 8000550:	611a      	str	r2, [r3, #16]
	inputChannel[2].pin = GPIO_PIN_10; //EXT10
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <initiate_input_channels+0x40>)
 8000554:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000558:	615a      	str	r2, [r3, #20]

	inputChannel[3].port = GPIOA; //Joystick button
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <initiate_input_channels+0x40>)
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <initiate_input_channels+0x48>)
 800055e:	619a      	str	r2, [r3, #24]
	inputChannel[3].pin = GPIO_PIN_6; //EXT10
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <initiate_input_channels+0x40>)
 8000562:	2240      	movs	r2, #64	; 0x40
 8000564:	61da      	str	r2, [r3, #28]
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	20000098 	.word	0x20000098
 8000574:	40021400 	.word	0x40021400
 8000578:	40020000 	.word	0x40020000

0800057c <initiate_output_channels>:

void initiate_output_channels(){
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	outputChannel[0].port = GPIOF;
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <initiate_output_channels+0x34>)
 8000582:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <initiate_output_channels+0x38>)
 8000584:	601a      	str	r2, [r3, #0]
	outputChannel[0].pin = GPIO_PIN_0;
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <initiate_output_channels+0x34>)
 8000588:	2201      	movs	r2, #1
 800058a:	605a      	str	r2, [r3, #4]

	outputChannel[1].port = GPIOF;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <initiate_output_channels+0x34>)
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <initiate_output_channels+0x38>)
 8000590:	609a      	str	r2, [r3, #8]
	outputChannel[1].pin = GPIO_PIN_2;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <initiate_output_channels+0x34>)
 8000594:	2204      	movs	r2, #4
 8000596:	60da      	str	r2, [r3, #12]

	outputChannel[2].port = GPIOF;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <initiate_output_channels+0x34>)
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <initiate_output_channels+0x38>)
 800059c:	611a      	str	r2, [r3, #16]
	outputChannel[2].pin = GPIO_PIN_13;
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <initiate_output_channels+0x34>)
 80005a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a4:	615a      	str	r2, [r3, #20]
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	200000b8 	.word	0x200000b8
 80005b4:	40021400 	.word	0x40021400

080005b8 <initate_analog_channels>:

void initate_analog_channels(){
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	analog_input_channel[0].ai = &adc_info;
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <initate_analog_channels+0x28>)
 80005be:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <initate_analog_channels+0x2c>)
 80005c0:	605a      	str	r2, [r3, #4]
	analog_input_channel[0].data = 0;
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <initate_analog_channels+0x28>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	801a      	strh	r2, [r3, #0]

	analog_input_channel[1].ai = &adc_info;
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <initate_analog_channels+0x28>)
 80005ca:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <initate_analog_channels+0x2c>)
 80005cc:	60da      	str	r2, [r3, #12]
	analog_input_channel[1].data = 0;
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <initate_analog_channels+0x28>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	811a      	strh	r2, [r3, #8]

}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200000d0 	.word	0x200000d0
 80005e4:	20000000 	.word	0x20000000

080005e8 <hal_gpio_write_pin>:

uint8_t uart_rx_data;

//Leds are connected to: PF0-PF2-PF13
//Please write down GPIO output function in your hardware
void hal_gpio_write_pin(uint16_t chNum, uint8_t value){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	80fb      	strh	r3, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(outputChannel[chNum].port, outputChannel[chNum].pin, value);
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <hal_gpio_write_pin+0x38>)
 80005fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000600:	4618      	mov	r0, r3
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <hal_gpio_write_pin+0x38>)
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	4413      	add	r3, r2
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	b29b      	uxth	r3, r3
 800060e:	797a      	ldrb	r2, [r7, #5]
 8000610:	4619      	mov	r1, r3
 8000612:	f002 ff7d 	bl	8003510 <HAL_GPIO_WritePin>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000b8 	.word	0x200000b8

08000624 <hal_gpio_read_pin>:

uint8_t  hal_gpio_read_pin(uint32_t chNum){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	//return values >= 2, depicts error
	return HAL_GPIO_ReadPin(inputChannel[chNum].port, inputChannel[chNum].pin);
 800062c:	4a09      	ldr	r2, [pc, #36]	; (8000654 <hal_gpio_read_pin+0x30>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000634:	4618      	mov	r0, r3
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <hal_gpio_read_pin+0x30>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	00db      	lsls	r3, r3, #3
 800063c:	4413      	add	r3, r2
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	b29b      	uxth	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	f002 ff4c 	bl	80034e0 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0

}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000098 	.word	0x20000098

08000658 <hal_read_analog_ch>:

//------------------ADC readings with DMA---------------------------------------
uint32_t counter_hal_dma = 0, counter_dma_callback = 0;

uint32_t hal_read_analog_ch(uint32_t chNum){
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	Analog_Input_Channel* ch = &analog_input_channel[chNum];
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	4a11      	ldr	r2, [pc, #68]	; (80006ac <hal_read_analog_ch+0x54>)
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
	ADC_Info* ai = ch->ai;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60bb      	str	r3, [r7, #8]
	if(ai->ready_flag == 1){ //check for the conv finish
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d111      	bne.n	800069c <hal_read_analog_ch+0x44>
		//Start DMA controlled ADC single convertion
		//this adc is working on two channels IN3 and IN10
		//so there will be two channel value after one conversion
		ai->ready_flag = 0; //disable the flag to notify there is an ongoing process
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	2200      	movs	r2, #0
 800067c:	711a      	strb	r2, [r3, #4]
		HAL_ADC_Start_DMA(ai->adc, (uint32_t*) &ai->data, ai->ch_count);
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1d99      	adds	r1, r3, #6
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800068c:	461a      	mov	r2, r3
 800068e:	f001 f9bb 	bl	8001a08 <HAL_ADC_Start_DMA>
		counter_hal_dma++;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <hal_read_analog_ch+0x58>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <hal_read_analog_ch+0x58>)
 800069a:	6013      	str	r3, [r2, #0]
	}

	return analog_input_channel[chNum].data;
 800069c:	4a03      	ldr	r2, [pc, #12]	; (80006ac <hal_read_analog_ch+0x54>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000d0 	.word	0x200000d0
 80006b0:	200000e0 	.word	0x200000e0

080006b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	Analog_Input_Channel* ch;
	ADC_Info* ai;
	for(uint8_t i=0;i<ANALOG_INPUT_CH_COUNT;i++){
 80006bc:	2300      	movs	r3, #0
 80006be:	75fb      	strb	r3, [r7, #23]
 80006c0:	e01e      	b.n	8000700 <HAL_ADC_ConvCpltCallback+0x4c>
		ch = &analog_input_channel[i];
 80006c2:	7dfb      	ldrb	r3, [r7, #23]
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <HAL_ADC_ConvCpltCallback+0x60>)
 80006c8:	4413      	add	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
		ai = ch->ai;
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	60fb      	str	r3, [r7, #12]
		if(hadc == ai->adc){
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d10e      	bne.n	80006fa <HAL_ADC_ConvCpltCallback+0x46>
			ch->data = ai->data[i];
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	88da      	ldrh	r2, [r3, #6]
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	801a      	strh	r2, [r3, #0]
			ai->ready_flag = 1;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2201      	movs	r2, #1
 80006ee:	711a      	strb	r2, [r3, #4]
			counter_dma_callback++;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_ADC_ConvCpltCallback+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_ADC_ConvCpltCallback+0x64>)
 80006f8:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0;i<ANALOG_INPUT_CH_COUNT;i++){
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
 80006fc:	3301      	adds	r3, #1
 80006fe:	75fb      	strb	r3, [r7, #23]
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d9dd      	bls.n	80006c2 <HAL_ADC_ConvCpltCallback+0xe>
		}
	}
}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	371c      	adds	r7, #28
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	200000d0 	.word	0x200000d0
 8000718:	200000e4 	.word	0x200000e4

0800071c <hal_get_tick>:
//-------------------------------------------------------------------------------

//Please write down "get system tick" function in your hardware
uint32_t hal_get_tick(){
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000720:	f000 ffe0 	bl	80016e4 <HAL_GetTick>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	bd80      	pop	{r7, pc}

0800072a <hal_init_tick>:

void /*__attribute__((weak))*/ hal_init_tick(){
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
	HAL_InitTick(0);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 ff94 	bl	800165c <HAL_InitTick>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <init_comm_data_service>:

//Communication Channel Adaptation

//Please write down functions for your communication channel
//And put this function right after your initialisations
void init_comm_data_service(){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(ra.comm_huart, &uart_rx_data, 1);
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <init_comm_data_service+0x18>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	4904      	ldr	r1, [pc, #16]	; (8000754 <init_comm_data_service+0x1c>)
 8000744:	4618      	mov	r0, r3
 8000746:	f005 fa75 	bl	8005c34 <HAL_UART_Receive_IT>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000028 	.word	0x20000028
 8000754:	2000013c 	.word	0x2000013c

08000758 <init_comm_timing_service>:

//Please write down functions for communication timing services
//And put this function right after your initialisations
void init_comm_timing_service(){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(ra.comm_htim);
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <init_comm_timing_service+0x1c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f004 f8db 	bl	800491c <HAL_TIM_Base_Start_IT>
	stop_comm_timer(ra.comm_htim);
 8000766:	4b03      	ldr	r3, [pc, #12]	; (8000774 <init_comm_timing_service+0x1c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f822 	bl	80007b4 <stop_comm_timer>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000028 	.word	0x20000028

08000778 <start_comm_timer>:

void start_comm_timer(TIM_HandleTypeDef* htim){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f022 0201 	bic.w	r2, r2, #1
 800078e:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
	htim->Instance->CR1 |= 0x01; //Start Timer
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0201 	orr.w	r2, r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <stop_comm_timer>:

void stop_comm_timer(TIM_HandleTypeDef* htim){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f022 0201 	bic.w	r2, r2, #1
 80007ca:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2200      	movs	r2, #0
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <HAL_UART_RxCpltCallback>:

//Callbacks
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &uart_rx_data, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	4909      	ldr	r1, [pc, #36]	; (8000810 <HAL_UART_RxCpltCallback+0x30>)
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f005 fa21 	bl	8005c34 <HAL_UART_Receive_IT>
	start_comm_timer(ra.comm_htim);
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_UART_RxCpltCallback+0x34>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ffbe 	bl	8000778 <start_comm_timer>

	//When new data received copy this data to the runtime buffers
	Runtime_CommDataService_NewData_Received(0, &uart_rx_data, 1);
 80007fc:	2201      	movs	r2, #1
 80007fe:	4904      	ldr	r1, [pc, #16]	; (8000810 <HAL_UART_RxCpltCallback+0x30>)
 8000800:	2000      	movs	r0, #0
 8000802:	f006 fc35 	bl	8007070 <Runtime_CommDataService_NewData_Received>
	User_Callback_Function* ucf = get_ucf();
	if(ucf[MODBUS_UART_CALLBACK_FUNCTION_SLOT].f != 0){
		ucf[MODBUS_UART_CALLBACK_FUNCTION_SLOT].f(&uart_rx_data);
	}
	*/
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000013c 	.word	0x2000013c
 8000814:	20000028 	.word	0x20000028

08000818 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	if(htim == ra.comm_htim){
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	d107      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x22>
		stop_comm_timer(ra.comm_htim);
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ffc0 	bl	80007b4 <stop_comm_timer>

		//External trigger makes runtime to process data
		//This trigging is needed for Modbus (3.5 Char)
		Runtime_CommDataService_Process_DataBuffer(0);
 8000834:	2000      	movs	r0, #0
 8000836:	f006 fc46 	bl	80070c6 <Runtime_CommDataService_Process_DataBuffer>
	}
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000028 	.word	0x20000028

08000848 <hal_modbus_uart_tx>:

//Modbus UART Transmit Functions
void /*__attribute__((weak))*/ hal_modbus_uart_tx(uint8_t* pData, uint16_t Size){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(ra.comm_huart, pData, Size);
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <hal_modbus_uart_tx+0x24>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	887a      	ldrh	r2, [r7, #2]
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	4618      	mov	r0, r3
 800085e:	f005 f98d 	bl	8005b7c <HAL_UART_Transmit_IT>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000028 	.word	0x20000028

08000870 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <get_uniqueid>:

//-----------------------UNIQUE ID-----------------------------------------
void get_uniqueid(uint8_t* id, uint16_t len){
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	807b      	strh	r3, [r7, #2]
	uint32_t* buf = id;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	60fb      	str	r3, [r7, #12]
	buf[0] 	= (uint32_t) READ_REG(*((uint32_t *)UID_BASE));
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <get_uniqueid+0x38>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	601a      	str	r2, [r3, #0]
	buf[1] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x04U)));
 800089c:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <get_uniqueid+0x3c>)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3304      	adds	r3, #4
 80008a2:	6812      	ldr	r2, [r2, #0]
 80008a4:	601a      	str	r2, [r3, #0]
	buf[2] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x14U)));
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <get_uniqueid+0x40>)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3308      	adds	r3, #8
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	1ff0f420 	.word	0x1ff0f420
 80008c0:	1ff0f424 	.word	0x1ff0f424
 80008c4:	1ff0f434 	.word	0x1ff0f434

080008c8 <get_flash_memory_info>:


#define ADDR_FLASH_SECTOR_23     ((uint32_t)0x081E0000)
#define FLASH_MEMORY_SIZE (128*1024)

void get_flash_memory_info(uint32_t* start_addr, uint32_t* size){
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
	*start_addr = ADDR_FLASH_SECTOR_23;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a05      	ldr	r2, [pc, #20]	; (80008ec <get_flash_memory_info+0x24>)
 80008d6:	601a      	str	r2, [r3, #0]
	*size = FLASH_MEMORY_SIZE;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008de:	601a      	str	r2, [r3, #0]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	081e0000 	.word	0x081e0000

080008f0 <write_to_flash>:

uint8_t write_to_flash(uint8_t* p, uint32_t start_addr, uint16_t size)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	4613      	mov	r3, r2
 80008fc:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	757b      	strb	r3, [r7, #21]
	uint16_t i;
	uint32_t data;

	HAL_FLASH_Unlock();
 8000902:	f002 f9e1 	bl	8002cc8 <HAL_FLASH_Unlock>

	for (i = 0; i < size; i+=4) {
 8000906:	2300      	movs	r3, #0
 8000908:	82fb      	strh	r3, [r7, #22]
 800090a:	e01a      	b.n	8000942 <write_to_flash+0x52>
                data = *(uint32_t*)(p+i);
 800090c:	8afb      	ldrh	r3, [r7, #22]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	613b      	str	r3, [r7, #16]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_addr + i, data) == HAL_OK) ret = 1;
 8000916:	8afa      	ldrh	r2, [r7, #22]
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	18d1      	adds	r1, r2, r3
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	461a      	mov	r2, r3
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	2002      	movs	r0, #2
 8000926:	f002 f973 	bl	8002c10 <HAL_FLASH_Program>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <write_to_flash+0x46>
 8000930:	2301      	movs	r3, #1
 8000932:	757b      	strb	r3, [r7, #21]
 8000934:	e002      	b.n	800093c <write_to_flash+0x4c>
		else {
			ret = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	757b      	strb	r3, [r7, #21]
			break;
 800093a:	e006      	b.n	800094a <write_to_flash+0x5a>
	for (i = 0; i < size; i+=4) {
 800093c:	8afb      	ldrh	r3, [r7, #22]
 800093e:	3304      	adds	r3, #4
 8000940:	82fb      	strh	r3, [r7, #22]
 8000942:	8afa      	ldrh	r2, [r7, #22]
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	429a      	cmp	r2, r3
 8000948:	d3e0      	bcc.n	800090c <write_to_flash+0x1c>
		}
	}

	HAL_FLASH_Lock();
 800094a:	f002 f9df 	bl	8002d0c <HAL_FLASH_Lock>
}
 800094e:	bf00      	nop
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <erase_flash>:

uint8_t erase_flash(uint32_t start_addr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint32_t SectorError = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
    FLASH_EraseInitTypeDef EraseInitStruct;


	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 800096a:	f002 f9ad 	bl	8002cc8 <HAL_FLASH_Unlock>

	/* Erase the user Flash area
	(area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS         ;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors = 1;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.Sector = FLASH_SECTOR_23;
 8000976:	2317      	movs	r3, #23
 8000978:	617b      	str	r3, [r7, #20]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 800097a:	f107 0220 	add.w	r2, r7, #32
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fb01 	bl	8002f8c <HAL_FLASHEx_Erase>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d003      	beq.n	8000998 <erase_flash+0x40>
	{
		ret = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000996:	e002      	b.n	800099e <erase_flash+0x46>
	}

	else ret = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return ret;
 800099e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <initiate_runtime>:


void initiate_runtime()
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
	  init_comm_data_service();
 80009ae:	f7ff fec3 	bl	8000738 <init_comm_data_service>
	  init_comm_timing_service();
 80009b2:	f7ff fed1 	bl	8000758 <init_comm_timing_service>
	  initiate_input_channels();
 80009b6:	f7ff fdbb 	bl	8000530 <initiate_input_channels>
	  initiate_output_channels();
 80009ba:	f7ff fddf 	bl	800057c <initiate_output_channels>
	  initate_analog_channels();
 80009be:	f7ff fdfb 	bl	80005b8 <initate_analog_channels>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ca:	f000 fe3a 	bl	8001642 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ce:	f000 f815 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d2:	f000 fa8d 	bl	8000ef0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009d6:	f000 f8fd 	bl	8000bd4 <MX_SPI1_Init>
  MX_DMA_Init();
 80009da:	f000 fa6b 	bl	8000eb4 <MX_DMA_Init>
  MX_ADC1_Init();
 80009de:	f000 f899 	bl	8000b14 <MX_ADC1_Init>
  MX_TIM4_Init();
 80009e2:	f000 f989 	bl	8000cf8 <MX_TIM4_Init>
  MX_UART7_Init();
 80009e6:	f000 fa35 	bl	8000e54 <MX_UART7_Init>
  MX_TIM6_Init();
 80009ea:	f000 f9fd 	bl	8000de8 <MX_TIM6_Init>
  MX_TIM2_Init();
 80009ee:	f000 f92f 	bl	8000c50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  initiate_runtime();
 80009f2:	f7ff ffda 	bl	80009aa <initiate_runtime>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  mcCore_SM();
 80009f6:	f006 fa1f 	bl	8006e38 <mcCore_SM>
 80009fa:	e7fc      	b.n	80009f6 <main+0x30>

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b0b8      	sub	sp, #224	; 0xe0
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a06:	2234      	movs	r2, #52	; 0x34
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f008 fc0c 	bl	8009228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	2290      	movs	r2, #144	; 0x90
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f008 fbfd 	bl	8009228 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <SystemClock_Config+0x110>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a36      	ldr	r2, [pc, #216]	; (8000b0c <SystemClock_Config+0x110>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <SystemClock_Config+0x110>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a46:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <SystemClock_Config+0x114>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a4e:	4a30      	ldr	r2, [pc, #192]	; (8000b10 <SystemClock_Config+0x114>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <SystemClock_Config+0x114>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a62:	2302      	movs	r3, #2
 8000a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6e:	2310      	movs	r3, #16
 8000a70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a74:	2302      	movs	r3, #2
 8000a76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a80:	2308      	movs	r3, #8
 8000a82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000a86:	2390      	movs	r3, #144	; 0x90
 8000a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fd8f 	bl	80035c0 <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000aa8:	f000 fb22 	bl	80010f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aac:	230f      	movs	r3, #15
 8000aae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ace:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 f821 	bl	8003b1c <HAL_RCC_ClockConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000ae0:	f000 fb06 	bl	80010f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 f9e8 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000afe:	f000 faf7 	bl	80010f0 <Error_Handler>
  }
}
 8000b02:	bf00      	nop
 8000b04:	37e0      	adds	r7, #224	; 0xe0
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000

08000b14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b26:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b28:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <MX_ADC1_Init+0xb8>)
 8000b2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b32:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b38:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b3e:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b54:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <MX_ADC1_Init+0xbc>)
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b72:	4815      	ldr	r0, [pc, #84]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b74:	f000 fdc2 	bl	80016fc <HAL_ADC_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b7e:	f000 fab7 	bl	80010f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b82:	2303      	movs	r3, #3
 8000b84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4619      	mov	r1, r3
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000b94:	f001 f850 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b9e:	f000 faa7 	bl	80010f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000baa:	463b      	mov	r3, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <MX_ADC1_Init+0xb4>)
 8000bb0:	f001 f842 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000bba:	f000 fa99 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000260 	.word	0x20000260
 8000bcc:	40012000 	.word	0x40012000
 8000bd0:	0f000001 	.word	0x0f000001

08000bd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <MX_SPI1_Init+0x78>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000be0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000be8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000bf0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bf4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c30:	2208      	movs	r2, #8
 8000c32:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c36:	f003 fd6f 	bl	8004718 <HAL_SPI_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000c40:	f000 fa56 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000358 	.word	0x20000358
 8000c4c:	40013000 	.word	0x40013000

08000c50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	2224      	movs	r2, #36	; 0x24
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f008 fae2 	bl	8009228 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <MX_TIM2_Init+0xa4>)
 8000c70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_TIM2_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_TIM2_Init+0xa4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_TIM2_Init+0xa4>)
 8000c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_TIM2_Init+0xa4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_TIM2_Init+0xa4>)
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c96:	2303      	movs	r3, #3
 8000c98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000ca6:	230a      	movs	r3, #10
 8000ca8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <MX_TIM2_Init+0xa4>)
 8000cc2:	f003 ff05 	bl	8004ad0 <HAL_TIM_Encoder_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ccc:	f000 fa10 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd8:	463b      	mov	r3, r7
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_TIM2_Init+0xa4>)
 8000cde:	f004 fe53 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000ce8:	f000 fa02 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3730      	adds	r7, #48	; 0x30
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200003bc 	.word	0x200003bc

08000cf8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
 8000d26:	615a      	str	r2, [r3, #20]
 8000d28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <MX_TIM4_Init+0xe8>)
 8000d2c:	4a2d      	ldr	r2, [pc, #180]	; (8000de4 <MX_TIM4_Init+0xec>)
 8000d2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <MX_TIM4_Init+0xe8>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <MX_TIM4_Init+0xe8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 360;
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <MX_TIM4_Init+0xe8>)
 8000d3e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000d42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <MX_TIM4_Init+0xe8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <MX_TIM4_Init+0xe8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d50:	4823      	ldr	r0, [pc, #140]	; (8000de0 <MX_TIM4_Init+0xe8>)
 8000d52:	f003 fd8c 	bl	800486e <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d5c:	f000 f9c8 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	481c      	ldr	r0, [pc, #112]	; (8000de0 <MX_TIM4_Init+0xe8>)
 8000d6e:	f004 f985 	bl	800507c <HAL_TIM_ConfigClockSource>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d78:	f000 f9ba 	bl	80010f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d7c:	4818      	ldr	r0, [pc, #96]	; (8000de0 <MX_TIM4_Init+0xe8>)
 8000d7e:	f003 fe45 	bl	8004a0c <HAL_TIM_PWM_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d88:	f000 f9b2 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4811      	ldr	r0, [pc, #68]	; (8000de0 <MX_TIM4_Init+0xe8>)
 8000d9c:	f004 fdf4 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000da6:	f000 f9a3 	bl	80010f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000daa:	2360      	movs	r3, #96	; 0x60
 8000dac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <MX_TIM4_Init+0xe8>)
 8000dc2:	f004 f84b 	bl	8004e5c <HAL_TIM_PWM_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000dcc:	f000 f990 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <MX_TIM4_Init+0xe8>)
 8000dd2:	f000 fb13 	bl	80013fc <HAL_TIM_MspPostInit>

}
 8000dd6:	bf00      	nop
 8000dd8:	3738      	adds	r7, #56	; 0x38
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200001c4 	.word	0x200001c4
 8000de4:	40000800 	.word	0x40000800

08000de8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000dfa:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000e0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000e1a:	f003 fd28 	bl	800486e <HAL_TIM_Base_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e24:	f000 f964 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000e36:	f004 fda7 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e40:	f000 f956 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000030c 	.word	0x2000030c
 8000e50:	40001000 	.word	0x40001000

08000e54 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_UART7_Init+0x58>)
 8000e5a:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <MX_UART7_Init+0x5c>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <MX_UART7_Init+0x58>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_UART7_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_UART7_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_UART7_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_UART7_Init+0x58>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_UART7_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_UART7_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_UART7_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_UART7_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_UART7_Init+0x58>)
 8000e98:	f004 fe22 	bl	8005ae0 <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000ea2:	f000 f925 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000140 	.word	0x20000140
 8000eb0:	40007800 	.word	0x40007800

08000eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_DMA_Init+0x38>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <MX_DMA_Init+0x38>)
 8000ec0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_DMA_Init+0x38>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2038      	movs	r0, #56	; 0x38
 8000ed8:	f001 fa59 	bl	800238e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000edc:	2038      	movs	r0, #56	; 0x38
 8000ede:	f001 fa72 	bl	80023c6 <HAL_NVIC_EnableIRQ>

}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f06:	4b72      	ldr	r3, [pc, #456]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a71      	ldr	r2, [pc, #452]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f0c:	f043 0320 	orr.w	r3, r3, #32
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b6f      	ldr	r3, [pc, #444]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	4b6c      	ldr	r3, [pc, #432]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a6b      	ldr	r2, [pc, #428]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b69      	ldr	r3, [pc, #420]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4b66      	ldr	r3, [pc, #408]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a65      	ldr	r2, [pc, #404]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b60      	ldr	r3, [pc, #384]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a5f      	ldr	r2, [pc, #380]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b5d      	ldr	r3, [pc, #372]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b5a      	ldr	r3, [pc, #360]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a59      	ldr	r2, [pc, #356]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7e:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a53      	ldr	r2, [pc, #332]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LD4_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f242 0105 	movw	r1, #8197	; 0x2005
 8000f9c:	484d      	ldr	r0, [pc, #308]	; (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f9e:	f002 fab7 	bl	8003510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	484c      	ldr	r0, [pc, #304]	; (80010d8 <MX_GPIO_Init+0x1e8>)
 8000fa8:	f002 fab2 	bl	8003510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fb2:	484a      	ldr	r0, [pc, #296]	; (80010dc <MX_GPIO_Init+0x1ec>)
 8000fb4:	f002 faac 	bl	8003510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000fbe:	4848      	ldr	r0, [pc, #288]	; (80010e0 <MX_GPIO_Init+0x1f0>)
 8000fc0:	f002 faa6 	bl	8003510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD5_Pin|LD6_Pin;
 8000fc4:	f242 0305 	movw	r3, #8197	; 0x2005
 8000fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	4619      	mov	r1, r3
 8000fdc:	483d      	ldr	r0, [pc, #244]	; (80010d4 <MX_GPIO_Init+0x1e4>)
 8000fde:	f002 f8d3 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF5 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10;
 8000fe2:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8000fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4837      	ldr	r0, [pc, #220]	; (80010d4 <MX_GPIO_Init+0x1e4>)
 8000ff8:	f002 f8c6 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ffc:	2310      	movs	r3, #16
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4831      	ldr	r0, [pc, #196]	; (80010d8 <MX_GPIO_Init+0x1e8>)
 8001014:	f002 f8b8 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pin : Joystick_Button_Pin */
  GPIO_InitStruct.Pin = Joystick_Button_Pin;
 8001018:	2340      	movs	r3, #64	; 0x40
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <MX_GPIO_Init+0x1f4>)
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001020:	2301      	movs	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Joystick_Button_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	482b      	ldr	r0, [pc, #172]	; (80010d8 <MX_GPIO_Init+0x1e8>)
 800102c:	f002 f8ac 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001030:	f244 0381 	movw	r3, #16513	; 0x4081
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	4824      	ldr	r0, [pc, #144]	; (80010dc <MX_GPIO_Init+0x1ec>)
 800104a:	f002 f89d 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 800104e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_GPIO_Init+0x1f8>)
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	4822      	ldr	r0, [pc, #136]	; (80010ec <MX_GPIO_Init+0x1fc>)
 8001064:	f002 f890 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_GPIO_Init+0x1f4>)
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	481c      	ldr	r0, [pc, #112]	; (80010ec <MX_GPIO_Init+0x1fc>)
 800107c:	f002 f884 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Key1_Pin LCD_Key2_Pin LCD_Key3_Pin LCD_Key0_Pin */
  GPIO_InitStruct.Pin = LCD_Key1_Pin|LCD_Key2_Pin|LCD_Key3_Pin|LCD_Key0_Pin;
 8001080:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108a:	2301      	movs	r3, #1
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	4812      	ldr	r0, [pc, #72]	; (80010e0 <MX_GPIO_Init+0x1f0>)
 8001096:	f002 f877 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800109a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	480b      	ldr	r0, [pc, #44]	; (80010e0 <MX_GPIO_Init+0x1f0>)
 80010b4:	f002 f868 	bl	8003188 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2017      	movs	r0, #23
 80010be:	f001 f966 	bl	800238e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010c2:	2017      	movs	r0, #23
 80010c4:	f001 f97f 	bl	80023c6 <HAL_NVIC_EnableIRQ>

}
 80010c8:	bf00      	nop
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40021400 	.word	0x40021400
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40020800 	.word	0x40020800
 80010e4:	10210000 	.word	0x10210000
 80010e8:	10310000 	.word	0x10310000
 80010ec:	40021800 	.word	0x40021800

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80010f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010fc:	4801      	ldr	r0, [pc, #4]	; (8001104 <Error_Handler+0x14>)
 80010fe:	f002 fa20 	bl	8003542 <HAL_GPIO_TogglePin>
 8001102:	e7f9      	b.n	80010f8 <Error_Handler+0x8>
 8001104:	40020400 	.word	0x40020400

08001108 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_MspInit+0x44>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <HAL_MspInit+0x44>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_MspInit+0x44>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_MspInit+0x44>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <HAL_MspInit+0x44>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_MspInit+0x44>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a3d      	ldr	r2, [pc, #244]	; (8001264 <HAL_ADC_MspInit+0x114>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d173      	bne.n	800125a <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001172:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <HAL_ADC_MspInit+0x118>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a3c      	ldr	r2, [pc, #240]	; (8001268 <HAL_ADC_MspInit+0x118>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <HAL_ADC_MspInit+0x118>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	4b37      	ldr	r3, [pc, #220]	; (8001268 <HAL_ADC_MspInit+0x118>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a36      	ldr	r2, [pc, #216]	; (8001268 <HAL_ADC_MspInit+0x118>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b34      	ldr	r3, [pc, #208]	; (8001268 <HAL_ADC_MspInit+0x118>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	4b31      	ldr	r3, [pc, #196]	; (8001268 <HAL_ADC_MspInit+0x118>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a30      	ldr	r2, [pc, #192]	; (8001268 <HAL_ADC_MspInit+0x118>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <HAL_ADC_MspInit+0x118>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ba:	2301      	movs	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011be:	2303      	movs	r3, #3
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4827      	ldr	r0, [pc, #156]	; (800126c <HAL_ADC_MspInit+0x11c>)
 80011ce:	f001 ffdb 	bl	8003188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011d2:	2308      	movs	r3, #8
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d6:	2303      	movs	r3, #3
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4822      	ldr	r0, [pc, #136]	; (8001270 <HAL_ADC_MspInit+0x120>)
 80011e6:	f001 ffcf 	bl	8003188 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <HAL_ADC_MspInit+0x124>)
 80011ec:	4a22      	ldr	r2, [pc, #136]	; (8001278 <HAL_ADC_MspInit+0x128>)
 80011ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <HAL_ADC_MspInit+0x124>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HAL_ADC_MspInit+0x124>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_ADC_MspInit+0x124>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_ADC_MspInit+0x124>)
 8001204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001208:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HAL_ADC_MspInit+0x124>)
 800120c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001210:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_ADC_MspInit+0x124>)
 8001214:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001218:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_ADC_MspInit+0x124>)
 800121c:	2200      	movs	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_ADC_MspInit+0x124>)
 8001222:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001226:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_ADC_MspInit+0x124>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800122e:	4811      	ldr	r0, [pc, #68]	; (8001274 <HAL_ADC_MspInit+0x124>)
 8001230:	f001 f8e4 	bl	80023fc <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800123a:	f7ff ff59 	bl	80010f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <HAL_ADC_MspInit+0x124>)
 8001242:	639a      	str	r2, [r3, #56]	; 0x38
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_ADC_MspInit+0x124>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	2012      	movs	r0, #18
 8001250:	f001 f89d 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001254:	2012      	movs	r0, #18
 8001256:	f001 f8b6 	bl	80023c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40012000 	.word	0x40012000
 8001268:	40023800 	.word	0x40023800
 800126c:	40020800 	.word	0x40020800
 8001270:	40020000 	.word	0x40020000
 8001274:	200002ac 	.word	0x200002ac
 8001278:	40026410 	.word	0x40026410

0800127c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <HAL_SPI_MspInit+0x7c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d127      	bne.n	80012ee <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_SPI_MspInit+0x80>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <HAL_SPI_MspInit+0x80>)
 80012a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_SPI_MspInit+0x80>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_SPI_MspInit+0x80>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_SPI_MspInit+0x80>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_SPI_MspInit+0x80>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012ce:	23a0      	movs	r3, #160	; 0xa0
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012de:	2305      	movs	r3, #5
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_SPI_MspInit+0x84>)
 80012ea:	f001 ff4d 	bl	8003188 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40013000 	.word	0x40013000
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000

08001304 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001324:	d127      	bne.n	8001376 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a15      	ldr	r2, [pc, #84]	; (8001380 <HAL_TIM_Encoder_MspInit+0x7c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_TIM_Encoder_MspInit+0x7c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001356:	2303      	movs	r3, #3
 8001358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001366:	2301      	movs	r3, #1
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <HAL_TIM_Encoder_MspInit+0x80>)
 8001372:	f001 ff09 	bl	8003188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40020000 	.word	0x40020000

08001388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <HAL_TIM_Base_MspInit+0x68>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d10c      	bne.n	80013b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_TIM_Base_MspInit+0x6c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <HAL_TIM_Base_MspInit+0x6c>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_TIM_Base_MspInit+0x6c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80013b2:	e018      	b.n	80013e6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <HAL_TIM_Base_MspInit+0x70>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d113      	bne.n	80013e6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_TIM_Base_MspInit+0x6c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a0c      	ldr	r2, [pc, #48]	; (80013f4 <HAL_TIM_Base_MspInit+0x6c>)
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_TIM_Base_MspInit+0x6c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2036      	movs	r0, #54	; 0x36
 80013dc:	f000 ffd7 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013e0:	2036      	movs	r0, #54	; 0x36
 80013e2:	f000 fff0 	bl	80023c6 <HAL_NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40000800 	.word	0x40000800
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40001000 	.word	0x40001000

080013fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_TIM_MspPostInit+0x64>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d11b      	bne.n	8001456 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_TIM_MspPostInit+0x68>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a10      	ldr	r2, [pc, #64]	; (8001464 <HAL_TIM_MspPostInit+0x68>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_TIM_MspPostInit+0x68>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = LCD_BackLight_Pin;
 8001436:	2340      	movs	r3, #64	; 0x40
 8001438:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001446:	2302      	movs	r3, #2
 8001448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BackLight_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_TIM_MspPostInit+0x6c>)
 8001452:	f001 fe99 	bl	8003188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40000800 	.word	0x40000800
 8001464:	40023800 	.word	0x40023800
 8001468:	40020400 	.word	0x40020400

0800146c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <HAL_UART_MspInit+0x8c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d12f      	bne.n	80014ee <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_UART_MspInit+0x90>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <HAL_UART_MspInit+0x90>)
 8001494:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_UART_MspInit+0x90>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_UART_MspInit+0x90>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a14      	ldr	r2, [pc, #80]	; (80014fc <HAL_UART_MspInit+0x90>)
 80014ac:	f043 0320 	orr.w	r3, r3, #32
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_UART_MspInit+0x90>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0320 	and.w	r3, r3, #32
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014be:	23c0      	movs	r3, #192	; 0xc0
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80014ce:	2308      	movs	r3, #8
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <HAL_UART_MspInit+0x94>)
 80014da:	f001 fe55 	bl	8003188 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2052      	movs	r0, #82	; 0x52
 80014e4:	f000 ff53 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80014e8:	2052      	movs	r0, #82	; 0x52
 80014ea:	f000 ff6c 	bl	80023c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40007800 	.word	0x40007800
 80014fc:	40023800 	.word	0x40023800
 8001500:	40021400 	.word	0x40021400

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler+0x4>

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <MemManage_Handler+0x4>

08001516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler+0x4>

08001522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001550:	f000 f8b4 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <ADC_IRQHandler+0x10>)
 800155e:	f000 f911 	bl	8001784 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000260 	.word	0x20000260

0800156c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001570:	2020      	movs	r0, #32
 8001572:	f002 f801 	bl	8003578 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001576:	2040      	movs	r0, #64	; 0x40
 8001578:	f001 fffe 	bl	8003578 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800157c:	2080      	movs	r0, #128	; 0x80
 800157e:	f001 fffb 	bl	8003578 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001582:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001586:	f001 fff7 	bl	8003578 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM6_DAC_IRQHandler+0x10>)
 8001596:	f003 fb41 	bl	8004c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000030c 	.word	0x2000030c

080015a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <DMA2_Stream0_IRQHandler+0x10>)
 80015aa:	f001 f8c7 	bl	800273c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002ac 	.word	0x200002ac

080015b8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <UART7_IRQHandler+0x10>)
 80015be:	f004 fb77 	bl	8005cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000140 	.word	0x20000140

080015cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <SystemInit+0x20>)
 80015d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <SystemInit+0x20>)
 80015d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015f6:	490e      	ldr	r1, [pc, #56]	; (8001630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f8:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800160c:	4c0b      	ldr	r4, [pc, #44]	; (800163c <LoopFillZerobss+0x26>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800161a:	f7ff ffd7 	bl	80015cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161e:	f007 fdd1 	bl	80091c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7ff f9d0 	bl	80009c6 <main>
  bx  lr    
 8001626:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001628:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001634:	08009480 	.word	0x08009480
  ldr r2, =_sbss
 8001638:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800163c:	20000a20 	.word	0x20000a20

08001640 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <CAN1_RX0_IRQHandler>

08001642 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001646:	2003      	movs	r0, #3
 8001648:	f000 fe96 	bl	8002378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164c:	2000      	movs	r0, #0
 800164e:	f000 f805 	bl	800165c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001652:	f7ff fd59 	bl	8001108 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 feb1 	bl	80023e2 <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 fe79 	bl	800238e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000030 	.word	0x20000030
 80016b4:	20000038 	.word	0x20000038
 80016b8:	20000034 	.word	0x20000034

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000038 	.word	0x20000038
 80016e0:	20000408 	.word	0x20000408

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000408 	.word	0x20000408

080016fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e031      	b.n	8001776 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fd18 	bl	8001150 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	d116      	bne.n	8001768 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_ADC_Init+0x84>)
 8001740:	4013      	ands	r3, r2
 8001742:	f043 0202 	orr.w	r2, r3, #2
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fbbe 	bl	8001ecc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f023 0303 	bic.w	r3, r3, #3
 800175e:	f043 0201 	orr.w	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
 8001766:	e001      	b.n	800176c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	ffffeefd 	.word	0xffffeefd

08001784 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b02      	cmp	r3, #2
 80017a0:	bf0c      	ite	eq
 80017a2:	2301      	moveq	r3, #1
 80017a4:	2300      	movne	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0320 	and.w	r3, r3, #32
 80017b4:	2b20      	cmp	r3, #32
 80017b6:	bf0c      	ite	eq
 80017b8:	2301      	moveq	r3, #1
 80017ba:	2300      	movne	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d049      	beq.n	800185a <HAL_ADC_IRQHandler+0xd6>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d046      	beq.n	800185a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d12b      	bne.n	800184a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d127      	bne.n	800184a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001812:	2b00      	cmp	r3, #0
 8001814:	d119      	bne.n	800184a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0220 	bic.w	r2, r2, #32
 8001824:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d105      	bne.n	800184a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7fe ff32 	bl	80006b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0212 	mvn.w	r2, #18
 8001858:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b04      	cmp	r3, #4
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187a:	2b80      	cmp	r3, #128	; 0x80
 800187c:	bf0c      	ite	eq
 800187e:	2301      	moveq	r3, #1
 8001880:	2300      	movne	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d057      	beq.n	800193c <HAL_ADC_IRQHandler+0x1b8>
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d054      	beq.n	800193c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d139      	bne.n	800192c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d12b      	bne.n	800192c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d124      	bne.n	800192c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d11d      	bne.n	800192c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d119      	bne.n	800192c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001906:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f043 0201 	orr.w	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 fc49 	bl	80021c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f06f 020c 	mvn.w	r2, #12
 800193a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b01      	cmp	r3, #1
 8001948:	bf0c      	ite	eq
 800194a:	2301      	moveq	r3, #1
 800194c:	2300      	movne	r3, #0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195c:	2b40      	cmp	r3, #64	; 0x40
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d017      	beq.n	800199e <HAL_ADC_IRQHandler+0x21a>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d014      	beq.n	800199e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b01      	cmp	r3, #1
 8001980:	d10d      	bne.n	800199e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f93e 	bl	8001c10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f06f 0201 	mvn.w	r2, #1
 800199c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	2b20      	cmp	r3, #32
 80019aa:	bf0c      	ite	eq
 80019ac:	2301      	moveq	r3, #1
 80019ae:	2300      	movne	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d015      	beq.n	80019fe <HAL_ADC_IRQHandler+0x27a>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d012      	beq.n	80019fe <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	f043 0202 	orr.w	r2, r3, #2
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0220 	mvn.w	r2, #32
 80019ec:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f918 	bl	8001c24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f06f 0220 	mvn.w	r2, #32
 80019fc:	601a      	str	r2, [r3, #0]
  }
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Start_DMA+0x1e>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e0d4      	b.n	8001bd0 <HAL_ADC_Start_DMA+0x1c8>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d018      	beq.n	8001a6e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a4c:	4b62      	ldr	r3, [pc, #392]	; (8001bd8 <HAL_ADC_Start_DMA+0x1d0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a62      	ldr	r2, [pc, #392]	; (8001bdc <HAL_ADC_Start_DMA+0x1d4>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0c9a      	lsrs	r2, r3, #18
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001a60:	e002      	b.n	8001a68 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f9      	bne.n	8001a62 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	f040 809c 	bne.w	8001bb6 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a82:	4b57      	ldr	r3, [pc, #348]	; (8001be0 <HAL_ADC_Start_DMA+0x1d8>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aa4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ab8:	d106      	bne.n	8001ac8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f023 0206 	bic.w	r2, r3, #6
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
 8001ac6:	e002      	b.n	8001ace <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	4a42      	ldr	r2, [pc, #264]	; (8001be4 <HAL_ADC_Start_DMA+0x1dc>)
 8001adc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae2:	4a41      	ldr	r2, [pc, #260]	; (8001be8 <HAL_ADC_Start_DMA+0x1e0>)
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aea:	4a40      	ldr	r2, [pc, #256]	; (8001bec <HAL_ADC_Start_DMA+0x1e4>)
 8001aec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001af6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b06:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b16:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	334c      	adds	r3, #76	; 0x4c
 8001b22:	4619      	mov	r1, r3
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f000 fd16 	bl	8002558 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_ADC_Start_DMA+0x1e8>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10f      	bne.n	8001b58 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d143      	bne.n	8001bce <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	e03a      	b.n	8001bce <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_ADC_Start_DMA+0x1ec>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d10e      	bne.n	8001b80 <HAL_ADC_Start_DMA+0x178>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d107      	bne.n	8001b80 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b7e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_ADC_Start_DMA+0x1e8>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d120      	bne.n	8001bce <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <HAL_ADC_Start_DMA+0x1f0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d11b      	bne.n	8001bce <HAL_ADC_Start_DMA+0x1c6>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d114      	bne.n	8001bce <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	e00b      	b.n	8001bce <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f043 0210 	orr.w	r2, r3, #16
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000030 	.word	0x20000030
 8001bdc:	431bde83 	.word	0x431bde83
 8001be0:	fffff8fe 	.word	0xfffff8fe
 8001be4:	080020c1 	.word	0x080020c1
 8001be8:	0800217b 	.word	0x0800217b
 8001bec:	08002197 	.word	0x08002197
 8001bf0:	40012300 	.word	0x40012300
 8001bf4:	40012000 	.word	0x40012000
 8001bf8:	40012200 	.word	0x40012200

08001bfc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1c>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e12a      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x272>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b09      	cmp	r3, #9
 8001c62:	d93a      	bls.n	8001cda <HAL_ADC_ConfigChannel+0xa2>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c6c:	d035      	beq.n	8001cda <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68d9      	ldr	r1, [r3, #12]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	3b1e      	subs	r3, #30
 8001c84:	2207      	movs	r2, #7
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	400a      	ands	r2, r1
 8001c92:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a87      	ldr	r2, [pc, #540]	; (8001eb8 <HAL_ADC_ConfigChannel+0x280>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10a      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68d9      	ldr	r1, [r3, #12]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	061a      	lsls	r2, r3, #24
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb2:	e035      	b.n	8001d20 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68d9      	ldr	r1, [r3, #12]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4403      	add	r3, r0
 8001ccc:	3b1e      	subs	r3, #30
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cd8:	e022      	b.n	8001d20 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6919      	ldr	r1, [r3, #16]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	2207      	movs	r2, #7
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6919      	ldr	r1, [r3, #16]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	4603      	mov	r3, r0
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4403      	add	r3, r0
 8001d16:	409a      	lsls	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b06      	cmp	r3, #6
 8001d26:	d824      	bhi.n	8001d72 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	3b05      	subs	r3, #5
 8001d3a:	221f      	movs	r2, #31
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43da      	mvns	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	400a      	ands	r2, r1
 8001d48:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	3b05      	subs	r3, #5
 8001d64:	fa00 f203 	lsl.w	r2, r0, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d70:	e04c      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d824      	bhi.n	8001dc4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b23      	subs	r3, #35	; 0x23
 8001d8c:	221f      	movs	r2, #31
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	400a      	ands	r2, r1
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	3b23      	subs	r3, #35	; 0x23
 8001db6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc2:	e023      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3b41      	subs	r3, #65	; 0x41
 8001dd6:	221f      	movs	r2, #31
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	400a      	ands	r2, r1
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3b41      	subs	r3, #65	; 0x41
 8001e00:	fa00 f203 	lsl.w	r2, r0, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2a      	ldr	r2, [pc, #168]	; (8001ebc <HAL_ADC_ConfigChannel+0x284>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d10a      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1f4>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e1e:	d105      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_ADC_ConfigChannel+0x288>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <HAL_ADC_ConfigChannel+0x288>)
 8001e26:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e2a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <HAL_ADC_ConfigChannel+0x284>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d109      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x212>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b12      	cmp	r3, #18
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_ADC_ConfigChannel+0x288>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <HAL_ADC_ConfigChannel+0x288>)
 8001e44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e48:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <HAL_ADC_ConfigChannel+0x284>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d125      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x268>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <HAL_ADC_ConfigChannel+0x280>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d003      	beq.n	8001e66 <HAL_ADC_ConfigChannel+0x22e>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b11      	cmp	r3, #17
 8001e64:	d11c      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_ADC_ConfigChannel+0x288>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <HAL_ADC_ConfigChannel+0x288>)
 8001e6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e70:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <HAL_ADC_ConfigChannel+0x280>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d111      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_ADC_ConfigChannel+0x28c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a11      	ldr	r2, [pc, #68]	; (8001ec8 <HAL_ADC_ConfigChannel+0x290>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	0c9a      	lsrs	r2, r3, #18
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e92:	e002      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f9      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	10000012 	.word	0x10000012
 8001ebc:	40012000 	.word	0x40012000
 8001ec0:	40012300 	.word	0x40012300
 8001ec4:	20000030 	.word	0x20000030
 8001ec8:	431bde83 	.word	0x431bde83

08001ecc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001ed4:	4b78      	ldr	r3, [pc, #480]	; (80020b8 <ADC_Init+0x1ec>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a77      	ldr	r2, [pc, #476]	; (80020b8 <ADC_Init+0x1ec>)
 8001eda:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ede:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ee0:	4b75      	ldr	r3, [pc, #468]	; (80020b8 <ADC_Init+0x1ec>)
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4973      	ldr	r1, [pc, #460]	; (80020b8 <ADC_Init+0x1ec>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001efc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	021a      	lsls	r2, r3, #8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	4a58      	ldr	r2, [pc, #352]	; (80020bc <ADC_Init+0x1f0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d022      	beq.n	8001fa6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6899      	ldr	r1, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6899      	ldr	r1, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	e00f      	b.n	8001fc6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0202 	bic.w	r2, r2, #2
 8001fd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6899      	ldr	r1, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	005a      	lsls	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01b      	beq.n	800202c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002002:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002012:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6859      	ldr	r1, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	3b01      	subs	r3, #1
 8002020:	035a      	lsls	r2, r3, #13
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	e007      	b.n	800203c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800203a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	3b01      	subs	r3, #1
 8002058:	051a      	lsls	r2, r3, #20
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800207e:	025a      	lsls	r2, r3, #9
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	029a      	lsls	r2, r3, #10
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	609a      	str	r2, [r3, #8]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40012300 	.word	0x40012300
 80020bc:	0f000001 	.word	0x0f000001

080020c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d13c      	bne.n	8002154 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d12b      	bne.n	800214c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d127      	bne.n	800214c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002114:	2b00      	cmp	r3, #0
 8002116:	d119      	bne.n	800214c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0220 	bic.w	r2, r2, #32
 8002126:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f7fe fab1 	bl	80006b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002152:	e00e      	b.n	8002172 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f7ff fd5f 	bl	8001c24 <HAL_ADC_ErrorCallback>
}
 8002166:	e004      	b.n	8002172 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff fd37 	bl	8001bfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2240      	movs	r2, #64	; 0x40
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f043 0204 	orr.w	r2, r3, #4
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f7ff fd34 	bl	8001c24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <__NVIC_SetPriorityGrouping+0x40>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f4:	4013      	ands	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <__NVIC_SetPriorityGrouping+0x44>)
 8002202:	4313      	orrs	r3, r2
 8002204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002206:	4a04      	ldr	r2, [pc, #16]	; (8002218 <__NVIC_SetPriorityGrouping+0x40>)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	60d3      	str	r3, [r2, #12]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00
 800221c:	05fa0000 	.word	0x05fa0000

08002220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <__NVIC_GetPriorityGrouping+0x18>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	f003 0307 	and.w	r3, r3, #7
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	db0b      	blt.n	8002266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	4907      	ldr	r1, [pc, #28]	; (8002274 <__NVIC_EnableIRQ+0x38>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2001      	movs	r0, #1
 800225e:	fa00 f202 	lsl.w	r2, r0, r2
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000e100 	.word	0xe000e100

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	; (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002344:	d301      	bcc.n	800234a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002346:	2301      	movs	r3, #1
 8002348:	e00f      	b.n	800236a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <SysTick_Config+0x40>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002352:	210f      	movs	r1, #15
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f7ff ff8e 	bl	8002278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <SysTick_Config+0x40>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002362:	4b04      	ldr	r3, [pc, #16]	; (8002374 <SysTick_Config+0x40>)
 8002364:	2207      	movs	r2, #7
 8002366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	e000e010 	.word	0xe000e010

08002378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ff29 	bl	80021d8 <__NVIC_SetPriorityGrouping>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a0:	f7ff ff3e 	bl	8002220 <__NVIC_GetPriorityGrouping>
 80023a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	6978      	ldr	r0, [r7, #20]
 80023ac:	f7ff ff8e 	bl	80022cc <NVIC_EncodePriority>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff5d 	bl	8002278 <__NVIC_SetPriority>
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff31 	bl	800223c <__NVIC_EnableIRQ>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ffa2 	bl	8002334 <SysTick_Config>
 80023f0:	4603      	mov	r3, r0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff f96c 	bl	80016e4 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e099      	b.n	800254c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002438:	e00f      	b.n	800245a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800243a:	f7ff f953 	bl	80016e4 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b05      	cmp	r3, #5
 8002446:	d908      	bls.n	800245a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2203      	movs	r2, #3
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e078      	b.n	800254c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1e8      	bne.n	800243a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4b38      	ldr	r3, [pc, #224]	; (8002554 <HAL_DMA_Init+0x158>)
 8002474:	4013      	ands	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002486:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d107      	bne.n	80024c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	4313      	orrs	r3, r2
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f023 0307 	bic.w	r3, r3, #7
 80024da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d117      	bne.n	800251e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00e      	beq.n	800251e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fb09 	bl	8002b18 <DMA_CheckFifoParam>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2240      	movs	r2, #64	; 0x40
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800251a:	2301      	movs	r3, #1
 800251c:	e016      	b.n	800254c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fac0 	bl	8002aac <DMA_CalcBaseAndBitshift>
 800252c:	4603      	mov	r3, r0
 800252e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	223f      	movs	r2, #63	; 0x3f
 8002536:	409a      	lsls	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	e010803f 	.word	0xe010803f

08002558 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_DMA_Start_IT+0x26>
 800257a:	2302      	movs	r3, #2
 800257c:	e048      	b.n	8002610 <HAL_DMA_Start_IT+0xb8>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d137      	bne.n	8002602 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fa52 	bl	8002a50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	223f      	movs	r2, #63	; 0x3f
 80025b2:	409a      	lsls	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0216 	orr.w	r2, r2, #22
 80025c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025d6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d007      	beq.n	80025f0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0208 	orr.w	r2, r2, #8
 80025ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e005      	b.n	800260e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800260a:	2302      	movs	r3, #2
 800260c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800260e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002626:	f7ff f85d 	bl	80016e4 <HAL_GetTick>
 800262a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d008      	beq.n	800264a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2280      	movs	r2, #128	; 0x80
 800263c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e052      	b.n	80026f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0216 	bic.w	r2, r2, #22
 8002658:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002668:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <HAL_DMA_Abort+0x62>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0208 	bic.w	r2, r2, #8
 8002688:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800269a:	e013      	b.n	80026c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800269c:	f7ff f822 	bl	80016e4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d90c      	bls.n	80026c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2203      	movs	r2, #3
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e015      	b.n	80026f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1e4      	bne.n	800269c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	223f      	movs	r2, #63	; 0x3f
 80026d8:	409a      	lsls	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d004      	beq.n	8002716 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e00c      	b.n	8002730 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2205      	movs	r2, #5
 800271a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0201 	bic.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002748:	4b92      	ldr	r3, [pc, #584]	; (8002994 <HAL_DMA_IRQHandler+0x258>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a92      	ldr	r2, [pc, #584]	; (8002998 <HAL_DMA_IRQHandler+0x25c>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0a9b      	lsrs	r3, r3, #10
 8002754:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	2208      	movs	r2, #8
 8002768:	409a      	lsls	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d01a      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d013      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0204 	bic.w	r2, r2, #4
 800278e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	2208      	movs	r2, #8
 8002796:	409a      	lsls	r2, r3
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	2201      	movs	r2, #1
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d012      	beq.n	80027de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	2201      	movs	r2, #1
 80027cc:	409a      	lsls	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f043 0202 	orr.w	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	2204      	movs	r2, #4
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d012      	beq.n	8002814 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	2204      	movs	r2, #4
 8002802:	409a      	lsls	r2, r3
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	f043 0204 	orr.w	r2, r3, #4
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	2210      	movs	r2, #16
 800281a:	409a      	lsls	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d043      	beq.n	80028ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d03c      	beq.n	80028ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002836:	2210      	movs	r2, #16
 8002838:	409a      	lsls	r2, r3
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d018      	beq.n	800287e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d108      	bne.n	800286c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d024      	beq.n	80028ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
 800286a:	e01f      	b.n	80028ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01b      	beq.n	80028ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
 800287c:	e016      	b.n	80028ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d107      	bne.n	800289c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0208 	bic.w	r2, r2, #8
 800289a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	2220      	movs	r2, #32
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 808e 	beq.w	80029da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8086 	beq.w	80029da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	2220      	movs	r2, #32
 80028d4:	409a      	lsls	r2, r3
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b05      	cmp	r3, #5
 80028e4:	d136      	bne.n	8002954 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0216 	bic.w	r2, r2, #22
 80028f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002904:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d103      	bne.n	8002916 <HAL_DMA_IRQHandler+0x1da>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0208 	bic.w	r2, r2, #8
 8002924:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	223f      	movs	r2, #63	; 0x3f
 800292c:	409a      	lsls	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002946:	2b00      	cmp	r3, #0
 8002948:	d07d      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
        }
        return;
 8002952:	e078      	b.n	8002a46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01c      	beq.n	800299c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d108      	bne.n	8002982 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	2b00      	cmp	r3, #0
 8002976:	d030      	beq.n	80029da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
 8002980:	e02b      	b.n	80029da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d027      	beq.n	80029da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
 8002992:	e022      	b.n	80029da <HAL_DMA_IRQHandler+0x29e>
 8002994:	20000030 	.word	0x20000030
 8002998:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0210 	bic.w	r2, r2, #16
 80029b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d032      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d022      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2205      	movs	r2, #5
 80029f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d307      	bcc.n	8002a22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f2      	bne.n	8002a06 <HAL_DMA_IRQHandler+0x2ca>
 8002a20:	e000      	b.n	8002a24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
 8002a44:	e000      	b.n	8002a48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a46:	bf00      	nop
    }
  }
}
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop

08002a50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b40      	cmp	r3, #64	; 0x40
 8002a7c:	d108      	bne.n	8002a90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a8e:	e007      	b.n	8002aa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	60da      	str	r2, [r3, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3b10      	subs	r3, #16
 8002abc:	4a13      	ldr	r2, [pc, #76]	; (8002b0c <DMA_CalcBaseAndBitshift+0x60>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <DMA_CalcBaseAndBitshift+0x64>)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d908      	bls.n	8002aec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <DMA_CalcBaseAndBitshift+0x68>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	1d1a      	adds	r2, r3, #4
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	659a      	str	r2, [r3, #88]	; 0x58
 8002aea:	e006      	b.n	8002afa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <DMA_CalcBaseAndBitshift+0x68>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	aaaaaaab 	.word	0xaaaaaaab
 8002b10:	08009268 	.word	0x08009268
 8002b14:	fffffc00 	.word	0xfffffc00

08002b18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d11f      	bne.n	8002b72 <DMA_CheckFifoParam+0x5a>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d856      	bhi.n	8002be6 <DMA_CheckFifoParam+0xce>
 8002b38:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <DMA_CheckFifoParam+0x28>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b51 	.word	0x08002b51
 8002b44:	08002b63 	.word	0x08002b63
 8002b48:	08002b51 	.word	0x08002b51
 8002b4c:	08002be7 	.word	0x08002be7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d046      	beq.n	8002bea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b60:	e043      	b.n	8002bea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b6a:	d140      	bne.n	8002bee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b70:	e03d      	b.n	8002bee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7a:	d121      	bne.n	8002bc0 <DMA_CheckFifoParam+0xa8>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d837      	bhi.n	8002bf2 <DMA_CheckFifoParam+0xda>
 8002b82:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <DMA_CheckFifoParam+0x70>)
 8002b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b88:	08002b99 	.word	0x08002b99
 8002b8c:	08002b9f 	.word	0x08002b9f
 8002b90:	08002b99 	.word	0x08002b99
 8002b94:	08002bb1 	.word	0x08002bb1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9c:	e030      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d025      	beq.n	8002bf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bae:	e022      	b.n	8002bf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bb8:	d11f      	bne.n	8002bfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bbe:	e01c      	b.n	8002bfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d903      	bls.n	8002bce <DMA_CheckFifoParam+0xb6>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d003      	beq.n	8002bd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bcc:	e018      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd2:	e015      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00e      	beq.n	8002bfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
      break;
 8002be4:	e00b      	b.n	8002bfe <DMA_CheckFifoParam+0xe6>
      break;
 8002be6:	bf00      	nop
 8002be8:	e00a      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bea:	bf00      	nop
 8002bec:	e008      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e006      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e004      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e002      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bfe:	bf00      	nop
    }
  } 
  
  return status; 
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop

08002c10 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c22:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <HAL_FLASH_Program+0xb0>)
 8002c24:	7d1b      	ldrb	r3, [r3, #20]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_FLASH_Program+0x1e>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e043      	b.n	8002cb6 <HAL_FLASH_Program+0xa6>
 8002c2e:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_FLASH_Program+0xb0>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c38:	f000 f878 	bl	8002d2c <FLASH_WaitForLastOperation>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d133      	bne.n	8002cae <HAL_FLASH_Program+0x9e>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d823      	bhi.n	8002c94 <HAL_FLASH_Program+0x84>
 8002c4c:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <HAL_FLASH_Program+0x44>)
 8002c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c52:	bf00      	nop
 8002c54:	08002c65 	.word	0x08002c65
 8002c58:	08002c71 	.word	0x08002c71
 8002c5c:	08002c7d 	.word	0x08002c7d
 8002c60:	08002c89 	.word	0x08002c89
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8002c64:	783b      	ldrb	r3, [r7, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	68b8      	ldr	r0, [r7, #8]
 8002c6a:	f000 f921 	bl	8002eb0 <FLASH_Program_Byte>
        break;
 8002c6e:	e012      	b.n	8002c96 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002c70:	883b      	ldrh	r3, [r7, #0]
 8002c72:	4619      	mov	r1, r3
 8002c74:	68b8      	ldr	r0, [r7, #8]
 8002c76:	f000 f8f5 	bl	8002e64 <FLASH_Program_HalfWord>
        break;
 8002c7a:	e00c      	b.n	8002c96 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	68b8      	ldr	r0, [r7, #8]
 8002c82:	f000 f8c9 	bl	8002e18 <FLASH_Program_Word>
        break;
 8002c86:	e006      	b.n	8002c96 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8002c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c8c:	68b8      	ldr	r0, [r7, #8]
 8002c8e:	f000 f88d 	bl	8002dac <FLASH_Program_DoubleWord>
        break;
 8002c92:	e000      	b.n	8002c96 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8002c94:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c9a:	f000 f847 	bl	8002d2c <FLASH_WaitForLastOperation>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_FLASH_Program+0xb4>)
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <HAL_FLASH_Program+0xb4>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <HAL_FLASH_Program+0xb0>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	751a      	strb	r2, [r3, #20]

  return status;
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000040c 	.word	0x2000040c
 8002cc4:	40023c00 	.word	0x40023c00

08002cc8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_FLASH_Unlock+0x38>)
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da0b      	bge.n	8002cf2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_FLASH_Unlock+0x38>)
 8002cdc:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <HAL_FLASH_Unlock+0x3c>)
 8002cde:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_FLASH_Unlock+0x38>)
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_FLASH_Unlock+0x40>)
 8002ce4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_FLASH_Unlock+0x38>)
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	da01      	bge.n	8002cf2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40023c00 	.word	0x40023c00
 8002d04:	45670123 	.word	0x45670123
 8002d08:	cdef89ab 	.word	0xcdef89ab

08002d0c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_FLASH_Lock+0x1c>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_FLASH_Lock+0x1c>)
 8002d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d1a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40023c00 	.word	0x40023c00

08002d2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <FLASH_WaitForLastOperation+0x78>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d3e:	f7fe fcd1 	bl	80016e4 <HAL_GetTick>
 8002d42:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002d44:	e010      	b.n	8002d68 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d00c      	beq.n	8002d68 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <FLASH_WaitForLastOperation+0x38>
 8002d54:	f7fe fcc6 	bl	80016e4 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d201      	bcs.n	8002d68 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e019      	b.n	8002d9c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <FLASH_WaitForLastOperation+0x7c>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1e8      	bne.n	8002d46 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <FLASH_WaitForLastOperation+0x7c>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002d80:	f000 f8ba 	bl	8002ef8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e009      	b.n	8002d9c <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <FLASH_WaitForLastOperation+0x7c>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <FLASH_WaitForLastOperation+0x7c>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
  
}  
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	2000040c 	.word	0x2000040c
 8002da8:	40023c00 	.word	0x40023c00

08002dac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <FLASH_Program_DoubleWord+0x68>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <FLASH_Program_DoubleWord+0x68>)
 8002dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <FLASH_Program_DoubleWord+0x68>)
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <FLASH_Program_DoubleWord+0x68>)
 8002dca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002dce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002dd0:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <FLASH_Program_DoubleWord+0x68>)
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	4a0f      	ldr	r2, [pc, #60]	; (8002e14 <FLASH_Program_DoubleWord+0x68>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002de2:	f3bf 8f6f 	isb	sy
}
 8002de6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	000a      	movs	r2, r1
 8002df6:	2300      	movs	r3, #0
 8002df8:	68f9      	ldr	r1, [r7, #12]
 8002dfa:	3104      	adds	r1, #4
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e00:	f3bf 8f4f 	dsb	sy
}
 8002e04:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40023c00 	.word	0x40023c00

08002e18 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <FLASH_Program_Word+0x48>)
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <FLASH_Program_Word+0x48>)
 8002e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <FLASH_Program_Word+0x48>)
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <FLASH_Program_Word+0x48>)
 8002e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e38:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <FLASH_Program_Word+0x48>)
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <FLASH_Program_Word+0x48>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e4c:	f3bf 8f4f 	dsb	sy
}
 8002e50:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40023c00 	.word	0x40023c00

08002e64 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <FLASH_Program_HalfWord+0x48>)
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <FLASH_Program_HalfWord+0x48>)
 8002e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <FLASH_Program_HalfWord+0x48>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <FLASH_Program_HalfWord+0x48>)
 8002e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <FLASH_Program_HalfWord+0x48>)
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	4a07      	ldr	r2, [pc, #28]	; (8002eac <FLASH_Program_HalfWord+0x48>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e9a:	f3bf 8f4f 	dsb	sy
}
 8002e9e:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	40023c00 	.word	0x40023c00

08002eb0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <FLASH_Program_Byte+0x44>)
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	4a0c      	ldr	r2, [pc, #48]	; (8002ef4 <FLASH_Program_Byte+0x44>)
 8002ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <FLASH_Program_Byte+0x44>)
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <FLASH_Program_Byte+0x44>)
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <FLASH_Program_Byte+0x44>)
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <FLASH_Program_Byte+0x44>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ee2:	f3bf 8f4f 	dsb	sy
}
 8002ee6:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	40023c00 	.word	0x40023c00

08002ef8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002efc:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <FLASH_SetErrorCode+0x8c>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002f08:	4b1f      	ldr	r3, [pc, #124]	; (8002f88 <FLASH_SetErrorCode+0x90>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f043 0320 	orr.w	r3, r3, #32
 8002f10:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <FLASH_SetErrorCode+0x90>)
 8002f12:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <FLASH_SetErrorCode+0x8c>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <FLASH_SetErrorCode+0x90>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f043 0310 	orr.w	r3, r3, #16
 8002f28:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <FLASH_SetErrorCode+0x90>)
 8002f2a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002f2c:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <FLASH_SetErrorCode+0x8c>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <FLASH_SetErrorCode+0x90>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	4a11      	ldr	r2, [pc, #68]	; (8002f88 <FLASH_SetErrorCode+0x90>)
 8002f42:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <FLASH_SetErrorCode+0x8c>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002f50:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <FLASH_SetErrorCode+0x90>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <FLASH_SetErrorCode+0x90>)
 8002f5a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002f5c:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <FLASH_SetErrorCode+0x8c>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <FLASH_SetErrorCode+0x90>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <FLASH_SetErrorCode+0x90>)
 8002f72:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <FLASH_SetErrorCode+0x8c>)
 8002f76:	22f2      	movs	r2, #242	; 0xf2
 8002f78:	60da      	str	r2, [r3, #12]
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40023c00 	.word	0x40023c00
 8002f88:	2000040c 	.word	0x2000040c

08002f8c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f9e:	4b30      	ldr	r3, [pc, #192]	; (8003060 <HAL_FLASHEx_Erase+0xd4>)
 8002fa0:	7d1b      	ldrb	r3, [r3, #20]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_FLASHEx_Erase+0x1e>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e056      	b.n	8003058 <HAL_FLASHEx_Erase+0xcc>
 8002faa:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_FLASHEx_Erase+0xd4>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fb4:	f7ff feba 	bl	8002d2c <FLASH_WaitForLastOperation>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d146      	bne.n	8003050 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d115      	bne.n	8002ffe <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f000 f844 	bl	800306c <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fe4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fe8:	f7ff fea0 	bl	8002d2c <FLASH_WaitForLastOperation>
 8002fec:	4603      	mov	r3, r0
 8002fee:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002ff0:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <HAL_FLASHEx_Erase+0xd8>)
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	491b      	ldr	r1, [pc, #108]	; (8003064 <HAL_FLASHEx_Erase+0xd8>)
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_FLASHEx_Erase+0xdc>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	610b      	str	r3, [r1, #16]
 8002ffc:	e028      	b.n	8003050 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	e01c      	b.n	8003040 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	4619      	mov	r1, r3
 800300e:	68b8      	ldr	r0, [r7, #8]
 8003010:	f000 f868 	bl	80030e4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003014:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003018:	f7ff fe88 	bl	8002d2c <FLASH_WaitForLastOperation>
 800301c:	4603      	mov	r3, r0
 800301e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <HAL_FLASHEx_Erase+0xd8>)
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <HAL_FLASHEx_Erase+0xd8>)
 8003026:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800302a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	601a      	str	r2, [r3, #0]
          break;
 8003038:	e00a      	b.n	8003050 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3301      	adds	r3, #1
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4413      	add	r3, r2
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	d3da      	bcc.n	8003006 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_FLASHEx_Erase+0xd4>)
 8003052:	2200      	movs	r2, #0
 8003054:	751a      	strb	r2, [r3, #20]

  return status;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	2000040c 	.word	0x2000040c
 8003064:	40023c00 	.word	0x40023c00
 8003068:	ffff7ffb 	.word	0xffff7ffb

0800306c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	6039      	str	r1, [r7, #0]
 8003076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <FLASH_MassErase+0x74>)
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <FLASH_MassErase+0x74>)
 800307e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003082:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d107      	bne.n	800309a <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <FLASH_MassErase+0x74>)
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	4914      	ldr	r1, [pc, #80]	; (80030e0 <FLASH_MassErase+0x74>)
 8003090:	f248 0304 	movw	r3, #32772	; 0x8004
 8003094:	4313      	orrs	r3, r2
 8003096:	610b      	str	r3, [r1, #16]
 8003098:	e00f      	b.n	80030ba <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d106      	bne.n	80030ae <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <FLASH_MassErase+0x74>)
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <FLASH_MassErase+0x74>)
 80030a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030aa:	6113      	str	r3, [r2, #16]
 80030ac:	e005      	b.n	80030ba <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <FLASH_MassErase+0x74>)
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	4a0b      	ldr	r2, [pc, #44]	; (80030e0 <FLASH_MassErase+0x74>)
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <FLASH_MassErase+0x74>)
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	4313      	orrs	r3, r2
 80030c4:	4a06      	ldr	r2, [pc, #24]	; (80030e0 <FLASH_MassErase+0x74>)
 80030c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ca:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80030cc:	f3bf 8f4f 	dsb	sy
}
 80030d0:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40023c00 	.word	0x40023c00

080030e4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	e010      	b.n	8003122 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d103      	bne.n	800310e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e009      	b.n	8003122 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d103      	bne.n	800311c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e002      	b.n	8003122 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800311c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003120:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b0b      	cmp	r3, #11
 8003126:	d902      	bls.n	800312e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <FLASH_Erase_Sector+0xa0>)
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	4a14      	ldr	r2, [pc, #80]	; (8003184 <FLASH_Erase_Sector+0xa0>)
 8003134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003138:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <FLASH_Erase_Sector+0xa0>)
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	4911      	ldr	r1, [pc, #68]	; (8003184 <FLASH_Erase_Sector+0xa0>)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003146:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <FLASH_Erase_Sector+0xa0>)
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	4a0e      	ldr	r2, [pc, #56]	; (8003184 <FLASH_Erase_Sector+0xa0>)
 800314c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003150:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <FLASH_Erase_Sector+0xa0>)
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4313      	orrs	r3, r2
 800315c:	4a09      	ldr	r2, [pc, #36]	; (8003184 <FLASH_Erase_Sector+0xa0>)
 800315e:	f043 0302 	orr.w	r3, r3, #2
 8003162:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <FLASH_Erase_Sector+0xa0>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	4a06      	ldr	r2, [pc, #24]	; (8003184 <FLASH_Erase_Sector+0xa0>)
 800316a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8003170:	f3bf 8f4f 	dsb	sy
}
 8003174:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40023c00 	.word	0x40023c00

08003188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	; 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e175      	b.n	8003494 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031a8:	2201      	movs	r2, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f040 8164 	bne.w	800348e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d00b      	beq.n	80031e6 <HAL_GPIO_Init+0x5e>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d007      	beq.n	80031e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031da:	2b11      	cmp	r3, #17
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b12      	cmp	r3, #18
 80031e4:	d130      	bne.n	8003248 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	2203      	movs	r2, #3
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800321c:	2201      	movs	r2, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 0201 	and.w	r2, r3, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2203      	movs	r2, #3
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x100>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b12      	cmp	r3, #18
 8003286:	d123      	bne.n	80032d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	220f      	movs	r2, #15
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	08da      	lsrs	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	69b9      	ldr	r1, [r7, #24]
 80032cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80be 	beq.w	800348e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003312:	4b66      	ldr	r3, [pc, #408]	; (80034ac <HAL_GPIO_Init+0x324>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	4a65      	ldr	r2, [pc, #404]	; (80034ac <HAL_GPIO_Init+0x324>)
 8003318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800331c:	6453      	str	r3, [r2, #68]	; 0x44
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_GPIO_Init+0x324>)
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800332a:	4a61      	ldr	r2, [pc, #388]	; (80034b0 <HAL_GPIO_Init+0x328>)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	3302      	adds	r3, #2
 8003332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	220f      	movs	r2, #15
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a58      	ldr	r2, [pc, #352]	; (80034b4 <HAL_GPIO_Init+0x32c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d037      	beq.n	80033c6 <HAL_GPIO_Init+0x23e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a57      	ldr	r2, [pc, #348]	; (80034b8 <HAL_GPIO_Init+0x330>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d031      	beq.n	80033c2 <HAL_GPIO_Init+0x23a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a56      	ldr	r2, [pc, #344]	; (80034bc <HAL_GPIO_Init+0x334>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d02b      	beq.n	80033be <HAL_GPIO_Init+0x236>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a55      	ldr	r2, [pc, #340]	; (80034c0 <HAL_GPIO_Init+0x338>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d025      	beq.n	80033ba <HAL_GPIO_Init+0x232>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a54      	ldr	r2, [pc, #336]	; (80034c4 <HAL_GPIO_Init+0x33c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01f      	beq.n	80033b6 <HAL_GPIO_Init+0x22e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a53      	ldr	r2, [pc, #332]	; (80034c8 <HAL_GPIO_Init+0x340>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d019      	beq.n	80033b2 <HAL_GPIO_Init+0x22a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a52      	ldr	r2, [pc, #328]	; (80034cc <HAL_GPIO_Init+0x344>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_GPIO_Init+0x226>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a51      	ldr	r2, [pc, #324]	; (80034d0 <HAL_GPIO_Init+0x348>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00d      	beq.n	80033aa <HAL_GPIO_Init+0x222>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a50      	ldr	r2, [pc, #320]	; (80034d4 <HAL_GPIO_Init+0x34c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <HAL_GPIO_Init+0x21e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4f      	ldr	r2, [pc, #316]	; (80034d8 <HAL_GPIO_Init+0x350>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_GPIO_Init+0x21a>
 800339e:	2309      	movs	r3, #9
 80033a0:	e012      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033a2:	230a      	movs	r3, #10
 80033a4:	e010      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033a6:	2308      	movs	r3, #8
 80033a8:	e00e      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033aa:	2307      	movs	r3, #7
 80033ac:	e00c      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033ae:	2306      	movs	r3, #6
 80033b0:	e00a      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033b2:	2305      	movs	r3, #5
 80033b4:	e008      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033b6:	2304      	movs	r3, #4
 80033b8:	e006      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033ba:	2303      	movs	r3, #3
 80033bc:	e004      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033be:	2302      	movs	r3, #2
 80033c0:	e002      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033c6:	2300      	movs	r3, #0
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	f002 0203 	and.w	r2, r2, #3
 80033ce:	0092      	lsls	r2, r2, #2
 80033d0:	4093      	lsls	r3, r2
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033d8:	4935      	ldr	r1, [pc, #212]	; (80034b0 <HAL_GPIO_Init+0x328>)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	089b      	lsrs	r3, r3, #2
 80033de:	3302      	adds	r3, #2
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033e6:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <HAL_GPIO_Init+0x354>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800340a:	4a34      	ldr	r2, [pc, #208]	; (80034dc <HAL_GPIO_Init+0x354>)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003410:	4b32      	ldr	r3, [pc, #200]	; (80034dc <HAL_GPIO_Init+0x354>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003434:	4a29      	ldr	r2, [pc, #164]	; (80034dc <HAL_GPIO_Init+0x354>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800343a:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_GPIO_Init+0x354>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800345e:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <HAL_GPIO_Init+0x354>)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003464:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_GPIO_Init+0x354>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003488:	4a14      	ldr	r2, [pc, #80]	; (80034dc <HAL_GPIO_Init+0x354>)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3301      	adds	r3, #1
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	2b0f      	cmp	r3, #15
 8003498:	f67f ae86 	bls.w	80031a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3724      	adds	r7, #36	; 0x24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40013800 	.word	0x40013800
 80034b4:	40020000 	.word	0x40020000
 80034b8:	40020400 	.word	0x40020400
 80034bc:	40020800 	.word	0x40020800
 80034c0:	40020c00 	.word	0x40020c00
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40021400 	.word	0x40021400
 80034cc:	40021800 	.word	0x40021800
 80034d0:	40021c00 	.word	0x40021c00
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40022400 	.word	0x40022400
 80034dc:	40013c00 	.word	0x40013c00

080034e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	887b      	ldrh	r3, [r7, #2]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
 80034fc:	e001      	b.n	8003502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	807b      	strh	r3, [r7, #2]
 800351c:	4613      	mov	r3, r2
 800351e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003520:	787b      	ldrb	r3, [r7, #1]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003526:	887a      	ldrh	r2, [r7, #2]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800352c:	e003      	b.n	8003536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	041a      	lsls	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	619a      	str	r2, [r3, #24]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003542:	b480      	push	{r7}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	460b      	mov	r3, r1
 800354c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003554:	887a      	ldrh	r2, [r7, #2]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4013      	ands	r3, r2
 800355a:	041a      	lsls	r2, r3, #16
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	43d9      	mvns	r1, r3
 8003560:	887b      	ldrh	r3, [r7, #2]
 8003562:	400b      	ands	r3, r1
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	619a      	str	r2, [r3, #24]
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800358e:	4a05      	ldr	r2, [pc, #20]	; (80035a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f806 	bl	80035a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40013c00 	.word	0x40013c00

080035a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035c8:	2300      	movs	r3, #0
 80035ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e29b      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8087 	beq.w	80036f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e4:	4b96      	ldr	r3, [pc, #600]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d00c      	beq.n	800360a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f0:	4b93      	ldr	r3, [pc, #588]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d112      	bne.n	8003622 <HAL_RCC_OscConfig+0x62>
 80035fc:	4b90      	ldr	r3, [pc, #576]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003608:	d10b      	bne.n	8003622 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360a:	4b8d      	ldr	r3, [pc, #564]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d06c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x130>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d168      	bne.n	80036f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e275      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x7a>
 800362c:	4b84      	ldr	r3, [pc, #528]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a83      	ldr	r2, [pc, #524]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	e02e      	b.n	8003698 <HAL_RCC_OscConfig+0xd8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x9c>
 8003642:	4b7f      	ldr	r3, [pc, #508]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a7e      	ldr	r2, [pc, #504]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b7c      	ldr	r3, [pc, #496]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a7b      	ldr	r2, [pc, #492]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01d      	b.n	8003698 <HAL_RCC_OscConfig+0xd8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0xc0>
 8003666:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a75      	ldr	r2, [pc, #468]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b73      	ldr	r3, [pc, #460]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a72      	ldr	r2, [pc, #456]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0xd8>
 8003680:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6e      	ldr	r2, [pc, #440]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b6c      	ldr	r3, [pc, #432]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a6b      	ldr	r2, [pc, #428]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe f820 	bl	80016e4 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fe f81c 	bl	80016e4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e229      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b61      	ldr	r3, [pc, #388]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0xe8>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe f80c 	bl	80016e4 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fe f808 	bl	80016e4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e215      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	4b57      	ldr	r3, [pc, #348]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x110>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d069      	beq.n	80037d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036fe:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370a:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b08      	cmp	r3, #8
 8003714:	d11c      	bne.n	8003750 <HAL_RCC_OscConfig+0x190>
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d116      	bne.n	8003750 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_RCC_OscConfig+0x17a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d001      	beq.n	800373a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e1e9      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	493d      	ldr	r1, [pc, #244]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	e040      	b.n	80037d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d023      	beq.n	80037a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003758:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a38      	ldr	r2, [pc, #224]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fd ffbe 	bl	80016e4 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376c:	f7fd ffba 	bl	80016e4 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e1c7      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377e:	4b30      	ldr	r3, [pc, #192]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4929      	ldr	r1, [pc, #164]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
 800379e:	e018      	b.n	80037d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a26      	ldr	r2, [pc, #152]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fd ff9a 	bl	80016e4 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b4:	f7fd ff96 	bl	80016e4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1a3      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c6:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d038      	beq.n	8003850 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d019      	beq.n	800381a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	4a15      	ldr	r2, [pc, #84]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fd ff77 	bl	80016e4 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fa:	f7fd ff73 	bl	80016e4 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e180      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800380e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x23a>
 8003818:	e01a      	b.n	8003850 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800381c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381e:	4a08      	ldr	r2, [pc, #32]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003826:	f7fd ff5d 	bl	80016e4 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382e:	f7fd ff59 	bl	80016e4 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d903      	bls.n	8003844 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e166      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
 8003840:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003844:	4b92      	ldr	r3, [pc, #584]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ee      	bne.n	800382e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80a4 	beq.w	80039a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385e:	4b8c      	ldr	r3, [pc, #560]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	4b89      	ldr	r3, [pc, #548]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	4a88      	ldr	r2, [pc, #544]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003874:	6413      	str	r3, [r2, #64]	; 0x40
 8003876:	4b86      	ldr	r3, [pc, #536]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003882:	2301      	movs	r3, #1
 8003884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003886:	4b83      	ldr	r3, [pc, #524]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d118      	bne.n	80038c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003892:	4b80      	ldr	r3, [pc, #512]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7f      	ldr	r2, [pc, #508]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fd ff21 	bl	80016e4 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fd ff1d 	bl	80016e4 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b64      	cmp	r3, #100	; 0x64
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e12a      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b8:	4b76      	ldr	r3, [pc, #472]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d106      	bne.n	80038da <HAL_RCC_OscConfig+0x31a>
 80038cc:	4b70      	ldr	r3, [pc, #448]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	4a6f      	ldr	r2, [pc, #444]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6713      	str	r3, [r2, #112]	; 0x70
 80038d8:	e02d      	b.n	8003936 <HAL_RCC_OscConfig+0x376>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x33c>
 80038e2:	4b6b      	ldr	r3, [pc, #428]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	4a6a      	ldr	r2, [pc, #424]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	6713      	str	r3, [r2, #112]	; 0x70
 80038ee:	4b68      	ldr	r3, [pc, #416]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	4a67      	ldr	r2, [pc, #412]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038f4:	f023 0304 	bic.w	r3, r3, #4
 80038f8:	6713      	str	r3, [r2, #112]	; 0x70
 80038fa:	e01c      	b.n	8003936 <HAL_RCC_OscConfig+0x376>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b05      	cmp	r3, #5
 8003902:	d10c      	bne.n	800391e <HAL_RCC_OscConfig+0x35e>
 8003904:	4b62      	ldr	r3, [pc, #392]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a61      	ldr	r2, [pc, #388]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800390a:	f043 0304 	orr.w	r3, r3, #4
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	4b5f      	ldr	r3, [pc, #380]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4a5e      	ldr	r2, [pc, #376]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	6713      	str	r3, [r2, #112]	; 0x70
 800391c:	e00b      	b.n	8003936 <HAL_RCC_OscConfig+0x376>
 800391e:	4b5c      	ldr	r3, [pc, #368]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a5b      	ldr	r2, [pc, #364]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	6713      	str	r3, [r2, #112]	; 0x70
 800392a:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d015      	beq.n	800396a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393e:	f7fd fed1 	bl	80016e4 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fd fecd 	bl	80016e4 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e0d8      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395c:	4b4c      	ldr	r3, [pc, #304]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ee      	beq.n	8003946 <HAL_RCC_OscConfig+0x386>
 8003968:	e014      	b.n	8003994 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396a:	f7fd febb 	bl	80016e4 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003970:	e00a      	b.n	8003988 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003972:	f7fd feb7 	bl	80016e4 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003980:	4293      	cmp	r3, r2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e0c2      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ee      	bne.n	8003972 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d105      	bne.n	80039a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399a:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4a3c      	ldr	r2, [pc, #240]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80ae 	beq.w	8003b0c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039b0:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d06d      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d14b      	bne.n	8003a5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c4:	4b32      	ldr	r3, [pc, #200]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a31      	ldr	r2, [pc, #196]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd fe88 	bl	80016e4 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d8:	f7fd fe84 	bl	80016e4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e091      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69da      	ldr	r2, [r3, #28]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	019b      	lsls	r3, r3, #6
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	041b      	lsls	r3, r3, #16
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	061b      	lsls	r3, r3, #24
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	071b      	lsls	r3, r3, #28
 8003a22:	491b      	ldr	r1, [pc, #108]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fd fe56 	bl	80016e4 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fd fe52 	bl	80016e4 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e05f      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x47c>
 8003a5a:	e057      	b.n	8003b0c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fd fe3c 	bl	80016e4 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fd fe38 	bl	80016e4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e045      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x4b0>
 8003a8e:	e03d      	b.n	8003b0c <HAL_RCC_OscConfig+0x54c>
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a98:	4b1f      	ldr	r3, [pc, #124]	; (8003b18 <HAL_RCC_OscConfig+0x558>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d030      	beq.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d129      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d122      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ac8:	4013      	ands	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ace:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d119      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d10f      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800

08003b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0d0      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b34:	4b6a      	ldr	r3, [pc, #424]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d910      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 020f 	bic.w	r2, r3, #15
 8003b4a:	4965      	ldr	r1, [pc, #404]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b63      	ldr	r3, [pc, #396]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0b8      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b7c:	4b59      	ldr	r3, [pc, #356]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a58      	ldr	r2, [pc, #352]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b94:	4b53      	ldr	r3, [pc, #332]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a52      	ldr	r2, [pc, #328]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba0:	4b50      	ldr	r3, [pc, #320]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	494d      	ldr	r1, [pc, #308]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d040      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d115      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e07f      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bde:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e073      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bee:	4b3d      	ldr	r3, [pc, #244]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e06b      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfe:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 0203 	bic.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4936      	ldr	r1, [pc, #216]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fd fd68 	bl	80016e4 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c18:	f7fd fd64 	bl	80016e4 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e053      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 020c 	and.w	r2, r3, #12
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1eb      	bne.n	8003c18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c40:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d210      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 020f 	bic.w	r2, r3, #15
 8003c56:	4922      	ldr	r1, [pc, #136]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e032      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c7c:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4916      	ldr	r1, [pc, #88]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	490e      	ldr	r1, [pc, #56]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cae:	f000 f821 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	490a      	ldr	r1, [pc, #40]	; (8003ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8003cc0:	5ccb      	ldrb	r3, [r1, r3]
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	4a09      	ldr	r2, [pc, #36]	; (8003cec <HAL_RCC_ClockConfig+0x1d0>)
 8003cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_RCC_ClockConfig+0x1d4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fd fcc4 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023c00 	.word	0x40023c00
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	08009250 	.word	0x08009250
 8003cec:	20000030 	.word	0x20000030
 8003cf0:	20000034 	.word	0x20000034

08003cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf4:	b5b0      	push	{r4, r5, r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	6079      	str	r1, [r7, #4]
 8003cfe:	2100      	movs	r1, #0
 8003d00:	60f9      	str	r1, [r7, #12]
 8003d02:	2100      	movs	r1, #0
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003d06:	2100      	movs	r1, #0
 8003d08:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d0a:	4952      	ldr	r1, [pc, #328]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d0c:	6889      	ldr	r1, [r1, #8]
 8003d0e:	f001 010c 	and.w	r1, r1, #12
 8003d12:	2908      	cmp	r1, #8
 8003d14:	d00d      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x3e>
 8003d16:	2908      	cmp	r1, #8
 8003d18:	f200 8094 	bhi.w	8003e44 <HAL_RCC_GetSysClockFreq+0x150>
 8003d1c:	2900      	cmp	r1, #0
 8003d1e:	d002      	beq.n	8003d26 <HAL_RCC_GetSysClockFreq+0x32>
 8003d20:	2904      	cmp	r1, #4
 8003d22:	d003      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0x38>
 8003d24:	e08e      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d26:	4b4c      	ldr	r3, [pc, #304]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d28:	60bb      	str	r3, [r7, #8]
      break;
 8003d2a:	e08e      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x168>)
 8003d2e:	60bb      	str	r3, [r7, #8]
      break;
 8003d30:	e08b      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d32:	4948      	ldr	r1, [pc, #288]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d34:	6849      	ldr	r1, [r1, #4]
 8003d36:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d3a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d3c:	4945      	ldr	r1, [pc, #276]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d3e:	6849      	ldr	r1, [r1, #4]
 8003d40:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d44:	2900      	cmp	r1, #0
 8003d46:	d024      	beq.n	8003d92 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d48:	4942      	ldr	r1, [pc, #264]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d4a:	6849      	ldr	r1, [r1, #4]
 8003d4c:	0989      	lsrs	r1, r1, #6
 8003d4e:	4608      	mov	r0, r1
 8003d50:	f04f 0100 	mov.w	r1, #0
 8003d54:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003d58:	f04f 0500 	mov.w	r5, #0
 8003d5c:	ea00 0204 	and.w	r2, r0, r4
 8003d60:	ea01 0305 	and.w	r3, r1, r5
 8003d64:	493d      	ldr	r1, [pc, #244]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x168>)
 8003d66:	fb01 f003 	mul.w	r0, r1, r3
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	fb01 f102 	mul.w	r1, r1, r2
 8003d70:	1844      	adds	r4, r0, r1
 8003d72:	493a      	ldr	r1, [pc, #232]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x168>)
 8003d74:	fba2 0101 	umull	r0, r1, r2, r1
 8003d78:	1863      	adds	r3, r4, r1
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	f7fc fa58 	bl	8000238 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e04a      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d92:	4b30      	ldr	r3, [pc, #192]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003da2:	f04f 0100 	mov.w	r1, #0
 8003da6:	ea02 0400 	and.w	r4, r2, r0
 8003daa:	ea03 0501 	and.w	r5, r3, r1
 8003dae:	4620      	mov	r0, r4
 8003db0:	4629      	mov	r1, r5
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	014b      	lsls	r3, r1, #5
 8003dbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dc0:	0142      	lsls	r2, r0, #5
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	1b00      	subs	r0, r0, r4
 8003dc8:	eb61 0105 	sbc.w	r1, r1, r5
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	018b      	lsls	r3, r1, #6
 8003dd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dda:	0182      	lsls	r2, r0, #6
 8003ddc:	1a12      	subs	r2, r2, r0
 8003dde:	eb63 0301 	sbc.w	r3, r3, r1
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	00d9      	lsls	r1, r3, #3
 8003dec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003df0:	00d0      	lsls	r0, r2, #3
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	1912      	adds	r2, r2, r4
 8003df8:	eb45 0303 	adc.w	r3, r5, r3
 8003dfc:	f04f 0000 	mov.w	r0, #0
 8003e00:	f04f 0100 	mov.w	r1, #0
 8003e04:	0299      	lsls	r1, r3, #10
 8003e06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e0a:	0290      	lsls	r0, r2, #10
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	f7fc fa0c 	bl	8000238 <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4613      	mov	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e28:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	3301      	adds	r3, #1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	60bb      	str	r3, [r7, #8]
      break;
 8003e42:	e002      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e46:	60bb      	str	r3, [r7, #8]
      break;
 8003e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bdb0      	pop	{r4, r5, r7, pc}
 8003e54:	40023800 	.word	0x40023800
 8003e58:	00f42400 	.word	0x00f42400
 8003e5c:	017d7840 	.word	0x017d7840

08003e60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e64:	4b03      	ldr	r3, [pc, #12]	; (8003e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000030 	.word	0x20000030

08003e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e7c:	f7ff fff0 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	0a9b      	lsrs	r3, r3, #10
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	08009260 	.word	0x08009260

08003ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ea4:	f7ff ffdc 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	0b5b      	lsrs	r3, r3, #13
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	4903      	ldr	r1, [pc, #12]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	08009260 	.word	0x08009260

08003ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d012      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ef0:	4b69      	ldr	r3, [pc, #420]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a68      	ldr	r2, [pc, #416]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003efa:	6093      	str	r3, [r2, #8]
 8003efc:	4b66      	ldr	r3, [pc, #408]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f04:	4964      	ldr	r1, [pc, #400]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d017      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f22:	4b5d      	ldr	r3, [pc, #372]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f30:	4959      	ldr	r1, [pc, #356]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f40:	d101      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d017      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f5e:	4b4e      	ldr	r3, [pc, #312]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	494a      	ldr	r1, [pc, #296]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 808b 	beq.w	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fac:	4b3a      	ldr	r3, [pc, #232]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	4a39      	ldr	r2, [pc, #228]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb8:	4b37      	ldr	r3, [pc, #220]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fc4:	4b35      	ldr	r3, [pc, #212]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a34      	ldr	r2, [pc, #208]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd0:	f7fd fb88 	bl	80016e4 <HAL_GetTick>
 8003fd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd8:	f7fd fb84 	bl	80016e4 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	; 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e38f      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fea:	4b2c      	ldr	r3, [pc, #176]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d035      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	429a      	cmp	r2, r3
 8004012:	d02e      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004014:	4b20      	ldr	r3, [pc, #128]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a1a      	ldr	r2, [pc, #104]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004034:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004036:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800403c:	4b16      	ldr	r3, [pc, #88]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d114      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fd fb4c 	bl	80016e4 <HAL_GetTick>
 800404c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404e:	e00a      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fd fb48 	bl	80016e4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e351      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004066:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ee      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800407e:	d111      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800408e:	400b      	ands	r3, r1
 8004090:	4901      	ldr	r1, [pc, #4]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
 8004096:	e00b      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004098:	40023800 	.word	0x40023800
 800409c:	40007000 	.word	0x40007000
 80040a0:	0ffffcff 	.word	0x0ffffcff
 80040a4:	4bb3      	ldr	r3, [pc, #716]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4ab2      	ldr	r2, [pc, #712]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040ae:	6093      	str	r3, [r2, #8]
 80040b0:	4bb0      	ldr	r3, [pc, #704]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040bc:	49ad      	ldr	r1, [pc, #692]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d010      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040ce:	4ba9      	ldr	r3, [pc, #676]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d4:	4aa7      	ldr	r2, [pc, #668]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040de:	4ba5      	ldr	r3, [pc, #660]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	49a2      	ldr	r1, [pc, #648]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040fc:	4b9d      	ldr	r3, [pc, #628]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800410a:	499a      	ldr	r1, [pc, #616]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800411e:	4b95      	ldr	r3, [pc, #596]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800412c:	4991      	ldr	r1, [pc, #580]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004140:	4b8c      	ldr	r3, [pc, #560]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004146:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414e:	4989      	ldr	r1, [pc, #548]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004162:	4b84      	ldr	r3, [pc, #528]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	4980      	ldr	r1, [pc, #512]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004184:	4b7b      	ldr	r3, [pc, #492]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f023 0203 	bic.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	4978      	ldr	r1, [pc, #480]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041a6:	4b73      	ldr	r3, [pc, #460]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	f023 020c 	bic.w	r2, r3, #12
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b4:	496f      	ldr	r1, [pc, #444]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041c8:	4b6a      	ldr	r3, [pc, #424]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	4967      	ldr	r1, [pc, #412]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041ea:	4b62      	ldr	r3, [pc, #392]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f8:	495e      	ldr	r1, [pc, #376]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800420c:	4b59      	ldr	r3, [pc, #356]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	4956      	ldr	r1, [pc, #344]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800422e:	4b51      	ldr	r3, [pc, #324]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004234:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	494d      	ldr	r1, [pc, #308]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004250:	4b48      	ldr	r3, [pc, #288]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	4945      	ldr	r1, [pc, #276]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004272:	4b40      	ldr	r3, [pc, #256]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004278:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004280:	493c      	ldr	r1, [pc, #240]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004294:	4b37      	ldr	r3, [pc, #220]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042a2:	4934      	ldr	r1, [pc, #208]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d011      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042b6:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c4:	492b      	ldr	r1, [pc, #172]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d4:	d101      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042f6:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004304:	491b      	ldr	r1, [pc, #108]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004318:	4b16      	ldr	r3, [pc, #88]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004328:	4912      	ldr	r1, [pc, #72]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800434c:	4909      	ldr	r1, [pc, #36]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00f      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004366:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	e002      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800
 8004378:	4986      	ldr	r1, [pc, #536]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00b      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800438c:	4b81      	ldr	r3, [pc, #516]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004392:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439c:	497d      	ldr	r1, [pc, #500]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d006      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80d6 	beq.w	8004564 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043b8:	4b76      	ldr	r3, [pc, #472]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a75      	ldr	r2, [pc, #468]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c4:	f7fd f98e 	bl	80016e4 <HAL_GetTick>
 80043c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043cc:	f7fd f98a 	bl	80016e4 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e195      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043de:	4b6d      	ldr	r3, [pc, #436]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d021      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11d      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043fe:	4b65      	ldr	r3, [pc, #404]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800440c:	4b61      	ldr	r3, [pc, #388]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800440e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004412:	0e1b      	lsrs	r3, r3, #24
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	019a      	lsls	r2, r3, #6
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	061b      	lsls	r3, r3, #24
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	071b      	lsls	r3, r3, #28
 8004432:	4958      	ldr	r1, [pc, #352]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d004      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004458:	2b00      	cmp	r3, #0
 800445a:	d02e      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004464:	d129      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004466:	4b4b      	ldr	r3, [pc, #300]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004474:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447a:	0f1b      	lsrs	r3, r3, #28
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	019a      	lsls	r2, r3, #6
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	431a      	orrs	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	071b      	lsls	r3, r3, #28
 800449a:	493e      	ldr	r1, [pc, #248]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044a2:	4b3c      	ldr	r3, [pc, #240]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a8:	f023 021f 	bic.w	r2, r3, #31
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	3b01      	subs	r3, #1
 80044b2:	4938      	ldr	r1, [pc, #224]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d01d      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044c6:	4b33      	ldr	r3, [pc, #204]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044cc:	0e1b      	lsrs	r3, r3, #24
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044d4:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044da:	0f1b      	lsrs	r3, r3, #28
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	019a      	lsls	r2, r3, #6
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	431a      	orrs	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	431a      	orrs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	071b      	lsls	r3, r3, #28
 80044fa:	4926      	ldr	r1, [pc, #152]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d011      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	019a      	lsls	r2, r3, #6
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	061b      	lsls	r3, r3, #24
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	071b      	lsls	r3, r3, #28
 800452a:	491a      	ldr	r1, [pc, #104]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004532:	4b18      	ldr	r3, [pc, #96]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a17      	ldr	r2, [pc, #92]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004538:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800453c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453e:	f7fd f8d1 	bl	80016e4 <HAL_GetTick>
 8004542:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004544:	e008      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004546:	f7fd f8cd 	bl	80016e4 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b64      	cmp	r3, #100	; 0x64
 8004552:	d901      	bls.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e0d8      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b01      	cmp	r3, #1
 8004568:	f040 80ce 	bne.w	8004708 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a08      	ldr	r2, [pc, #32]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004578:	f7fd f8b4 	bl	80016e4 <HAL_GetTick>
 800457c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800457e:	e00b      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004580:	f7fd f8b0 	bl	80016e4 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d904      	bls.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e0bb      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004592:	bf00      	nop
 8004594:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004598:	4b5e      	ldr	r3, [pc, #376]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045a4:	d0ec      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d02e      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d12a      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045dc:	4b4d      	ldr	r3, [pc, #308]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	0f1b      	lsrs	r3, r3, #28
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	019a      	lsls	r2, r3, #6
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	041b      	lsls	r3, r3, #16
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	071b      	lsls	r3, r3, #28
 8004602:	4944      	ldr	r1, [pc, #272]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800460a:	4b42      	ldr	r3, [pc, #264]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800460c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004610:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	493d      	ldr	r1, [pc, #244]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d022      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004638:	d11d      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800463a:	4b36      	ldr	r3, [pc, #216]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	0e1b      	lsrs	r3, r3, #24
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004648:	4b32      	ldr	r3, [pc, #200]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	0f1b      	lsrs	r3, r3, #28
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	019a      	lsls	r2, r3, #6
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	431a      	orrs	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	061b      	lsls	r3, r3, #24
 8004668:	431a      	orrs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	071b      	lsls	r3, r3, #28
 800466e:	4929      	ldr	r1, [pc, #164]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d028      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004682:	4b24      	ldr	r3, [pc, #144]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	0e1b      	lsrs	r3, r3, #24
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	019a      	lsls	r2, r3, #6
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	431a      	orrs	r2, r3
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	061b      	lsls	r3, r3, #24
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	071b      	lsls	r3, r3, #28
 80046b6:	4917      	ldr	r1, [pc, #92]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	4911      	ldr	r1, [pc, #68]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046d4:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0e      	ldr	r2, [pc, #56]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e0:	f7fd f800 	bl	80016e4 <HAL_GetTick>
 80046e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046e8:	f7fc fffc 	bl	80016e4 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	; 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e007      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004706:	d1ef      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800

08004718 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e09d      	b.n	8004866 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b00      	cmp	r3, #0
 8004730:	d108      	bne.n	8004744 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800473a:	d009      	beq.n	8004750 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	61da      	str	r2, [r3, #28]
 8004742:	e005      	b.n	8004750 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fc fd86 	bl	800127c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004786:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004790:	d902      	bls.n	8004798 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	e002      	b.n	800479e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800479c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047a6:	d007      	beq.n	80047b8 <HAL_SPI_Init+0xa0>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047b0:	d002      	beq.n	80047b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fa:	ea42 0103 	orr.w	r1, r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	0c1b      	lsrs	r3, r3, #16
 8004814:	f003 0204 	and.w	r2, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004834:	ea42 0103 	orr.w	r1, r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004854:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e049      	b.n	8004914 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d106      	bne.n	800489a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7fc fd77 	bl	8001388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f000 fcd3 	bl	8005258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d001      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e054      	b.n	80049de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a26      	ldr	r2, [pc, #152]	; (80049ec <HAL_TIM_Base_Start_IT+0xd0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d022      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495e:	d01d      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a22      	ldr	r2, [pc, #136]	; (80049f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d018      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a21      	ldr	r2, [pc, #132]	; (80049f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d013      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1f      	ldr	r2, [pc, #124]	; (80049f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00e      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1e      	ldr	r2, [pc, #120]	; (80049fc <HAL_TIM_Base_Start_IT+0xe0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d009      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <HAL_TIM_Base_Start_IT+0xe4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1b      	ldr	r2, [pc, #108]	; (8004a04 <HAL_TIM_Base_Start_IT+0xe8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d115      	bne.n	80049c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_TIM_Base_Start_IT+0xec>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b06      	cmp	r3, #6
 80049ac:	d015      	beq.n	80049da <HAL_TIM_Base_Start_IT+0xbe>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b4:	d011      	beq.n	80049da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0201 	orr.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c6:	e008      	b.n	80049da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	e000      	b.n	80049dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40010000 	.word	0x40010000
 80049f0:	40000400 	.word	0x40000400
 80049f4:	40000800 	.word	0x40000800
 80049f8:	40000c00 	.word	0x40000c00
 80049fc:	40010400 	.word	0x40010400
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40001800 	.word	0x40001800
 8004a08:	00010007 	.word	0x00010007

08004a0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e049      	b.n	8004ab2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f841 	bl	8004aba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f000 fc04 	bl	8005258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e08f      	b.n	8004c04 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fc fc03 	bl	8001304 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6899      	ldr	r1, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b3e      	ldr	r3, [pc, #248]	; (8004c0c <HAL_TIM_Encoder_Init+0x13c>)
 8004b12:	400b      	ands	r3, r1
 8004b14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f000 fb99 	bl	8005258 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <HAL_TIM_Encoder_Init+0x140>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <HAL_TIM_Encoder_Init+0x144>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4b2a      	ldr	r3, [pc, #168]	; (8004c18 <HAL_TIM_Encoder_Init+0x148>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	011a      	lsls	r2, r3, #4
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	031b      	lsls	r3, r3, #12
 8004b90:	4313      	orrs	r3, r2
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b9e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004ba6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	fffebff8 	.word	0xfffebff8
 8004c10:	fffffcfc 	.word	0xfffffcfc
 8004c14:	fffff3f3 	.word	0xfffff3f3
 8004c18:	ffff0f0f 	.word	0xffff0f0f

08004c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0202 	mvn.w	r2, #2
 8004c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fadc 	bl	800521c <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 face 	bl	8005208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fadf 	bl	8005230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0204 	mvn.w	r2, #4
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fab2 	bl	800521c <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 faa4 	bl	8005208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fab5 	bl	8005230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d122      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d11b      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0208 	mvn.w	r2, #8
 8004cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fa88 	bl	800521c <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fa7a 	bl	8005208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fa8b 	bl	8005230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d122      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d11b      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0210 	mvn.w	r2, #16
 8004d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2208      	movs	r2, #8
 8004d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fa5e 	bl	800521c <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fa50 	bl	8005208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fa61 	bl	8005230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d10e      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d107      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0201 	mvn.w	r2, #1
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fb fd3c 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004daa:	2b80      	cmp	r3, #128	; 0x80
 8004dac:	d10e      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db8:	2b80      	cmp	r3, #128	; 0x80
 8004dba:	d107      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fe76 	bl	8005ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dda:	d10e      	bne.n	8004dfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de6:	2b80      	cmp	r3, #128	; 0x80
 8004de8:	d107      	bne.n	8004dfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fe69 	bl	8005acc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d10e      	bne.n	8004e26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d107      	bne.n	8004e26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fa0f 	bl	8005244 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d10e      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	d107      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f06f 0220 	mvn.w	r2, #32
 8004e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fe29 	bl	8005aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e0fd      	b.n	8005072 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b14      	cmp	r3, #20
 8004e82:	f200 80f0 	bhi.w	8005066 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004e86:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004ee1 	.word	0x08004ee1
 8004e90:	08005067 	.word	0x08005067
 8004e94:	08005067 	.word	0x08005067
 8004e98:	08005067 	.word	0x08005067
 8004e9c:	08004f21 	.word	0x08004f21
 8004ea0:	08005067 	.word	0x08005067
 8004ea4:	08005067 	.word	0x08005067
 8004ea8:	08005067 	.word	0x08005067
 8004eac:	08004f63 	.word	0x08004f63
 8004eb0:	08005067 	.word	0x08005067
 8004eb4:	08005067 	.word	0x08005067
 8004eb8:	08005067 	.word	0x08005067
 8004ebc:	08004fa3 	.word	0x08004fa3
 8004ec0:	08005067 	.word	0x08005067
 8004ec4:	08005067 	.word	0x08005067
 8004ec8:	08005067 	.word	0x08005067
 8004ecc:	08004fe5 	.word	0x08004fe5
 8004ed0:	08005067 	.word	0x08005067
 8004ed4:	08005067 	.word	0x08005067
 8004ed8:	08005067 	.word	0x08005067
 8004edc:	08005025 	.word	0x08005025
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fa56 	bl	8005398 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0208 	orr.w	r2, r2, #8
 8004efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0204 	bic.w	r2, r2, #4
 8004f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6999      	ldr	r1, [r3, #24]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	619a      	str	r2, [r3, #24]
      break;
 8004f1e:	e0a3      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 faa8 	bl	800547c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6999      	ldr	r1, [r3, #24]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	021a      	lsls	r2, r3, #8
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	619a      	str	r2, [r3, #24]
      break;
 8004f60:	e082      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 faff 	bl	800556c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0208 	orr.w	r2, r2, #8
 8004f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0204 	bic.w	r2, r2, #4
 8004f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69d9      	ldr	r1, [r3, #28]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	61da      	str	r2, [r3, #28]
      break;
 8004fa0:	e062      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fb55 	bl	8005658 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69d9      	ldr	r1, [r3, #28]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	021a      	lsls	r2, r3, #8
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	61da      	str	r2, [r3, #28]
      break;
 8004fe2:	e041      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fb8c 	bl	8005708 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0208 	orr.w	r2, r2, #8
 8004ffe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0204 	bic.w	r2, r2, #4
 800500e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005022:	e021      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fbbe 	bl	80057ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800503e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	021a      	lsls	r2, r3, #8
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005064:	e000      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005066:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop

0800507c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_TIM_ConfigClockSource+0x18>
 8005090:	2302      	movs	r3, #2
 8005092:	e0b3      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x180>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4b55      	ldr	r3, [pc, #340]	; (8005204 <HAL_TIM_ConfigClockSource+0x188>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050cc:	d03e      	beq.n	800514c <HAL_TIM_ConfigClockSource+0xd0>
 80050ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d2:	f200 8087 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x168>
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050da:	f000 8085 	beq.w	80051e8 <HAL_TIM_ConfigClockSource+0x16c>
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e2:	d87f      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x168>
 80050e4:	2b70      	cmp	r3, #112	; 0x70
 80050e6:	d01a      	beq.n	800511e <HAL_TIM_ConfigClockSource+0xa2>
 80050e8:	2b70      	cmp	r3, #112	; 0x70
 80050ea:	d87b      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x168>
 80050ec:	2b60      	cmp	r3, #96	; 0x60
 80050ee:	d050      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x116>
 80050f0:	2b60      	cmp	r3, #96	; 0x60
 80050f2:	d877      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x168>
 80050f4:	2b50      	cmp	r3, #80	; 0x50
 80050f6:	d03c      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0xf6>
 80050f8:	2b50      	cmp	r3, #80	; 0x50
 80050fa:	d873      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x168>
 80050fc:	2b40      	cmp	r3, #64	; 0x40
 80050fe:	d058      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x136>
 8005100:	2b40      	cmp	r3, #64	; 0x40
 8005102:	d86f      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x168>
 8005104:	2b30      	cmp	r3, #48	; 0x30
 8005106:	d064      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x156>
 8005108:	2b30      	cmp	r3, #48	; 0x30
 800510a:	d86b      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x168>
 800510c:	2b20      	cmp	r3, #32
 800510e:	d060      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x156>
 8005110:	2b20      	cmp	r3, #32
 8005112:	d867      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x168>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d05c      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x156>
 8005118:	2b10      	cmp	r3, #16
 800511a:	d05a      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800511c:	e062      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6899      	ldr	r1, [r3, #8]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f000 fc0b 	bl	8005948 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005140:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	609a      	str	r2, [r3, #8]
      break;
 800514a:	e04e      	b.n	80051ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6899      	ldr	r1, [r3, #8]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f000 fbf4 	bl	8005948 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800516e:	609a      	str	r2, [r3, #8]
      break;
 8005170:	e03b      	b.n	80051ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6859      	ldr	r1, [r3, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	461a      	mov	r2, r3
 8005180:	f000 fb68 	bl	8005854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2150      	movs	r1, #80	; 0x50
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fbc1 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 8005190:	e02b      	b.n	80051ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	6859      	ldr	r1, [r3, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	461a      	mov	r2, r3
 80051a0:	f000 fb87 	bl	80058b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2160      	movs	r1, #96	; 0x60
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fbb1 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 80051b0:	e01b      	b.n	80051ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6859      	ldr	r1, [r3, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	461a      	mov	r2, r3
 80051c0:	f000 fb48 	bl	8005854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2140      	movs	r1, #64	; 0x40
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fba1 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 80051d0:	e00b      	b.n	80051ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f000 fb98 	bl	8005912 <TIM_ITRx_SetConfig>
        break;
 80051e2:	e002      	b.n	80051ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051e4:	bf00      	nop
 80051e6:	e000      	b.n	80051ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	fffeff88 	.word	0xfffeff88

08005208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a40      	ldr	r2, [pc, #256]	; (800536c <TIM_Base_SetConfig+0x114>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005276:	d00f      	beq.n	8005298 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a3d      	ldr	r2, [pc, #244]	; (8005370 <TIM_Base_SetConfig+0x118>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00b      	beq.n	8005298 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a3c      	ldr	r2, [pc, #240]	; (8005374 <TIM_Base_SetConfig+0x11c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d007      	beq.n	8005298 <TIM_Base_SetConfig+0x40>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a3b      	ldr	r2, [pc, #236]	; (8005378 <TIM_Base_SetConfig+0x120>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d003      	beq.n	8005298 <TIM_Base_SetConfig+0x40>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a3a      	ldr	r2, [pc, #232]	; (800537c <TIM_Base_SetConfig+0x124>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d108      	bne.n	80052aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a2f      	ldr	r2, [pc, #188]	; (800536c <TIM_Base_SetConfig+0x114>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d02b      	beq.n	800530a <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b8:	d027      	beq.n	800530a <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a2c      	ldr	r2, [pc, #176]	; (8005370 <TIM_Base_SetConfig+0x118>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d023      	beq.n	800530a <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a2b      	ldr	r2, [pc, #172]	; (8005374 <TIM_Base_SetConfig+0x11c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d01f      	beq.n	800530a <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a2a      	ldr	r2, [pc, #168]	; (8005378 <TIM_Base_SetConfig+0x120>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01b      	beq.n	800530a <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a29      	ldr	r2, [pc, #164]	; (800537c <TIM_Base_SetConfig+0x124>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d017      	beq.n	800530a <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a28      	ldr	r2, [pc, #160]	; (8005380 <TIM_Base_SetConfig+0x128>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a27      	ldr	r2, [pc, #156]	; (8005384 <TIM_Base_SetConfig+0x12c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00f      	beq.n	800530a <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a26      	ldr	r2, [pc, #152]	; (8005388 <TIM_Base_SetConfig+0x130>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00b      	beq.n	800530a <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a25      	ldr	r2, [pc, #148]	; (800538c <TIM_Base_SetConfig+0x134>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d007      	beq.n	800530a <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a24      	ldr	r2, [pc, #144]	; (8005390 <TIM_Base_SetConfig+0x138>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d003      	beq.n	800530a <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a23      	ldr	r2, [pc, #140]	; (8005394 <TIM_Base_SetConfig+0x13c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d108      	bne.n	800531c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a0a      	ldr	r2, [pc, #40]	; (800536c <TIM_Base_SetConfig+0x114>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d003      	beq.n	8005350 <TIM_Base_SetConfig+0xf8>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a0c      	ldr	r2, [pc, #48]	; (800537c <TIM_Base_SetConfig+0x124>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d103      	bne.n	8005358 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	615a      	str	r2, [r3, #20]
}
 800535e:	bf00      	nop
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40010000 	.word	0x40010000
 8005370:	40000400 	.word	0x40000400
 8005374:	40000800 	.word	0x40000800
 8005378:	40000c00 	.word	0x40000c00
 800537c:	40010400 	.word	0x40010400
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800
 800538c:	40001800 	.word	0x40001800
 8005390:	40001c00 	.word	0x40001c00
 8005394:	40002000 	.word	0x40002000

08005398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f023 0201 	bic.w	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4b2b      	ldr	r3, [pc, #172]	; (8005470 <TIM_OC1_SetConfig+0xd8>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 0303 	bic.w	r3, r3, #3
 80053ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f023 0302 	bic.w	r3, r3, #2
 80053e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a21      	ldr	r2, [pc, #132]	; (8005474 <TIM_OC1_SetConfig+0xdc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d003      	beq.n	80053fc <TIM_OC1_SetConfig+0x64>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a20      	ldr	r2, [pc, #128]	; (8005478 <TIM_OC1_SetConfig+0xe0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d10c      	bne.n	8005416 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f023 0308 	bic.w	r3, r3, #8
 8005402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f023 0304 	bic.w	r3, r3, #4
 8005414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a16      	ldr	r2, [pc, #88]	; (8005474 <TIM_OC1_SetConfig+0xdc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d003      	beq.n	8005426 <TIM_OC1_SetConfig+0x8e>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a15      	ldr	r2, [pc, #84]	; (8005478 <TIM_OC1_SetConfig+0xe0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d111      	bne.n	800544a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800542c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	621a      	str	r2, [r3, #32]
}
 8005464:	bf00      	nop
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	fffeff8f 	.word	0xfffeff8f
 8005474:	40010000 	.word	0x40010000
 8005478:	40010400 	.word	0x40010400

0800547c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f023 0210 	bic.w	r2, r3, #16
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4b2e      	ldr	r3, [pc, #184]	; (8005560 <TIM_OC2_SetConfig+0xe4>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0320 	bic.w	r3, r3, #32
 80054c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a23      	ldr	r2, [pc, #140]	; (8005564 <TIM_OC2_SetConfig+0xe8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC2_SetConfig+0x68>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a22      	ldr	r2, [pc, #136]	; (8005568 <TIM_OC2_SetConfig+0xec>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10d      	bne.n	8005500 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a18      	ldr	r2, [pc, #96]	; (8005564 <TIM_OC2_SetConfig+0xe8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <TIM_OC2_SetConfig+0x94>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a17      	ldr	r2, [pc, #92]	; (8005568 <TIM_OC2_SetConfig+0xec>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d113      	bne.n	8005538 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800551e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	feff8fff 	.word	0xfeff8fff
 8005564:	40010000 	.word	0x40010000
 8005568:	40010400 	.word	0x40010400

0800556c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4b2d      	ldr	r3, [pc, #180]	; (800564c <TIM_OC3_SetConfig+0xe0>)
 8005598:	4013      	ands	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0303 	bic.w	r3, r3, #3
 80055a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a22      	ldr	r2, [pc, #136]	; (8005650 <TIM_OC3_SetConfig+0xe4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_OC3_SetConfig+0x66>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a21      	ldr	r2, [pc, #132]	; (8005654 <TIM_OC3_SetConfig+0xe8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10d      	bne.n	80055ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a17      	ldr	r2, [pc, #92]	; (8005650 <TIM_OC3_SetConfig+0xe4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <TIM_OC3_SetConfig+0x92>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a16      	ldr	r2, [pc, #88]	; (8005654 <TIM_OC3_SetConfig+0xe8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d113      	bne.n	8005626 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800560c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	621a      	str	r2, [r3, #32]
}
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	fffeff8f 	.word	0xfffeff8f
 8005650:	40010000 	.word	0x40010000
 8005654:	40010400 	.word	0x40010400

08005658 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4b1e      	ldr	r3, [pc, #120]	; (80056fc <TIM_OC4_SetConfig+0xa4>)
 8005684:	4013      	ands	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800568e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	021b      	lsls	r3, r3, #8
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	031b      	lsls	r3, r3, #12
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a13      	ldr	r2, [pc, #76]	; (8005700 <TIM_OC4_SetConfig+0xa8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_OC4_SetConfig+0x68>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a12      	ldr	r2, [pc, #72]	; (8005704 <TIM_OC4_SetConfig+0xac>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d109      	bne.n	80056d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	019b      	lsls	r3, r3, #6
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	621a      	str	r2, [r3, #32]
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	feff8fff 	.word	0xfeff8fff
 8005700:	40010000 	.word	0x40010000
 8005704:	40010400 	.word	0x40010400

08005708 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <TIM_OC5_SetConfig+0x98>)
 8005734:	4013      	ands	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005748:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a12      	ldr	r2, [pc, #72]	; (80057a4 <TIM_OC5_SetConfig+0x9c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d003      	beq.n	8005766 <TIM_OC5_SetConfig+0x5e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a11      	ldr	r2, [pc, #68]	; (80057a8 <TIM_OC5_SetConfig+0xa0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d109      	bne.n	800577a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800576c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	621a      	str	r2, [r3, #32]
}
 8005794:	bf00      	nop
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	fffeff8f 	.word	0xfffeff8f
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40010400 	.word	0x40010400

080057ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4b1c      	ldr	r3, [pc, #112]	; (8005848 <TIM_OC6_SetConfig+0x9c>)
 80057d8:	4013      	ands	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	051b      	lsls	r3, r3, #20
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a13      	ldr	r2, [pc, #76]	; (800584c <TIM_OC6_SetConfig+0xa0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_OC6_SetConfig+0x60>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a12      	ldr	r2, [pc, #72]	; (8005850 <TIM_OC6_SetConfig+0xa4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d109      	bne.n	8005820 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005812:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	029b      	lsls	r3, r3, #10
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	feff8fff 	.word	0xfeff8fff
 800584c:	40010000 	.word	0x40010000
 8005850:	40010400 	.word	0x40010400

08005854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f023 0201 	bic.w	r2, r3, #1
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800587e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f023 030a 	bic.w	r3, r3, #10
 8005890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b087      	sub	sp, #28
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f023 0210 	bic.w	r2, r3, #16
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	031b      	lsls	r3, r3, #12
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	621a      	str	r2, [r3, #32]
}
 8005906:	bf00      	nop
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	f043 0307 	orr.w	r3, r3, #7
 8005934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	609a      	str	r2, [r3, #8]
}
 800593c:	bf00      	nop
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	021a      	lsls	r2, r3, #8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	431a      	orrs	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4313      	orrs	r3, r2
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	609a      	str	r2, [r3, #8]
}
 800597c:	bf00      	nop
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800599c:	2302      	movs	r3, #2
 800599e:	e06d      	b.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a30      	ldr	r2, [pc, #192]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d004      	beq.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a2f      	ldr	r2, [pc, #188]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d108      	bne.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a20      	ldr	r2, [pc, #128]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d022      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a12:	d01d      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1d      	ldr	r2, [pc, #116]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d018      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1a      	ldr	r2, [pc, #104]	; (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00e      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d009      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a16      	ldr	r2, [pc, #88]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a15      	ldr	r2, [pc, #84]	; (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d10c      	bne.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40010400 	.word	0x40010400
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40001800 	.word	0x40001800

08005aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e040      	b.n	8005b74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fb fcb2 	bl	800146c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2224      	movs	r2, #36	; 0x24
 8005b0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0201 	bic.w	r2, r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fae6 	bl	80060f0 <UART_SetConfig>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e022      	b.n	8005b74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fd3c 	bl	80065b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fdc3 	bl	80066f8 <UART_CheckIdleState>
 8005b72:	4603      	mov	r3, r0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	4613      	mov	r3, r2
 8005b88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d145      	bne.n	8005c1e <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_UART_Transmit_IT+0x22>
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e03e      	b.n	8005c20 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_UART_Transmit_IT+0x34>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e037      	b.n	8005c20 <HAL_UART_Transmit_IT+0xa4>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	88fa      	ldrh	r2, [r7, #6]
 8005bc2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	88fa      	ldrh	r2, [r7, #6]
 8005bca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2221      	movs	r2, #33	; 0x21
 8005be0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bea:	d107      	bne.n	8005bfc <HAL_UART_Transmit_IT+0x80>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d103      	bne.n	8005bfc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4a0d      	ldr	r2, [pc, #52]	; (8005c2c <HAL_UART_Transmit_IT+0xb0>)
 8005bf8:	669a      	str	r2, [r3, #104]	; 0x68
 8005bfa:	e002      	b.n	8005c02 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4a0c      	ldr	r2, [pc, #48]	; (8005c30 <HAL_UART_Transmit_IT+0xb4>)
 8005c00:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c18:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e000      	b.n	8005c20 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8005c1e:	2302      	movs	r3, #2
  }
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	08006a91 	.word	0x08006a91
 8005c30:	08006a1f 	.word	0x08006a1f

08005c34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	d12c      	bne.n	8005ca4 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <HAL_UART_Receive_IT+0x22>
 8005c50:	88fb      	ldrh	r3, [r7, #6]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e025      	b.n	8005ca6 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_UART_Receive_IT+0x34>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e01e      	b.n	8005ca6 <HAL_UART_Receive_IT+0x72>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d007      	beq.n	8005c94 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005c92:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	461a      	mov	r2, r3
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fdf2 	bl	8006884 <UART_Start_Receive_IT>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	e000      	b.n	8005ca6 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005ca4:	2302      	movs	r3, #2
  }
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d113      	bne.n	8005d08 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00e      	beq.n	8005d08 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f003 0320 	and.w	r3, r3, #32
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d009      	beq.n	8005d08 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 81cc 	beq.w	8006096 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	4798      	blx	r3
      }
      return;
 8005d06:	e1c6      	b.n	8006096 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80e3 	beq.w	8005ed6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d105      	bne.n	8005d26 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	4ba5      	ldr	r3, [pc, #660]	; (8005fb4 <HAL_UART_IRQHandler+0x304>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80d8 	beq.w	8005ed6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d010      	beq.n	8005d52 <HAL_UART_IRQHandler+0xa2>
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00b      	beq.n	8005d52 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d48:	f043 0201 	orr.w	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d010      	beq.n	8005d7e <HAL_UART_IRQHandler+0xce>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00b      	beq.n	8005d7e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d74:	f043 0204 	orr.w	r2, r3, #4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d010      	beq.n	8005daa <HAL_UART_IRQHandler+0xfa>
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2204      	movs	r2, #4
 8005d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005da0:	f043 0202 	orr.w	r2, r3, #2
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d015      	beq.n	8005de0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d104      	bne.n	8005dc8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00b      	beq.n	8005de0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd6:	f043 0208 	orr.w	r2, r3, #8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d011      	beq.n	8005e0e <HAL_UART_IRQHandler+0x15e>
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00c      	beq.n	8005e0e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e04:	f043 0220 	orr.w	r2, r3, #32
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8140 	beq.w	800609a <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00c      	beq.n	8005e3e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e44:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	d004      	beq.n	8005e5e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d031      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fd98 	bl	8006994 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b40      	cmp	r3, #64	; 0x40
 8005e70:	d123      	bne.n	8005eba <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e80:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d013      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8e:	4a4a      	ldr	r2, [pc, #296]	; (8005fb8 <HAL_UART_IRQHandler+0x308>)
 8005e90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fc fc2e 	bl	80026f8 <HAL_DMA_Abort_IT>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d017      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005eac:	4610      	mov	r0, r2
 8005eae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb0:	e00f      	b.n	8005ed2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f8fc 	bl	80060b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb8:	e00b      	b.n	8005ed2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f8f8 	bl	80060b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec0:	e007      	b.n	8005ed2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f8f4 	bl	80060b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005ed0:	e0e3      	b.n	800609a <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed2:	bf00      	nop
    return;
 8005ed4:	e0e1      	b.n	800609a <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	f040 80a7 	bne.w	800602e <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f003 0310 	and.w	r3, r3, #16
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 80a1 	beq.w	800602e <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 809b 	beq.w	800602e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2210      	movs	r2, #16
 8005efe:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0a:	2b40      	cmp	r3, #64	; 0x40
 8005f0c:	d156      	bne.n	8005fbc <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005f18:	893b      	ldrh	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 80bf 	beq.w	800609e <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f26:	893a      	ldrh	r2, [r7, #8]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	f080 80b8 	bcs.w	800609e <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	893a      	ldrh	r2, [r7, #8]
 8005f32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f40:	d02a      	beq.n	8005f98 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0201 	bic.w	r2, r2, #1
 8005f60:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f70:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0210 	bic.w	r2, r2, #16
 8005f8c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fc fb40 	bl	8002618 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f889 	bl	80060c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fb2:	e074      	b.n	800609e <HAL_UART_IRQHandler+0x3ee>
 8005fb4:	04000120 	.word	0x04000120
 8005fb8:	080069f3 	.word	0x080069f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d063      	beq.n	80060a2 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8005fda:	897b      	ldrh	r3, [r7, #10]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d060      	beq.n	80060a2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0210 	bic.w	r2, r2, #16
 8006020:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006022:	897b      	ldrh	r3, [r7, #10]
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f84c 	bl	80060c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800602c:	e039      	b.n	80060a2 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00d      	beq.n	8006054 <HAL_UART_IRQHandler+0x3a4>
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800604a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f845 	bl	80060dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006052:	e029      	b.n	80060a8 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01a      	beq.n	80060a6 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4798      	blx	r3
    }
    return;
 8006078:	e015      	b.n	80060a6 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d011      	beq.n	80060a8 <HAL_UART_IRQHandler+0x3f8>
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00c      	beq.n	80060a8 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fd3c 	bl	8006b0c <UART_EndTransmit_IT>
    return;
 8006094:	e008      	b.n	80060a8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8006096:	bf00      	nop
 8006098:	e006      	b.n	80060a8 <HAL_UART_IRQHandler+0x3f8>
    return;
 800609a:	bf00      	nop
 800609c:	e004      	b.n	80060a8 <HAL_UART_IRQHandler+0x3f8>
      return;
 800609e:	bf00      	nop
 80060a0:	e002      	b.n	80060a8 <HAL_UART_IRQHandler+0x3f8>
      return;
 80060a2:	bf00      	nop
 80060a4:	e000      	b.n	80060a8 <HAL_UART_IRQHandler+0x3f8>
    return;
 80060a6:	bf00      	nop
  }

}
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop

080060b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	4ba7      	ldr	r3, [pc, #668]	; (80063b8 <UART_SetConfig+0x2c8>)
 800611c:	4013      	ands	r3, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	6979      	ldr	r1, [r7, #20]
 8006124:	430b      	orrs	r3, r1
 8006126:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68da      	ldr	r2, [r3, #12]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	430a      	orrs	r2, r1
 8006160:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a95      	ldr	r2, [pc, #596]	; (80063bc <UART_SetConfig+0x2cc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d120      	bne.n	80061ae <UART_SetConfig+0xbe>
 800616c:	4b94      	ldr	r3, [pc, #592]	; (80063c0 <UART_SetConfig+0x2d0>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	2b03      	cmp	r3, #3
 8006178:	d816      	bhi.n	80061a8 <UART_SetConfig+0xb8>
 800617a:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <UART_SetConfig+0x90>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	08006191 	.word	0x08006191
 8006184:	0800619d 	.word	0x0800619d
 8006188:	08006197 	.word	0x08006197
 800618c:	080061a3 	.word	0x080061a3
 8006190:	2301      	movs	r3, #1
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	e14f      	b.n	8006436 <UART_SetConfig+0x346>
 8006196:	2302      	movs	r3, #2
 8006198:	77fb      	strb	r3, [r7, #31]
 800619a:	e14c      	b.n	8006436 <UART_SetConfig+0x346>
 800619c:	2304      	movs	r3, #4
 800619e:	77fb      	strb	r3, [r7, #31]
 80061a0:	e149      	b.n	8006436 <UART_SetConfig+0x346>
 80061a2:	2308      	movs	r3, #8
 80061a4:	77fb      	strb	r3, [r7, #31]
 80061a6:	e146      	b.n	8006436 <UART_SetConfig+0x346>
 80061a8:	2310      	movs	r3, #16
 80061aa:	77fb      	strb	r3, [r7, #31]
 80061ac:	e143      	b.n	8006436 <UART_SetConfig+0x346>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a84      	ldr	r2, [pc, #528]	; (80063c4 <UART_SetConfig+0x2d4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d132      	bne.n	800621e <UART_SetConfig+0x12e>
 80061b8:	4b81      	ldr	r3, [pc, #516]	; (80063c0 <UART_SetConfig+0x2d0>)
 80061ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061be:	f003 030c 	and.w	r3, r3, #12
 80061c2:	2b0c      	cmp	r3, #12
 80061c4:	d828      	bhi.n	8006218 <UART_SetConfig+0x128>
 80061c6:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <UART_SetConfig+0xdc>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	08006201 	.word	0x08006201
 80061d0:	08006219 	.word	0x08006219
 80061d4:	08006219 	.word	0x08006219
 80061d8:	08006219 	.word	0x08006219
 80061dc:	0800620d 	.word	0x0800620d
 80061e0:	08006219 	.word	0x08006219
 80061e4:	08006219 	.word	0x08006219
 80061e8:	08006219 	.word	0x08006219
 80061ec:	08006207 	.word	0x08006207
 80061f0:	08006219 	.word	0x08006219
 80061f4:	08006219 	.word	0x08006219
 80061f8:	08006219 	.word	0x08006219
 80061fc:	08006213 	.word	0x08006213
 8006200:	2300      	movs	r3, #0
 8006202:	77fb      	strb	r3, [r7, #31]
 8006204:	e117      	b.n	8006436 <UART_SetConfig+0x346>
 8006206:	2302      	movs	r3, #2
 8006208:	77fb      	strb	r3, [r7, #31]
 800620a:	e114      	b.n	8006436 <UART_SetConfig+0x346>
 800620c:	2304      	movs	r3, #4
 800620e:	77fb      	strb	r3, [r7, #31]
 8006210:	e111      	b.n	8006436 <UART_SetConfig+0x346>
 8006212:	2308      	movs	r3, #8
 8006214:	77fb      	strb	r3, [r7, #31]
 8006216:	e10e      	b.n	8006436 <UART_SetConfig+0x346>
 8006218:	2310      	movs	r3, #16
 800621a:	77fb      	strb	r3, [r7, #31]
 800621c:	e10b      	b.n	8006436 <UART_SetConfig+0x346>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a69      	ldr	r2, [pc, #420]	; (80063c8 <UART_SetConfig+0x2d8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d120      	bne.n	800626a <UART_SetConfig+0x17a>
 8006228:	4b65      	ldr	r3, [pc, #404]	; (80063c0 <UART_SetConfig+0x2d0>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006232:	2b30      	cmp	r3, #48	; 0x30
 8006234:	d013      	beq.n	800625e <UART_SetConfig+0x16e>
 8006236:	2b30      	cmp	r3, #48	; 0x30
 8006238:	d814      	bhi.n	8006264 <UART_SetConfig+0x174>
 800623a:	2b20      	cmp	r3, #32
 800623c:	d009      	beq.n	8006252 <UART_SetConfig+0x162>
 800623e:	2b20      	cmp	r3, #32
 8006240:	d810      	bhi.n	8006264 <UART_SetConfig+0x174>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <UART_SetConfig+0x15c>
 8006246:	2b10      	cmp	r3, #16
 8006248:	d006      	beq.n	8006258 <UART_SetConfig+0x168>
 800624a:	e00b      	b.n	8006264 <UART_SetConfig+0x174>
 800624c:	2300      	movs	r3, #0
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e0f1      	b.n	8006436 <UART_SetConfig+0x346>
 8006252:	2302      	movs	r3, #2
 8006254:	77fb      	strb	r3, [r7, #31]
 8006256:	e0ee      	b.n	8006436 <UART_SetConfig+0x346>
 8006258:	2304      	movs	r3, #4
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	e0eb      	b.n	8006436 <UART_SetConfig+0x346>
 800625e:	2308      	movs	r3, #8
 8006260:	77fb      	strb	r3, [r7, #31]
 8006262:	e0e8      	b.n	8006436 <UART_SetConfig+0x346>
 8006264:	2310      	movs	r3, #16
 8006266:	77fb      	strb	r3, [r7, #31]
 8006268:	e0e5      	b.n	8006436 <UART_SetConfig+0x346>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a57      	ldr	r2, [pc, #348]	; (80063cc <UART_SetConfig+0x2dc>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d120      	bne.n	80062b6 <UART_SetConfig+0x1c6>
 8006274:	4b52      	ldr	r3, [pc, #328]	; (80063c0 <UART_SetConfig+0x2d0>)
 8006276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800627e:	2bc0      	cmp	r3, #192	; 0xc0
 8006280:	d013      	beq.n	80062aa <UART_SetConfig+0x1ba>
 8006282:	2bc0      	cmp	r3, #192	; 0xc0
 8006284:	d814      	bhi.n	80062b0 <UART_SetConfig+0x1c0>
 8006286:	2b80      	cmp	r3, #128	; 0x80
 8006288:	d009      	beq.n	800629e <UART_SetConfig+0x1ae>
 800628a:	2b80      	cmp	r3, #128	; 0x80
 800628c:	d810      	bhi.n	80062b0 <UART_SetConfig+0x1c0>
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <UART_SetConfig+0x1a8>
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d006      	beq.n	80062a4 <UART_SetConfig+0x1b4>
 8006296:	e00b      	b.n	80062b0 <UART_SetConfig+0x1c0>
 8006298:	2300      	movs	r3, #0
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e0cb      	b.n	8006436 <UART_SetConfig+0x346>
 800629e:	2302      	movs	r3, #2
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e0c8      	b.n	8006436 <UART_SetConfig+0x346>
 80062a4:	2304      	movs	r3, #4
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e0c5      	b.n	8006436 <UART_SetConfig+0x346>
 80062aa:	2308      	movs	r3, #8
 80062ac:	77fb      	strb	r3, [r7, #31]
 80062ae:	e0c2      	b.n	8006436 <UART_SetConfig+0x346>
 80062b0:	2310      	movs	r3, #16
 80062b2:	77fb      	strb	r3, [r7, #31]
 80062b4:	e0bf      	b.n	8006436 <UART_SetConfig+0x346>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a45      	ldr	r2, [pc, #276]	; (80063d0 <UART_SetConfig+0x2e0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d125      	bne.n	800630c <UART_SetConfig+0x21c>
 80062c0:	4b3f      	ldr	r3, [pc, #252]	; (80063c0 <UART_SetConfig+0x2d0>)
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ce:	d017      	beq.n	8006300 <UART_SetConfig+0x210>
 80062d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062d4:	d817      	bhi.n	8006306 <UART_SetConfig+0x216>
 80062d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062da:	d00b      	beq.n	80062f4 <UART_SetConfig+0x204>
 80062dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e0:	d811      	bhi.n	8006306 <UART_SetConfig+0x216>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <UART_SetConfig+0x1fe>
 80062e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ea:	d006      	beq.n	80062fa <UART_SetConfig+0x20a>
 80062ec:	e00b      	b.n	8006306 <UART_SetConfig+0x216>
 80062ee:	2300      	movs	r3, #0
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e0a0      	b.n	8006436 <UART_SetConfig+0x346>
 80062f4:	2302      	movs	r3, #2
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	e09d      	b.n	8006436 <UART_SetConfig+0x346>
 80062fa:	2304      	movs	r3, #4
 80062fc:	77fb      	strb	r3, [r7, #31]
 80062fe:	e09a      	b.n	8006436 <UART_SetConfig+0x346>
 8006300:	2308      	movs	r3, #8
 8006302:	77fb      	strb	r3, [r7, #31]
 8006304:	e097      	b.n	8006436 <UART_SetConfig+0x346>
 8006306:	2310      	movs	r3, #16
 8006308:	77fb      	strb	r3, [r7, #31]
 800630a:	e094      	b.n	8006436 <UART_SetConfig+0x346>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a30      	ldr	r2, [pc, #192]	; (80063d4 <UART_SetConfig+0x2e4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d125      	bne.n	8006362 <UART_SetConfig+0x272>
 8006316:	4b2a      	ldr	r3, [pc, #168]	; (80063c0 <UART_SetConfig+0x2d0>)
 8006318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006320:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006324:	d017      	beq.n	8006356 <UART_SetConfig+0x266>
 8006326:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800632a:	d817      	bhi.n	800635c <UART_SetConfig+0x26c>
 800632c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006330:	d00b      	beq.n	800634a <UART_SetConfig+0x25a>
 8006332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006336:	d811      	bhi.n	800635c <UART_SetConfig+0x26c>
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <UART_SetConfig+0x254>
 800633c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006340:	d006      	beq.n	8006350 <UART_SetConfig+0x260>
 8006342:	e00b      	b.n	800635c <UART_SetConfig+0x26c>
 8006344:	2301      	movs	r3, #1
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e075      	b.n	8006436 <UART_SetConfig+0x346>
 800634a:	2302      	movs	r3, #2
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e072      	b.n	8006436 <UART_SetConfig+0x346>
 8006350:	2304      	movs	r3, #4
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e06f      	b.n	8006436 <UART_SetConfig+0x346>
 8006356:	2308      	movs	r3, #8
 8006358:	77fb      	strb	r3, [r7, #31]
 800635a:	e06c      	b.n	8006436 <UART_SetConfig+0x346>
 800635c:	2310      	movs	r3, #16
 800635e:	77fb      	strb	r3, [r7, #31]
 8006360:	e069      	b.n	8006436 <UART_SetConfig+0x346>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1c      	ldr	r2, [pc, #112]	; (80063d8 <UART_SetConfig+0x2e8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d137      	bne.n	80063dc <UART_SetConfig+0x2ec>
 800636c:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <UART_SetConfig+0x2d0>)
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006372:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006376:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800637a:	d017      	beq.n	80063ac <UART_SetConfig+0x2bc>
 800637c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006380:	d817      	bhi.n	80063b2 <UART_SetConfig+0x2c2>
 8006382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006386:	d00b      	beq.n	80063a0 <UART_SetConfig+0x2b0>
 8006388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638c:	d811      	bhi.n	80063b2 <UART_SetConfig+0x2c2>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <UART_SetConfig+0x2aa>
 8006392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006396:	d006      	beq.n	80063a6 <UART_SetConfig+0x2b6>
 8006398:	e00b      	b.n	80063b2 <UART_SetConfig+0x2c2>
 800639a:	2300      	movs	r3, #0
 800639c:	77fb      	strb	r3, [r7, #31]
 800639e:	e04a      	b.n	8006436 <UART_SetConfig+0x346>
 80063a0:	2302      	movs	r3, #2
 80063a2:	77fb      	strb	r3, [r7, #31]
 80063a4:	e047      	b.n	8006436 <UART_SetConfig+0x346>
 80063a6:	2304      	movs	r3, #4
 80063a8:	77fb      	strb	r3, [r7, #31]
 80063aa:	e044      	b.n	8006436 <UART_SetConfig+0x346>
 80063ac:	2308      	movs	r3, #8
 80063ae:	77fb      	strb	r3, [r7, #31]
 80063b0:	e041      	b.n	8006436 <UART_SetConfig+0x346>
 80063b2:	2310      	movs	r3, #16
 80063b4:	77fb      	strb	r3, [r7, #31]
 80063b6:	e03e      	b.n	8006436 <UART_SetConfig+0x346>
 80063b8:	efff69f3 	.word	0xefff69f3
 80063bc:	40011000 	.word	0x40011000
 80063c0:	40023800 	.word	0x40023800
 80063c4:	40004400 	.word	0x40004400
 80063c8:	40004800 	.word	0x40004800
 80063cc:	40004c00 	.word	0x40004c00
 80063d0:	40005000 	.word	0x40005000
 80063d4:	40011400 	.word	0x40011400
 80063d8:	40007800 	.word	0x40007800
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a71      	ldr	r2, [pc, #452]	; (80065a8 <UART_SetConfig+0x4b8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d125      	bne.n	8006432 <UART_SetConfig+0x342>
 80063e6:	4b71      	ldr	r3, [pc, #452]	; (80065ac <UART_SetConfig+0x4bc>)
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80063f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063f4:	d017      	beq.n	8006426 <UART_SetConfig+0x336>
 80063f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063fa:	d817      	bhi.n	800642c <UART_SetConfig+0x33c>
 80063fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006400:	d00b      	beq.n	800641a <UART_SetConfig+0x32a>
 8006402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006406:	d811      	bhi.n	800642c <UART_SetConfig+0x33c>
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <UART_SetConfig+0x324>
 800640c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006410:	d006      	beq.n	8006420 <UART_SetConfig+0x330>
 8006412:	e00b      	b.n	800642c <UART_SetConfig+0x33c>
 8006414:	2300      	movs	r3, #0
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e00d      	b.n	8006436 <UART_SetConfig+0x346>
 800641a:	2302      	movs	r3, #2
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e00a      	b.n	8006436 <UART_SetConfig+0x346>
 8006420:	2304      	movs	r3, #4
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e007      	b.n	8006436 <UART_SetConfig+0x346>
 8006426:	2308      	movs	r3, #8
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e004      	b.n	8006436 <UART_SetConfig+0x346>
 800642c:	2310      	movs	r3, #16
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e001      	b.n	8006436 <UART_SetConfig+0x346>
 8006432:	2310      	movs	r3, #16
 8006434:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800643e:	d15b      	bne.n	80064f8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006440:	7ffb      	ldrb	r3, [r7, #31]
 8006442:	2b08      	cmp	r3, #8
 8006444:	d827      	bhi.n	8006496 <UART_SetConfig+0x3a6>
 8006446:	a201      	add	r2, pc, #4	; (adr r2, 800644c <UART_SetConfig+0x35c>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	08006471 	.word	0x08006471
 8006450:	08006479 	.word	0x08006479
 8006454:	08006481 	.word	0x08006481
 8006458:	08006497 	.word	0x08006497
 800645c:	08006487 	.word	0x08006487
 8006460:	08006497 	.word	0x08006497
 8006464:	08006497 	.word	0x08006497
 8006468:	08006497 	.word	0x08006497
 800646c:	0800648f 	.word	0x0800648f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006470:	f7fd fd02 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8006474:	61b8      	str	r0, [r7, #24]
        break;
 8006476:	e013      	b.n	80064a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006478:	f7fd fd12 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 800647c:	61b8      	str	r0, [r7, #24]
        break;
 800647e:	e00f      	b.n	80064a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006480:	4b4b      	ldr	r3, [pc, #300]	; (80065b0 <UART_SetConfig+0x4c0>)
 8006482:	61bb      	str	r3, [r7, #24]
        break;
 8006484:	e00c      	b.n	80064a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006486:	f7fd fc35 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 800648a:	61b8      	str	r0, [r7, #24]
        break;
 800648c:	e008      	b.n	80064a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800648e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006492:	61bb      	str	r3, [r7, #24]
        break;
 8006494:	e004      	b.n	80064a0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	77bb      	strb	r3, [r7, #30]
        break;
 800649e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d074      	beq.n	8006590 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	005a      	lsls	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	085b      	lsrs	r3, r3, #1
 80064b0:	441a      	add	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b0f      	cmp	r3, #15
 80064c2:	d916      	bls.n	80064f2 <UART_SetConfig+0x402>
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ca:	d212      	bcs.n	80064f2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	f023 030f 	bic.w	r3, r3, #15
 80064d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	89fb      	ldrh	r3, [r7, #14]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	89fa      	ldrh	r2, [r7, #14]
 80064ee:	60da      	str	r2, [r3, #12]
 80064f0:	e04e      	b.n	8006590 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	77bb      	strb	r3, [r7, #30]
 80064f6:	e04b      	b.n	8006590 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064f8:	7ffb      	ldrb	r3, [r7, #31]
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	d827      	bhi.n	800654e <UART_SetConfig+0x45e>
 80064fe:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <UART_SetConfig+0x414>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	08006529 	.word	0x08006529
 8006508:	08006531 	.word	0x08006531
 800650c:	08006539 	.word	0x08006539
 8006510:	0800654f 	.word	0x0800654f
 8006514:	0800653f 	.word	0x0800653f
 8006518:	0800654f 	.word	0x0800654f
 800651c:	0800654f 	.word	0x0800654f
 8006520:	0800654f 	.word	0x0800654f
 8006524:	08006547 	.word	0x08006547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006528:	f7fd fca6 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 800652c:	61b8      	str	r0, [r7, #24]
        break;
 800652e:	e013      	b.n	8006558 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006530:	f7fd fcb6 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 8006534:	61b8      	str	r0, [r7, #24]
        break;
 8006536:	e00f      	b.n	8006558 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006538:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <UART_SetConfig+0x4c0>)
 800653a:	61bb      	str	r3, [r7, #24]
        break;
 800653c:	e00c      	b.n	8006558 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800653e:	f7fd fbd9 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8006542:	61b8      	str	r0, [r7, #24]
        break;
 8006544:	e008      	b.n	8006558 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800654a:	61bb      	str	r3, [r7, #24]
        break;
 800654c:	e004      	b.n	8006558 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	77bb      	strb	r3, [r7, #30]
        break;
 8006556:	bf00      	nop
    }

    if (pclk != 0U)
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d018      	beq.n	8006590 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	085a      	lsrs	r2, r3, #1
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	441a      	add	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006570:	b29b      	uxth	r3, r3
 8006572:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	2b0f      	cmp	r3, #15
 8006578:	d908      	bls.n	800658c <UART_SetConfig+0x49c>
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006580:	d204      	bcs.n	800658c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	60da      	str	r2, [r3, #12]
 800658a:	e001      	b.n	8006590 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800659c:	7fbb      	ldrb	r3, [r7, #30]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40007c00 	.word	0x40007c00
 80065ac:	40023800 	.word	0x40023800
 80065b0:	00f42400 	.word	0x00f42400

080065b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	f003 0310 	and.w	r3, r3, #16
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	f003 0320 	and.w	r3, r3, #32
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01a      	beq.n	80066ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066b2:	d10a      	bne.n	80066ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	605a      	str	r2, [r3, #4]
  }
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006708:	f7fa ffec 	bl	80016e4 <HAL_GetTick>
 800670c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b08      	cmp	r3, #8
 800671a:	d10e      	bne.n	800673a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800671c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f82d 	bl	800678a <UART_WaitOnFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e023      	b.n	8006782 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b04      	cmp	r3, #4
 8006746:	d10e      	bne.n	8006766 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f817 	bl	800678a <UART_WaitOnFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e00d      	b.n	8006782 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	4613      	mov	r3, r2
 8006798:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679a:	e05e      	b.n	800685a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a2:	d05a      	beq.n	800685a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a4:	f7fa ff9e 	bl	80016e4 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d302      	bcc.n	80067ba <UART_WaitOnFlagUntilTimeout+0x30>
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d11b      	bne.n	80067f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0201 	bic.w	r2, r2, #1
 80067d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2220      	movs	r2, #32
 80067e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e043      	b.n	800687a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d02c      	beq.n	800685a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800680a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800680e:	d124      	bne.n	800685a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006818:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006828:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0201 	bic.w	r2, r2, #1
 8006838:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2220      	movs	r2, #32
 800683e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2220      	movs	r2, #32
 8006844:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2220      	movs	r2, #32
 800684a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e00f      	b.n	800687a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4013      	ands	r3, r2
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	bf0c      	ite	eq
 800686a:	2301      	moveq	r3, #1
 800686c:	2300      	movne	r3, #0
 800686e:	b2db      	uxtb	r3, r3
 8006870:	461a      	mov	r2, r3
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	429a      	cmp	r2, r3
 8006876:	d091      	beq.n	800679c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	4613      	mov	r3, r2
 8006890:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	88fa      	ldrh	r2, [r7, #6]
 800689c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	88fa      	ldrh	r2, [r7, #6]
 80068a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b6:	d10e      	bne.n	80068d6 <UART_Start_Receive_IT+0x52>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d105      	bne.n	80068cc <UART_Start_Receive_IT+0x48>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80068c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068ca:	e02d      	b.n	8006928 <UART_Start_Receive_IT+0xa4>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	22ff      	movs	r2, #255	; 0xff
 80068d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068d4:	e028      	b.n	8006928 <UART_Start_Receive_IT+0xa4>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10d      	bne.n	80068fa <UART_Start_Receive_IT+0x76>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d104      	bne.n	80068f0 <UART_Start_Receive_IT+0x6c>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	22ff      	movs	r2, #255	; 0xff
 80068ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068ee:	e01b      	b.n	8006928 <UART_Start_Receive_IT+0xa4>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	227f      	movs	r2, #127	; 0x7f
 80068f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068f8:	e016      	b.n	8006928 <UART_Start_Receive_IT+0xa4>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006902:	d10d      	bne.n	8006920 <UART_Start_Receive_IT+0x9c>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d104      	bne.n	8006916 <UART_Start_Receive_IT+0x92>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	227f      	movs	r2, #127	; 0x7f
 8006910:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006914:	e008      	b.n	8006928 <UART_Start_Receive_IT+0xa4>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	223f      	movs	r2, #63	; 0x3f
 800691a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800691e:	e003      	b.n	8006928 <UART_Start_Receive_IT+0xa4>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2222      	movs	r2, #34	; 0x22
 8006934:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f042 0201 	orr.w	r2, r2, #1
 8006944:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800694e:	d107      	bne.n	8006960 <UART_Start_Receive_IT+0xdc>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d103      	bne.n	8006960 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4a0c      	ldr	r2, [pc, #48]	; (800698c <UART_Start_Receive_IT+0x108>)
 800695c:	665a      	str	r2, [r3, #100]	; 0x64
 800695e:	e002      	b.n	8006966 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a0b      	ldr	r2, [pc, #44]	; (8006990 <UART_Start_Receive_IT+0x10c>)
 8006964:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800697c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	08006c13 	.word	0x08006c13
 8006990:	08006b3f 	.word	0x08006b3f

08006994 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0201 	bic.w	r2, r2, #1
 80069ba:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d107      	bne.n	80069d4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0210 	bic.w	r2, r2, #16
 80069d2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f7ff fb4d 	bl	80060b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a16:	bf00      	nop
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a2a:	2b21      	cmp	r3, #33	; 0x21
 8006a2c:	d12a      	bne.n	8006a84 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d110      	bne.n	8006a5c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a48:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a58:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006a5a:	e013      	b.n	8006a84 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a60:	781a      	ldrb	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a9c:	2b21      	cmp	r3, #33	; 0x21
 8006a9e:	d12f      	bne.n	8006b00 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d110      	bne.n	8006ace <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aba:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aca:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006acc:	e018      	b.n	8006b00 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ae2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae8:	1c9a      	adds	r2, r3, #2
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b22:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7f9 fe9d 	bl	8000870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b4c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b52:	2b22      	cmp	r3, #34	; 0x22
 8006b54:	d151      	bne.n	8006bfa <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b5e:	89bb      	ldrh	r3, [r7, #12]
 8006b60:	b2d9      	uxtb	r1, r3
 8006b62:	89fb      	ldrh	r3, [r7, #14]
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6a:	400a      	ands	r2, r1
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d138      	bne.n	8006c0a <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ba6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d10f      	bne.n	8006bec <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0210 	bic.w	r2, r2, #16
 8006bda:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff fa6d 	bl	80060c4 <HAL_UARTEx_RxEventCallback>
 8006bea:	e002      	b.n	8006bf2 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7f9 fdf7 	bl	80007e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bf8:	e007      	b.n	8006c0a <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	699a      	ldr	r2, [r3, #24]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0208 	orr.w	r2, r2, #8
 8006c08:	619a      	str	r2, [r3, #24]
}
 8006c0a:	bf00      	nop
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b084      	sub	sp, #16
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c20:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c26:	2b22      	cmp	r3, #34	; 0x22
 8006c28:	d151      	bne.n	8006cce <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c36:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c38:	89ba      	ldrh	r2, [r7, #12]
 8006c3a:	89fb      	ldrh	r3, [r7, #14]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c48:	1c9a      	adds	r2, r3, #2
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d138      	bne.n	8006cde <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c7a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0201 	bic.w	r2, r2, #1
 8006c8a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d10f      	bne.n	8006cc0 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0210 	bic.w	r2, r2, #16
 8006cae:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff fa03 	bl	80060c4 <HAL_UARTEx_RxEventCallback>
 8006cbe:	e002      	b.n	8006cc6 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7f9 fd8d 	bl	80007e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ccc:	e007      	b.n	8006cde <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699a      	ldr	r2, [r3, #24]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0208 	orr.w	r2, r2, #8
 8006cdc:	619a      	str	r2, [r3, #24]
}
 8006cde:	bf00      	nop
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <get_paramAddrTable>:

s_FBTable fbTable; //table holding function blocks
s_FBTable* get_fbTable(){return &fbTable;}

s_Param paramAddrTable; //parameters pointing function block in/out arguments
s_Param* get_paramAddrTable(){return &paramAddrTable;}
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	4b02      	ldr	r3, [pc, #8]	; (8006cf8 <get_paramAddrTable+0x10>)
 8006cee:	4618      	mov	r0, r3
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	2000052c 	.word	0x2000052c

08006cfc <writeToFBTable>:
}
*/

//general functions

uint8_t writeToFBTable(void* callback, uint8_t startParamIndex){
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
	uint8_t fb_index = fbTable.length;
 8006d08:	4b0d      	ldr	r3, [pc, #52]	; (8006d40 <writeToFBTable+0x44>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	73fb      	strb	r3, [r7, #15]
	fbTable.fb[fb_index].callback = callback;
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	490b      	ldr	r1, [pc, #44]	; (8006d40 <writeToFBTable+0x44>)
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	440b      	add	r3, r1
 8006d18:	609a      	str	r2, [r3, #8]
	fbTable.fb[fb_index].param_start_index = startParamIndex;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	4a08      	ldr	r2, [pc, #32]	; (8006d40 <writeToFBTable+0x44>)
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	4413      	add	r3, r2
 8006d22:	78fa      	ldrb	r2, [r7, #3]
 8006d24:	711a      	strb	r2, [r3, #4]
	fbTable.length++;
 8006d26:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <writeToFBTable+0x44>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <writeToFBTable+0x44>)
 8006d30:	701a      	strb	r2, [r3, #0]
	return fb_index;
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	20000428 	.word	0x20000428

08006d44 <createParameter>:

uint32_t createParameter(int32_t init_val){
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
	paramAddrTable.value[paramAddrTable.currentIndex] = init_val;
 8006d4c:	4b0f      	ldr	r3, [pc, #60]	; (8006d8c <createParameter+0x48>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	4a0e      	ldr	r2, [pc, #56]	; (8006d8c <createParameter+0x48>)
 8006d52:	3380      	adds	r3, #128	; 0x80
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	605a      	str	r2, [r3, #4]
	paramAddrTable.addr[paramAddrTable.currentIndex] = paramAddrTable.currentIndex;
 8006d5c:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <createParameter+0x48>)
 8006d5e:	781a      	ldrb	r2, [r3, #0]
 8006d60:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <createParameter+0x48>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	4611      	mov	r1, r2
 8006d66:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <createParameter+0x48>)
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	6059      	str	r1, [r3, #4]
	paramAddrTable.currentIndex++;
 8006d6e:	4b07      	ldr	r3, [pc, #28]	; (8006d8c <createParameter+0x48>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	3301      	adds	r3, #1
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <createParameter+0x48>)
 8006d78:	701a      	strb	r2, [r3, #0]
	return paramAddrTable.currentIndex-1;
 8006d7a:	4b04      	ldr	r3, [pc, #16]	; (8006d8c <createParameter+0x48>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	3b01      	subs	r3, #1
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	2000052c 	.word	0x2000052c

08006d90 <make_connection>:

void make_connection(uint32_t dest_port_i, uint32_t src_port_i)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
	paramAddrTable.addr[dest_port_i] = paramAddrTable.addr[src_port_i] ;
 8006d9a:	4a08      	ldr	r2, [pc, #32]	; (8006dbc <make_connection+0x2c>)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	4905      	ldr	r1, [pc, #20]	; (8006dbc <make_connection+0x2c>)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	605a      	str	r2, [r3, #4]
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	2000052c 	.word	0x2000052c

08006dc0 <initiate_mccore>:

void initiate_mccore(){
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
	fbTable.length = 0;
 8006dc4:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <initiate_mccore+0x20>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
	paramAddrTable.currentIndex = 0;
 8006dca:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <initiate_mccore+0x24>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]
	read_persistent_data_structure();
 8006dd0:	f000 f8a6 	bl	8006f20 <read_persistent_data_structure>
	init_uniqueid();
 8006dd4:	f000 f909 	bl	8006fea <init_uniqueid>
	init_deployment_ch();
 8006dd8:	f000 fd52 	bl	8007880 <init_deployment_ch>
}
 8006ddc:	bf00      	nop
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20000428 	.word	0x20000428
 8006de4:	2000052c 	.word	0x2000052c

08006de8 <initiate_circuit>:

void initiate_circuit(){
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
	hal_init_tick();
 8006dec:	f7f9 fc9d 	bl	800072a <hal_init_tick>
}
 8006df0:	bf00      	nop
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <run_one_cycle>:

void run_one_cycle(){
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
	//get inputs
	//run the input related function blocks

	//process inputs
	//run the processing related input blocks
	for(uint8_t i= 0;i<fbTable.length;i++){
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	71fb      	strb	r3, [r7, #7]
 8006dfe:	e00e      	b.n	8006e1e <run_one_cycle+0x2a>
		(*fbTable.fb[i].callback)((uint8_t)fbTable.fb[i].param_start_index);
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	4a0c      	ldr	r2, [pc, #48]	; (8006e34 <run_one_cycle+0x40>)
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	4413      	add	r3, r2
 8006e08:	689a      	ldr	r2, [r3, #8]
 8006e0a:	79fb      	ldrb	r3, [r7, #7]
 8006e0c:	4909      	ldr	r1, [pc, #36]	; (8006e34 <run_one_cycle+0x40>)
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	440b      	add	r3, r1
 8006e12:	791b      	ldrb	r3, [r3, #4]
 8006e14:	4618      	mov	r0, r3
 8006e16:	4790      	blx	r2
	for(uint8_t i= 0;i<fbTable.length;i++){
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	71fb      	strb	r3, [r7, #7]
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <run_one_cycle+0x40>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	79fa      	ldrb	r2, [r7, #7]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d3eb      	bcc.n	8006e00 <run_one_cycle+0xc>
	}

	//refresh outputs
	//run the output related function blocks
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20000428 	.word	0x20000428

08006e38 <mcCore_SM>:

void mcCore_SM()
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
	static uint8_t mcCore_state = ST_MCCORE_INIT;//ST_MCCORE_TEST;//ST_MCCORE_TEST;//
	switch (mcCore_state){
 8006e3c:	4b22      	ldr	r3, [pc, #136]	; (8006ec8 <mcCore_SM+0x90>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b05      	cmp	r3, #5
 8006e42:	d83e      	bhi.n	8006ec2 <mcCore_SM+0x8a>
 8006e44:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <mcCore_SM+0x14>)
 8006e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4a:	bf00      	nop
 8006e4c:	08006e65 	.word	0x08006e65
 8006e50:	08006e8f 	.word	0x08006e8f
 8006e54:	08006ec3 	.word	0x08006ec3
 8006e58:	08006e71 	.word	0x08006e71
 8006e5c:	08006eaf 	.word	0x08006eaf
 8006e60:	08006ebb 	.word	0x08006ebb
		case ST_MCCORE_INIT:
			initiate_mccore(); //kill all the program memory
 8006e64:	f7ff ffac 	bl	8006dc0 <initiate_mccore>
			mcCore_state = ST_WAIT_RUN;
 8006e68:	4b17      	ldr	r3, [pc, #92]	; (8006ec8 <mcCore_SM+0x90>)
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	701a      	strb	r2, [r3, #0]
			break;
 8006e6e:	e028      	b.n	8006ec2 <mcCore_SM+0x8a>

		case ST_WAIT_RUN: //wait for the deployment finish and run cmd arrival
			if(Parser(get_deployment_ch()) == CMD_RUN){
 8006e70:	f000 fce4 	bl	800783c <get_deployment_ch>
 8006e74:	4603      	mov	r3, r0
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fc6c 	bl	8007754 <Parser>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b67      	cmp	r3, #103	; 0x67
 8006e80:	d11e      	bne.n	8006ec0 <mcCore_SM+0x88>
				initiate_circuit();
 8006e82:	f7ff ffb1 	bl	8006de8 <initiate_circuit>
				mcCore_state = ST_MCCORE_RUN;
 8006e86:	4b10      	ldr	r3, [pc, #64]	; (8006ec8 <mcCore_SM+0x90>)
 8006e88:	2201      	movs	r2, #1
 8006e8a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8006e8c:	e018      	b.n	8006ec0 <mcCore_SM+0x88>

		case ST_MCCORE_RUN:
			if(Parser(get_deployment_ch()) == CMD_KILL){ //when running if KILL cmd received go to the initial state
 8006e8e:	f000 fcd5 	bl	800783c <get_deployment_ch>
 8006e92:	4603      	mov	r3, r0
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fc5d 	bl	8007754 <Parser>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b68      	cmp	r3, #104	; 0x68
 8006e9e:	d103      	bne.n	8006ea8 <mcCore_SM+0x70>
				mcCore_state = ST_MCCORE_INIT;
 8006ea0:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <mcCore_SM+0x90>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]
				run_one_cycle();
				//burdaki zamanı ölç
				//delta
				//bu deltaları kullanıcıya logla
			}
			break;
 8006ea6:	e00c      	b.n	8006ec2 <mcCore_SM+0x8a>
				run_one_cycle();
 8006ea8:	f7ff ffa4 	bl	8006df4 <run_one_cycle>
			break;
 8006eac:	e009      	b.n	8006ec2 <mcCore_SM+0x8a>

		case ST_MCCORE_TEST:
			create_test_circuit();
 8006eae:	f000 f895 	bl	8006fdc <create_test_circuit>
			mcCore_state = ST_MCCORE_TEST_RUN;
 8006eb2:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <mcCore_SM+0x90>)
 8006eb4:	2205      	movs	r2, #5
 8006eb6:	701a      	strb	r2, [r3, #0]
			break;
 8006eb8:	e003      	b.n	8006ec2 <mcCore_SM+0x8a>

		case ST_MCCORE_TEST_RUN:
			run_one_cycle();
 8006eba:	f7ff ff9b 	bl	8006df4 <run_one_cycle>
			break;
 8006ebe:	e000      	b.n	8006ec2 <mcCore_SM+0x8a>
			break;
 8006ec0:	bf00      	nop
	}
}
 8006ec2:	bf00      	nop
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	200000e8 	.word	0x200000e8

08006ecc <get_gpd>:

enum gpd_type {CONS, ATOM, FUNC, LAMBDA}; //for feature use

Global_Persistent_Data gpd;

Global_Persistent_Data* get_gpd(){return &gpd;}
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	4b02      	ldr	r3, [pc, #8]	; (8006edc <get_gpd+0x10>)
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	20000930 	.word	0x20000930

08006ee0 <init_persistent_data_structure>:

void init_persistent_data_structure(){
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
	gpd.baudrate = 0; //0->115200, 1-->57600, 2-->38400, 3-->19200, 4-->9600
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <init_persistent_data_structure+0x3c>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]
	gpd.modbus_slave_address = 101;
 8006eec:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <init_persistent_data_structure+0x3c>)
 8006eee:	2265      	movs	r2, #101	; 0x65
 8006ef0:	605a      	str	r2, [r3, #4]

	for(uint16_t i;i<MODBUS_PERSISTENT_DATA;i++){
 8006ef2:	e008      	b.n	8006f06 <init_persistent_data_structure+0x26>
		gpd.modbus_persistent_data[i] = 0;
 8006ef4:	88fb      	ldrh	r3, [r7, #6]
 8006ef6:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <init_persistent_data_structure+0x3c>)
 8006ef8:	3302      	adds	r3, #2
 8006efa:	2100      	movs	r1, #0
 8006efc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint16_t i;i<MODBUS_PERSISTENT_DATA;i++){
 8006f00:	88fb      	ldrh	r3, [r7, #6]
 8006f02:	3301      	adds	r3, #1
 8006f04:	80fb      	strh	r3, [r7, #6]
 8006f06:	88fb      	ldrh	r3, [r7, #6]
 8006f08:	2b07      	cmp	r3, #7
 8006f0a:	d9f3      	bls.n	8006ef4 <init_persistent_data_structure+0x14>
	}
}
 8006f0c:	bf00      	nop
 8006f0e:	bf00      	nop
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000930 	.word	0x20000930

08006f20 <read_persistent_data_structure>:

uint8_t read_persistent_data_structure(){
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
	void* fb = get_flash_data();
 8006f26:	f000 fd79 	bl	8007a1c <get_flash_data>
 8006f2a:	6138      	str	r0, [r7, #16]
	//copy the flash contents to the gpd
	uint8_t* p_flash = (uint8_t*)fb + FLASHBLOCK_HEADER_SIZE;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	60fb      	str	r3, [r7, #12]
	uint8_t* p_gpd = (uint8_t*)get_gpd();
 8006f32:	f7ff ffcb 	bl	8006ecc <get_gpd>
 8006f36:	60b8      	str	r0, [r7, #8]
	uint8_t ret = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	75fb      	strb	r3, [r7, #23]

	init_persistent_data_structure();
 8006f3c:	f7ff ffd0 	bl	8006ee0 <init_persistent_data_structure>

	if(((Flash_Block*)fb)->length == sizeof(Global_Persistent_Data)){
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	2b28      	cmp	r3, #40	; 0x28
 8006f46:	d108      	bne.n	8006f5a <read_persistent_data_structure+0x3a>
		memcpy(p_gpd, p_flash, ((Flash_Block*)fb)->length);
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	68f9      	ldr	r1, [r7, #12]
 8006f50:	68b8      	ldr	r0, [r7, #8]
 8006f52:	f002 f95b 	bl	800920c <memcpy>
		ret = 1;
 8006f56:	2301      	movs	r3, #1
 8006f58:	75fb      	strb	r3, [r7, #23]
	}

	//transfer the modbus and user contents of the gpd to the modbus and fb registers
	uint16_t* modbus_data = get_Modbus_Buf_Holding_Registers_40001();
 8006f5a:	f000 f8dd 	bl	8007118 <get_Modbus_Buf_Holding_Registers_40001>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	607b      	str	r3, [r7, #4]
	for(uint16_t i = 0;i<MODBUS_PERSISTENT_DATA;i++){
 8006f62:	2300      	movs	r3, #0
 8006f64:	82bb      	strh	r3, [r7, #20]
 8006f66:	e00e      	b.n	8006f86 <read_persistent_data_structure+0x66>
		modbus_data[i+8] = (uint16_t )gpd.modbus_persistent_data[i];
 8006f68:	8abb      	ldrh	r3, [r7, #20]
 8006f6a:	4a0b      	ldr	r2, [pc, #44]	; (8006f98 <read_persistent_data_structure+0x78>)
 8006f6c:	3302      	adds	r3, #2
 8006f6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006f72:	8abb      	ldrh	r3, [r7, #20]
 8006f74:	3308      	adds	r3, #8
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	b28a      	uxth	r2, r1
 8006f7e:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0;i<MODBUS_PERSISTENT_DATA;i++){
 8006f80:	8abb      	ldrh	r3, [r7, #20]
 8006f82:	3301      	adds	r3, #1
 8006f84:	82bb      	strh	r3, [r7, #20]
 8006f86:	8abb      	ldrh	r3, [r7, #20]
 8006f88:	2b07      	cmp	r3, #7
 8006f8a:	d9ed      	bls.n	8006f68 <read_persistent_data_structure+0x48>
	}

	return ret;
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20000930 	.word	0x20000930

08006f9c <write_persistent_data_structure>:

uint8_t write_persistent_data_structure(){
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
	write_flash_data((uint8_t*)&gpd, sizeof(gpd));
 8006fa0:	2128      	movs	r1, #40	; 0x28
 8006fa2:	4803      	ldr	r0, [pc, #12]	; (8006fb0 <write_persistent_data_structure+0x14>)
 8006fa4:	f000 fd06 	bl	80079b4 <write_flash_data>
}
 8006fa8:	bf00      	nop
 8006faa:	4618      	mov	r0, r3
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000930 	.word	0x20000930

08006fb4 <Record_To_Modbus_GPD>:

void Record_To_Modbus_GPD(uint8_t index, uint32_t datum){
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	6039      	str	r1, [r7, #0]
 8006fbe:	71fb      	strb	r3, [r7, #7]
	gpd.modbus_persistent_data[index] = datum;
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	4905      	ldr	r1, [pc, #20]	; (8006fd8 <Record_To_Modbus_GPD+0x24>)
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	20000930 	.word	0x20000930

08006fdc <create_test_circuit>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_inc.h"

void create_test_circuit()
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0

	make_connection(ld1.fp.output, fb_cyc1.fp.output);
	make_connection(ld2.fp.output, fb_cyc2.fp.output);*/


}
 8006fe0:	bf00      	nop
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <init_uniqueid>:
#include "modbus_slave.h"
#include "adaptor.h"

#define UID_LEN 16

void init_uniqueid(){
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b086      	sub	sp, #24
 8006fee:	af00      	add	r7, sp, #0
	uint8_t uniqueid[UID_LEN];
	//clear uniqueid buffer
	for(uint8_t i = 0;i<UID_LEN;i++){
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	75fb      	strb	r3, [r7, #23]
 8006ff4:	e009      	b.n	800700a <init_uniqueid+0x20>
		uniqueid[i] = 0;
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	f107 0218 	add.w	r2, r7, #24
 8006ffc:	4413      	add	r3, r2
 8006ffe:	2200      	movs	r2, #0
 8007000:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(uint8_t i = 0;i<UID_LEN;i++){
 8007004:	7dfb      	ldrb	r3, [r7, #23]
 8007006:	3301      	adds	r3, #1
 8007008:	75fb      	strb	r3, [r7, #23]
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	2b0f      	cmp	r3, #15
 800700e:	d9f2      	bls.n	8006ff6 <init_uniqueid+0xc>
	}
	//read unique id from the adaptor function
	get_uniqueid(uniqueid, UID_LEN);
 8007010:	463b      	mov	r3, r7
 8007012:	2110      	movs	r1, #16
 8007014:	4618      	mov	r0, r3
 8007016:	f7f9 fc35 	bl	8000884 <get_uniqueid>

	//copy this value to the memory place where mapped to a modbus read only input registers
	uint8_t* modbus_p = (uint8_t*) get_Modbus_Buf_Input_Registers_30001();
 800701a:	f000 f887 	bl	800712c <get_Modbus_Buf_Input_Registers_30001>
 800701e:	6138      	str	r0, [r7, #16]

	for(uint8_t i= 0; i<UID_LEN;i++){
 8007020:	2300      	movs	r3, #0
 8007022:	75bb      	strb	r3, [r7, #22]
 8007024:	e00c      	b.n	8007040 <init_uniqueid+0x56>
		modbus_p[i] = uniqueid[i];
 8007026:	7dba      	ldrb	r2, [r7, #22]
 8007028:	7dbb      	ldrb	r3, [r7, #22]
 800702a:	6939      	ldr	r1, [r7, #16]
 800702c:	440b      	add	r3, r1
 800702e:	f107 0118 	add.w	r1, r7, #24
 8007032:	440a      	add	r2, r1
 8007034:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8007038:	701a      	strb	r2, [r3, #0]
	for(uint8_t i= 0; i<UID_LEN;i++){
 800703a:	7dbb      	ldrb	r3, [r7, #22]
 800703c:	3301      	adds	r3, #1
 800703e:	75bb      	strb	r3, [r7, #22]
 8007040:	7dbb      	ldrb	r3, [r7, #22]
 8007042:	2b0f      	cmp	r3, #15
 8007044:	d9ef      	bls.n	8007026 <init_uniqueid+0x3c>
	}
}
 8007046:	bf00      	nop
 8007048:	bf00      	nop
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <Channel_Mapping>:
 */
#include "stdint.h"
#include "deployment.h"
#include "comm_service.h"

Communication_Ch* Channel_Mapping(uint32_t channel){
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	Communication_Ch* comm_ch;

	//channel mappings
	if(channel == 0){
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d103      	bne.n	8007066 <Channel_Mapping+0x16>
		comm_ch = get_deployment_ch();
 800705e:	f000 fbed 	bl	800783c <get_deployment_ch>
 8007062:	4603      	mov	r3, r0
 8007064:	60fb      	str	r3, [r7, #12]
	}
	return comm_ch;
 8007066:	68fb      	ldr	r3, [r7, #12]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <Runtime_CommDataService_NewData_Received>:

void Runtime_CommDataService_NewData_Received(uint32_t channel, uint8_t* buf, uint32_t len)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
	Communication_Ch* comm_ch = Channel_Mapping(channel);
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7ff ffe7 	bl	8007050 <Channel_Mapping>
 8007082:	6138      	str	r0, [r7, #16]

	//put data to the channel buffer
	for(uint32_t i= 0;i<len;i++)
 8007084:	2300      	movs	r3, #0
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	e014      	b.n	80070b4 <Runtime_CommDataService_NewData_Received+0x44>
	if(comm_ch->rx_data_cntr < CH_RX_DATA_BUF_LEN){ //parse edilmeyi bekleyen bir data varsa üzerine yazma.
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	795b      	ldrb	r3, [r3, #5]
 800708e:	2b3f      	cmp	r3, #63	; 0x3f
 8007090:	d80d      	bhi.n	80070ae <Runtime_CommDataService_NewData_Received+0x3e>
		comm_ch->rx_data_buf[comm_ch->rx_data_cntr++] = buf[i];
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	441a      	add	r2, r3
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	795b      	ldrb	r3, [r3, #5]
 800709c:	1c59      	adds	r1, r3, #1
 800709e:	b2c8      	uxtb	r0, r1
 80070a0:	6939      	ldr	r1, [r7, #16]
 80070a2:	7148      	strb	r0, [r1, #5]
 80070a4:	4619      	mov	r1, r3
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	440b      	add	r3, r1
 80070ac:	719a      	strb	r2, [r3, #6]
	for(uint32_t i= 0;i<len;i++)
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	3301      	adds	r3, #1
 80070b2:	617b      	str	r3, [r7, #20]
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d3e6      	bcc.n	800708a <Runtime_CommDataService_NewData_Received+0x1a>
	}
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <Runtime_CommDataService_Process_DataBuffer>:

uint8_t Runtime_CommDataService_Process_DataBuffer(uint32_t channel)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
	Communication_Ch* comm_ch = Channel_Mapping(channel);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff ffbe 	bl	8007050 <Channel_Mapping>
 80070d4:	60f8      	str	r0, [r7, #12]
	if(comm_ch->rx_data_cntr < 2) {
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	795b      	ldrb	r3, [r3, #5]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d803      	bhi.n	80070e6 <Runtime_CommDataService_Process_DataBuffer+0x20>
		comm_ch->rx_data_cntr = 0;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	715a      	strb	r2, [r3, #5]
 80070e4:	e013      	b.n	800710e <Runtime_CommDataService_Process_DataBuffer+0x48>
	}
	else if(comm_ch->data_validity_check_callback()  == 0) {
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ea:	4798      	blx	r3
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10b      	bne.n	800710a <Runtime_CommDataService_Process_DataBuffer+0x44>
		comm_ch->fdata_ready = 1;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		comm_ch->process_callback(channel);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
		comm_ch->rx_data_cntr = 0;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	715a      	strb	r2, [r3, #5]
 8007108:	e001      	b.n	800710e <Runtime_CommDataService_Process_DataBuffer+0x48>
	}
	else{
		return 1;
 800710a:	2301      	movs	r3, #1
 800710c:	e000      	b.n	8007110 <Runtime_CommDataService_Process_DataBuffer+0x4a>
	}

	return 0;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <get_Modbus_Buf_Holding_Registers_40001>:
//uint8_t Modbus_Buf_Discrete_Inputs_10001; //todo: implement
uint16_t Modbus_Buf_Input_Registers_30001[MODBUS_INPUT_REGISTER_COUNT]; //todo: implement
uint16_t Modbus_Buf_Holding_Registers_40001[MODBUS_HOLDING_REGISTER_COUNT];
Modbus_Slave_Responce_Data resp_data;

uint16_t* get_Modbus_Buf_Holding_Registers_40001(){return Modbus_Buf_Holding_Registers_40001;}
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
 800711c:	4b02      	ldr	r3, [pc, #8]	; (8007128 <get_Modbus_Buf_Holding_Registers_40001+0x10>)
 800711e:	4618      	mov	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	20000980 	.word	0x20000980

0800712c <get_Modbus_Buf_Input_Registers_30001>:
uint16_t* get_Modbus_Buf_Input_Registers_30001(){return Modbus_Buf_Input_Registers_30001;}
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
 8007130:	4b02      	ldr	r3, [pc, #8]	; (800713c <get_Modbus_Buf_Input_Registers_30001+0x10>)
 8007132:	4618      	mov	r0, r3
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	200009a0 	.word	0x200009a0

08007140 <get_MODBUS_SLAVE_ADDR>:

uint8_t MODBUS_SLAVE_ADDR  = 0x01;
uint8_t* get_MODBUS_SLAVE_ADDR(){return &MODBUS_SLAVE_ADDR;}
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
 8007144:	4b02      	ldr	r3, [pc, #8]	; (8007150 <get_MODBUS_SLAVE_ADDR+0x10>)
 8007146:	4618      	mov	r0, r3
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	20000039 	.word	0x20000039

08007154 <get_low_byte>:

uint8_t get_low_byte(uint16_t word){
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)(word & 0xFF);
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	b2db      	uxtb	r3, r3
}
 8007162:	4618      	mov	r0, r3
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <get_hi_byte>:

uint8_t get_hi_byte(uint16_t word){
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	4603      	mov	r3, r0
 8007176:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)((word>>8) & 0xFF);
 8007178:	88fb      	ldrh	r3, [r7, #6]
 800717a:	0a1b      	lsrs	r3, r3, #8
 800717c:	b29b      	uxth	r3, r3
 800717e:	b2db      	uxtb	r3, r3
}
 8007180:	4618      	mov	r0, r3
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <modbus_byte2word>:

uint16_t modbus_byte2word(uint8_t* p){
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	return ((p[0] << 8) + p[1]);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	b29a      	uxth	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3301      	adds	r3, #1
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	4413      	add	r3, r2
 80071a8:	b29b      	uxth	r3, r3
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
	...

080071b8 <modbus_slave_prep_resp_data>:
}

void modbus_slave_prep_resp_data(Modbus_Slave_Responce_Data* resp_data,
									uint8_t function,
									uint16_t register_addr,
									uint16_t register_qty){
 80071b8:	b590      	push	{r4, r7, lr}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	4608      	mov	r0, r1
 80071c2:	4611      	mov	r1, r2
 80071c4:	461a      	mov	r2, r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	72fb      	strb	r3, [r7, #11]
 80071ca:	460b      	mov	r3, r1
 80071cc:	813b      	strh	r3, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;

	uint16_t register_addr_0 = register_addr-1; //40001 means register 0
 80071d2:	893b      	ldrh	r3, [r7, #8]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	82bb      	strh	r3, [r7, #20]

	resp_data->index = 0;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	resp_data->buf[resp_data->index++] = MODBUS_SLAVE_ADDR; //Slave address
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	b2d1      	uxtb	r1, r2
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 80071f0:	461a      	mov	r2, r3
 80071f2:	4b7d      	ldr	r3, [pc, #500]	; (80073e8 <modbus_slave_prep_resp_data+0x230>)
 80071f4:	7819      	ldrb	r1, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	5499      	strb	r1, [r3, r2]
	resp_data->buf[resp_data->index++] = function; //Function
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	b2d1      	uxtb	r1, r2
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 800720a:	4619      	mov	r1, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	7afa      	ldrb	r2, [r7, #11]
 8007210:	545a      	strb	r2, [r3, r1]
	if(function == MODBUS_READ_HOLDING_REGISTER){
 8007212:	7afb      	ldrb	r3, [r7, #11]
 8007214:	2b03      	cmp	r3, #3
 8007216:	d14a      	bne.n	80072ae <modbus_slave_prep_resp_data+0xf6>
		resp_data->buf[resp_data->index++] = register_qty*2;
 8007218:	88fb      	ldrh	r3, [r7, #6]
 800721a:	b2da      	uxtb	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007222:	1c59      	adds	r1, r3, #1
 8007224:	b2c8      	uxtb	r0, r1
 8007226:	68f9      	ldr	r1, [r7, #12]
 8007228:	f881 0026 	strb.w	r0, [r1, #38]	; 0x26
 800722c:	4619      	mov	r1, r3
 800722e:	0053      	lsls	r3, r2, #1
 8007230:	b2da      	uxtb	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	545a      	strb	r2, [r3, r1]
		for(i = 0;i<register_qty;i++){
 8007236:	2300      	movs	r3, #0
 8007238:	82fb      	strh	r3, [r7, #22]
 800723a:	e033      	b.n	80072a4 <modbus_slave_prep_resp_data+0xec>
			if(register_addr_0+i <= MODBUS_HOLDING_REGISTER_COUNT) {
 800723c:	8aba      	ldrh	r2, [r7, #20]
 800723e:	8afb      	ldrh	r3, [r7, #22]
 8007240:	4413      	add	r3, r2
 8007242:	2b10      	cmp	r3, #16
 8007244:	dc2b      	bgt.n	800729e <modbus_slave_prep_resp_data+0xe6>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 8007246:	8aba      	ldrh	r2, [r7, #20]
 8007248:	8afb      	ldrh	r3, [r7, #22]
 800724a:	4413      	add	r3, r2
 800724c:	4a67      	ldr	r2, [pc, #412]	; (80073ec <modbus_slave_prep_resp_data+0x234>)
 800724e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	b2d0      	uxtb	r0, r2
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 8007262:	461c      	mov	r4, r3
 8007264:	4608      	mov	r0, r1
 8007266:	f7ff ff82 	bl	800716e <get_hi_byte>
 800726a:	4603      	mov	r3, r0
 800726c:	461a      	mov	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	551a      	strb	r2, [r3, r4]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 8007272:	8aba      	ldrh	r2, [r7, #20]
 8007274:	8afb      	ldrh	r3, [r7, #22]
 8007276:	4413      	add	r3, r2
 8007278:	4a5c      	ldr	r2, [pc, #368]	; (80073ec <modbus_slave_prep_resp_data+0x234>)
 800727a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007284:	1c5a      	adds	r2, r3, #1
 8007286:	b2d0      	uxtb	r0, r2
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 800728e:	461c      	mov	r4, r3
 8007290:	4608      	mov	r0, r1
 8007292:	f7ff ff5f 	bl	8007154 <get_low_byte>
 8007296:	4603      	mov	r3, r0
 8007298:	461a      	mov	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	551a      	strb	r2, [r3, r4]
		for(i = 0;i<register_qty;i++){
 800729e:	8afb      	ldrh	r3, [r7, #22]
 80072a0:	3301      	adds	r3, #1
 80072a2:	82fb      	strh	r3, [r7, #22]
 80072a4:	8afa      	ldrh	r2, [r7, #22]
 80072a6:	88fb      	ldrh	r3, [r7, #6]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d3c7      	bcc.n	800723c <modbus_slave_prep_resp_data+0x84>
 80072ac:	e0e9      	b.n	8007482 <modbus_slave_prep_resp_data+0x2ca>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_READ_INPUT_REGISTER){
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d14a      	bne.n	800734a <modbus_slave_prep_resp_data+0x192>
		resp_data->buf[resp_data->index++] = register_qty*2;
 80072b4:	88fb      	ldrh	r3, [r7, #6]
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80072be:	1c59      	adds	r1, r3, #1
 80072c0:	b2c8      	uxtb	r0, r1
 80072c2:	68f9      	ldr	r1, [r7, #12]
 80072c4:	f881 0026 	strb.w	r0, [r1, #38]	; 0x26
 80072c8:	4619      	mov	r1, r3
 80072ca:	0053      	lsls	r3, r2, #1
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	545a      	strb	r2, [r3, r1]
		for(i = 0;i<register_qty;i++){
 80072d2:	2300      	movs	r3, #0
 80072d4:	82fb      	strh	r3, [r7, #22]
 80072d6:	e033      	b.n	8007340 <modbus_slave_prep_resp_data+0x188>
			if(register_addr_0+i <= MODBUS_INPUT_REGISTER_COUNT) {
 80072d8:	8aba      	ldrh	r2, [r7, #20]
 80072da:	8afb      	ldrh	r3, [r7, #22]
 80072dc:	4413      	add	r3, r2
 80072de:	2b10      	cmp	r3, #16
 80072e0:	dc2b      	bgt.n	800733a <modbus_slave_prep_resp_data+0x182>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 80072e2:	8aba      	ldrh	r2, [r7, #20]
 80072e4:	8afb      	ldrh	r3, [r7, #22]
 80072e6:	4413      	add	r3, r2
 80072e8:	4a41      	ldr	r2, [pc, #260]	; (80073f0 <modbus_slave_prep_resp_data+0x238>)
 80072ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	b2d0      	uxtb	r0, r2
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 80072fe:	461c      	mov	r4, r3
 8007300:	4608      	mov	r0, r1
 8007302:	f7ff ff34 	bl	800716e <get_hi_byte>
 8007306:	4603      	mov	r3, r0
 8007308:	461a      	mov	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	551a      	strb	r2, [r3, r4]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 800730e:	8aba      	ldrh	r2, [r7, #20]
 8007310:	8afb      	ldrh	r3, [r7, #22]
 8007312:	4413      	add	r3, r2
 8007314:	4a36      	ldr	r2, [pc, #216]	; (80073f0 <modbus_slave_prep_resp_data+0x238>)
 8007316:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	b2d0      	uxtb	r0, r2
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 800732a:	461c      	mov	r4, r3
 800732c:	4608      	mov	r0, r1
 800732e:	f7ff ff11 	bl	8007154 <get_low_byte>
 8007332:	4603      	mov	r3, r0
 8007334:	461a      	mov	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	551a      	strb	r2, [r3, r4]
		for(i = 0;i<register_qty;i++){
 800733a:	8afb      	ldrh	r3, [r7, #22]
 800733c:	3301      	adds	r3, #1
 800733e:	82fb      	strh	r3, [r7, #22]
 8007340:	8afa      	ldrh	r2, [r7, #22]
 8007342:	88fb      	ldrh	r3, [r7, #6]
 8007344:	429a      	cmp	r2, r3
 8007346:	d3c7      	bcc.n	80072d8 <modbus_slave_prep_resp_data+0x120>
 8007348:	e09b      	b.n	8007482 <modbus_slave_prep_resp_data+0x2ca>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_WRITE_SINGLE_REGISTER){
 800734a:	7afb      	ldrb	r3, [r7, #11]
 800734c:	2b06      	cmp	r3, #6
 800734e:	d151      	bne.n	80073f4 <modbus_slave_prep_resp_data+0x23c>
		resp_data->buf[resp_data->index++] = get_hi_byte(register_addr);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	b2d1      	uxtb	r1, r2
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8007360:	461c      	mov	r4, r3
 8007362:	893b      	ldrh	r3, [r7, #8]
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff ff02 	bl	800716e <get_hi_byte>
 800736a:	4603      	mov	r3, r0
 800736c:	461a      	mov	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_addr);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	b2d1      	uxtb	r1, r2
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8007382:	461c      	mov	r4, r3
 8007384:	893b      	ldrh	r3, [r7, #8]
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff fee4 	bl	8007154 <get_low_byte>
 800738c:	4603      	mov	r3, r0
 800738e:	461a      	mov	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 8007394:	8abb      	ldrh	r3, [r7, #20]
 8007396:	4a15      	ldr	r2, [pc, #84]	; (80073ec <modbus_slave_prep_resp_data+0x234>)
 8007398:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	b2d0      	uxtb	r0, r2
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 80073ac:	461c      	mov	r4, r3
 80073ae:	4608      	mov	r0, r1
 80073b0:	f7ff fedd 	bl	800716e <get_hi_byte>
 80073b4:	4603      	mov	r3, r0
 80073b6:	461a      	mov	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 80073bc:	8abb      	ldrh	r3, [r7, #20]
 80073be:	4a0b      	ldr	r2, [pc, #44]	; (80073ec <modbus_slave_prep_resp_data+0x234>)
 80073c0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	b2d0      	uxtb	r0, r2
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
 80073d4:	461c      	mov	r4, r3
 80073d6:	4608      	mov	r0, r1
 80073d8:	f7ff febc 	bl	8007154 <get_low_byte>
 80073dc:	4603      	mov	r3, r0
 80073de:	461a      	mov	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	551a      	strb	r2, [r3, r4]
 80073e4:	e04d      	b.n	8007482 <modbus_slave_prep_resp_data+0x2ca>
 80073e6:	bf00      	nop
 80073e8:	20000039 	.word	0x20000039
 80073ec:	20000980 	.word	0x20000980
 80073f0:	200009a0 	.word	0x200009a0
	}

	else if(function == MODBUS_WRITE_MULTIPLE_REGISTER){
 80073f4:	7afb      	ldrb	r3, [r7, #11]
 80073f6:	2b10      	cmp	r3, #16
 80073f8:	d143      	bne.n	8007482 <modbus_slave_prep_resp_data+0x2ca>
		resp_data->buf[resp_data->index++] = get_hi_byte(register_addr);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	b2d1      	uxtb	r1, r2
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 800740a:	461c      	mov	r4, r3
 800740c:	893b      	ldrh	r3, [r7, #8]
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff fead 	bl	800716e <get_hi_byte>
 8007414:	4603      	mov	r3, r0
 8007416:	461a      	mov	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_addr);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	b2d1      	uxtb	r1, r2
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 800742c:	461c      	mov	r4, r3
 800742e:	893b      	ldrh	r3, [r7, #8]
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff fe8f 	bl	8007154 <get_low_byte>
 8007436:	4603      	mov	r3, r0
 8007438:	461a      	mov	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_hi_byte(register_qty);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007444:	1c5a      	adds	r2, r3, #1
 8007446:	b2d1      	uxtb	r1, r2
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 800744e:	461c      	mov	r4, r3
 8007450:	88fb      	ldrh	r3, [r7, #6]
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff fe8b 	bl	800716e <get_hi_byte>
 8007458:	4603      	mov	r3, r0
 800745a:	461a      	mov	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_qty);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	b2d1      	uxtb	r1, r2
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8007470:	461c      	mov	r4, r3
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff fe6d 	bl	8007154 <get_low_byte>
 800747a:	4603      	mov	r3, r0
 800747c:	461a      	mov	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	551a      	strb	r2, [r3, r4]
	}

	//todo: crc
	uint16_t crc = CRC16(resp_data->buf, resp_data->index);
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800748a:	b29b      	uxth	r3, r3
 800748c:	4619      	mov	r1, r3
 800748e:	4610      	mov	r0, r2
 8007490:	f000 f8fc 	bl	800768c <CRC16>
 8007494:	4603      	mov	r3, r0
 8007496:	827b      	strh	r3, [r7, #18]

	resp_data->buf[resp_data->index++] = get_low_byte(crc);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	b2d1      	uxtb	r1, r2
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 80074a8:	461c      	mov	r4, r3
 80074aa:	8a7b      	ldrh	r3, [r7, #18]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff fe51 	bl	8007154 <get_low_byte>
 80074b2:	4603      	mov	r3, r0
 80074b4:	461a      	mov	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	551a      	strb	r2, [r3, r4]
	resp_data->buf[resp_data->index++] = get_hi_byte(crc);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	b2d1      	uxtb	r1, r2
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 80074ca:	461c      	mov	r4, r3
 80074cc:	8a7b      	ldrh	r3, [r7, #18]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff fe4d 	bl	800716e <get_hi_byte>
 80074d4:	4603      	mov	r3, r0
 80074d6:	461a      	mov	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	551a      	strb	r2, [r3, r4]

	resp_data->len = resp_data->index;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 80074e8:	bf00      	nop
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd90      	pop	{r4, r7, pc}

080074f0 <modbus_slave_tx>:

void modbus_slave_tx(Modbus_Slave_Responce_Data* resp_data){
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	hal_modbus_uart_tx(resp_data->buf, resp_data->len);
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007500:	4619      	mov	r1, r3
 8007502:	4610      	mov	r0, r2
 8007504:	f7f9 f9a0 	bl	8000848 <hal_modbus_uart_tx>
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <modbus_slave_rx>:

uint8_t modbus_slave_rx(uint32_t channel){
 8007510:	b590      	push	{r4, r7, lr}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
	uint16_t register_addr = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	82bb      	strh	r3, [r7, #20]
	uint16_t register_val = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	827b      	strh	r3, [r7, #18]
	uint16_t register_qty = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	823b      	strh	r3, [r7, #16]

	uint16_t starting_addr = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	81fb      	strh	r3, [r7, #14]
	uint16_t quantity_of_register = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	81bb      	strh	r3, [r7, #12]
	uint8_t gpd_recorded = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	75fb      	strb	r3, [r7, #23]

	Communication_Ch* ch = Channel_Mapping(channel);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7ff fd8d 	bl	8007050 <Channel_Mapping>
 8007536:	4603      	mov	r3, r0
 8007538:	60bb      	str	r3, [r7, #8]

	//todo: crc check

	if(ch->rx_data_buf[0] == MODBUS_SLAVE_ADDR){
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	799a      	ldrb	r2, [r3, #6]
 800753e:	4b4f      	ldr	r3, [pc, #316]	; (800767c <modbus_slave_rx+0x16c>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	f040 8093 	bne.w	800766e <modbus_slave_rx+0x15e>
		register_addr = modbus_byte2word(&ch->rx_data_buf[2]);
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	3308      	adds	r3, #8
 800754c:	4618      	mov	r0, r3
 800754e:	f7ff fe1d 	bl	800718c <modbus_byte2word>
 8007552:	4603      	mov	r3, r0
 8007554:	82bb      	strh	r3, [r7, #20]
		register_qty = modbus_byte2word(&ch->rx_data_buf[4]);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	330a      	adds	r3, #10
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fe16 	bl	800718c <modbus_byte2word>
 8007560:	4603      	mov	r3, r0
 8007562:	823b      	strh	r3, [r7, #16]
		starting_addr = register_addr - 1;
 8007564:	8abb      	ldrh	r3, [r7, #20]
 8007566:	3b01      	subs	r3, #1
 8007568:	81fb      	strh	r3, [r7, #14]

		if(ch->rx_data_buf[1] == MODBUS_WRITE_SINGLE_REGISTER){
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	79db      	ldrb	r3, [r3, #7]
 800756e:	2b06      	cmp	r3, #6
 8007570:	d11f      	bne.n	80075b2 <modbus_slave_rx+0xa2>
			//todo: need to save parameter to flash
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 8007572:	89fb      	ldrh	r3, [r7, #14]
 8007574:	2b0f      	cmp	r3, #15
 8007576:	d85b      	bhi.n	8007630 <modbus_slave_rx+0x120>
				Modbus_Buf_Holding_Registers_40001[starting_addr] = modbus_byte2word(&ch->rx_data_buf[4]);
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	330a      	adds	r3, #10
 800757c:	89fc      	ldrh	r4, [r7, #14]
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff fe04 	bl	800718c <modbus_byte2word>
 8007584:	4603      	mov	r3, r0
 8007586:	461a      	mov	r2, r3
 8007588:	4b3d      	ldr	r3, [pc, #244]	; (8007680 <modbus_slave_rx+0x170>)
 800758a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

				if(starting_addr > 7) {
 800758e:	89fb      	ldrh	r3, [r7, #14]
 8007590:	2b07      	cmp	r3, #7
 8007592:	d94d      	bls.n	8007630 <modbus_slave_rx+0x120>
					Record_To_Modbus_GPD(starting_addr-8, Modbus_Buf_Holding_Registers_40001[starting_addr]);
 8007594:	89fb      	ldrh	r3, [r7, #14]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	3b08      	subs	r3, #8
 800759a:	b2da      	uxtb	r2, r3
 800759c:	89fb      	ldrh	r3, [r7, #14]
 800759e:	4938      	ldr	r1, [pc, #224]	; (8007680 <modbus_slave_rx+0x170>)
 80075a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80075a4:	4619      	mov	r1, r3
 80075a6:	4610      	mov	r0, r2
 80075a8:	f7ff fd04 	bl	8006fb4 <Record_To_Modbus_GPD>
					write_persistent_data_structure();
 80075ac:	f7ff fcf6 	bl	8006f9c <write_persistent_data_structure>
 80075b0:	e03e      	b.n	8007630 <modbus_slave_rx+0x120>
				}
			}
		}

		else if(ch->rx_data_buf[1] == MODBUS_WRITE_MULTIPLE_REGISTER){
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	79db      	ldrb	r3, [r3, #7]
 80075b6:	2b10      	cmp	r3, #16
 80075b8:	d13a      	bne.n	8007630 <modbus_slave_rx+0x120>
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 80075ba:	89fb      	ldrh	r3, [r7, #14]
 80075bc:	2b0f      	cmp	r3, #15
 80075be:	d837      	bhi.n	8007630 <modbus_slave_rx+0x120>
				for(uint8_t i = 0;i<register_qty;i++){
 80075c0:	2300      	movs	r3, #0
 80075c2:	75bb      	strb	r3, [r7, #22]
 80075c4:	e02a      	b.n	800761c <modbus_slave_rx+0x10c>
					Modbus_Buf_Holding_Registers_40001[starting_addr+i] = modbus_byte2word(&ch->rx_data_buf[7+i*2]);
 80075c6:	7dbb      	ldrb	r3, [r7, #22]
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	3307      	adds	r3, #7
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	4413      	add	r3, r2
 80075d0:	1d99      	adds	r1, r3, #6
 80075d2:	89fa      	ldrh	r2, [r7, #14]
 80075d4:	7dbb      	ldrb	r3, [r7, #22]
 80075d6:	18d4      	adds	r4, r2, r3
 80075d8:	4608      	mov	r0, r1
 80075da:	f7ff fdd7 	bl	800718c <modbus_byte2word>
 80075de:	4603      	mov	r3, r0
 80075e0:	461a      	mov	r2, r3
 80075e2:	4b27      	ldr	r3, [pc, #156]	; (8007680 <modbus_slave_rx+0x170>)
 80075e4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
					if((starting_addr+i) > 7) {
 80075e8:	89fa      	ldrh	r2, [r7, #14]
 80075ea:	7dbb      	ldrb	r3, [r7, #22]
 80075ec:	4413      	add	r3, r2
 80075ee:	2b07      	cmp	r3, #7
 80075f0:	dd11      	ble.n	8007616 <modbus_slave_rx+0x106>
						//If modbus write targetted to upper 8 register,
						//since they are persistent registers record them to gdb
						Record_To_Modbus_GPD(starting_addr+i-8, Modbus_Buf_Holding_Registers_40001[starting_addr+i]);
 80075f2:	89fb      	ldrh	r3, [r7, #14]
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	7dbb      	ldrb	r3, [r7, #22]
 80075f8:	4413      	add	r3, r2
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	3b08      	subs	r3, #8
 80075fe:	b2d8      	uxtb	r0, r3
 8007600:	89fa      	ldrh	r2, [r7, #14]
 8007602:	7dbb      	ldrb	r3, [r7, #22]
 8007604:	4413      	add	r3, r2
 8007606:	4a1e      	ldr	r2, [pc, #120]	; (8007680 <modbus_slave_rx+0x170>)
 8007608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800760c:	4619      	mov	r1, r3
 800760e:	f7ff fcd1 	bl	8006fb4 <Record_To_Modbus_GPD>
						gpd_recorded = 1;
 8007612:	2301      	movs	r3, #1
 8007614:	75fb      	strb	r3, [r7, #23]
				for(uint8_t i = 0;i<register_qty;i++){
 8007616:	7dbb      	ldrb	r3, [r7, #22]
 8007618:	3301      	adds	r3, #1
 800761a:	75bb      	strb	r3, [r7, #22]
 800761c:	7dbb      	ldrb	r3, [r7, #22]
 800761e:	b29b      	uxth	r3, r3
 8007620:	8a3a      	ldrh	r2, [r7, #16]
 8007622:	429a      	cmp	r2, r3
 8007624:	d8cf      	bhi.n	80075c6 <modbus_slave_rx+0xb6>
					}
				}

				if(gpd_recorded){
 8007626:	7dfb      	ldrb	r3, [r7, #23]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <modbus_slave_rx+0x120>
					//after multiple write finished record persistent data at once.
					write_persistent_data_structure();
 800762c:	f7ff fcb6 	bl	8006f9c <write_persistent_data_structure>
		}

		else if(ch->rx_data_buf[1] == MODBUS_READ_HOLDING_REGISTER){
		}

		switch(ch->rx_data_buf[1]){
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	79db      	ldrb	r3, [r3, #7]
 8007634:	2b10      	cmp	r3, #16
 8007636:	bf8c      	ite	hi
 8007638:	2201      	movhi	r2, #1
 800763a:	2200      	movls	r2, #0
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	2a00      	cmp	r2, #0
 8007640:	d116      	bne.n	8007670 <modbus_slave_rx+0x160>
 8007642:	2201      	movs	r2, #1
 8007644:	409a      	lsls	r2, r3
 8007646:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <modbus_slave_rx+0x174>)
 8007648:	4013      	ands	r3, r2
 800764a:	2b00      	cmp	r3, #0
 800764c:	bf14      	ite	ne
 800764e:	2301      	movne	r3, #1
 8007650:	2300      	moveq	r3, #0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00b      	beq.n	8007670 <modbus_slave_rx+0x160>
			case MODBUS_WRITE_SINGLE_REGISTER:
			case MODBUS_WRITE_MULTIPLE_REGISTER:
			case MODBUS_READ_HOLDING_REGISTER:
			case MODBUS_READ_INPUT_REGISTER:
				//fill the responce structure
				modbus_slave_prep_resp_data(&resp_data,
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	79d9      	ldrb	r1, [r3, #7]
 800765c:	8a3b      	ldrh	r3, [r7, #16]
 800765e:	8aba      	ldrh	r2, [r7, #20]
 8007660:	4809      	ldr	r0, [pc, #36]	; (8007688 <modbus_slave_rx+0x178>)
 8007662:	f7ff fda9 	bl	80071b8 <modbus_slave_prep_resp_data>
												ch->rx_data_buf[1],
													register_addr,
														register_qty);

				//initiate_tx
				modbus_slave_tx(&resp_data);
 8007666:	4808      	ldr	r0, [pc, #32]	; (8007688 <modbus_slave_rx+0x178>)
 8007668:	f7ff ff42 	bl	80074f0 <modbus_slave_tx>
				break;
 800766c:	e000      	b.n	8007670 <modbus_slave_rx+0x160>
		}
	}
 800766e:	bf00      	nop
	return 0;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	bd90      	pop	{r4, r7, pc}
 800767a:	bf00      	nop
 800767c:	20000039 	.word	0x20000039
 8007680:	20000980 	.word	0x20000980
 8007684:	00010058 	.word	0x00010058
 8007688:	20000958 	.word	0x20000958

0800768c <CRC16>:

uint16_t CRC16 (const uint8_t *nData, uint16_t wLength)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	807b      	strh	r3, [r7, #2]
   0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
   0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

uint8_t nTemp;
uint16_t wCRCWord = 0xFFFF;
 8007698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800769c:	81fb      	strh	r3, [r7, #14]

   while (wLength--)
 800769e:	e011      	b.n	80076c4 <CRC16+0x38>
   {
      nTemp = *nData++ ^ wCRCWord;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	781a      	ldrb	r2, [r3, #0]
 80076a8:	89fb      	ldrh	r3, [r7, #14]
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	4053      	eors	r3, r2
 80076ae:	737b      	strb	r3, [r7, #13]
      wCRCWord >>= 8;
 80076b0:	89fb      	ldrh	r3, [r7, #14]
 80076b2:	0a1b      	lsrs	r3, r3, #8
 80076b4:	81fb      	strh	r3, [r7, #14]
      wCRCWord  ^= wCRCTable[nTemp];
 80076b6:	7b7b      	ldrb	r3, [r7, #13]
 80076b8:	4a08      	ldr	r2, [pc, #32]	; (80076dc <CRC16+0x50>)
 80076ba:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80076be:	89fb      	ldrh	r3, [r7, #14]
 80076c0:	4053      	eors	r3, r2
 80076c2:	81fb      	strh	r3, [r7, #14]
   while (wLength--)
 80076c4:	887b      	ldrh	r3, [r7, #2]
 80076c6:	1e5a      	subs	r2, r3, #1
 80076c8:	807a      	strh	r2, [r7, #2]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e8      	bne.n	80076a0 <CRC16+0x14>
   }
   return wCRCWord;
 80076ce:	89fb      	ldrh	r3, [r7, #14]
} // End: CRC16
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	08009270 	.word	0x08009270

080076e0 <parser_create_connection>:
		fb_hsc_parser,
		0,
		0
};

uint8_t parser_create_connection(uint8_t* p){
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
	make_connection(p[0], p[1]); //dest,src
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	3301      	adds	r3, #1
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	4619      	mov	r1, r3
 80076f6:	4610      	mov	r0, r2
 80076f8:	f7ff fb4a 	bl	8006d90 <make_connection>
	return 1;
 80076fc:	2301      	movs	r3, #1
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <parser_addwatch>:

uint8_t parser_addwatch(uint8_t* p){
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
	addWatch(p[0]);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 f998 	bl	8007a48 <addWatch>
	return 0;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <parser_removewatch>:

uint8_t parser_removewatch(uint8_t* p){
 8007722:	b580      	push	{r7, lr}
 8007724:	b082      	sub	sp, #8
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
	removeWatch(p[0]);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 f9a8 	bl	8007a84 <removeWatch>
	return 0;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <parser_monitor>:

uint8_t parser_monitor(uint8_t* p){
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
	monitor();
 8007746:	f000 f9db 	bl	8007b00 <monitor>
	return 0;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <Parser>:

uint8_t Parser(Communication_Ch* dep_ch){
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0, addr = 0;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
 8007760:	2300      	movs	r3, #0
 8007762:	73bb      	strb	r3, [r7, #14]
	uint8_t modbus_slave_addr = *get_MODBUS_SLAVE_ADDR();
 8007764:	f7ff fcec 	bl	8007140 <get_MODBUS_SLAVE_ADDR>
 8007768:	4603      	mov	r3, r0
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	737b      	strb	r3, [r7, #13]
	if(dep_ch->fdata_ready){
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007774:	2b00      	cmp	r3, #0
 8007776:	d05a      	beq.n	800782e <Parser+0xda>
		addr = dep_ch->rx_data_buf[0];
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	799b      	ldrb	r3, [r3, #6]
 800777c:	73bb      	strb	r3, [r7, #14]
		if (addr != modbus_slave_addr) return 0;
 800777e:	7bba      	ldrb	r2, [r7, #14]
 8007780:	7b7b      	ldrb	r3, [r7, #13]
 8007782:	429a      	cmp	r2, r3
 8007784:	d001      	beq.n	800778a <Parser+0x36>
 8007786:	2300      	movs	r3, #0
 8007788:	e052      	b.n	8007830 <Parser+0xdc>
		cmd = dep_ch->rx_data_buf[1]; //function
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	79db      	ldrb	r3, [r3, #7]
 800778e:	73fb      	strb	r3, [r7, #15]
		switch (cmd)
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	3b65      	subs	r3, #101	; 0x65
 8007794:	2b06      	cmp	r3, #6
 8007796:	d838      	bhi.n	800780a <Parser+0xb6>
 8007798:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <Parser+0x4c>)
 800779a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779e:	bf00      	nop
 80077a0:	080077bd 	.word	0x080077bd
 80077a4:	080077db 	.word	0x080077db
 80077a8:	0800781d 	.word	0x0800781d
 80077ac:	0800781d 	.word	0x0800781d
 80077b0:	080077e7 	.word	0x080077e7
 80077b4:	080077ff 	.word	0x080077ff
 80077b8:	080077f3 	.word	0x080077f3
		{
		case CMD_CREATE_FB: //FBTYPE-PARAMS
			if(dep_ch->rx_data_buf[2]<FB_PARSERS_SIZE){
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	7a1b      	ldrb	r3, [r3, #8]
 80077c0:	2b0f      	cmp	r3, #15
 80077c2:	d82d      	bhi.n	8007820 <Parser+0xcc>
				fb_parsers[dep_ch->rx_data_buf[2]](&(dep_ch->rx_data_buf[3]));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	7a1b      	ldrb	r3, [r3, #8]
 80077c8:	461a      	mov	r2, r3
 80077ca:	4b1b      	ldr	r3, [pc, #108]	; (8007838 <Parser+0xe4>)
 80077cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	3209      	adds	r2, #9
 80077d4:	4610      	mov	r0, r2
 80077d6:	4798      	blx	r3
			}
			break;
 80077d8:	e022      	b.n	8007820 <Parser+0xcc>
		case CMD_CREATE_CONN: //DEST-SRC
			parser_create_connection(&(dep_ch->rx_data_buf[2]));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3308      	adds	r3, #8
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff ff7e 	bl	80076e0 <parser_create_connection>
			break;
 80077e4:	e01d      	b.n	8007822 <Parser+0xce>
			break;
		case CMD_KILL:
			break;

		case CMD_ADDWATCH:
			parser_addwatch(&(dep_ch->rx_data_buf[2]));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3308      	adds	r3, #8
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7ff ff8b 	bl	8007706 <parser_addwatch>
			break;
 80077f0:	e017      	b.n	8007822 <Parser+0xce>

		case CMD_REMOVEWATCH:
			parser_removewatch(&(dep_ch->rx_data_buf[2]));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	3308      	adds	r3, #8
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff ff93 	bl	8007722 <parser_removewatch>
			break;
 80077fc:	e011      	b.n	8007822 <Parser+0xce>

		case CMD_MONITOR:
			parser_monitor(&(dep_ch->rx_data_buf[2]));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3308      	adds	r3, #8
 8007802:	4618      	mov	r0, r3
 8007804:	f7ff ff9b 	bl	800773e <parser_monitor>
			break;
 8007808:	e00b      	b.n	8007822 <Parser+0xce>

		default:
			dep_ch->data_error_counter++;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007810:	3301      	adds	r3, #1
 8007812:	b2da      	uxtb	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800781a:	e002      	b.n	8007822 <Parser+0xce>
			break;
 800781c:	bf00      	nop
 800781e:	e000      	b.n	8007822 <Parser+0xce>
			break;
 8007820:	bf00      	nop
		}

		dep_ch->fdata_ready = 0; //data process finished and ready for new data.
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		return cmd;
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	e000      	b.n	8007830 <Parser+0xdc>
	}

	else{
		return 0; //no new deployment data
 800782e:	2300      	movs	r3, #0
	}
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	2000003c 	.word	0x2000003c

0800783c <get_deployment_ch>:
#include "modbus_slave.h"
#include "deployment.h"

Communication_Ch deployment_ch = {.fdata_ready=0,.rx_data_cntr=0};

Communication_Ch* get_deployment_ch(){
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
	return &deployment_ch;
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <get_deployment_ch+0x10>)
}
 8007842:	4618      	mov	r0, r3
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	200000ec 	.word	0x200000ec

08007850 <deployment_data_validity_check>:

uint8_t deployment_data_validity_check()
{
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
	if(deployment_ch.rx_data_cntr <2) {
 8007854:	4b09      	ldr	r3, [pc, #36]	; (800787c <deployment_data_validity_check+0x2c>)
 8007856:	795b      	ldrb	r3, [r3, #5]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d809      	bhi.n	8007870 <deployment_data_validity_check+0x20>
		deployment_ch.data_error_counter = deployment_ch.data_error_counter + 1;
 800785c:	4b07      	ldr	r3, [pc, #28]	; (800787c <deployment_data_validity_check+0x2c>)
 800785e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007862:	3301      	adds	r3, #1
 8007864:	b2da      	uxtb	r2, r3
 8007866:	4b05      	ldr	r3, [pc, #20]	; (800787c <deployment_data_validity_check+0x2c>)
 8007868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		return 1;
 800786c:	2301      	movs	r3, #1
 800786e:	e000      	b.n	8007872 <deployment_data_validity_check+0x22>
	}
	else{
		return 0;
 8007870:	2300      	movs	r3, #0
	}
}
 8007872:	4618      	mov	r0, r3
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	200000ec 	.word	0x200000ec

08007880 <init_deployment_ch>:

void init_deployment_ch(){
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0
	deployment_ch.process_callback = modbus_slave_rx;
 8007884:	4b05      	ldr	r3, [pc, #20]	; (800789c <init_deployment_ch+0x1c>)
 8007886:	4a06      	ldr	r2, [pc, #24]	; (80078a0 <init_deployment_ch+0x20>)
 8007888:	649a      	str	r2, [r3, #72]	; 0x48
	deployment_ch.data_validity_check_callback = deployment_data_validity_check;
 800788a:	4b04      	ldr	r3, [pc, #16]	; (800789c <init_deployment_ch+0x1c>)
 800788c:	4a05      	ldr	r2, [pc, #20]	; (80078a4 <init_deployment_ch+0x24>)
 800788e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007890:	bf00      	nop
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	200000ec 	.word	0x200000ec
 80078a0:	08007511 	.word	0x08007511
 80078a4:	08007851 	.word	0x08007851

080078a8 <check_for_available_memory>:

#include "stdint.h"
#include "fcb.h"


static uint8_t check_for_available_memory(uint32_t start_addr, uint32_t datalen){
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
	uint32_t mem_start, mem_end, mem_size;
	get_flash_memory_info(&mem_start, &mem_size);
 80078b2:	f107 020c 	add.w	r2, r7, #12
 80078b6:	f107 0310 	add.w	r3, r7, #16
 80078ba:	4611      	mov	r1, r2
 80078bc:	4618      	mov	r0, r3
 80078be:	f7f9 f803 	bl	80008c8 <get_flash_memory_info>
	mem_end = mem_start+ mem_size;
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4413      	add	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]

	if(mem_end < start_addr+FLASHBLOCK_HEADER_SIZE+datalen){
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	4413      	add	r3, r2
 80078d0:	3308      	adds	r3, #8
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d201      	bcs.n	80078dc <check_for_available_memory+0x34>
		return 0; //no available memory
 80078d8:	2300      	movs	r3, #0
 80078da:	e000      	b.n	80078de <check_for_available_memory+0x36>
	}

	return 1;
 80078dc:	2301      	movs	r3, #1
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
	...

080078e8 <write_flash_block>:

static uint32_t write_flash_block(uint32_t start_addr, uint8_t* data, uint32_t datalen)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
	//first control for the available space if there is no space then return error
	if(check_for_available_memory(start_addr, datalen) == 1){
 80078f4:	6879      	ldr	r1, [r7, #4]
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7ff ffd6 	bl	80078a8 <check_for_available_memory>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d116      	bne.n	8007930 <write_flash_block+0x48>
		Flash_Block fb = {.block_start_marker1= BLOCK_START_MAGIC1, .length = datalen};
 8007902:	4b0e      	ldr	r3, [pc, #56]	; (800793c <write_flash_block+0x54>)
 8007904:	613b      	str	r3, [r7, #16]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	617b      	str	r3, [r7, #20]

		//write header
		write_to_flash((uint8_t*) (&fb), start_addr, FLASHBLOCK_HEADER_SIZE);
 800790a:	f107 0310 	add.w	r3, r7, #16
 800790e:	2208      	movs	r2, #8
 8007910:	68f9      	ldr	r1, [r7, #12]
 8007912:	4618      	mov	r0, r3
 8007914:	f7f8 ffec 	bl	80008f0 <write_to_flash>

		//write data
		write_to_flash(data, start_addr+FLASHBLOCK_HEADER_SIZE, datalen);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3308      	adds	r3, #8
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	4619      	mov	r1, r3
 8007920:	68b8      	ldr	r0, [r7, #8]
 8007922:	f7f8 ffe5 	bl	80008f0 <write_to_flash>

		return start_addr+FLASHBLOCK_HEADER_SIZE+datalen; //return the finish address of the block
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4413      	add	r3, r2
 800792c:	3308      	adds	r3, #8
 800792e:	e000      	b.n	8007932 <write_flash_block+0x4a>
	}

	return 0; //no available memory
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	01234567 	.word	0x01234567

08007940 <get_current_address>:

//search all flash to find the end of record
//last record: when doing search if you need the address of the last record function returns this value from the last_record
static Get_Current_Addr_Data get_current_address(uint32_t start_address, uint32_t memory_size){
 8007940:	b480      	push	{r7}
 8007942:	b08b      	sub	sp, #44	; 0x2c
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
	uint32_t* pflash_data;
	uint32_t flashptr, inc = 1;
 800794c:	2301      	movs	r3, #1
 800794e:	623b      	str	r3, [r7, #32]
	Flash_Block* temp_fb = (Flash_Block*) start_address;
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	61fb      	str	r3, [r7, #28]
	Get_Current_Addr_Data ret;

	ret.last_record_fb = temp_fb; //If there is no record at flash to initiate last record
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	617b      	str	r3, [r7, #20]

	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
 800795c:	e010      	b.n	8007980 <get_current_address+0x40>
	{
		temp_fb = (Flash_Block*) flashptr;
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	61fb      	str	r3, [r7, #28]

		if(temp_fb->block_start_marker1 ==BLOCK_START_MAGIC1){
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a12      	ldr	r2, [pc, #72]	; (80079b0 <get_current_address+0x70>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d110      	bne.n	800798e <get_current_address+0x4e>
			inc = temp_fb->length + FLASHBLOCK_HEADER_SIZE;
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	3308      	adds	r3, #8
 8007972:	623b      	str	r3, [r7, #32]
			ret.last_record_fb = temp_fb;
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	617b      	str	r3, [r7, #20]
	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 8007978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	4413      	add	r3, r2
 800797e:	627b      	str	r3, [r7, #36]	; 0x24
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4413      	add	r3, r2
 8007986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007988:	429a      	cmp	r2, r3
 800798a:	d3e8      	bcc.n	800795e <get_current_address+0x1e>
 800798c:	e000      	b.n	8007990 <get_current_address+0x50>
		}
		else{
			break;
 800798e:	bf00      	nop
		}
	}
	ret.flash_pointer = flashptr;
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	61bb      	str	r3, [r7, #24]

	return ret;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	461a      	mov	r2, r3
 8007998:	f107 0314 	add.w	r3, r7, #20
 800799c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80079a0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	372c      	adds	r7, #44	; 0x2c
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	01234567 	.word	0x01234567

080079b4 <write_flash_data>:

uint32_t write_flash_data(uint8_t* data, uint32_t length){
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
	uint32_t mem_start_address, mem_size;

	//Its very important length to be multiply of 4
	if(length%4 != 0) return 0;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	f003 0303 	and.w	r3, r3, #3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <write_flash_data+0x18>
 80079c8:	2300      	movs	r3, #0
 80079ca:	e023      	b.n	8007a14 <write_flash_data+0x60>

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size);
 80079cc:	f107 0210 	add.w	r2, r7, #16
 80079d0:	f107 0314 	add.w	r3, r7, #20
 80079d4:	4611      	mov	r1, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7f8 ff76 	bl	80008c8 <get_flash_memory_info>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);
 80079dc:	6979      	ldr	r1, [r7, #20]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	f107 0308 	add.w	r3, r7, #8
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff ffab 	bl	8007940 <get_current_address>

	if(check_for_available_memory(lastrecord_info.flash_pointer, length) == 0){
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff ff5a 	bl	80078a8 <check_for_available_memory>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d105      	bne.n	8007a06 <write_flash_data+0x52>
		erase_flash(mem_start_address);
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7f8 ffab 	bl	8000958 <erase_flash>
		lastrecord_info.flash_pointer = mem_start_address;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	60fb      	str	r3, [r7, #12]
	}

	//write data to flash and return current flash pointer address
	return write_flash_block(lastrecord_info.flash_pointer, data, length);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff ff6b 	bl	80078e8 <write_flash_block>
 8007a12:	4603      	mov	r3, r0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <get_flash_data>:

Flash_Block* get_flash_data(){
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
	uint32_t mem_start_address, mem_size;

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size);
 8007a22:	f107 0208 	add.w	r2, r7, #8
 8007a26:	f107 030c 	add.w	r3, r7, #12
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7f8 ff4b 	bl	80008c8 <get_flash_memory_info>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);
 8007a32:	68f9      	ldr	r1, [r7, #12]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	463b      	mov	r3, r7
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff ff81 	bl	8007940 <get_current_address>

	return lastrecord_info.last_record_fb;
 8007a3e:	683b      	ldr	r3, [r7, #0]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <addWatch>:
		watchList.data[i] = 0;
	}
}

void addWatch(uint8_t index)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	4603      	mov	r3, r0
 8007a50:	71fb      	strb	r3, [r7, #7]
	if(watchList.index < MAX_WATCH_COUNT){
 8007a52:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <addWatch+0x38>)
 8007a54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a58:	2b09      	cmp	r3, #9
 8007a5a:	d80b      	bhi.n	8007a74 <addWatch+0x2c>
		watchList.data[watchList.index++] = index;
 8007a5c:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <addWatch+0x38>)
 8007a5e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	b2d1      	uxtb	r1, r2
 8007a66:	4a06      	ldr	r2, [pc, #24]	; (8007a80 <addWatch+0x38>)
 8007a68:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4a04      	ldr	r2, [pc, #16]	; (8007a80 <addWatch+0x38>)
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	5453      	strb	r3, [r2, r1]
	}
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	200009c0 	.word	0x200009c0

08007a84 <removeWatch>:

void removeWatch(uint8_t index)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	71fb      	strb	r3, [r7, #7]
	uint8_t tempWatchList[MAX_WATCH_COUNT] = {0};
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	f107 0310 	add.w	r3, r7, #16
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 0;i<MAX_WATCH_COUNT;i++) tempWatchList[i] = watchList.data[i];
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	75fb      	strb	r3, [r7, #23]
 8007aa0:	e00b      	b.n	8007aba <removeWatch+0x36>
 8007aa2:	7dfa      	ldrb	r2, [r7, #23]
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
 8007aa6:	4915      	ldr	r1, [pc, #84]	; (8007afc <removeWatch+0x78>)
 8007aa8:	5c8a      	ldrb	r2, [r1, r2]
 8007aaa:	f107 0118 	add.w	r1, r7, #24
 8007aae:	440b      	add	r3, r1
 8007ab0:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	75fb      	strb	r3, [r7, #23]
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	2b09      	cmp	r3, #9
 8007abe:	d9f0      	bls.n	8007aa2 <removeWatch+0x1e>

	for(uint8_t i = index;i<watchList.index;i++){
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
 8007ac2:	75bb      	strb	r3, [r7, #22]
 8007ac4:	e00c      	b.n	8007ae0 <removeWatch+0x5c>
		watchList.data[i] = tempWatchList[i+1];
 8007ac6:	7dbb      	ldrb	r3, [r7, #22]
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	7dbb      	ldrb	r3, [r7, #22]
 8007acc:	f107 0118 	add.w	r1, r7, #24
 8007ad0:	440a      	add	r2, r1
 8007ad2:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8007ad6:	4a09      	ldr	r2, [pc, #36]	; (8007afc <removeWatch+0x78>)
 8007ad8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = index;i<watchList.index;i++){
 8007ada:	7dbb      	ldrb	r3, [r7, #22]
 8007adc:	3301      	adds	r3, #1
 8007ade:	75bb      	strb	r3, [r7, #22]
 8007ae0:	4b06      	ldr	r3, [pc, #24]	; (8007afc <removeWatch+0x78>)
 8007ae2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ae6:	7dba      	ldrb	r2, [r7, #22]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d3ec      	bcc.n	8007ac6 <removeWatch+0x42>
	}
}
 8007aec:	bf00      	nop
 8007aee:	bf00      	nop
 8007af0:	371c      	adds	r7, #28
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	200009c0 	.word	0x200009c0

08007b00 <monitor>:

void monitor()
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
	uint8_t dma_i = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
	s_Param* pAddrTable = get_paramAddrTable();
 8007b0a:	f7ff f8ed 	bl	8006ce8 <get_paramAddrTable>
 8007b0e:	60b8      	str	r0, [r7, #8]

	if(watchList.index == 0) return; //no watches at the list
 8007b10:	4b19      	ldr	r3, [pc, #100]	; (8007b78 <monitor+0x78>)
 8007b12:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d02a      	beq.n	8007b70 <monitor+0x70>

		for(uint8_t i = 0;i<watchList.index;i++){
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73bb      	strb	r3, [r7, #14]
 8007b1e:	e01a      	b.n	8007b56 <monitor+0x56>
			watchList.dmaBuffer[dma_i++] = watchList.data[i]; //first put the index of data
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	4a15      	ldr	r2, [pc, #84]	; (8007b78 <monitor+0x78>)
 8007b24:	5cd2      	ldrb	r2, [r2, r3]
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	1c59      	adds	r1, r3, #1
 8007b2a:	73f9      	strb	r1, [r7, #15]
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	4a12      	ldr	r2, [pc, #72]	; (8007b78 <monitor+0x78>)
 8007b30:	3302      	adds	r3, #2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	6059      	str	r1, [r3, #4]
			uint32_t value = pAddrTable->addr[0];
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	607b      	str	r3, [r7, #4]
			watchList.dmaBuffer[dma_i++] = value;
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	73fa      	strb	r2, [r7, #15]
 8007b44:	4a0c      	ldr	r2, [pc, #48]	; (8007b78 <monitor+0x78>)
 8007b46:	3302      	adds	r3, #2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	605a      	str	r2, [r3, #4]
		for(uint8_t i = 0;i<watchList.index;i++){
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	3301      	adds	r3, #1
 8007b54:	73bb      	strb	r3, [r7, #14]
 8007b56:	4b08      	ldr	r3, [pc, #32]	; (8007b78 <monitor+0x78>)
 8007b58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b5c:	7bba      	ldrb	r2, [r7, #14]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d3de      	bcc.n	8007b20 <monitor+0x20>
		}
		//HAL_UART_Transmit_IT(&huart1, (uint8_t*)(watchList.dmaBuffer), dma_i*4);
		hal_modbus_uart_tx((uint8_t*)(watchList.dmaBuffer), dma_i*4);
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4619      	mov	r1, r3
 8007b68:	4804      	ldr	r0, [pc, #16]	; (8007b7c <monitor+0x7c>)
 8007b6a:	f7f8 fe6d 	bl	8000848 <hal_modbus_uart_tx>
 8007b6e:	e000      	b.n	8007b72 <monitor+0x72>
	if(watchList.index == 0) return; //no watches at the list
 8007b70:	bf00      	nop
}
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	200009c0 	.word	0x200009c0
 8007b7c:	200009cc 	.word	0x200009cc

08007b80 <fb_wmhr_parser>:
#include "persistent_vars.h"
#include "modbus_slave.h"
#include <fb_wmhr.h>

//cyclic event fb
uint8_t fb_wmhr_parser(uint8_t* p){
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08c      	sub	sp, #48	; 0x30
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t reg = p[0];
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t mode = p[1];
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	785b      	ldrb	r3, [r3, #1]
 8007b94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	create_fb_wmhr(reg, mode);
 8007b98:	463b      	mov	r3, r7
 8007b9a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007b9e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 f8a2 	bl	8007cec <create_fb_wmhr>
	return 1;
 8007ba8:	2301      	movs	r3, #1
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3730      	adds	r7, #48	; 0x30
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <fb_wmhr>:

void fb_wmhr(uint8_t p){
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b08a      	sub	sp, #40	; 0x28
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	4603      	mov	r3, r0
 8007bba:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8007bbc:	f7ff f894 	bl	8006ce8 <get_paramAddrTable>
 8007bc0:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	3380      	adds	r3, #128	; 0x80
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd2:	4413      	add	r3, r2
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	623b      	str	r3, [r7, #32]
	uint32_t* din = &pAddrTable->value[pAddrTable->addr[p+1]];
 8007bd8:	79fb      	ldrb	r3, [r7, #7]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	3380      	adds	r3, #128	; 0x80
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bea:	4413      	add	r3, r2
 8007bec:	3304      	adds	r3, #4
 8007bee:	61fb      	str	r3, [r7, #28]
	uint32_t* wren = &pAddrTable->value[pAddrTable->addr[p+2]];
 8007bf0:	79fb      	ldrb	r3, [r7, #7]
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	3380      	adds	r3, #128	; 0x80
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c02:	4413      	add	r3, r2
 8007c04:	3304      	adds	r3, #4
 8007c06:	61bb      	str	r3, [r7, #24]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+3]];
 8007c08:	79fb      	ldrb	r3, [r7, #7]
 8007c0a:	3303      	adds	r3, #3
 8007c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	3380      	adds	r3, #128	; 0x80
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c1a:	4413      	add	r3, r2
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	617b      	str	r3, [r7, #20]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	3304      	adds	r3, #4
 8007c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	3380      	adds	r3, #128	; 0x80
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	4413      	add	r3, r2
 8007c34:	3304      	adds	r3, #4
 8007c36:	613b      	str	r3, [r7, #16]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+5]];
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	3305      	adds	r3, #5
 8007c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	3380      	adds	r3, #128	; 0x80
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4a:	4413      	add	r3, r2
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	60fb      	str	r3, [r7, #12]

	uint16_t* modbus_holding_reg = get_Modbus_Buf_Holding_Registers_40001();
 8007c50:	f7ff fa62 	bl	8007118 <get_Modbus_Buf_Holding_Registers_40001>
 8007c54:	4603      	mov	r3, r0
 8007c56:	60bb      	str	r3, [r7, #8]

	//detech rising edge of wren and then write to register
	switch(*state){
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d016      	beq.n	8007c8e <fb_wmhr+0xdc>
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d835      	bhi.n	8007cd0 <fb_wmhr+0x11e>
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <fb_wmhr+0xbc>
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d008      	beq.n	8007c7e <fb_wmhr+0xcc>
 8007c6c:	e030      	b.n	8007cd0 <fb_wmhr+0x11e>
		case 0:
			if(*wren == 0) *state = 1;
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d130      	bne.n	8007cd8 <fb_wmhr+0x126>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
			break;
 8007c7c:	e02c      	b.n	8007cd8 <fb_wmhr+0x126>
		case 1:
			if(*wren == 1) *state = 2;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d12a      	bne.n	8007cdc <fb_wmhr+0x12a>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	601a      	str	r2, [r3, #0]
			break;
 8007c8c:	e026      	b.n	8007cdc <fb_wmhr+0x12a>

		case 2:
			//write to register
			modbus_holding_reg[*reg] = *din;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	6819      	ldr	r1, [r3, #0]
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	b28a      	uxth	r2, r1
 8007c9e:	801a      	strh	r2, [r3, #0]
			*state = 0;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]
			//record to flash
			if(*reg > 7) {
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b07      	cmp	r3, #7
 8007cac:	d918      	bls.n	8007ce0 <fb_wmhr+0x12e>
				Record_To_Modbus_GPD(*reg-8, modbus_holding_reg[*reg]);
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	3b08      	subs	r3, #8
 8007cb6:	b2d8      	uxtb	r0, r3
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f7ff f975 	bl	8006fb4 <Record_To_Modbus_GPD>
				write_persistent_data_structure();
 8007cca:	f7ff f967 	bl	8006f9c <write_persistent_data_structure>
			}
			break;
 8007cce:	e007      	b.n	8007ce0 <fb_wmhr+0x12e>
		default:
			*state = 0;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
	}
}
 8007cd6:	e004      	b.n	8007ce2 <fb_wmhr+0x130>
			break;
 8007cd8:	bf00      	nop
 8007cda:	e002      	b.n	8007ce2 <fb_wmhr+0x130>
			break;
 8007cdc:	bf00      	nop
 8007cde:	e000      	b.n	8007ce2 <fb_wmhr+0x130>
			break;
 8007ce0:	bf00      	nop
}
 8007ce2:	bf00      	nop
 8007ce4:	3728      	adds	r7, #40	; 0x28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
	...

08007cec <create_fb_wmhr>:

type_fb_wmhr create_fb_wmhr(uint8_t reg, uint8_t mode){
 8007cec:	b5b0      	push	{r4, r5, r7, lr}
 8007cee:	b08a      	sub	sp, #40	; 0x28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	70bb      	strb	r3, [r7, #2]
	type_fb_wmhr fb;

	s_Param* pAddrTable = get_paramAddrTable();
 8007cfc:	f7fe fff4 	bl	8006ce8 <get_paramAddrTable>
 8007d00:	6278      	str	r0, [r7, #36]	; 0x24
	//uint8_t* p_modbus_slave_addr = get_MODBUS_SLAVE_ADDR();
	//if(addr > 1) *p_modbus_slave_addr = addr; //addr is set to 1 default, if something comes greater than 1, than new addr set to this new value

	fb.startParamIndex = pAddrTable->currentIndex;
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	727b      	strb	r3, [r7, #9]

	fb.fp.reg = createParameter(reg);
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff f81a 	bl	8006d44 <createParameter>
 8007d10:	4603      	mov	r3, r0
 8007d12:	60fb      	str	r3, [r7, #12]
	fb.fp.din = createParameter(0);
 8007d14:	2000      	movs	r0, #0
 8007d16:	f7ff f815 	bl	8006d44 <createParameter>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	613b      	str	r3, [r7, #16]
	fb.fp.wren = createParameter(0);
 8007d1e:	2000      	movs	r0, #0
 8007d20:	f7ff f810 	bl	8006d44 <createParameter>
 8007d24:	4603      	mov	r3, r0
 8007d26:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode);
 8007d28:	78bb      	ldrb	r3, [r7, #2]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff f80a 	bl	8006d44 <createParameter>
 8007d30:	4603      	mov	r3, r0
 8007d32:	61bb      	str	r3, [r7, #24]
	fb.fp.stat = createParameter(0);
 8007d34:	2000      	movs	r0, #0
 8007d36:	f7ff f805 	bl	8006d44 <createParameter>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	61fb      	str	r3, [r7, #28]

	//internal
	fb.fp.state = createParameter(0);
 8007d3e:	2000      	movs	r0, #0
 8007d40:	f7ff f800 	bl	8006d44 <createParameter>
 8007d44:	4603      	mov	r3, r0
 8007d46:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_wmhr, fb.startParamIndex);
 8007d48:	7a7b      	ldrb	r3, [r7, #9]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4809      	ldr	r0, [pc, #36]	; (8007d74 <create_fb_wmhr+0x88>)
 8007d4e:	f7fe ffd5 	bl	8006cfc <writeToFBTable>
 8007d52:	4603      	mov	r3, r0
 8007d54:	723b      	strb	r3, [r7, #8]

	return fb;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	461d      	mov	r5, r3
 8007d5a:	f107 0408 	add.w	r4, r7, #8
 8007d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d62:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007d66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	3728      	adds	r7, #40	; 0x28
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bdb0      	pop	{r4, r5, r7, pc}
 8007d72:	bf00      	nop
 8007d74:	08007bb3 	.word	0x08007bb3

08007d78 <fb_number_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_number.h"

//output fb
uint8_t fb_number_parser(uint8_t* p){
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
	uint16_t value = (uint16_t) p[0] <<8 | p[1];
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	021b      	lsls	r3, r3, #8
 8007d86:	b21a      	sxth	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	b21b      	sxth	r3, r3
 8007d90:	4313      	orrs	r3, r2
 8007d92:	b21b      	sxth	r3, r3
 8007d94:	81fb      	strh	r3, [r7, #14]
	create_fb_number(value);
 8007d96:	89fb      	ldrh	r3, [r7, #14]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 f811 	bl	8007dc0 <create_fb_number>
	return 1;
 8007d9e:	2301      	movs	r3, #1
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <fb_number>:

void fb_number(uint8_t p){
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	71fb      	strb	r3, [r7, #7]
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
	...

08007dc0 <create_fb_number>:

type_fb_number create_fb_number(uint16_t value){
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	80fb      	strh	r3, [r7, #6]
	type_fb_number fb;
	s_Param* pAddrTable = get_paramAddrTable();
 8007dca:	f7fe ff8d 	bl	8006ce8 <get_paramAddrTable>
 8007dce:	6178      	str	r0, [r7, #20]

	fb.startParamIndex = pAddrTable->currentIndex;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	737b      	strb	r3, [r7, #13]

	fb.value = createParameter(value);
 8007dd6:	88fb      	ldrh	r3, [r7, #6]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe ffb3 	bl	8006d44 <createParameter>
 8007dde:	4603      	mov	r3, r0
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	81fb      	strh	r3, [r7, #14]

	fb.fb_index = writeToFBTable(fb_number, fb.startParamIndex);
 8007de4:	7b7b      	ldrb	r3, [r7, #13]
 8007de6:	4619      	mov	r1, r3
 8007de8:	4808      	ldr	r0, [pc, #32]	; (8007e0c <create_fb_number+0x4c>)
 8007dea:	f7fe ff87 	bl	8006cfc <writeToFBTable>
 8007dee:	4603      	mov	r3, r0
 8007df0:	733b      	strb	r3, [r7, #12]
	return fb;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	613b      	str	r3, [r7, #16]
 8007df6:	2300      	movs	r3, #0
 8007df8:	8a3a      	ldrh	r2, [r7, #16]
 8007dfa:	f362 030f 	bfi	r3, r2, #0, #16
 8007dfe:	8a7a      	ldrh	r2, [r7, #18]
 8007e00:	f362 431f 	bfi	r3, r2, #16, #16
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	08007da9 	.word	0x08007da9

08007e10 <fb_rmhr_parser>:
#include "persistent_vars.h"
#include "modbus_slave.h"
#include <fb_rmhr.h>

//cyclic event fb
uint8_t fb_rmhr_parser(uint8_t* p){
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08a      	sub	sp, #40	; 0x28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	61f8      	str	r0, [r7, #28]
	uint8_t reg = p[0];
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t mode = p[1];
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	785b      	ldrb	r3, [r3, #1]
 8007e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_rmhr(reg, mode);
 8007e28:	463b      	mov	r3, r7
 8007e2a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e2e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 f84e 	bl	8007ed4 <create_fb_rmhr>
	return 1;
 8007e38:	2301      	movs	r3, #1
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3728      	adds	r7, #40	; 0x28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <fb_rmhr>:

void fb_rmhr(uint8_t p){
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b088      	sub	sp, #32
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	4603      	mov	r3, r0
 8007e4a:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8007e4c:	f7fe ff4c 	bl	8006ce8 <get_paramAddrTable>
 8007e50:	61f8      	str	r0, [r7, #28]
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	69fa      	ldr	r2, [r7, #28]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	3380      	adds	r3, #128	; 0x80
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	69fa      	ldr	r2, [r7, #28]
 8007e62:	4413      	add	r3, r2
 8007e64:	3304      	adds	r3, #4
 8007e66:	61bb      	str	r3, [r7, #24]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+1]];
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	69fa      	ldr	r2, [r7, #28]
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	3380      	adds	r3, #128	; 0x80
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	69fa      	ldr	r2, [r7, #28]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	617b      	str	r3, [r7, #20]
	uint32_t* dout = &pAddrTable->value[pAddrTable->addr[p+2]];
 8007e80:	79fb      	ldrb	r3, [r7, #7]
 8007e82:	3302      	adds	r3, #2
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	3380      	adds	r3, #128	; 0x80
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	4413      	add	r3, r2
 8007e94:	3304      	adds	r3, #4
 8007e96:	613b      	str	r3, [r7, #16]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	3303      	adds	r3, #3
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	3380      	adds	r3, #128	; 0x80
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	69fa      	ldr	r2, [r7, #28]
 8007eaa:	4413      	add	r3, r2
 8007eac:	3304      	adds	r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]

	uint16_t* modbus_holding_reg = get_Modbus_Buf_Holding_Registers_40001();
 8007eb0:	f7ff f932 	bl	8007118 <get_Modbus_Buf_Holding_Registers_40001>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	60bb      	str	r3, [r7, #8]

	*dout = modbus_holding_reg[*reg];
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	601a      	str	r2, [r3, #0]
}
 8007eca:	bf00      	nop
 8007ecc:	3720      	adds	r7, #32
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <create_fb_rmhr>:

type_fb_rmhr create_fb_rmhr(uint8_t reg, uint8_t mode){
 8007ed4:	b5b0      	push	{r4, r5, r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	70bb      	strb	r3, [r7, #2]
	type_fb_rmhr fb;

	s_Param* pAddrTable = get_paramAddrTable();
 8007ee4:	f7fe ff00 	bl	8006ce8 <get_paramAddrTable>
 8007ee8:	61f8      	str	r0, [r7, #28]
	//uint8_t* p_modbus_slave_addr = get_MODBUS_SLAVE_ADDR();
	//if(addr > 1) *p_modbus_slave_addr = addr; //addr is set to 1 default, if something comes greater than 1, than new addr set to this new value

	fb.startParamIndex = pAddrTable->currentIndex;
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	727b      	strb	r3, [r7, #9]

	fb.fp.reg = createParameter(reg);
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe ff26 	bl	8006d44 <createParameter>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	60fb      	str	r3, [r7, #12]
	fb.fp.mode = createParameter(mode);
 8007efc:	78bb      	ldrb	r3, [r7, #2]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fe ff20 	bl	8006d44 <createParameter>
 8007f04:	4603      	mov	r3, r0
 8007f06:	613b      	str	r3, [r7, #16]
	fb.fp.dout = createParameter(0);
 8007f08:	2000      	movs	r0, #0
 8007f0a:	f7fe ff1b 	bl	8006d44 <createParameter>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	617b      	str	r3, [r7, #20]
	fb.fp.stat = createParameter(0);
 8007f12:	2000      	movs	r0, #0
 8007f14:	f7fe ff16 	bl	8006d44 <createParameter>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	61bb      	str	r3, [r7, #24]

	fb.fb_index = writeToFBTable(fb_rmhr, fb.startParamIndex);
 8007f1c:	7a7b      	ldrb	r3, [r7, #9]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4808      	ldr	r0, [pc, #32]	; (8007f44 <create_fb_rmhr+0x70>)
 8007f22:	f7fe feeb 	bl	8006cfc <writeToFBTable>
 8007f26:	4603      	mov	r3, r0
 8007f28:	723b      	strb	r3, [r7, #8]

	return fb;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	461d      	mov	r5, r3
 8007f2e:	f107 0408 	add.w	r4, r7, #8
 8007f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	602b      	str	r3, [r5, #0]
}
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	3720      	adds	r7, #32
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bdb0      	pop	{r4, r5, r7, pc}
 8007f42:	bf00      	nop
 8007f44:	08007e43 	.word	0x08007e43

08007f48 <fb_hsc_parser>:
#include "fb_hsc.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_hsc_parser(uint8_t* p){
 8007f48:	b590      	push	{r4, r7, lr}
 8007f4a:	b091      	sub	sp, #68	; 0x44
 8007f4c:	af02      	add	r7, sp, #8
 8007f4e:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t preset = (uint32_t) p[3] << 24 | p[4] << 16 | p[5] <<8 | p[6];
 8007f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f52:	3303      	adds	r3, #3
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	061b      	lsls	r3, r3, #24
 8007f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f5a:	3204      	adds	r2, #4
 8007f5c:	7812      	ldrb	r2, [r2, #0]
 8007f5e:	0412      	lsls	r2, r2, #16
 8007f60:	4313      	orrs	r3, r2
 8007f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f64:	3205      	adds	r2, #5
 8007f66:	7812      	ldrb	r2, [r2, #0]
 8007f68:	0212      	lsls	r2, r2, #8
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f6e:	3206      	adds	r2, #6
 8007f70:	7812      	ldrb	r2, [r2, #0]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	637b      	str	r3, [r7, #52]	; 0x34
	create_fb_hsc(p[0],p[1], p[2],preset);
 8007f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f78:	7819      	ldrb	r1, [r3, #0]
 8007f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	781a      	ldrb	r2, [r3, #0]
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	3302      	adds	r3, #2
 8007f84:	781c      	ldrb	r4, [r3, #0]
 8007f86:	4638      	mov	r0, r7
 8007f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	4623      	mov	r3, r4
 8007f8e:	f000 f87d 	bl	800808c <create_fb_hsc>
	return 1;
 8007f92:	2301      	movs	r3, #1
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	373c      	adds	r7, #60	; 0x3c
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd90      	pop	{r4, r7, pc}

08007f9c <fb_hsc>:

void fb_hsc(uint8_t p){
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08c      	sub	sp, #48	; 0x30
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8007fa6:	f7fe fe9f 	bl	8006ce8 <get_paramAddrTable>
 8007faa:	62f8      	str	r0, [r7, #44]	; 0x2c
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 8007fac:	79fb      	ldrb	r3, [r7, #7]
 8007fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	3380      	adds	r3, #128	; 0x80
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fbc:	4413      	add	r3, r2
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* ch1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 8007fc2:	79fb      	ldrb	r3, [r7, #7]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	3380      	adds	r3, #128	; 0x80
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fd4:	4413      	add	r3, r2
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* ch2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 8007fda:	79fb      	ldrb	r3, [r7, #7]
 8007fdc:	3302      	adds	r3, #2
 8007fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	3380      	adds	r3, #128	; 0x80
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fec:	4413      	add	r3, r2
 8007fee:	3304      	adds	r3, #4
 8007ff0:	623b      	str	r3, [r7, #32]
	int32_t* pf = &pAddrTable->value[pAddrTable->addr[p+3]];
 8007ff2:	79fb      	ldrb	r3, [r7, #7]
 8007ff4:	3303      	adds	r3, #3
 8007ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	3380      	adds	r3, #128	; 0x80
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008004:	4413      	add	r3, r2
 8008006:	3304      	adds	r3, #4
 8008008:	61fb      	str	r3, [r7, #28]
	int32_t* preset = &pAddrTable->value[pAddrTable->addr[p+4]];
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	3304      	adds	r3, #4
 800800e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	3380      	adds	r3, #128	; 0x80
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800801c:	4413      	add	r3, r2
 800801e:	3304      	adds	r3, #4
 8008020:	61bb      	str	r3, [r7, #24]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+5]];
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	3305      	adds	r3, #5
 8008026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	3380      	adds	r3, #128	; 0x80
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008034:	4413      	add	r3, r2
 8008036:	3304      	adds	r3, #4
 8008038:	617b      	str	r3, [r7, #20]
	int32_t* out = &pAddrTable->value[pAddrTable->addr[p+6]];
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	3306      	adds	r3, #6
 800803e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	3380      	adds	r3, #128	; 0x80
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800804c:	4413      	add	r3, r2
 800804e:	3304      	adds	r3, #4
 8008050:	613b      	str	r3, [r7, #16]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+7]];
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	3307      	adds	r3, #7
 8008056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	3380      	adds	r3, #128	; 0x80
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008064:	4413      	add	r3, r2
 8008066:	3304      	adds	r3, #4
 8008068:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+8]];
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	3308      	adds	r3, #8
 800806e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	3380      	adds	r3, #128	; 0x80
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800807c:	4413      	add	r3, r2
 800807e:	3304      	adds	r3, #4
 8008080:	60bb      	str	r3, [r7, #8]
}
 8008082:	bf00      	nop
 8008084:	3730      	adds	r7, #48	; 0x30
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <create_fb_hsc>:

type_fb_hsc create_fb_hsc(uint8_t ch1,
								uint8_t ch2,
									uint8_t mode,
											uint32_t preset){
 800808c:	b5b0      	push	{r4, r5, r7, lr}
 800808e:	b08e      	sub	sp, #56	; 0x38
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	4608      	mov	r0, r1
 8008096:	4611      	mov	r1, r2
 8008098:	461a      	mov	r2, r3
 800809a:	4603      	mov	r3, r0
 800809c:	70fb      	strb	r3, [r7, #3]
 800809e:	460b      	mov	r3, r1
 80080a0:	70bb      	strb	r3, [r7, #2]
 80080a2:	4613      	mov	r3, r2
 80080a4:	707b      	strb	r3, [r7, #1]
	type_fb_hsc fb;

	s_Param* pAddrTable = get_paramAddrTable();
 80080a6:	f7fe fe1f 	bl	8006ce8 <get_paramAddrTable>
 80080aa:	6378      	str	r0, [r7, #52]	; 0x34

	fb.startParamIndex = pAddrTable->currentIndex;
 80080ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	737b      	strb	r3, [r7, #13]

	//input ports
	fb.fp.rst = createParameter(0);
 80080b2:	2000      	movs	r0, #0
 80080b4:	f7fe fe46 	bl	8006d44 <createParameter>
 80080b8:	4603      	mov	r3, r0
 80080ba:	613b      	str	r3, [r7, #16]
	fb.fp.ch1 = createParameter(ch1);
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe fe40 	bl	8006d44 <createParameter>
 80080c4:	4603      	mov	r3, r0
 80080c6:	617b      	str	r3, [r7, #20]
	fb.fp.ch2 = createParameter(ch2);
 80080c8:	78bb      	ldrb	r3, [r7, #2]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe fe3a 	bl	8006d44 <createParameter>
 80080d0:	4603      	mov	r3, r0
 80080d2:	61bb      	str	r3, [r7, #24]
	fb.fp.pf = createParameter(0);
 80080d4:	2000      	movs	r0, #0
 80080d6:	f7fe fe35 	bl	8006d44 <createParameter>
 80080da:	4603      	mov	r3, r0
 80080dc:	61fb      	str	r3, [r7, #28]
	fb.fp.preset = createParameter(preset);
 80080de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fe fe2f 	bl	8006d44 <createParameter>
 80080e6:	4603      	mov	r3, r0
 80080e8:	623b      	str	r3, [r7, #32]
	fb.fp.mode = createParameter(mode);
 80080ea:	787b      	ldrb	r3, [r7, #1]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fe fe29 	bl	8006d44 <createParameter>
 80080f2:	4603      	mov	r3, r0
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24

	//output ports
	fb.fp.out = createParameter(0);
 80080f6:	2000      	movs	r0, #0
 80080f8:	f7fe fe24 	bl	8006d44 <createParameter>
 80080fc:	4603      	mov	r3, r0
 80080fe:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.val = createParameter(0);
 8008100:	2000      	movs	r0, #0
 8008102:	f7fe fe1f 	bl	8006d44 <createParameter>
 8008106:	4603      	mov	r3, r0
 8008108:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.stat = createParameter(0);
 800810a:	2000      	movs	r0, #0
 800810c:	f7fe fe1a 	bl	8006d44 <createParameter>
 8008110:	4603      	mov	r3, r0
 8008112:	633b      	str	r3, [r7, #48]	; 0x30

	//internal parameters

	fb.fb_index = writeToFBTable(fb_hsc, fb.startParamIndex);
 8008114:	7b7b      	ldrb	r3, [r7, #13]
 8008116:	4619      	mov	r1, r3
 8008118:	480a      	ldr	r0, [pc, #40]	; (8008144 <create_fb_hsc+0xb8>)
 800811a:	f7fe fdef 	bl	8006cfc <writeToFBTable>
 800811e:	4603      	mov	r3, r0
 8008120:	733b      	strb	r3, [r7, #12]

	return fb;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	461d      	mov	r5, r3
 8008126:	f107 040c 	add.w	r4, r7, #12
 800812a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800812c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800812e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008132:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008136:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	3738      	adds	r7, #56	; 0x38
 800813e:	46bd      	mov	sp, r7
 8008140:	bdb0      	pop	{r4, r5, r7, pc}
 8008142:	bf00      	nop
 8008144:	08007f9d 	.word	0x08007f9d

08008148 <fb_jy_parser>:
#include "fb_jy.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_jy_parser(uint8_t* p){
 8008148:	b590      	push	{r4, r7, lr}
 800814a:	b08f      	sub	sp, #60	; 0x3c
 800814c:	af02      	add	r7, sp, #8
 800814e:	62f8      	str	r0, [r7, #44]	; 0x2c
	create_fb_jy(p[0],p[1], p[2],p[3]);
 8008150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008152:	7819      	ldrb	r1, [r3, #0]
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	3301      	adds	r3, #1
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	3302      	adds	r3, #2
 800815e:	781c      	ldrb	r4, [r3, #0]
 8008160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008162:	3303      	adds	r3, #3
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	4638      	mov	r0, r7
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	4623      	mov	r3, r4
 800816c:	f000 f888 	bl	8008280 <create_fb_jy>
	return 1;
 8008170:	2301      	movs	r3, #1
}
 8008172:	4618      	mov	r0, r3
 8008174:	3734      	adds	r7, #52	; 0x34
 8008176:	46bd      	mov	sp, r7
 8008178:	bd90      	pop	{r4, r7, pc}

0800817a <fb_jy>:

void fb_jy(uint8_t p){
 800817a:	b580      	push	{r7, lr}
 800817c:	b08c      	sub	sp, #48	; 0x30
 800817e:	af00      	add	r7, sp, #0
 8008180:	4603      	mov	r3, r0
 8008182:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8008184:	f7fe fdb0 	bl	8006ce8 <get_paramAddrTable>
 8008188:	62f8      	str	r0, [r7, #44]	; 0x2c
	int32_t* ch_x = &pAddrTable->value[pAddrTable->addr[p]];
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	3380      	adds	r3, #128	; 0x80
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800819a:	4413      	add	r3, r2
 800819c:	3304      	adds	r3, #4
 800819e:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* ch_y = &pAddrTable->value[pAddrTable->addr[p+1]];
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	3301      	adds	r3, #1
 80081a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	3380      	adds	r3, #128	; 0x80
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081b2:	4413      	add	r3, r2
 80081b4:	3304      	adds	r3, #4
 80081b6:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* ch_btn = &pAddrTable->value[pAddrTable->addr[p+2]];
 80081b8:	79fb      	ldrb	r3, [r7, #7]
 80081ba:	3302      	adds	r3, #2
 80081bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	3380      	adds	r3, #128	; 0x80
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ca:	4413      	add	r3, r2
 80081cc:	3304      	adds	r3, #4
 80081ce:	623b      	str	r3, [r7, #32]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+3]];
 80081d0:	79fb      	ldrb	r3, [r7, #7]
 80081d2:	3303      	adds	r3, #3
 80081d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	3380      	adds	r3, #128	; 0x80
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081e2:	4413      	add	r3, r2
 80081e4:	3304      	adds	r3, #4
 80081e6:	61fb      	str	r3, [r7, #28]
	int32_t* x = &pAddrTable->value[pAddrTable->addr[p+4]];
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	3304      	adds	r3, #4
 80081ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	3380      	adds	r3, #128	; 0x80
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081fa:	4413      	add	r3, r2
 80081fc:	3304      	adds	r3, #4
 80081fe:	61bb      	str	r3, [r7, #24]
	int32_t* y = &pAddrTable->value[pAddrTable->addr[p+5]];
 8008200:	79fb      	ldrb	r3, [r7, #7]
 8008202:	3305      	adds	r3, #5
 8008204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	3380      	adds	r3, #128	; 0x80
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008212:	4413      	add	r3, r2
 8008214:	3304      	adds	r3, #4
 8008216:	617b      	str	r3, [r7, #20]
	int32_t* btn = &pAddrTable->value[pAddrTable->addr[p+6]];
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	3306      	adds	r3, #6
 800821c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	3380      	adds	r3, #128	; 0x80
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800822a:	4413      	add	r3, r2
 800822c:	3304      	adds	r3, #4
 800822e:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+7]];
 8008230:	79fb      	ldrb	r3, [r7, #7]
 8008232:	3307      	adds	r3, #7
 8008234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	3380      	adds	r3, #128	; 0x80
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008242:	4413      	add	r3, r2
 8008244:	3304      	adds	r3, #4
 8008246:	60fb      	str	r3, [r7, #12]

	*x = hal_read_analog_ch(*ch_x);
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4618      	mov	r0, r3
 800824e:	f7f8 fa03 	bl	8000658 <hal_read_analog_ch>
 8008252:	4602      	mov	r2, r0
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	601a      	str	r2, [r3, #0]
	*y = hal_read_analog_ch(*ch_y);
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4618      	mov	r0, r3
 800825e:	f7f8 f9fb 	bl	8000658 <hal_read_analog_ch>
 8008262:	4602      	mov	r2, r0
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	601a      	str	r2, [r3, #0]
	*btn = hal_gpio_read_pin(*ch_btn);
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4618      	mov	r0, r3
 800826e:	f7f8 f9d9 	bl	8000624 <hal_gpio_read_pin>
 8008272:	4602      	mov	r2, r0
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	601a      	str	r2, [r3, #0]
}
 8008278:	bf00      	nop
 800827a:	3730      	adds	r7, #48	; 0x30
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <create_fb_jy>:

type_fb_jy create_fb_jy(uint8_t ch_x,
								uint8_t ch_y,
									uint8_t ch_btn,
											uint8_t mode){
 8008280:	b5b0      	push	{r4, r5, r7, lr}
 8008282:	b08c      	sub	sp, #48	; 0x30
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	4608      	mov	r0, r1
 800828a:	4611      	mov	r1, r2
 800828c:	461a      	mov	r2, r3
 800828e:	4603      	mov	r3, r0
 8008290:	70fb      	strb	r3, [r7, #3]
 8008292:	460b      	mov	r3, r1
 8008294:	70bb      	strb	r3, [r7, #2]
 8008296:	4613      	mov	r3, r2
 8008298:	707b      	strb	r3, [r7, #1]
	type_fb_jy fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800829a:	f7fe fd25 	bl	8006ce8 <get_paramAddrTable>
 800829e:	62f8      	str	r0, [r7, #44]	; 0x2c

	fb.startParamIndex = pAddrTable->currentIndex;
 80082a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	727b      	strb	r3, [r7, #9]

	//input ports
	fb.fp.ch_x = createParameter(ch_x);
 80082a6:	78fb      	ldrb	r3, [r7, #3]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fe fd4b 	bl	8006d44 <createParameter>
 80082ae:	4603      	mov	r3, r0
 80082b0:	60fb      	str	r3, [r7, #12]
	fb.fp.ch_y = createParameter(ch_y);
 80082b2:	78bb      	ldrb	r3, [r7, #2]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe fd45 	bl	8006d44 <createParameter>
 80082ba:	4603      	mov	r3, r0
 80082bc:	613b      	str	r3, [r7, #16]
	fb.fp.ch_btn = createParameter(ch_btn);
 80082be:	787b      	ldrb	r3, [r7, #1]
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fe fd3f 	bl	8006d44 <createParameter>
 80082c6:	4603      	mov	r3, r0
 80082c8:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode);
 80082ca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe fd38 	bl	8006d44 <createParameter>
 80082d4:	4603      	mov	r3, r0
 80082d6:	61bb      	str	r3, [r7, #24]

	//output ports
	fb.fp.x = createParameter(0);
 80082d8:	2000      	movs	r0, #0
 80082da:	f7fe fd33 	bl	8006d44 <createParameter>
 80082de:	4603      	mov	r3, r0
 80082e0:	61fb      	str	r3, [r7, #28]
	fb.fp.y = createParameter(0);
 80082e2:	2000      	movs	r0, #0
 80082e4:	f7fe fd2e 	bl	8006d44 <createParameter>
 80082e8:	4603      	mov	r3, r0
 80082ea:	623b      	str	r3, [r7, #32]
	fb.fp.btn = createParameter(0);
 80082ec:	2000      	movs	r0, #0
 80082ee:	f7fe fd29 	bl	8006d44 <createParameter>
 80082f2:	4603      	mov	r3, r0
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.stat = createParameter(0);
 80082f6:	2000      	movs	r0, #0
 80082f8:	f7fe fd24 	bl	8006d44 <createParameter>
 80082fc:	4603      	mov	r3, r0
 80082fe:	62bb      	str	r3, [r7, #40]	; 0x28

	//internal parameters

	fb.fb_index = writeToFBTable(fb_jy, fb.startParamIndex);
 8008300:	7a7b      	ldrb	r3, [r7, #9]
 8008302:	4619      	mov	r1, r3
 8008304:	4809      	ldr	r0, [pc, #36]	; (800832c <create_fb_jy+0xac>)
 8008306:	f7fe fcf9 	bl	8006cfc <writeToFBTable>
 800830a:	4603      	mov	r3, r0
 800830c:	723b      	strb	r3, [r7, #8]

	return fb;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	461d      	mov	r5, r3
 8008312:	f107 0408 	add.w	r4, r7, #8
 8008316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800831a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800831c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	602b      	str	r3, [r5, #0]
}
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	3730      	adds	r7, #48	; 0x30
 8008326:	46bd      	mov	sp, r7
 8008328:	bdb0      	pop	{r4, r5, r7, pc}
 800832a:	bf00      	nop
 800832c:	0800817b 	.word	0x0800817b

08008330 <fb_and_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_and.h"

uint8_t fb_and_parser(uint8_t* p){
 8008330:	b580      	push	{r7, lr}
 8008332:	b08c      	sub	sp, #48	; 0x30
 8008334:	af00      	add	r7, sp, #0
 8008336:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_and(type);
 8008340:	463b      	mov	r3, r7
 8008342:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008346:	4611      	mov	r1, r2
 8008348:	4618      	mov	r0, r3
 800834a:	f000 f88b 	bl	8008464 <create_fb_and>
	return 1;
 800834e:	2301      	movs	r3, #1
}
 8008350:	4618      	mov	r0, r3
 8008352:	3730      	adds	r7, #48	; 0x30
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <fb_and>:

void fb_and(uint8_t p){
 8008358:	b580      	push	{r7, lr}
 800835a:	b08a      	sub	sp, #40	; 0x28
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8008362:	f7fe fcc1 	bl	8006ce8 <get_paramAddrTable>
 8008366:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	3380      	adds	r3, #128	; 0x80
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008378:	4413      	add	r3, r2
 800837a:	3304      	adds	r3, #4
 800837c:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	3301      	adds	r3, #1
 8008382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	3380      	adds	r3, #128	; 0x80
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008390:	4413      	add	r3, r2
 8008392:	3304      	adds	r3, #4
 8008394:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	3302      	adds	r3, #2
 800839a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	3380      	adds	r3, #128	; 0x80
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a8:	4413      	add	r3, r2
 80083aa:	3304      	adds	r3, #4
 80083ac:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 80083ae:	79fb      	ldrb	r3, [r7, #7]
 80083b0:	3303      	adds	r3, #3
 80083b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	3380      	adds	r3, #128	; 0x80
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c0:	4413      	add	r3, r2
 80083c2:	3304      	adds	r3, #4
 80083c4:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	3304      	adds	r3, #4
 80083ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	3380      	adds	r3, #128	; 0x80
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d8:	4413      	add	r3, r2
 80083da:	3304      	adds	r3, #4
 80083dc:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	3305      	adds	r3, #5
 80083e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	3380      	adds	r3, #128	; 0x80
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f0:	4413      	add	r3, r2
 80083f2:	3304      	adds	r3, #4
 80083f4:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	3306      	adds	r3, #6
 80083fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	3380      	adds	r3, #128	; 0x80
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008408:	4413      	add	r3, r2
 800840a:	3304      	adds	r3, #4
 800840c:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d10d      	bne.n	8008432 <fb_and+0xda>
		*output =  (*input1)&(*input2)&(*input3)&(*input4);
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	401a      	ands	r2, r3
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	401a      	ands	r2, r3
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	401a      	ands	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  (*input1)&&(*input2)&&(*input3)&&(*input4);
	}

}
 8008430:	e014      	b.n	800845c <fb_and+0x104>
		*output =  (*input1)&&(*input2)&&(*input3)&&(*input4);
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00d      	beq.n	8008456 <fb_and+0xfe>
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d009      	beq.n	8008456 <fb_and+0xfe>
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d005      	beq.n	8008456 <fb_and+0xfe>
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <fb_and+0xfe>
 8008452:	2201      	movs	r2, #1
 8008454:	e000      	b.n	8008458 <fb_and+0x100>
 8008456:	2200      	movs	r2, #0
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	601a      	str	r2, [r3, #0]
}
 800845c:	bf00      	nop
 800845e:	3728      	adds	r7, #40	; 0x28
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <create_fb_and>:

type_fb_and create_fb_and(uint8_t type){
 8008464:	b5b0      	push	{r4, r5, r7, lr}
 8008466:	b08c      	sub	sp, #48	; 0x30
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 8008470:	f7fe fc3a 	bl	8006ce8 <get_paramAddrTable>
 8008474:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_and fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 8008476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //in4
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe fc60 	bl	8006d44 <createParameter>
 8008484:	4603      	mov	r3, r0
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(1); //in1
 8008488:	2001      	movs	r0, #1
 800848a:	f7fe fc5b 	bl	8006d44 <createParameter>
 800848e:	4603      	mov	r3, r0
 8008490:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(1); //in2
 8008492:	2001      	movs	r0, #1
 8008494:	f7fe fc56 	bl	8006d44 <createParameter>
 8008498:	4603      	mov	r3, r0
 800849a:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(1); //in3
 800849c:	2001      	movs	r0, #1
 800849e:	f7fe fc51 	bl	8006d44 <createParameter>
 80084a2:	4603      	mov	r3, r0
 80084a4:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(1); //in4
 80084a6:	2001      	movs	r0, #1
 80084a8:	f7fe fc4c 	bl	8006d44 <createParameter>
 80084ac:	4603      	mov	r3, r0
 80084ae:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(1); //output
 80084b0:	2001      	movs	r0, #1
 80084b2:	f7fe fc47 	bl	8006d44 <createParameter>
 80084b6:	4603      	mov	r3, r0
 80084b8:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //output
 80084ba:	2000      	movs	r0, #0
 80084bc:	f7fe fc42 	bl	8006d44 <createParameter>
 80084c0:	4603      	mov	r3, r0
 80084c2:	62bb      	str	r3, [r7, #40]	; 0x28



	fb.fb_index = writeToFBTable(fb_and, fb.startParamIndex);
 80084c4:	7b7b      	ldrb	r3, [r7, #13]
 80084c6:	4619      	mov	r1, r3
 80084c8:	4809      	ldr	r0, [pc, #36]	; (80084f0 <create_fb_and+0x8c>)
 80084ca:	f7fe fc17 	bl	8006cfc <writeToFBTable>
 80084ce:	4603      	mov	r3, r0
 80084d0:	733b      	strb	r3, [r7, #12]

	return fb;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	461d      	mov	r5, r3
 80084d6:	f107 040c 	add.w	r4, r7, #12
 80084da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80084e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	3730      	adds	r7, #48	; 0x30
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bdb0      	pop	{r4, r5, r7, pc}
 80084ee:	bf00      	nop
 80084f0:	08008359 	.word	0x08008359

080084f4 <fb_nand_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_nand.h"

uint8_t fb_nand_parser(uint8_t* p){
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b08c      	sub	sp, #48	; 0x30
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_nand(type);
 8008504:	463b      	mov	r3, r7
 8008506:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800850a:	4611      	mov	r1, r2
 800850c:	4618      	mov	r0, r3
 800850e:	f000 f891 	bl	8008634 <create_fb_nand>
	return 1;
 8008512:	2301      	movs	r3, #1
}
 8008514:	4618      	mov	r0, r3
 8008516:	3730      	adds	r7, #48	; 0x30
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <fb_nand>:

void fb_nand(uint8_t p){
 800851c:	b580      	push	{r7, lr}
 800851e:	b08a      	sub	sp, #40	; 0x28
 8008520:	af00      	add	r7, sp, #0
 8008522:	4603      	mov	r3, r0
 8008524:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8008526:	f7fe fbdf 	bl	8006ce8 <get_paramAddrTable>
 800852a:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800852c:	79fb      	ldrb	r3, [r7, #7]
 800852e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	3380      	adds	r3, #128	; 0x80
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853c:	4413      	add	r3, r2
 800853e:	3304      	adds	r3, #4
 8008540:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	3301      	adds	r3, #1
 8008546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	3380      	adds	r3, #128	; 0x80
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008554:	4413      	add	r3, r2
 8008556:	3304      	adds	r3, #4
 8008558:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800855a:	79fb      	ldrb	r3, [r7, #7]
 800855c:	3302      	adds	r3, #2
 800855e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	3380      	adds	r3, #128	; 0x80
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856c:	4413      	add	r3, r2
 800856e:	3304      	adds	r3, #4
 8008570:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	3303      	adds	r3, #3
 8008576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	3380      	adds	r3, #128	; 0x80
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008584:	4413      	add	r3, r2
 8008586:	3304      	adds	r3, #4
 8008588:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 800858a:	79fb      	ldrb	r3, [r7, #7]
 800858c:	3304      	adds	r3, #4
 800858e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	3380      	adds	r3, #128	; 0x80
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800859c:	4413      	add	r3, r2
 800859e:	3304      	adds	r3, #4
 80085a0:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	3305      	adds	r3, #5
 80085a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	3380      	adds	r3, #128	; 0x80
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b4:	4413      	add	r3, r2
 80085b6:	3304      	adds	r3, #4
 80085b8:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	3306      	adds	r3, #6
 80085be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	3380      	adds	r3, #128	; 0x80
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085cc:	4413      	add	r3, r2
 80085ce:	3304      	adds	r3, #4
 80085d0:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d113      	bne.n	8008602 <fb_nand+0xe6>
		*output =  !((*input1)&(*input2)&(*input3)&(*input4));
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	401a      	ands	r2, r3
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	401a      	ands	r2, r3
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4013      	ands	r3, r2
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	bf0c      	ite	eq
 80085f4:	2301      	moveq	r3, #1
 80085f6:	2300      	movne	r3, #0
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	461a      	mov	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  !((*input1)&&(*input2)&&(*input3)&&(*input4));
	}
}
 8008600:	e014      	b.n	800862c <fb_nand+0x110>
		*output =  !((*input1)&&(*input2)&&(*input3)&&(*input4));
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00b      	beq.n	8008622 <fb_nand+0x106>
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d007      	beq.n	8008622 <fb_nand+0x106>
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d003      	beq.n	8008622 <fb_nand+0x106>
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <fb_nand+0x10a>
 8008622:	2201      	movs	r2, #1
 8008624:	e000      	b.n	8008628 <fb_nand+0x10c>
 8008626:	2200      	movs	r2, #0
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	601a      	str	r2, [r3, #0]
}
 800862c:	bf00      	nop
 800862e:	3728      	adds	r7, #40	; 0x28
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <create_fb_nand>:

type_fb_nand create_fb_nand(uint8_t type){
 8008634:	b5b0      	push	{r4, r5, r7, lr}
 8008636:	b08c      	sub	sp, #48	; 0x30
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 8008640:	f7fe fb52 	bl	8006ce8 <get_paramAddrTable>
 8008644:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_nand fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 8008646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //in4
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fb78 	bl	8006d44 <createParameter>
 8008654:	4603      	mov	r3, r0
 8008656:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(1); //in1
 8008658:	2001      	movs	r0, #1
 800865a:	f7fe fb73 	bl	8006d44 <createParameter>
 800865e:	4603      	mov	r3, r0
 8008660:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(1); //in2
 8008662:	2001      	movs	r0, #1
 8008664:	f7fe fb6e 	bl	8006d44 <createParameter>
 8008668:	4603      	mov	r3, r0
 800866a:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(1); //in3
 800866c:	2001      	movs	r0, #1
 800866e:	f7fe fb69 	bl	8006d44 <createParameter>
 8008672:	4603      	mov	r3, r0
 8008674:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(1); //in4
 8008676:	2001      	movs	r0, #1
 8008678:	f7fe fb64 	bl	8006d44 <createParameter>
 800867c:	4603      	mov	r3, r0
 800867e:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(0); //output
 8008680:	2000      	movs	r0, #0
 8008682:	f7fe fb5f 	bl	8006d44 <createParameter>
 8008686:	4603      	mov	r3, r0
 8008688:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0);
 800868a:	2000      	movs	r0, #0
 800868c:	f7fe fb5a 	bl	8006d44 <createParameter>
 8008690:	4603      	mov	r3, r0
 8008692:	62bb      	str	r3, [r7, #40]	; 0x28


	fb.fb_index = writeToFBTable(fb_nand, fb.startParamIndex);
 8008694:	7b7b      	ldrb	r3, [r7, #13]
 8008696:	4619      	mov	r1, r3
 8008698:	4809      	ldr	r0, [pc, #36]	; (80086c0 <create_fb_nand+0x8c>)
 800869a:	f7fe fb2f 	bl	8006cfc <writeToFBTable>
 800869e:	4603      	mov	r3, r0
 80086a0:	733b      	strb	r3, [r7, #12]

	return fb;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	461d      	mov	r5, r3
 80086a6:	f107 040c 	add.w	r4, r7, #12
 80086aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80086b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	3730      	adds	r7, #48	; 0x30
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bdb0      	pop	{r4, r5, r7, pc}
 80086be:	bf00      	nop
 80086c0:	0800851d 	.word	0x0800851d

080086c4 <fb_nor_parser>:
#include "logic/fb_nor.h"



//logic fb
uint8_t fb_nor_parser(void){
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b088      	sub	sp, #32
 80086c8:	af00      	add	r7, sp, #0
	create_fb_nor();
 80086ca:	463b      	mov	r3, r7
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 f86b 	bl	80087a8 <create_fb_nor>
	return 1;
 80086d2:	2301      	movs	r3, #1
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3720      	adds	r7, #32
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <fb_nor>:
void fb_nor(uint8_t p){
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08a      	sub	sp, #40	; 0x28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 80086e6:	f7fe faff 	bl	8006ce8 <get_paramAddrTable>
 80086ea:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p]];
 80086ec:	79fb      	ldrb	r3, [r7, #7]
 80086ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	3380      	adds	r3, #128	; 0x80
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086fc:	4413      	add	r3, r2
 80086fe:	3304      	adds	r3, #4
 8008700:	623b      	str	r3, [r7, #32]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 8008702:	79fb      	ldrb	r3, [r7, #7]
 8008704:	3301      	adds	r3, #1
 8008706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	3380      	adds	r3, #128	; 0x80
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008714:	4413      	add	r3, r2
 8008716:	3304      	adds	r3, #4
 8008718:	61fb      	str	r3, [r7, #28]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800871a:	79fb      	ldrb	r3, [r7, #7]
 800871c:	3302      	adds	r3, #2
 800871e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	3380      	adds	r3, #128	; 0x80
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872c:	4413      	add	r3, r2
 800872e:	3304      	adds	r3, #4
 8008730:	61bb      	str	r3, [r7, #24]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+3]];
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	3303      	adds	r3, #3
 8008736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	3380      	adds	r3, #128	; 0x80
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008744:	4413      	add	r3, r2
 8008746:	3304      	adds	r3, #4
 8008748:	617b      	str	r3, [r7, #20]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+4]];
 800874a:	79fb      	ldrb	r3, [r7, #7]
 800874c:	3304      	adds	r3, #4
 800874e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	3380      	adds	r3, #128	; 0x80
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875c:	4413      	add	r3, r2
 800875e:	3304      	adds	r3, #4
 8008760:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+5]];
 8008762:	79fb      	ldrb	r3, [r7, #7]
 8008764:	3305      	adds	r3, #5
 8008766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	3380      	adds	r3, #128	; 0x80
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008774:	4413      	add	r3, r2
 8008776:	3304      	adds	r3, #4
 8008778:	60fb      	str	r3, [r7, #12]


	*output =  !((*input1)|(*input2)|(*input3)|(*input4));
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	431a      	orrs	r2, r3
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	431a      	orrs	r2, r3
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4313      	orrs	r3, r2
 8008790:	2b00      	cmp	r3, #0
 8008792:	bf0c      	ite	eq
 8008794:	2301      	moveq	r3, #1
 8008796:	2300      	movne	r3, #0
 8008798:	b2db      	uxtb	r3, r3
 800879a:	461a      	mov	r2, r3
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	601a      	str	r2, [r3, #0]

}
 80087a0:	bf00      	nop
 80087a2:	3728      	adds	r7, #40	; 0x28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <create_fb_nor>:


type_fb_nor create_fb_nor(void){
 80087a8:	b5b0      	push	{r4, r5, r7, lr}
 80087aa:	b08a      	sub	sp, #40	; 0x28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
	s_Param* pAddrTable = get_paramAddrTable();
 80087b0:	f7fe fa9a 	bl	8006ce8 <get_paramAddrTable>
 80087b4:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_nor fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	727b      	strb	r3, [r7, #9]


	fb.fp.input1 = createParameter(0); //in1
 80087bc:	2000      	movs	r0, #0
 80087be:	f7fe fac1 	bl	8006d44 <createParameter>
 80087c2:	4603      	mov	r3, r0
 80087c4:	613b      	str	r3, [r7, #16]
	fb.fp.input2 = createParameter(0); //in2
 80087c6:	2000      	movs	r0, #0
 80087c8:	f7fe fabc 	bl	8006d44 <createParameter>
 80087cc:	4603      	mov	r3, r0
 80087ce:	617b      	str	r3, [r7, #20]
	fb.fp.input3 = createParameter(0); //in3
 80087d0:	2000      	movs	r0, #0
 80087d2:	f7fe fab7 	bl	8006d44 <createParameter>
 80087d6:	4603      	mov	r3, r0
 80087d8:	61bb      	str	r3, [r7, #24]
	fb.fp.input4 = createParameter(0); //in4
 80087da:	2000      	movs	r0, #0
 80087dc:	f7fe fab2 	bl	8006d44 <createParameter>
 80087e0:	4603      	mov	r3, r0
 80087e2:	61fb      	str	r3, [r7, #28]
	fb.fp.output = createParameter(0); //output
 80087e4:	2000      	movs	r0, #0
 80087e6:	f7fe faad 	bl	8006d44 <createParameter>
 80087ea:	4603      	mov	r3, r0
 80087ec:	60fb      	str	r3, [r7, #12]
	fb.fp.stat = createParameter(0); //output
 80087ee:	2000      	movs	r0, #0
 80087f0:	f7fe faa8 	bl	8006d44 <createParameter>
 80087f4:	4603      	mov	r3, r0
 80087f6:	623b      	str	r3, [r7, #32]


	fb.fb_index = writeToFBTable(fb_nor, fb.startParamIndex);
 80087f8:	7a7b      	ldrb	r3, [r7, #9]
 80087fa:	4619      	mov	r1, r3
 80087fc:	4809      	ldr	r0, [pc, #36]	; (8008824 <create_fb_nor+0x7c>)
 80087fe:	f7fe fa7d 	bl	8006cfc <writeToFBTable>
 8008802:	4603      	mov	r3, r0
 8008804:	723b      	strb	r3, [r7, #8]

	return fb;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	461d      	mov	r5, r3
 800880a:	f107 0408 	add.w	r4, r7, #8
 800880e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008812:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008816:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	3728      	adds	r7, #40	; 0x28
 800881e:	46bd      	mov	sp, r7
 8008820:	bdb0      	pop	{r4, r5, r7, pc}
 8008822:	bf00      	nop
 8008824:	080086dd 	.word	0x080086dd

08008828 <fb_not_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_not.h"

//logic fb
uint8_t fb_not_parser(uint8_t* p){
 8008828:	b580      	push	{r7, lr}
 800882a:	b08a      	sub	sp, #40	; 0x28
 800882c:	af00      	add	r7, sp, #0
 800882e:	61f8      	str	r0, [r7, #28]
	uint8_t type = p[0];
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t input = p[1];
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	785b      	ldrb	r3, [r3, #1]
 800883c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_not(type, input);
 8008840:	463b      	mov	r3, r7
 8008842:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008846:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800884a:	4618      	mov	r0, r3
 800884c:	f000 f854 	bl	80088f8 <create_fb_not>
	return 1;
 8008850:	2301      	movs	r3, #1
}
 8008852:	4618      	mov	r0, r3
 8008854:	3728      	adds	r7, #40	; 0x28
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <fb_not>:

void fb_not(uint8_t p){
 800885a:	b580      	push	{r7, lr}
 800885c:	b088      	sub	sp, #32
 800885e:	af00      	add	r7, sp, #0
 8008860:	4603      	mov	r3, r0
 8008862:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8008864:	f7fe fa40 	bl	8006ce8 <get_paramAddrTable>
 8008868:	61f8      	str	r0, [r7, #28]
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	69fa      	ldr	r2, [r7, #28]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	3380      	adds	r3, #128	; 0x80
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	69fa      	ldr	r2, [r7, #28]
 800887a:	4413      	add	r3, r2
 800887c:	3304      	adds	r3, #4
 800887e:	61bb      	str	r3, [r7, #24]
	int32_t* input = &pAddrTable->value[pAddrTable->addr[p+1]];
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	3301      	adds	r3, #1
 8008884:	69fa      	ldr	r2, [r7, #28]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	3380      	adds	r3, #128	; 0x80
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	69fa      	ldr	r2, [r7, #28]
 8008892:	4413      	add	r3, r2
 8008894:	3304      	adds	r3, #4
 8008896:	617b      	str	r3, [r7, #20]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+2]];
 8008898:	79fb      	ldrb	r3, [r7, #7]
 800889a:	3302      	adds	r3, #2
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	3380      	adds	r3, #128	; 0x80
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	69fa      	ldr	r2, [r7, #28]
 80088aa:	4413      	add	r3, r2
 80088ac:	3304      	adds	r3, #4
 80088ae:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	3303      	adds	r3, #3
 80088b4:	69fa      	ldr	r2, [r7, #28]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	3380      	adds	r3, #128	; 0x80
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	69fa      	ldr	r2, [r7, #28]
 80088c2:	4413      	add	r3, r2
 80088c4:	3304      	adds	r3, #4
 80088c6:	60fb      	str	r3, [r7, #12]

	// returns true if the conditions is false
	// else returns false

	if(*type == 1){
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d105      	bne.n	80088dc <fb_not+0x82>
		*output =  ~(*input);
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	43da      	mvns	r2, r3
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  !(*input);
	}

}
 80088da:	e009      	b.n	80088f0 <fb_not+0x96>
		*output =  !(*input);
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	bf0c      	ite	eq
 80088e4:	2301      	moveq	r3, #1
 80088e6:	2300      	movne	r3, #0
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	461a      	mov	r2, r3
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	601a      	str	r2, [r3, #0]
}
 80088f0:	bf00      	nop
 80088f2:	3720      	adds	r7, #32
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <create_fb_not>:


type_fb_not create_fb_not(uint8_t type, uint8_t input){
 80088f8:	b5b0      	push	{r4, r5, r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
 8008904:	4613      	mov	r3, r2
 8008906:	70bb      	strb	r3, [r7, #2]
	s_Param* pAddrTable = get_paramAddrTable();
 8008908:	f7fe f9ee 	bl	8006ce8 <get_paramAddrTable>
 800890c:	61f8      	str	r0, [r7, #28]
	type_fb_not fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	727b      	strb	r3, [r7, #9]

	//input not connected -> output = 1
	fb.fp.type = createParameter(type); //in
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe fa14 	bl	8006d44 <createParameter>
 800891c:	4603      	mov	r3, r0
 800891e:	617b      	str	r3, [r7, #20]
	fb.fp.input = createParameter(input); //in
 8008920:	78bb      	ldrb	r3, [r7, #2]
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fa0e 	bl	8006d44 <createParameter>
 8008928:	4603      	mov	r3, r0
 800892a:	613b      	str	r3, [r7, #16]
	fb.fp.output = createParameter(0); //output
 800892c:	2000      	movs	r0, #0
 800892e:	f7fe fa09 	bl	8006d44 <createParameter>
 8008932:	4603      	mov	r3, r0
 8008934:	60fb      	str	r3, [r7, #12]
	fb.fp.stat = createParameter(0);
 8008936:	2000      	movs	r0, #0
 8008938:	f7fe fa04 	bl	8006d44 <createParameter>
 800893c:	4603      	mov	r3, r0
 800893e:	61bb      	str	r3, [r7, #24]



	fb.fb_index = writeToFBTable(fb_not, fb.startParamIndex);
 8008940:	7a7b      	ldrb	r3, [r7, #9]
 8008942:	4619      	mov	r1, r3
 8008944:	4808      	ldr	r0, [pc, #32]	; (8008968 <create_fb_not+0x70>)
 8008946:	f7fe f9d9 	bl	8006cfc <writeToFBTable>
 800894a:	4603      	mov	r3, r0
 800894c:	723b      	strb	r3, [r7, #8]

	return fb;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	461d      	mov	r5, r3
 8008952:	f107 0408 	add.w	r4, r7, #8
 8008956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	602b      	str	r3, [r5, #0]
}
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	3720      	adds	r7, #32
 8008962:	46bd      	mov	sp, r7
 8008964:	bdb0      	pop	{r4, r5, r7, pc}
 8008966:	bf00      	nop
 8008968:	0800885b 	.word	0x0800885b

0800896c <fb_or_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_or.h"

uint8_t fb_or_parser(uint8_t* p){
 800896c:	b580      	push	{r7, lr}
 800896e:	b08c      	sub	sp, #48	; 0x30
 8008970:	af00      	add	r7, sp, #0
 8008972:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_or(type);
 800897c:	463b      	mov	r3, r7
 800897e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008982:	4611      	mov	r1, r2
 8008984:	4618      	mov	r0, r3
 8008986:	f000 f88b 	bl	8008aa0 <create_fb_or>
	return 1;
 800898a:	2301      	movs	r3, #1
}
 800898c:	4618      	mov	r0, r3
 800898e:	3730      	adds	r7, #48	; 0x30
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <fb_or>:

void fb_or(uint8_t p){
 8008994:	b580      	push	{r7, lr}
 8008996:	b08a      	sub	sp, #40	; 0x28
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800899e:	f7fe f9a3 	bl	8006ce8 <get_paramAddrTable>
 80089a2:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	3380      	adds	r3, #128	; 0x80
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b4:	4413      	add	r3, r2
 80089b6:	3304      	adds	r3, #4
 80089b8:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	3301      	adds	r3, #1
 80089be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	3380      	adds	r3, #128	; 0x80
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089cc:	4413      	add	r3, r2
 80089ce:	3304      	adds	r3, #4
 80089d0:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	3302      	adds	r3, #2
 80089d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	3380      	adds	r3, #128	; 0x80
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e4:	4413      	add	r3, r2
 80089e6:	3304      	adds	r3, #4
 80089e8:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	3303      	adds	r3, #3
 80089ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	3380      	adds	r3, #128	; 0x80
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fc:	4413      	add	r3, r2
 80089fe:	3304      	adds	r3, #4
 8008a00:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	3304      	adds	r3, #4
 8008a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	3380      	adds	r3, #128	; 0x80
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a14:	4413      	add	r3, r2
 8008a16:	3304      	adds	r3, #4
 8008a18:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 8008a1a:	79fb      	ldrb	r3, [r7, #7]
 8008a1c:	3305      	adds	r3, #5
 8008a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	3380      	adds	r3, #128	; 0x80
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2c:	4413      	add	r3, r2
 8008a2e:	3304      	adds	r3, #4
 8008a30:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 8008a32:	79fb      	ldrb	r3, [r7, #7]
 8008a34:	3306      	adds	r3, #6
 8008a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	3380      	adds	r3, #128	; 0x80
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a44:	4413      	add	r3, r2
 8008a46:	3304      	adds	r3, #4
 8008a48:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d10d      	bne.n	8008a6e <fb_or+0xda>
		*output =  (*input1)|(*input2)|(*input3)|(*input4);
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	431a      	orrs	r2, r3
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	431a      	orrs	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	601a      	str	r2, [r3, #0]
	else{
		*output =  (*input1)||(*input2)||(*input3)||(*input4);
	}


}
 8008a6c:	e014      	b.n	8008a98 <fb_or+0x104>
		*output =  (*input1)||(*input2)||(*input3)||(*input4);
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10b      	bne.n	8008a8e <fb_or+0xfa>
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d107      	bne.n	8008a8e <fb_or+0xfa>
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d103      	bne.n	8008a8e <fb_or+0xfa>
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <fb_or+0xfe>
 8008a8e:	2201      	movs	r2, #1
 8008a90:	e000      	b.n	8008a94 <fb_or+0x100>
 8008a92:	2200      	movs	r2, #0
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	601a      	str	r2, [r3, #0]
}
 8008a98:	bf00      	nop
 8008a9a:	3728      	adds	r7, #40	; 0x28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <create_fb_or>:


type_fb_or create_fb_or(uint8_t type){
 8008aa0:	b5b0      	push	{r4, r5, r7, lr}
 8008aa2:	b08c      	sub	sp, #48	; 0x30
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 8008aac:	f7fe f91c 	bl	8006ce8 <get_paramAddrTable>
 8008ab0:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_or fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 8008ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //type
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe f942 	bl	8006d44 <createParameter>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(0); //input1
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	f7fe f93d 	bl	8006d44 <createParameter>
 8008aca:	4603      	mov	r3, r0
 8008acc:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(0); //input2
 8008ace:	2000      	movs	r0, #0
 8008ad0:	f7fe f938 	bl	8006d44 <createParameter>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(0); //input3
 8008ad8:	2000      	movs	r0, #0
 8008ada:	f7fe f933 	bl	8006d44 <createParameter>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(0); //input4
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	f7fe f92e 	bl	8006d44 <createParameter>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(0); //output
 8008aec:	2000      	movs	r0, #0
 8008aee:	f7fe f929 	bl	8006d44 <createParameter>
 8008af2:	4603      	mov	r3, r0
 8008af4:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //output
 8008af6:	2000      	movs	r0, #0
 8008af8:	f7fe f924 	bl	8006d44 <createParameter>
 8008afc:	4603      	mov	r3, r0
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28

	fb.fb_index = writeToFBTable(fb_or, fb.startParamIndex);
 8008b00:	7b7b      	ldrb	r3, [r7, #13]
 8008b02:	4619      	mov	r1, r3
 8008b04:	4809      	ldr	r0, [pc, #36]	; (8008b2c <create_fb_or+0x8c>)
 8008b06:	f7fe f8f9 	bl	8006cfc <writeToFBTable>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	733b      	strb	r3, [r7, #12]

	return fb;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	461d      	mov	r5, r3
 8008b12:	f107 040c 	add.w	r4, r7, #12
 8008b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b1e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	3730      	adds	r7, #48	; 0x30
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bdb0      	pop	{r4, r5, r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	08008995 	.word	0x08008995

08008b30 <fb_xor_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_xor.h"

//logic fb
uint8_t fb_xor_parser(void){
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
	create_fb_xor();
 8008b36:	463b      	mov	r3, r7
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 f853 	bl	8008be4 <create_fb_xor>
	return 1;
 8008b3e:	2301      	movs	r3, #1
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <fb_xor>:
void fb_xor(uint8_t p){
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8008b52:	f7fe f8c9 	bl	8006ce8 <get_paramAddrTable>
 8008b56:	61f8      	str	r0, [r7, #28]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p]];
 8008b58:	79fb      	ldrb	r3, [r7, #7]
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	3380      	adds	r3, #128	; 0x80
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	69fa      	ldr	r2, [r7, #28]
 8008b68:	4413      	add	r3, r2
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	61bb      	str	r3, [r7, #24]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	3301      	adds	r3, #1
 8008b72:	69fa      	ldr	r2, [r7, #28]
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4413      	add	r3, r2
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	3380      	adds	r3, #128	; 0x80
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	69fa      	ldr	r2, [r7, #28]
 8008b80:	4413      	add	r3, r2
 8008b82:	3304      	adds	r3, #4
 8008b84:	617b      	str	r3, [r7, #20]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	3302      	adds	r3, #2
 8008b8a:	69fa      	ldr	r2, [r7, #28]
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	3380      	adds	r3, #128	; 0x80
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	69fa      	ldr	r2, [r7, #28]
 8008b98:	4413      	add	r3, r2
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+3]];
 8008b9e:	79fb      	ldrb	r3, [r7, #7]
 8008ba0:	3303      	adds	r3, #3
 8008ba2:	69fa      	ldr	r2, [r7, #28]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	3380      	adds	r3, #128	; 0x80
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	69fa      	ldr	r2, [r7, #28]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	3304      	adds	r3, #4
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	3380      	adds	r3, #128	; 0x80
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	4413      	add	r3, r2
 8008bca:	3304      	adds	r3, #4
 8008bcc:	60bb      	str	r3, [r7, #8]

	*output =  (*input1)^(*input2);
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	405a      	eors	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	601a      	str	r2, [r3, #0]
}
 8008bdc:	bf00      	nop
 8008bde:	3720      	adds	r7, #32
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <create_fb_xor>:


type_fb_xor create_fb_xor(void){
 8008be4:	b5b0      	push	{r4, r5, r7, lr}
 8008be6:	b08a      	sub	sp, #40	; 0x28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
	s_Param* pAddrTable = get_paramAddrTable();
 8008bec:	f7fe f87c 	bl	8006ce8 <get_paramAddrTable>
 8008bf0:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_xor fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	737b      	strb	r3, [r7, #13]


	fb.fp.input1 = createParameter(0); //in
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	f7fe f8a3 	bl	8006d44 <createParameter>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(0); //in
 8008c02:	2000      	movs	r0, #0
 8008c04:	f7fe f89e 	bl	8006d44 <createParameter>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	61bb      	str	r3, [r7, #24]
	fb.fp.mode = createParameter(0); //in
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	f7fe f899 	bl	8006d44 <createParameter>
 8008c12:	4603      	mov	r3, r0
 8008c14:	61fb      	str	r3, [r7, #28]
	fb.fp.output = createParameter(0); //output
 8008c16:	2000      	movs	r0, #0
 8008c18:	f7fe f894 	bl	8006d44 <createParameter>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //in
 8008c20:	2000      	movs	r0, #0
 8008c22:	f7fe f88f 	bl	8006d44 <createParameter>
 8008c26:	4603      	mov	r3, r0
 8008c28:	623b      	str	r3, [r7, #32]



	fb.fb_index = writeToFBTable(fb_xor, fb.startParamIndex);
 8008c2a:	7b7b      	ldrb	r3, [r7, #13]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4809      	ldr	r0, [pc, #36]	; (8008c54 <create_fb_xor+0x70>)
 8008c30:	f7fe f864 	bl	8006cfc <writeToFBTable>
 8008c34:	4603      	mov	r3, r0
 8008c36:	733b      	strb	r3, [r7, #12]

	return fb;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	461d      	mov	r5, r3
 8008c3c:	f107 040c 	add.w	r4, r7, #12
 8008c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008c48:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	3728      	adds	r7, #40	; 0x28
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bdb0      	pop	{r4, r5, r7, pc}
 8008c54:	08008b49 	.word	0x08008b49

08008c58 <fb_cycle_parser>:
#include "fb_cycle.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_cycle_parser(uint8_t* p){
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b092      	sub	sp, #72	; 0x48
 8008c5c:	af02      	add	r7, sp, #8
 8008c5e:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint8_t rst = p[0];
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t don = (uint32_t) p[1] << 24 | p[2] << 16 | p[3] <<8 | p[4];
 8008c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	061b      	lsls	r3, r3, #24
 8008c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c72:	3202      	adds	r2, #2
 8008c74:	7812      	ldrb	r2, [r2, #0]
 8008c76:	0412      	lsls	r2, r2, #16
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c7c:	3203      	adds	r2, #3
 8008c7e:	7812      	ldrb	r2, [r2, #0]
 8008c80:	0212      	lsls	r2, r2, #8
 8008c82:	4313      	orrs	r3, r2
 8008c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c86:	3204      	adds	r2, #4
 8008c88:	7812      	ldrb	r2, [r2, #0]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t doff = (uint32_t) p[5] << 24 | p[6] << 16 | p[7] <<8 | p[8];
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c90:	3305      	adds	r3, #5
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	061b      	lsls	r3, r3, #24
 8008c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c98:	3206      	adds	r2, #6
 8008c9a:	7812      	ldrb	r2, [r2, #0]
 8008c9c:	0412      	lsls	r2, r2, #16
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ca2:	3207      	adds	r2, #7
 8008ca4:	7812      	ldrb	r2, [r2, #0]
 8008ca6:	0212      	lsls	r2, r2, #8
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cac:	3208      	adds	r2, #8
 8008cae:	7812      	ldrb	r2, [r2, #0]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t mode = p[9];
 8008cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb6:	7a5b      	ldrb	r3, [r3, #9]
 8008cb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t in = p[10];
 8008cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbe:	7a9b      	ldrb	r3, [r3, #10]
 8008cc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	create_fb_cycle(rst,in, don,doff,mode);
 8008cc4:	4638      	mov	r0, r7
 8008cc6:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8008cca:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008cce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cda:	f000 f8b7 	bl	8008e4c <create_fb_cycle>
	return 1;
 8008cde:	2301      	movs	r3, #1
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3740      	adds	r7, #64	; 0x40
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <fb_cycle>:

void fb_cycle(uint8_t p){
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08e      	sub	sp, #56	; 0x38
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	71fb      	strb	r3, [r7, #7]
	int32_t delta_time = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	637b      	str	r3, [r7, #52]	; 0x34

	s_Param* pAddrTable = get_paramAddrTable();
 8008cf6:	f7fd fff7 	bl	8006ce8 <get_paramAddrTable>
 8008cfa:	6338      	str	r0, [r7, #48]	; 0x30
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 8008cfc:	79fb      	ldrb	r3, [r7, #7]
 8008cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	3380      	adds	r3, #128	; 0x80
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d0c:	4413      	add	r3, r2
 8008d0e:	3304      	adds	r3, #4
 8008d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t* in = &pAddrTable->value[pAddrTable->addr[p+1]];
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	3301      	adds	r3, #1
 8008d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	3380      	adds	r3, #128	; 0x80
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d24:	4413      	add	r3, r2
 8008d26:	3304      	adds	r3, #4
 8008d28:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* don = &pAddrTable->value[pAddrTable->addr[p+2]];
 8008d2a:	79fb      	ldrb	r3, [r7, #7]
 8008d2c:	3302      	adds	r3, #2
 8008d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	3380      	adds	r3, #128	; 0x80
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d3c:	4413      	add	r3, r2
 8008d3e:	3304      	adds	r3, #4
 8008d40:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* doff = &pAddrTable->value[pAddrTable->addr[p+3]];
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	3303      	adds	r3, #3
 8008d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	3380      	adds	r3, #128	; 0x80
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d54:	4413      	add	r3, r2
 8008d56:	3304      	adds	r3, #4
 8008d58:	623b      	str	r3, [r7, #32]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+4]];
 8008d5a:	79fb      	ldrb	r3, [r7, #7]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	3380      	adds	r3, #128	; 0x80
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d6c:	4413      	add	r3, r2
 8008d6e:	3304      	adds	r3, #4
 8008d70:	61fb      	str	r3, [r7, #28]
	int32_t* out = &pAddrTable->value[pAddrTable->addr[p+5]];
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	3305      	adds	r3, #5
 8008d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	3380      	adds	r3, #128	; 0x80
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d84:	4413      	add	r3, r2
 8008d86:	3304      	adds	r3, #4
 8008d88:	61bb      	str	r3, [r7, #24]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	3306      	adds	r3, #6
 8008d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	3380      	adds	r3, #128	; 0x80
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d9c:	4413      	add	r3, r2
 8008d9e:	3304      	adds	r3, #4
 8008da0:	617b      	str	r3, [r7, #20]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+7]];
 8008da2:	79fb      	ldrb	r3, [r7, #7]
 8008da4:	3307      	adds	r3, #7
 8008da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	3380      	adds	r3, #128	; 0x80
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db4:	4413      	add	r3, r2
 8008db6:	3304      	adds	r3, #4
 8008db8:	613b      	str	r3, [r7, #16]
	int32_t* cycle_counter = &pAddrTable->value[pAddrTable->addr[p+8]];
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	3380      	adds	r3, #128	; 0x80
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dcc:	4413      	add	r3, r2
 8008dce:	3304      	adds	r3, #4
 8008dd0:	60fb      	str	r3, [r7, #12]

	//get cycle_counter
	if(*cycle_counter == 0xFFFFFFFF) //initial value
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dda:	d105      	bne.n	8008de8 <fb_cycle+0x100>
	{
		*cycle_counter = hal_get_tick();
 8008ddc:	f7f7 fc9e 	bl	800071c <hal_get_tick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	601a      	str	r2, [r3, #0]
		}
		else{
			*cycle_counter = hal_get_tick(); //resample again
		}
	}
}
 8008de6:	e02c      	b.n	8008e42 <fb_cycle+0x15a>
		delta_time = hal_get_tick() - *cycle_counter;
 8008de8:	f7f7 fc98 	bl	800071c <hal_get_tick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	637b      	str	r3, [r7, #52]	; 0x34
		if(delta_time < 0){
 8008df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	da08      	bge.n	8008e0e <fb_cycle+0x126>
			delta_time = 0xFFFFFFFF - *cycle_counter + hal_get_tick();
 8008dfc:	f7f7 fc8e 	bl	800071c <hal_get_tick>
 8008e00:	4603      	mov	r3, r0
 8008e02:	461a      	mov	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	637b      	str	r3, [r7, #52]	; 0x34
		if(delta_time < *doff){
 8008e0e:	6a3b      	ldr	r3, [r7, #32]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e14:	429a      	cmp	r2, r3
 8008e16:	da03      	bge.n	8008e20 <fb_cycle+0x138>
			*out = 0;
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
}
 8008e1e:	e010      	b.n	8008e42 <fb_cycle+0x15a>
		else if(delta_time < *doff + *don){
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4413      	add	r3, r2
 8008e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	da03      	bge.n	8008e38 <fb_cycle+0x150>
			*out = 1;
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	2201      	movs	r2, #1
 8008e34:	601a      	str	r2, [r3, #0]
}
 8008e36:	e004      	b.n	8008e42 <fb_cycle+0x15a>
			*cycle_counter = hal_get_tick(); //resample again
 8008e38:	f7f7 fc70 	bl	800071c <hal_get_tick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	601a      	str	r2, [r3, #0]
}
 8008e42:	bf00      	nop
 8008e44:	3738      	adds	r7, #56	; 0x38
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
	...

08008e4c <create_fb_cycle>:

type_fb_cycle create_fb_cycle(uint8_t rst,
								uint8_t in,
									uint32_t don,
										uint32_t doff,
											uint8_t mode){
 8008e4c:	b5b0      	push	{r4, r5, r7, lr}
 8008e4e:	b090      	sub	sp, #64	; 0x40
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	607b      	str	r3, [r7, #4]
 8008e56:	460b      	mov	r3, r1
 8008e58:	72fb      	strb	r3, [r7, #11]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	72bb      	strb	r3, [r7, #10]
	type_fb_cycle fb;

	s_Param* pAddrTable = get_paramAddrTable();
 8008e5e:	f7fd ff43 	bl	8006ce8 <get_paramAddrTable>
 8008e62:	63f8      	str	r0, [r7, #60]	; 0x3c

	fb.startParamIndex = pAddrTable->currentIndex;
 8008e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	757b      	strb	r3, [r7, #21]

	//input ports
	fb.fp.rst = createParameter(rst);
 8008e6a:	7afb      	ldrb	r3, [r7, #11]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fd ff69 	bl	8006d44 <createParameter>
 8008e72:	4603      	mov	r3, r0
 8008e74:	61bb      	str	r3, [r7, #24]
	fb.fp.in = createParameter(in);
 8008e76:	7abb      	ldrb	r3, [r7, #10]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fd ff63 	bl	8006d44 <createParameter>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	61fb      	str	r3, [r7, #28]
	fb.fp.don = createParameter(don);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fd ff5d 	bl	8006d44 <createParameter>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	623b      	str	r3, [r7, #32]
	fb.fp.doff = createParameter(doff);
 8008e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fd ff57 	bl	8006d44 <createParameter>
 8008e96:	4603      	mov	r3, r0
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.mode = createParameter(mode);
 8008e9a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fd ff50 	bl	8006d44 <createParameter>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	62bb      	str	r3, [r7, #40]	; 0x28

	//output ports
	fb.fp.out = createParameter(0);
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	f7fd ff4b 	bl	8006d44 <createParameter>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.stat = createParameter(0);
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	f7fd ff46 	bl	8006d44 <createParameter>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	633b      	str	r3, [r7, #48]	; 0x30
	fb.fp.val = createParameter(0);
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	f7fd ff41 	bl	8006d44 <createParameter>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	637b      	str	r3, [r7, #52]	; 0x34

	//internal parameters
	fb.fp.cycle_counter = createParameter(0xFFFFFFFF);
 8008ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eca:	f7fd ff3b 	bl	8006d44 <createParameter>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	63bb      	str	r3, [r7, #56]	; 0x38

	fb.fb_index = writeToFBTable(fb_cycle, fb.startParamIndex);
 8008ed2:	7d7b      	ldrb	r3, [r7, #21]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	480a      	ldr	r0, [pc, #40]	; (8008f00 <create_fb_cycle+0xb4>)
 8008ed8:	f7fd ff10 	bl	8006cfc <writeToFBTable>
 8008edc:	4603      	mov	r3, r0
 8008ede:	753b      	strb	r3, [r7, #20]

	return fb;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	461d      	mov	r5, r3
 8008ee4:	f107 0414 	add.w	r4, r7, #20
 8008ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ef0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008ef4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	3740      	adds	r7, #64	; 0x40
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bdb0      	pop	{r4, r5, r7, pc}
 8008f00:	08008ce9 	.word	0x08008ce9

08008f04 <fb_inputpin_parser>:

/*--------------------------------------------------------------------------------------
						Function Block Functions
----------------------------------------------------------------------------------------*/

uint8_t fb_inputpin_parser(uint8_t* p){
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08a      	sub	sp, #40	; 0x28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	61f8      	str	r0, [r7, #28]
	uint8_t ch = p[0];
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t mode = p[1];
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	785b      	ldrb	r3, [r3, #1]
 8008f18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_inputpin(ch, mode);
 8008f1c:	463b      	mov	r3, r7
 8008f1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f22:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 f848 	bl	8008fbc <create_fb_inputpin>
	return 1;
 8008f2c:	2301      	movs	r3, #1
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3728      	adds	r7, #40	; 0x28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <fb_inputpin>:

void fb_inputpin(uint8_t p){
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b088      	sub	sp, #32
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	71fb      	strb	r3, [r7, #7]

	s_Param* pAddrTable = get_paramAddrTable();
 8008f40:	f7fd fed2 	bl	8006ce8 <get_paramAddrTable>
 8008f44:	61f8      	str	r0, [r7, #28]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p]];
 8008f46:	79fb      	ldrb	r3, [r7, #7]
 8008f48:	69fa      	ldr	r2, [r7, #28]
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	3380      	adds	r3, #128	; 0x80
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	69fa      	ldr	r2, [r7, #28]
 8008f56:	4413      	add	r3, r2
 8008f58:	3304      	adds	r3, #4
 8008f5a:	61bb      	str	r3, [r7, #24]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+1]];
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	69fa      	ldr	r2, [r7, #28]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	3380      	adds	r3, #128	; 0x80
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	69fa      	ldr	r2, [r7, #28]
 8008f6e:	4413      	add	r3, r2
 8008f70:	3304      	adds	r3, #4
 8008f72:	617b      	str	r3, [r7, #20]
	int32_t* q = &pAddrTable->value[pAddrTable->addr[p+2]];
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	3302      	adds	r3, #2
 8008f78:	69fa      	ldr	r2, [r7, #28]
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	3380      	adds	r3, #128	; 0x80
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	69fa      	ldr	r2, [r7, #28]
 8008f86:	4413      	add	r3, r2
 8008f88:	3304      	adds	r3, #4
 8008f8a:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	3303      	adds	r3, #3
 8008f90:	69fa      	ldr	r2, [r7, #28]
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	3380      	adds	r3, #128	; 0x80
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	69fa      	ldr	r2, [r7, #28]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	60fb      	str	r3, [r7, #12]

	*q =  hal_gpio_read_pin((uint32_t)*ch);
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7f7 fb3b 	bl	8000624 <hal_gpio_read_pin>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	601a      	str	r2, [r3, #0]
}
 8008fb4:	bf00      	nop
 8008fb6:	3720      	adds	r7, #32
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <create_fb_inputpin>:


type_fb_inputpin create_fb_inputpin(uint8_t ch, uint8_t mode){
 8008fbc:	b5b0      	push	{r4, r5, r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	70bb      	strb	r3, [r7, #2]
	type_fb_inputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 8008fcc:	f7fd fe8c 	bl	8006ce8 <get_paramAddrTable>
 8008fd0:	61f8      	str	r0, [r7, #28]

	fb.startParamIndex = pAddrTable->currentIndex;
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	727b      	strb	r3, [r7, #9]

	fb.fp.ch = createParameter(ch); //input
 8008fd8:	78fb      	ldrb	r3, [r7, #3]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fd feb2 	bl	8006d44 <createParameter>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	60fb      	str	r3, [r7, #12]
	fb.fp.mode = createParameter(mode); //pin
 8008fe4:	78bb      	ldrb	r3, [r7, #2]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fd feac 	bl	8006d44 <createParameter>
 8008fec:	4603      	mov	r3, r0
 8008fee:	613b      	str	r3, [r7, #16]
	fb.fp.q = createParameter(0);
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	f7fd fea7 	bl	8006d44 <createParameter>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	617b      	str	r3, [r7, #20]
	fb.fp.stat = createParameter(0);
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	f7fd fea2 	bl	8006d44 <createParameter>
 8009000:	4603      	mov	r3, r0
 8009002:	61bb      	str	r3, [r7, #24]

	fb.fb_index = writeToFBTable(fb_inputpin, fb.startParamIndex);
 8009004:	7a7b      	ldrb	r3, [r7, #9]
 8009006:	4619      	mov	r1, r3
 8009008:	4808      	ldr	r0, [pc, #32]	; (800902c <create_fb_inputpin+0x70>)
 800900a:	f7fd fe77 	bl	8006cfc <writeToFBTable>
 800900e:	4603      	mov	r3, r0
 8009010:	723b      	strb	r3, [r7, #8]

	return fb;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	461d      	mov	r5, r3
 8009016:	f107 0408 	add.w	r4, r7, #8
 800901a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800901c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	602b      	str	r3, [r5, #0]
}
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	3720      	adds	r7, #32
 8009026:	46bd      	mov	sp, r7
 8009028:	bdb0      	pop	{r4, r5, r7, pc}
 800902a:	bf00      	nop
 800902c:	08008f37 	.word	0x08008f37

08009030 <fb_output_pin_parser>:
#include "fb_outputpin.h"
#include "adaptor.h"


//output fb
uint8_t fb_output_pin_parser(uint8_t* p){
 8009030:	b580      	push	{r7, lr}
 8009032:	b08a      	sub	sp, #40	; 0x28
 8009034:	af00      	add	r7, sp, #0
 8009036:	61f8      	str	r0, [r7, #28]
	uint8_t ch = p[0];
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t val = p[1];
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	785b      	ldrb	r3, [r3, #1]
 8009044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t mode = p[2];
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	789b      	ldrb	r3, [r3, #2]
 800904c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	create_fb_outputpin(ch, val, mode);
 8009050:	4638      	mov	r0, r7
 8009052:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009056:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800905a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800905e:	f000 f869 	bl	8009134 <create_fb_outputpin>
	return 1;
 8009062:	2301      	movs	r3, #1
}
 8009064:	4618      	mov	r0, r3
 8009066:	3728      	adds	r7, #40	; 0x28
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <fb_outputpin>:

void fb_outputpin(uint8_t p){
 800906c:	b580      	push	{r7, lr}
 800906e:	b088      	sub	sp, #32
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8009076:	f7fd fe37 	bl	8006ce8 <get_paramAddrTable>
 800907a:	61f8      	str	r0, [r7, #28]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p]];
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	3380      	adds	r3, #128	; 0x80
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	69fa      	ldr	r2, [r7, #28]
 800908c:	4413      	add	r3, r2
 800908e:	3304      	adds	r3, #4
 8009090:	61bb      	str	r3, [r7, #24]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+1]];
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	3301      	adds	r3, #1
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4413      	add	r3, r2
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	3380      	adds	r3, #128	; 0x80
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	69fa      	ldr	r2, [r7, #28]
 80090a4:	4413      	add	r3, r2
 80090a6:	3304      	adds	r3, #4
 80090a8:	617b      	str	r3, [r7, #20]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 80090aa:	79fb      	ldrb	r3, [r7, #7]
 80090ac:	3302      	adds	r3, #2
 80090ae:	69fa      	ldr	r2, [r7, #28]
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	3380      	adds	r3, #128	; 0x80
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	4413      	add	r3, r2
 80090be:	3304      	adds	r3, #4
 80090c0:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	3303      	adds	r3, #3
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	3380      	adds	r3, #128	; 0x80
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	69fa      	ldr	r2, [r7, #28]
 80090d4:	4413      	add	r3, r2
 80090d6:	3304      	adds	r3, #4
 80090d8:	60fb      	str	r3, [r7, #12]
	int32_t* last_val = &pAddrTable->value[pAddrTable->addr[p+4]];
 80090da:	79fb      	ldrb	r3, [r7, #7]
 80090dc:	3304      	adds	r3, #4
 80090de:	69fa      	ldr	r2, [r7, #28]
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	3380      	adds	r3, #128	; 0x80
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	69fa      	ldr	r2, [r7, #28]
 80090ec:	4413      	add	r3, r2
 80090ee:	3304      	adds	r3, #4
 80090f0:	60bb      	str	r3, [r7, #8]

	if ( *val != *last_val){
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d015      	beq.n	800912a <fb_outputpin+0xbe>
		*last_val = *val;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	601a      	str	r2, [r3, #0]
		if(*val >1) *val = 1;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b01      	cmp	r3, #1
 800910c:	dd02      	ble.n	8009114 <fb_outputpin+0xa8>
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2201      	movs	r2, #1
 8009112:	601a      	str	r2, [r3, #0]

		hal_gpio_write_pin((uint16_t)*ch, (uint8_t)*val);
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	b29b      	uxth	r3, r3
 800911a:	461a      	mov	r2, r3
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	b2db      	uxtb	r3, r3
 8009122:	4619      	mov	r1, r3
 8009124:	4610      	mov	r0, r2
 8009126:	f7f7 fa5f 	bl	80005e8 <hal_gpio_write_pin>
	}
}
 800912a:	bf00      	nop
 800912c:	3720      	adds	r7, #32
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <create_fb_outputpin>:

type_fb_outputpin create_fb_outputpin(uint8_t ch, uint8_t val, uint8_t mode){
 8009134:	b5b0      	push	{r4, r5, r7, lr}
 8009136:	b08a      	sub	sp, #40	; 0x28
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	4608      	mov	r0, r1
 800913e:	4611      	mov	r1, r2
 8009140:	461a      	mov	r2, r3
 8009142:	4603      	mov	r3, r0
 8009144:	70fb      	strb	r3, [r7, #3]
 8009146:	460b      	mov	r3, r1
 8009148:	70bb      	strb	r3, [r7, #2]
 800914a:	4613      	mov	r3, r2
 800914c:	707b      	strb	r3, [r7, #1]
	type_fb_outputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 800914e:	f7fd fdcb 	bl	8006ce8 <get_paramAddrTable>
 8009152:	6278      	str	r0, [r7, #36]	; 0x24

	fb.startParamIndex = pAddrTable->currentIndex;
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	737b      	strb	r3, [r7, #13]

	//input ports
	fb.fp.ch = createParameter(ch); //output
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	4618      	mov	r0, r3
 800915e:	f7fd fdf1 	bl	8006d44 <createParameter>
 8009162:	4603      	mov	r3, r0
 8009164:	613b      	str	r3, [r7, #16]
	fb.fp.val = createParameter(val); //pin
 8009166:	78bb      	ldrb	r3, [r7, #2]
 8009168:	4618      	mov	r0, r3
 800916a:	f7fd fdeb 	bl	8006d44 <createParameter>
 800916e:	4603      	mov	r3, r0
 8009170:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode); //pin
 8009172:	787b      	ldrb	r3, [r7, #1]
 8009174:	4618      	mov	r0, r3
 8009176:	f7fd fde5 	bl	8006d44 <createParameter>
 800917a:	4603      	mov	r3, r0
 800917c:	61bb      	str	r3, [r7, #24]

	//output ports
	fb.fp.stat = createParameter(0);
 800917e:	2000      	movs	r0, #0
 8009180:	f7fd fde0 	bl	8006d44 <createParameter>
 8009184:	4603      	mov	r3, r0
 8009186:	61fb      	str	r3, [r7, #28]

	//internal values
	fb.fp.last_val = createParameter(-1);
 8009188:	f04f 30ff 	mov.w	r0, #4294967295
 800918c:	f7fd fdda 	bl	8006d44 <createParameter>
 8009190:	4603      	mov	r3, r0
 8009192:	623b      	str	r3, [r7, #32]



	fb.fb_index = writeToFBTable(fb_outputpin, fb.startParamIndex);
 8009194:	7b7b      	ldrb	r3, [r7, #13]
 8009196:	4619      	mov	r1, r3
 8009198:	4809      	ldr	r0, [pc, #36]	; (80091c0 <create_fb_outputpin+0x8c>)
 800919a:	f7fd fdaf 	bl	8006cfc <writeToFBTable>
 800919e:	4603      	mov	r3, r0
 80091a0:	733b      	strb	r3, [r7, #12]
	return fb;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	461d      	mov	r5, r3
 80091a6:	f107 040c 	add.w	r4, r7, #12
 80091aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80091ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80091b2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	3728      	adds	r7, #40	; 0x28
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bdb0      	pop	{r4, r5, r7, pc}
 80091be:	bf00      	nop
 80091c0:	0800906d 	.word	0x0800906d

080091c4 <__libc_init_array>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	4d0d      	ldr	r5, [pc, #52]	; (80091fc <__libc_init_array+0x38>)
 80091c8:	4c0d      	ldr	r4, [pc, #52]	; (8009200 <__libc_init_array+0x3c>)
 80091ca:	1b64      	subs	r4, r4, r5
 80091cc:	10a4      	asrs	r4, r4, #2
 80091ce:	2600      	movs	r6, #0
 80091d0:	42a6      	cmp	r6, r4
 80091d2:	d109      	bne.n	80091e8 <__libc_init_array+0x24>
 80091d4:	4d0b      	ldr	r5, [pc, #44]	; (8009204 <__libc_init_array+0x40>)
 80091d6:	4c0c      	ldr	r4, [pc, #48]	; (8009208 <__libc_init_array+0x44>)
 80091d8:	f000 f82e 	bl	8009238 <_init>
 80091dc:	1b64      	subs	r4, r4, r5
 80091de:	10a4      	asrs	r4, r4, #2
 80091e0:	2600      	movs	r6, #0
 80091e2:	42a6      	cmp	r6, r4
 80091e4:	d105      	bne.n	80091f2 <__libc_init_array+0x2e>
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ec:	4798      	blx	r3
 80091ee:	3601      	adds	r6, #1
 80091f0:	e7ee      	b.n	80091d0 <__libc_init_array+0xc>
 80091f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f6:	4798      	blx	r3
 80091f8:	3601      	adds	r6, #1
 80091fa:	e7f2      	b.n	80091e2 <__libc_init_array+0x1e>
 80091fc:	08009478 	.word	0x08009478
 8009200:	08009478 	.word	0x08009478
 8009204:	08009478 	.word	0x08009478
 8009208:	0800947c 	.word	0x0800947c

0800920c <memcpy>:
 800920c:	440a      	add	r2, r1
 800920e:	4291      	cmp	r1, r2
 8009210:	f100 33ff 	add.w	r3, r0, #4294967295
 8009214:	d100      	bne.n	8009218 <memcpy+0xc>
 8009216:	4770      	bx	lr
 8009218:	b510      	push	{r4, lr}
 800921a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800921e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009222:	4291      	cmp	r1, r2
 8009224:	d1f9      	bne.n	800921a <memcpy+0xe>
 8009226:	bd10      	pop	{r4, pc}

08009228 <memset>:
 8009228:	4402      	add	r2, r0
 800922a:	4603      	mov	r3, r0
 800922c:	4293      	cmp	r3, r2
 800922e:	d100      	bne.n	8009232 <memset+0xa>
 8009230:	4770      	bx	lr
 8009232:	f803 1b01 	strb.w	r1, [r3], #1
 8009236:	e7f9      	b.n	800922c <memset+0x4>

08009238 <_init>:
 8009238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923a:	bf00      	nop
 800923c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923e:	bc08      	pop	{r3}
 8009240:	469e      	mov	lr, r3
 8009242:	4770      	bx	lr

08009244 <_fini>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	bf00      	nop
 8009248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924a:	bc08      	pop	{r3}
 800924c:	469e      	mov	lr, r3
 800924e:	4770      	bx	lr
