
LCD_Button_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc18  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd4  0800ce18  0800ce18  0001ce18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9ec  0800d9ec  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9ec  0800d9ec  0001d9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9f4  0800d9f4  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9f4  0800d9f4  0001d9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9f8  0800d9f8  0001d9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800d9fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002020  20000104  0800db00  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002124  0800db00  00022124  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a3c  00000000  00000000  00020132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061df  00000000  00000000  00042b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d58  00000000  00000000  00048d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a00  00000000  00000000  0004aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cee6  00000000  00000000  0004c4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd53  00000000  00000000  0007938e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107f2d  00000000  00000000  000990e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009c  00000000  00000000  001a100e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b88  00000000  00000000  001a10ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000104 	.word	0x20000104
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ce00 	.word	0x0800ce00

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000108 	.word	0x20000108
 800023c:	0800ce00 	.word	0x0800ce00

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <initiate_input_channels>:
static Digital_Channel outputChannel[OUTPUT_CHANNEL_COUNT];

#define ANALOG_INPUT_CH_COUNT 2
static Analog_Input_Channel analog_input_channel[ANALOG_INPUT_CH_COUNT];

void initiate_input_channels(){
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
	inputChannel[0].port = GPIOF;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <initiate_input_channels+0x4c>)
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <initiate_input_channels+0x50>)
 80005e0:	601a      	str	r2, [r3, #0]
	inputChannel[0].pin = GPIO_PIN_3; //EXT3
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <initiate_input_channels+0x4c>)
 80005e4:	2208      	movs	r2, #8
 80005e6:	605a      	str	r2, [r3, #4]

	inputChannel[1].port = GPIOF;
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <initiate_input_channels+0x4c>)
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <initiate_input_channels+0x50>)
 80005ec:	609a      	str	r2, [r3, #8]
	inputChannel[1].pin = GPIO_PIN_5; //EXT5
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <initiate_input_channels+0x4c>)
 80005f0:	2220      	movs	r2, #32
 80005f2:	60da      	str	r2, [r3, #12]

	inputChannel[2].port = GPIOF;
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <initiate_input_channels+0x4c>)
 80005f6:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <initiate_input_channels+0x50>)
 80005f8:	611a      	str	r2, [r3, #16]
	inputChannel[2].pin = GPIO_PIN_10; //EXT10
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <initiate_input_channels+0x4c>)
 80005fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000600:	615a      	str	r2, [r3, #20]

	inputChannel[3].port = GPIOA; //Joystick button
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <initiate_input_channels+0x4c>)
 8000604:	4a09      	ldr	r2, [pc, #36]	; (800062c <initiate_input_channels+0x54>)
 8000606:	619a      	str	r2, [r3, #24]
	inputChannel[3].pin = GPIO_PIN_6; //EXT10
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <initiate_input_channels+0x4c>)
 800060a:	2240      	movs	r2, #64	; 0x40
 800060c:	61da      	str	r2, [r3, #28]

	inputChannel[4].port = GPIOG; //Encoder button
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <initiate_input_channels+0x4c>)
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <initiate_input_channels+0x58>)
 8000612:	621a      	str	r2, [r3, #32]
	inputChannel[4].pin = GPIO_PIN_7;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <initiate_input_channels+0x4c>)
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	20000120 	.word	0x20000120
 8000628:	40021400 	.word	0x40021400
 800062c:	40020000 	.word	0x40020000
 8000630:	40021800 	.word	0x40021800

08000634 <initiate_output_channels>:

void initiate_output_channels(){
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	outputChannel[0].port = GPIOF;
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <initiate_output_channels+0x34>)
 800063a:	4a0c      	ldr	r2, [pc, #48]	; (800066c <initiate_output_channels+0x38>)
 800063c:	601a      	str	r2, [r3, #0]
	outputChannel[0].pin = GPIO_PIN_0;
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <initiate_output_channels+0x34>)
 8000640:	2201      	movs	r2, #1
 8000642:	605a      	str	r2, [r3, #4]

	outputChannel[1].port = GPIOF;
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <initiate_output_channels+0x34>)
 8000646:	4a09      	ldr	r2, [pc, #36]	; (800066c <initiate_output_channels+0x38>)
 8000648:	609a      	str	r2, [r3, #8]
	outputChannel[1].pin = GPIO_PIN_2;
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <initiate_output_channels+0x34>)
 800064c:	2204      	movs	r2, #4
 800064e:	60da      	str	r2, [r3, #12]

	outputChannel[2].port = GPIOF;
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <initiate_output_channels+0x34>)
 8000652:	4a06      	ldr	r2, [pc, #24]	; (800066c <initiate_output_channels+0x38>)
 8000654:	611a      	str	r2, [r3, #16]
	outputChannel[2].pin = GPIO_PIN_13;
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <initiate_output_channels+0x34>)
 8000658:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800065c:	615a      	str	r2, [r3, #20]
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000148 	.word	0x20000148
 800066c:	40021400 	.word	0x40021400

08000670 <initate_analog_channels>:

void initate_analog_channels(){
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	analog_input_channel[0].ai = &adc_info;
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <initate_analog_channels+0x28>)
 8000676:	4a09      	ldr	r2, [pc, #36]	; (800069c <initate_analog_channels+0x2c>)
 8000678:	605a      	str	r2, [r3, #4]
	analog_input_channel[0].data = 0;
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <initate_analog_channels+0x28>)
 800067c:	2200      	movs	r2, #0
 800067e:	801a      	strh	r2, [r3, #0]

	analog_input_channel[1].ai = &adc_info;
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <initate_analog_channels+0x28>)
 8000682:	4a06      	ldr	r2, [pc, #24]	; (800069c <initate_analog_channels+0x2c>)
 8000684:	60da      	str	r2, [r3, #12]
	analog_input_channel[1].data = 0;
 8000686:	4b04      	ldr	r3, [pc, #16]	; (8000698 <initate_analog_channels+0x28>)
 8000688:	2200      	movs	r2, #0
 800068a:	811a      	strh	r2, [r3, #8]

}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000160 	.word	0x20000160
 800069c:	20000000 	.word	0x20000000

080006a0 <hal_gpio_write_pin>:

uint8_t uart_rx_data;

//Leds are connected to: PF0-PF2-PF13
//Please write down GPIO output function in your hardware
void hal_gpio_write_pin(uint16_t chNum, uint8_t value){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	460a      	mov	r2, r1
 80006aa:	80fb      	strh	r3, [r7, #6]
 80006ac:	4613      	mov	r3, r2
 80006ae:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(outputChannel[chNum].port, outputChannel[chNum].pin, value);
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4a09      	ldr	r2, [pc, #36]	; (80006d8 <hal_gpio_write_pin+0x38>)
 80006b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006b8:	4618      	mov	r0, r3
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <hal_gpio_write_pin+0x38>)
 80006be:	00db      	lsls	r3, r3, #3
 80006c0:	4413      	add	r3, r2
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	797a      	ldrb	r2, [r7, #5]
 80006c8:	4619      	mov	r1, r3
 80006ca:	f003 fc7d 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000148 	.word	0x20000148

080006dc <hal_gpio_read_pin>:

uint8_t  hal_gpio_read_pin(uint32_t chNum){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	//return values >= 2, depicts error
	return HAL_GPIO_ReadPin(inputChannel[chNum].port, inputChannel[chNum].pin);
 80006e4:	4a09      	ldr	r2, [pc, #36]	; (800070c <hal_gpio_read_pin+0x30>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006ec:	4618      	mov	r0, r3
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <hal_gpio_read_pin+0x30>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	4413      	add	r3, r2
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	f003 fc4c 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0

}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000120 	.word	0x20000120

08000710 <reset_all_output_channels>:

void reset_all_output_channels(){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<OUTPUT_CHANNEL_COUNT; i++){
 8000716:	2300      	movs	r3, #0
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	e008      	b.n	800072e <reset_all_output_channels+0x1e>
		hal_gpio_write_pin(i, 0);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	b29b      	uxth	r3, r3
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ffbc 	bl	80006a0 <hal_gpio_write_pin>
	for(uint8_t i = 0; i<OUTPUT_CHANNEL_COUNT; i++){
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	3301      	adds	r3, #1
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d9f3      	bls.n	800071c <reset_all_output_channels+0xc>
	}
}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <hal_read_analog_ch>:

//------------------ADC readings with DMA---------------------------------------
uint32_t counter_hal_dma = 0, counter_dma_callback = 0;

uint32_t hal_read_analog_ch(uint32_t chNum){
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	Analog_Input_Channel* ch = &analog_input_channel[chNum];
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	4a11      	ldr	r2, [pc, #68]	; (8000794 <hal_read_analog_ch+0x54>)
 800074e:	4413      	add	r3, r2
 8000750:	60fb      	str	r3, [r7, #12]
	ADC_Info* ai = ch->ai;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	60bb      	str	r3, [r7, #8]
	if(ai->ready_flag == 1){ //check for the conv finish
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d111      	bne.n	8000784 <hal_read_analog_ch+0x44>
		//Start DMA controlled ADC single convertion
		//this adc is working on two channels IN3 and IN10
		//so there will be two channel value after one conversion
		ai->ready_flag = 0; //disable the flag to notify there is an ongoing process
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	2200      	movs	r2, #0
 8000764:	711a      	strb	r2, [r3, #4]
		HAL_ADC_Start_DMA(ai->adc, (uint32_t*) &ai->data, ai->ch_count);
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	1d99      	adds	r1, r3, #6
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000774:	461a      	mov	r2, r3
 8000776:	f001 fe97 	bl	80024a8 <HAL_ADC_Start_DMA>
		counter_hal_dma++;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <hal_read_analog_ch+0x58>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <hal_read_analog_ch+0x58>)
 8000782:	6013      	str	r3, [r2, #0]
	}

	return analog_input_channel[chNum].data;
 8000784:	4a03      	ldr	r2, [pc, #12]	; (8000794 <hal_read_analog_ch+0x54>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000160 	.word	0x20000160
 8000798:	20000170 	.word	0x20000170

0800079c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800079c:	b480      	push	{r7}
 800079e:	b087      	sub	sp, #28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	Analog_Input_Channel* ch;
	ADC_Info* ai;
	for(uint8_t i=0;i<ANALOG_INPUT_CH_COUNT;i++){
 80007a4:	2300      	movs	r3, #0
 80007a6:	75fb      	strb	r3, [r7, #23]
 80007a8:	e01e      	b.n	80007e8 <HAL_ADC_ConvCpltCallback+0x4c>
		ch = &analog_input_channel[i];
 80007aa:	7dfb      	ldrb	r3, [r7, #23]
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	4a13      	ldr	r2, [pc, #76]	; (80007fc <HAL_ADC_ConvCpltCallback+0x60>)
 80007b0:	4413      	add	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
		ai = ch->ai;
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	60fb      	str	r3, [r7, #12]
		if(hadc == ai->adc){
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d10e      	bne.n	80007e2 <HAL_ADC_ConvCpltCallback+0x46>
			ch->data = ai->data[i];
 80007c4:	7dfb      	ldrb	r3, [r7, #23]
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	4413      	add	r3, r2
 80007cc:	88da      	ldrh	r2, [r3, #6]
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	801a      	strh	r2, [r3, #0]
			ai->ready_flag = 1;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2201      	movs	r2, #1
 80007d6:	711a      	strb	r2, [r3, #4]
			counter_dma_callback++;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_ADC_ConvCpltCallback+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_ADC_ConvCpltCallback+0x64>)
 80007e0:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0;i<ANALOG_INPUT_CH_COUNT;i++){
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	3301      	adds	r3, #1
 80007e6:	75fb      	strb	r3, [r7, #23]
 80007e8:	7dfb      	ldrb	r3, [r7, #23]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d9dd      	bls.n	80007aa <HAL_ADC_ConvCpltCallback+0xe>
		}
	}
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	371c      	adds	r7, #28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	20000160 	.word	0x20000160
 8000800:	20000174 	.word	0x20000174

08000804 <hal_get_tick>:
//-------------------------------------------------------------------------------

//Please write down "get system tick" function in your hardware
uint32_t hal_get_tick(){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000808:	f001 fcca 	bl	80021a0 <HAL_GetTick>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}

08000812 <hal_init_tick>:

void /*__attribute__((weak))*/ hal_init_tick(){
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
	HAL_InitTick(0);
 8000816:	2000      	movs	r0, #0
 8000818:	f001 fc7e 	bl	8002118 <HAL_InitTick>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <init_comm_data_service>:

//Communication Channel Adaptation

//Please write down functions for your communication channel
//And put this function right after your initialisations
void init_comm_data_service(){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(ra.comm_huart, &uart_rx_data, 1);
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <init_comm_data_service+0x18>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	2201      	movs	r2, #1
 800082a:	4904      	ldr	r1, [pc, #16]	; (800083c <init_comm_data_service+0x1c>)
 800082c:	4618      	mov	r0, r3
 800082e:	f006 fb23 	bl	8006e78 <HAL_UART_Receive_IT>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000028 	.word	0x20000028
 800083c:	20001433 	.word	0x20001433

08000840 <init_comm_timing_service>:

//Please write down functions for communication timing services
//And put this function right after your initialisations
void init_comm_timing_service(){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(ra.comm_htim);
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <init_comm_timing_service+0x1c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f005 f8bb 	bl	80059c4 <HAL_TIM_Base_Start_IT>
	stop_comm_timer(ra.comm_htim);
 800084e:	4b03      	ldr	r3, [pc, #12]	; (800085c <init_comm_timing_service+0x1c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f822 	bl	800089c <stop_comm_timer>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000028 	.word	0x20000028

08000860 <start_comm_timer>:

void start_comm_timer(TIM_HandleTypeDef* htim){
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f022 0201 	bic.w	r2, r2, #1
 8000876:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
	htim->Instance->CR1 |= 0x01; //Start Timer
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f042 0201 	orr.w	r2, r2, #1
 800088e:	601a      	str	r2, [r3, #0]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <stop_comm_timer>:

void stop_comm_timer(TIM_HandleTypeDef* htim){
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f022 0201 	bic.w	r2, r2, #1
 80008b2:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <HAL_UART_RxCpltCallback>:

//Callbacks
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &uart_rx_data, 1);
 80008d0:	2201      	movs	r2, #1
 80008d2:	4909      	ldr	r1, [pc, #36]	; (80008f8 <HAL_UART_RxCpltCallback+0x30>)
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f006 facf 	bl	8006e78 <HAL_UART_Receive_IT>
	start_comm_timer(ra.comm_htim);
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_UART_RxCpltCallback+0x34>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ffbe 	bl	8000860 <start_comm_timer>

	//When new data received copy this data to the runtime buffers
	Runtime_CommDataService_NewData_Received(0, &uart_rx_data, 1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	4904      	ldr	r1, [pc, #16]	; (80008f8 <HAL_UART_RxCpltCallback+0x30>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f008 f802 	bl	80088f2 <Runtime_CommDataService_NewData_Received>
	User_Callback_Function* ucf = get_ucf();
	if(ucf[MODBUS_UART_CALLBACK_FUNCTION_SLOT].f != 0){
		ucf[MODBUS_UART_CALLBACK_FUNCTION_SLOT].f(&uart_rx_data);
	}
	*/
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20001433 	.word	0x20001433
 80008fc:	20000028 	.word	0x20000028

08000900 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	if(htim == ra.comm_htim){
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	d107      	bne.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x22>
		stop_comm_timer(ra.comm_htim);
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffc0 	bl	800089c <stop_comm_timer>

		//External trigger makes runtime to process data
		//This trigging is needed for Modbus (3.5 Char)
		Runtime_CommDataService_Process_DataBuffer(0);
 800091c:	2000      	movs	r0, #0
 800091e:	f008 f813 	bl	8008948 <Runtime_CommDataService_Process_DataBuffer>
	}
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000028 	.word	0x20000028

08000930 <hal_modbus_uart_tx>:

//Modbus UART Transmit Functions
void /*__attribute__((weak))*/ hal_modbus_uart_tx(uint8_t* pData, uint16_t Size){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(ra.comm_huart, pData, Size);
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <hal_modbus_uart_tx+0x24>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	887a      	ldrh	r2, [r7, #2]
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	4618      	mov	r0, r3
 8000946:	f006 fa29 	bl	8006d9c <HAL_UART_Transmit_IT>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000028 	.word	0x20000028

08000958 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <get_uniqueid>:

//-----------------------UNIQUE ID-----------------------------------------
void get_uniqueid(uint8_t* id, uint16_t len){
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	807b      	strh	r3, [r7, #2]
	uint32_t* buf = id;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	60fb      	str	r3, [r7, #12]
	buf[0] 	= (uint32_t) READ_REG(*((uint32_t *)UID_BASE));
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <get_uniqueid+0x38>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	601a      	str	r2, [r3, #0]
	buf[1] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x04U)));
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <get_uniqueid+0x3c>)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3304      	adds	r3, #4
 800098a:	6812      	ldr	r2, [r2, #0]
 800098c:	601a      	str	r2, [r3, #0]
	buf[2] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x14U)));
 800098e:	4a07      	ldr	r2, [pc, #28]	; (80009ac <get_uniqueid+0x40>)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	3308      	adds	r3, #8
 8000994:	6812      	ldr	r2, [r2, #0]
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	1ff0f420 	.word	0x1ff0f420
 80009a8:	1ff0f424 	.word	0x1ff0f424
 80009ac:	1ff0f434 	.word	0x1ff0f434

080009b0 <get_flash_memory_info>:

//mem_id: 0 -> Function Blocks
//mem_id: 1 -> Static Parameters
//mem_id: 2 -> Dynamic Parameters
//mem_id: 3 -> Circular FIFO (Data Storage)
void get_flash_memory_info(uint32_t* start_addr, uint32_t* size, uint8_t mem_id){
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	4613      	mov	r3, r2
 80009bc:	71fb      	strb	r3, [r7, #7]
	switch(mem_id){
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	d82b      	bhi.n	8000a1c <get_flash_memory_info+0x6c>
 80009c4:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <get_flash_memory_info+0x1c>)
 80009c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ca:	bf00      	nop
 80009cc:	080009dd 	.word	0x080009dd
 80009d0:	080009ed 	.word	0x080009ed
 80009d4:	080009fd 	.word	0x080009fd
 80009d8:	08000a0d 	.word	0x08000a0d
	case 0:
		*start_addr = ADDR_FLASH_SECTOR_23;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <get_flash_memory_info+0x88>)
 80009e0:	601a      	str	r2, [r3, #0]
		*size = FLASH_MEMORY_SIZE;
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009e8:	601a      	str	r2, [r3, #0]
		break;
 80009ea:	e01e      	b.n	8000a2a <get_flash_memory_info+0x7a>
	case 1:
		*start_addr = ADDR_FLASH_SECTOR_22;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <get_flash_memory_info+0x8c>)
 80009f0:	601a      	str	r2, [r3, #0]
		*size = FLASH_MEMORY_SIZE;
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009f8:	601a      	str	r2, [r3, #0]
		break;
 80009fa:	e016      	b.n	8000a2a <get_flash_memory_info+0x7a>
	case 2:
		*start_addr = ADDR_FLASH_SECTOR_21;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <get_flash_memory_info+0x90>)
 8000a00:	601a      	str	r2, [r3, #0]
		*size = FLASH_MEMORY_SIZE;
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a08:	601a      	str	r2, [r3, #0]
		break;
 8000a0a:	e00e      	b.n	8000a2a <get_flash_memory_info+0x7a>
	case 3:
		*start_addr = ADDR_FLASH_SECTOR_20;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <get_flash_memory_info+0x94>)
 8000a10:	601a      	str	r2, [r3, #0]
		*size = FLASH_MEMORY_SIZE;
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a18:	601a      	str	r2, [r3, #0]
		break;
 8000a1a:	e006      	b.n	8000a2a <get_flash_memory_info+0x7a>
	default:
		*start_addr = 0;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
		*size = 0;
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
	}
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	081e0000 	.word	0x081e0000
 8000a3c:	081c0000 	.word	0x081c0000
 8000a40:	081a0000 	.word	0x081a0000
 8000a44:	08180000 	.word	0x08180000

08000a48 <write_to_flash>:

uint8_t write_to_flash(uint8_t* p, uint32_t start_addr, uint16_t size)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	4613      	mov	r3, r2
 8000a54:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	757b      	strb	r3, [r7, #21]
	uint16_t i;
	uint32_t data;

	HAL_FLASH_Unlock();
 8000a5a:	f002 fe91 	bl	8003780 <HAL_FLASH_Unlock>

	for (i = 0; i < size; i+=4) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	82fb      	strh	r3, [r7, #22]
 8000a62:	e01a      	b.n	8000a9a <write_to_flash+0x52>
                data = *(uint32_t*)(p+i);
 8000a64:	8afb      	ldrh	r3, [r7, #22]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	4413      	add	r3, r2
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	613b      	str	r3, [r7, #16]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_addr + i, data) == HAL_OK) ret = 1;
 8000a6e:	8afa      	ldrh	r2, [r7, #22]
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	18d1      	adds	r1, r2, r3
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	461a      	mov	r2, r3
 8000a78:	f04f 0300 	mov.w	r3, #0
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f002 fe23 	bl	80036c8 <HAL_FLASH_Program>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <write_to_flash+0x46>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	757b      	strb	r3, [r7, #21]
 8000a8c:	e002      	b.n	8000a94 <write_to_flash+0x4c>
		else {
			ret = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	757b      	strb	r3, [r7, #21]
			break;
 8000a92:	e006      	b.n	8000aa2 <write_to_flash+0x5a>
	for (i = 0; i < size; i+=4) {
 8000a94:	8afb      	ldrh	r3, [r7, #22]
 8000a96:	3304      	adds	r3, #4
 8000a98:	82fb      	strh	r3, [r7, #22]
 8000a9a:	8afa      	ldrh	r2, [r7, #22]
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d3e0      	bcc.n	8000a64 <write_to_flash+0x1c>
		}
	}

	HAL_FLASH_Lock();
 8000aa2:	f002 fe8f 	bl	80037c4 <HAL_FLASH_Lock>
}
 8000aa6:	bf00      	nop
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <erase_flash>:

uint8_t erase_flash(uint32_t start_addr, uint8_t mem_id)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint32_t SectorError = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
    FLASH_EraseInitTypeDef EraseInitStruct;


	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000ac6:	f002 fe5b 	bl	8003780 <HAL_FLASH_Unlock>

	/* Erase the user Flash area
	(area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS         ;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
	switch (mem_id){
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d817      	bhi.n	8000b08 <erase_flash+0x58>
 8000ad8:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <erase_flash+0x30>)
 8000ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ade:	bf00      	nop
 8000ae0:	08000af1 	.word	0x08000af1
 8000ae4:	08000af7 	.word	0x08000af7
 8000ae8:	08000afd 	.word	0x08000afd
 8000aec:	08000b03 	.word	0x08000b03
		case 0:
			EraseInitStruct.Sector = FLASH_SECTOR_23;
 8000af0:	2317      	movs	r3, #23
 8000af2:	617b      	str	r3, [r7, #20]
			break;
 8000af4:	e008      	b.n	8000b08 <erase_flash+0x58>
		case 1:
			EraseInitStruct.Sector = FLASH_SECTOR_22;
 8000af6:	2316      	movs	r3, #22
 8000af8:	617b      	str	r3, [r7, #20]
			break;
 8000afa:	e005      	b.n	8000b08 <erase_flash+0x58>
		case 2:
			EraseInitStruct.Sector = FLASH_SECTOR_21;
 8000afc:	2315      	movs	r3, #21
 8000afe:	617b      	str	r3, [r7, #20]
			break;
 8000b00:	e002      	b.n	8000b08 <erase_flash+0x58>
		case 3:
			EraseInitStruct.Sector = FLASH_SECTOR_20;
 8000b02:	2314      	movs	r3, #20
 8000b04:	617b      	str	r3, [r7, #20]
			break;
 8000b06:	bf00      	nop
	}


	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8000b08:	f107 0220 	add.w	r2, r7, #32
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 ff96 	bl	8003a44 <HAL_FLASHEx_Erase>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <erase_flash+0x76>
	{
		ret = 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b24:	e002      	b.n	8000b2c <erase_flash+0x7c>
	}

	else ret = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return ret;
 8000b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <hal_get_encoder_value>:

//---------------------Encoder Function---------------------------------------------------
int8_t hal_get_encoder_value(uint8_t ch)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
	if(ch==0){
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d105      	bne.n	8000b54 <hal_get_encoder_value+0x1c>
		return (htim1.Instance->CNT>>2);
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <hal_get_encoder_value+0x2c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4e:	089b      	lsrs	r3, r3, #2
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	e000      	b.n	8000b56 <hal_get_encoder_value+0x1e>
	}
	else{
		return 0;
 8000b54:	2300      	movs	r3, #0
	}
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20002044 	.word	0x20002044

08000b68 <Display_String>:

//---------------------Display FUnctions---------------------------------------------------
//Display Functions
void  Display_String(int32_t startX, int32_t startY,
												int32_t width, int32_t height,
													int32_t attr, char* str, uint16_t len){
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af04      	add	r7, sp, #16
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	603b      	str	r3, [r7, #0]
	ST7735_FillRectangle(startX, startY, width, height, BLACK);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	b298      	uxth	r0, r3
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	b299      	uxth	r1, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	2400      	movs	r4, #0
 8000b88:	9400      	str	r4, [sp, #0]
 8000b8a:	f000 fb05 	bl	8001198 <ST7735_FillRectangle>
	ST7735_WriteString(startX, startY, str, Font_7x10, WHITE, BLACK);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	b298      	uxth	r0, r3
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	b299      	uxth	r1, r3
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <Display_String+0x50>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	9202      	str	r2, [sp, #8]
 8000b9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba0:	9201      	str	r2, [sp, #4]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	9200      	str	r2, [sp, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000baa:	f000 faa1 	bl	80010f0 <ST7735_WriteString>
	return 0;
 8000bae:	bf00      	nop
}
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd90      	pop	{r4, r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000030 	.word	0x20000030

08000bbc <Display_Number>:

void  Display_Number(int32_t startX, int32_t startY,
											int32_t width, int32_t height,
												int32_t attr, int32_t val){
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b08d      	sub	sp, #52	; 0x34
 8000bc0:	af04      	add	r7, sp, #16
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	603b      	str	r3, [r7, #0]
	char str[16];
	itoa(val, str, 10);
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	220a      	movs	r2, #10
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000bd4:	f00b f936 	bl	800be44 <itoa>

	ST7735_FillRectangle(startX, startY, width, height, BLACK);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	b298      	uxth	r0, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	b299      	uxth	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	2400      	movs	r4, #0
 8000bea:	9400      	str	r4, [sp, #0]
 8000bec:	f000 fad4 	bl	8001198 <ST7735_FillRectangle>
	ST7735_WriteString(startX, startY, str, Font_7x10, WHITE, BLACK);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	b298      	uxth	r0, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	b299      	uxth	r1, r3
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <Display_Number+0x60>)
 8000bfa:	f107 0410 	add.w	r4, r7, #16
 8000bfe:	2200      	movs	r2, #0
 8000c00:	9202      	str	r2, [sp, #8]
 8000c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c06:	9201      	str	r2, [sp, #4]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	9200      	str	r2, [sp, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4622      	mov	r2, r4
 8000c10:	f000 fa6e 	bl	80010f0 <ST7735_WriteString>
	return 0;
 8000c14:	bf00      	nop
}
 8000c16:	3724      	adds	r7, #36	; 0x24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	20000030 	.word	0x20000030

08000c20 <Display_Clear>:

void Display_Clear()
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	ST7735_Init(0);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 f93f 	bl	8000ea8 <ST7735_Init>
	fillScreen(BLACK);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f82c 	bl	8000c88 <fillScreen>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <initiate_runtime>:
void hal_xfer_watch_data(uint8_t len, uint8_t* watch_data){
	hal_modbus_uart_tx(watch_data, len);
}

void initiate_runtime()
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	  init_comm_data_service();
 8000c38:	f7ff fdf2 	bl	8000820 <init_comm_data_service>
	  init_comm_timing_service();
 8000c3c:	f7ff fe00 	bl	8000840 <init_comm_timing_service>
	  initiate_input_channels();
 8000c40:	f7ff fcca 	bl	80005d8 <initiate_input_channels>
	  initiate_output_channels();
 8000c44:	f7ff fcf6 	bl	8000634 <initiate_output_channels>
	  initate_analog_channels();
 8000c48:	f7ff fd12 	bl	8000670 <initate_analog_channels>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	4604      	mov	r4, r0
 8000c58:	4608      	mov	r0, r1
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4623      	mov	r3, r4
 8000c60:	80fb      	strh	r3, [r7, #6]
 8000c62:	4603      	mov	r3, r0
 8000c64:	80bb      	strh	r3, [r7, #4]
 8000c66:	460b      	mov	r3, r1
 8000c68:	807b      	strh	r3, [r7, #2]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000c6e:	88f8      	ldrh	r0, [r7, #6]
 8000c70:	88b9      	ldrh	r1, [r7, #4]
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	883c      	ldrh	r4, [r7, #0]
 8000c76:	8b3b      	ldrh	r3, [r7, #24]
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	4623      	mov	r3, r4
 8000c7c:	f000 fa8c 	bl	8001198 <ST7735_FillRectangle>
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd90      	pop	{r4, r7, pc}

08000c88 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <fillScreen+0x2c>)
 8000c94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <fillScreen+0x30>)
 8000c9a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff ffd2 	bl	8000c50 <fillRect>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20001e24 	.word	0x20001e24
 8000cb8:	20001e28 	.word	0x20001e28

08000cbc <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <ST7735_Select+0x14>)
 8000cc6:	f003 f97f 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2110      	movs	r1, #16
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <ST7735_Unselect+0x14>)
 8000cde:	f003 f973 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40020000 	.word	0x40020000

08000cec <ST7735_Reset>:

void ST7735_Reset()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf6:	4807      	ldr	r0, [pc, #28]	; (8000d14 <ST7735_Reset+0x28>)
 8000cf8:	f003 f966 	bl	8003fc8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000cfc:	2005      	movs	r0, #5
 8000cfe:	f001 fa5b 	bl	80021b8 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <ST7735_Reset+0x28>)
 8000d0a:	f003 f95d 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40020800 	.word	0x40020800

08000d18 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <ST7735_WriteCommand+0x2c>)
 8000d2a:	f003 f94d 	bl	8003fc8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000d2e:	1df9      	adds	r1, r7, #7
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	2201      	movs	r2, #1
 8000d36:	4804      	ldr	r0, [pc, #16]	; (8000d48 <ST7735_WriteCommand+0x30>)
 8000d38:	f004 faf5 	bl	8005326 <HAL_SPI_Transmit>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40020800 	.word	0x40020800
 8000d48:	20002090 	.word	0x20002090

08000d4c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5c:	4807      	ldr	r0, [pc, #28]	; (8000d7c <ST7735_WriteData+0x30>)
 8000d5e:	f003 f933 	bl	8003fc8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <ST7735_WriteData+0x34>)
 8000d6e:	f004 fada 	bl	8005326 <HAL_SPI_Transmit>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40020800 	.word	0x40020800
 8000d80:	20002090 	.word	0x20002090

08000d84 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000d96:	e034      	b.n	8000e02 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ffb7 	bl	8000d18 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	1c5a      	adds	r2, r3, #1
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000db4:	7abb      	ldrb	r3, [r7, #10]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000dbe:	7abb      	ldrb	r3, [r7, #10]
 8000dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dc4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000dc6:	7abb      	ldrb	r3, [r7, #10]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d008      	beq.n	8000dde <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000dcc:	7abb      	ldrb	r3, [r7, #10]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ffbb 	bl	8000d4c <ST7735_WriteData>
            addr += numArgs;
 8000dd6:	7abb      	ldrb	r3, [r7, #10]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000dde:	89bb      	ldrh	r3, [r7, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00e      	beq.n	8000e02 <DisplayInit+0x7e>
            ms = *addr++;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000dee:	89bb      	ldrh	r3, [r7, #12]
 8000df0:	2bff      	cmp	r3, #255	; 0xff
 8000df2:	d102      	bne.n	8000dfa <DisplayInit+0x76>
 8000df4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000df8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000dfa:	89bb      	ldrh	r3, [r7, #12]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 f9db 	bl	80021b8 <HAL_Delay>
    while(numCommands--) {
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	1e5a      	subs	r2, r3, #1
 8000e06:	73fa      	strb	r2, [r7, #15]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1c5      	bne.n	8000d98 <DisplayInit+0x14>
        }
    }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4604      	mov	r4, r0
 8000e20:	4608      	mov	r0, r1
 8000e22:	4611      	mov	r1, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4623      	mov	r3, r4
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71bb      	strb	r3, [r7, #6]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	717b      	strb	r3, [r7, #5]
 8000e32:	4613      	mov	r3, r2
 8000e34:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000e36:	202a      	movs	r0, #42	; 0x2a
 8000e38:	f7ff ff6e 	bl	8000d18 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	733b      	strb	r3, [r7, #12]
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <ST7735_SetAddressWindow+0x88>)
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4413      	add	r3, r2
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	737b      	strb	r3, [r7, #13]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73bb      	strb	r3, [r7, #14]
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <ST7735_SetAddressWindow+0x88>)
 8000e52:	781a      	ldrb	r2, [r3, #0]
 8000e54:	797b      	ldrb	r3, [r7, #5]
 8000e56:	4413      	add	r3, r2
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2104      	movs	r1, #4
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff72 	bl	8000d4c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000e68:	202b      	movs	r0, #43	; 0x2b
 8000e6a:	f7ff ff55 	bl	8000d18 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <ST7735_SetAddressWindow+0x8c>)
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	79bb      	ldrb	r3, [r7, #6]
 8000e74:	4413      	add	r3, r2
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <ST7735_SetAddressWindow+0x8c>)
 8000e7c:	781a      	ldrb	r2, [r3, #0]
 8000e7e:	793b      	ldrb	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000e92:	202c      	movs	r0, #44	; 0x2c
 8000e94:	f7ff ff40 	bl	8000d18 <ST7735_WriteCommand>
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd90      	pop	{r4, r7, pc}
 8000ea0:	20001e1c 	.word	0x20001e1c
 8000ea4:	20001e20 	.word	0x20001e20

08000ea8 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000eb2:	f7ff ff03 	bl	8000cbc <ST7735_Select>
    ST7735_Reset();
 8000eb6:	f7ff ff19 	bl	8000cec <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000eba:	480c      	ldr	r0, [pc, #48]	; (8000eec <ST7735_Init+0x44>)
 8000ebc:	f7ff ff62 	bl	8000d84 <DisplayInit>
    DisplayInit(init_cmds2);
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <ST7735_Init+0x48>)
 8000ec2:	f7ff ff5f 	bl	8000d84 <DisplayInit>
    DisplayInit(init_cmds3);
 8000ec6:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <ST7735_Init+0x4c>)
 8000ec8:	f7ff ff5c 	bl	8000d84 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <ST7735_Init+0x50>)
 8000ece:	2202      	movs	r2, #2
 8000ed0:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <ST7735_Init+0x54>)
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f810 	bl	8000f00 <ST7735_SetRotation>
    ST7735_Unselect();
 8000ee0:	f7ff fef8 	bl	8000cd4 <ST7735_Unselect>

}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	0800ce9c 	.word	0x0800ce9c
 8000ef0:	0800ced4 	.word	0x0800ced4
 8000ef4:	0800cee4 	.word	0x0800cee4
 8000ef8:	20001e1d 	.word	0x20001e1d
 8000efc:	20001e21 	.word	0x20001e21

08000f00 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <ST7735_SetRotation+0xe4>)
 8000f18:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000f1a:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <ST7735_SetRotation+0xe4>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d84e      	bhi.n	8000fc0 <ST7735_SetRotation+0xc0>
 8000f22:	a201      	add	r2, pc, #4	; (adr r2, 8000f28 <ST7735_SetRotation+0x28>)
 8000f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f28:	08000f39 	.word	0x08000f39
 8000f2c:	08000f5b 	.word	0x08000f5b
 8000f30:	08000f7d 	.word	0x08000f7d
 8000f34:	08000f9f 	.word	0x08000f9f
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000f38:	23c0      	movs	r3, #192	; 0xc0
 8000f3a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <ST7735_SetRotation+0xe8>)
 8000f3e:	2280      	movs	r2, #128	; 0x80
 8000f40:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <ST7735_SetRotation+0xec>)
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000f48:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <ST7735_SetRotation+0xf0>)
 8000f4a:	781a      	ldrb	r2, [r3, #0]
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <ST7735_SetRotation+0xf4>)
 8000f4e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <ST7735_SetRotation+0xf8>)
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <ST7735_SetRotation+0xfc>)
 8000f56:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000f58:	e032      	b.n	8000fc0 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000f5a:	23a0      	movs	r3, #160	; 0xa0
 8000f5c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000f5e:	4b23      	ldr	r3, [pc, #140]	; (8000fec <ST7735_SetRotation+0xec>)
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <ST7735_SetRotation+0xe8>)
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <ST7735_SetRotation+0xf0>)
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <ST7735_SetRotation+0xfc>)
 8000f70:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <ST7735_SetRotation+0xf8>)
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <ST7735_SetRotation+0xf4>)
 8000f78:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000f7a:	e021      	b.n	8000fc0 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <ST7735_SetRotation+0xe8>)
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <ST7735_SetRotation+0xec>)
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <ST7735_SetRotation+0xf0>)
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <ST7735_SetRotation+0xf4>)
 8000f92:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <ST7735_SetRotation+0xf8>)
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <ST7735_SetRotation+0xfc>)
 8000f9a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000f9c:	e010      	b.n	8000fc0 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000f9e:	2360      	movs	r3, #96	; 0x60
 8000fa0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <ST7735_SetRotation+0xec>)
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <ST7735_SetRotation+0xe8>)
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <ST7735_SetRotation+0xf0>)
 8000fb0:	781a      	ldrb	r2, [r3, #0]
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <ST7735_SetRotation+0xfc>)
 8000fb4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <ST7735_SetRotation+0xf8>)
 8000fb8:	781a      	ldrb	r2, [r3, #0]
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <ST7735_SetRotation+0xf4>)
 8000fbc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000fbe:	bf00      	nop
  }
  ST7735_Select();
 8000fc0:	f7ff fe7c 	bl	8000cbc <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000fc4:	2036      	movs	r0, #54	; 0x36
 8000fc6:	f7ff fea7 	bl	8000d18 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000fca:	f107 030f 	add.w	r3, r7, #15
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff febb 	bl	8000d4c <ST7735_WriteData>
  ST7735_Unselect();
 8000fd6:	f7ff fe7d 	bl	8000cd4 <ST7735_Unselect>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20001e22 	.word	0x20001e22
 8000fe8:	20001e28 	.word	0x20001e28
 8000fec:	20001e24 	.word	0x20001e24
 8000ff0:	20001e1d 	.word	0x20001e1d
 8000ff4:	20001e1c 	.word	0x20001e1c
 8000ff8:	20001e21 	.word	0x20001e21
 8000ffc:	20001e20 	.word	0x20001e20

08001000 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001000:	b082      	sub	sp, #8
 8001002:	b590      	push	{r4, r7, lr}
 8001004:	b089      	sub	sp, #36	; 0x24
 8001006:	af00      	add	r7, sp, #0
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
 800100e:	460b      	mov	r3, r1
 8001010:	80bb      	strh	r3, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	b2d8      	uxtb	r0, r3
 800101a:	88bb      	ldrh	r3, [r7, #4]
 800101c:	b2d9      	uxtb	r1, r3
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001026:	4413      	add	r3, r2
 8001028:	b2db      	uxtb	r3, r3
 800102a:	3b01      	subs	r3, #1
 800102c:	b2dc      	uxtb	r4, r3
 800102e:	88bb      	ldrh	r3, [r7, #4]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001036:	4413      	add	r3, r2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	3b01      	subs	r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4622      	mov	r2, r4
 8001040:	f7ff feea 	bl	8000e18 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	e043      	b.n	80010d2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800104a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	3b20      	subs	r3, #32
 8001050:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001054:	fb01 f303 	mul.w	r3, r1, r3
 8001058:	4619      	mov	r1, r3
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	440b      	add	r3, r1
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	e029      	b.n	80010c0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00e      	beq.n	800109a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800107c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800107e:	0a1b      	lsrs	r3, r3, #8
 8001080:	b29b      	uxth	r3, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	743b      	strb	r3, [r7, #16]
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	b2db      	uxtb	r3, r3
 800108a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	2102      	movs	r1, #2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fe5a 	bl	8000d4c <ST7735_WriteData>
 8001098:	e00f      	b.n	80010ba <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800109a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	733b      	strb	r3, [r7, #12]
 80010a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	2102      	movs	r1, #2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fe49 	bl	8000d4c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	3301      	adds	r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80010c4:	461a      	mov	r2, r3
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d3cf      	bcc.n	800106c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	3301      	adds	r3, #1
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80010d6:	461a      	mov	r2, r3
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	4293      	cmp	r3, r2
 80010dc:	d3b5      	bcc.n	800104a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	3724      	adds	r7, #36	; 0x24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010ea:	b002      	add	sp, #8
 80010ec:	4770      	bx	lr
	...

080010f0 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80010f0:	b082      	sub	sp, #8
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af04      	add	r7, sp, #16
 80010f8:	603a      	str	r2, [r7, #0]
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	4603      	mov	r3, r0
 80010fe:	80fb      	strh	r3, [r7, #6]
 8001100:	460b      	mov	r3, r1
 8001102:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001104:	f7ff fdda 	bl	8000cbc <ST7735_Select>

    while(*str) {
 8001108:	e033      	b.n	8001172 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	7d3a      	ldrb	r2, [r7, #20]
 800110e:	4413      	add	r3, r2
 8001110:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <ST7735_WriteString+0xa0>)
 8001112:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001116:	4293      	cmp	r3, r2
 8001118:	db16      	blt.n	8001148 <ST7735_WriteString+0x58>
            x = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800111e:	7d7b      	ldrb	r3, [r7, #21]
 8001120:	b29a      	uxth	r2, r3
 8001122:	88bb      	ldrh	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8001128:	88bb      	ldrh	r3, [r7, #4]
 800112a:	7d7a      	ldrb	r2, [r7, #21]
 800112c:	4413      	add	r3, r2
 800112e:	4a19      	ldr	r2, [pc, #100]	; (8001194 <ST7735_WriteString+0xa4>)
 8001130:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001134:	4293      	cmp	r3, r2
 8001136:	da21      	bge.n	800117c <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b20      	cmp	r3, #32
 800113e:	d103      	bne.n	8001148 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	603b      	str	r3, [r7, #0]
                continue;
 8001146:	e014      	b.n	8001172 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	88b9      	ldrh	r1, [r7, #4]
 800114e:	88f8      	ldrh	r0, [r7, #6]
 8001150:	8c3b      	ldrh	r3, [r7, #32]
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	8bbb      	ldrh	r3, [r7, #28]
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f7ff ff4f 	bl	8001000 <ST7735_WriteChar>
        x += font.width;
 8001162:	7d3b      	ldrb	r3, [r7, #20]
 8001164:	b29a      	uxth	r2, r3
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	4413      	add	r3, r2
 800116a:	80fb      	strh	r3, [r7, #6]
        str++;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1c7      	bne.n	800110a <ST7735_WriteString+0x1a>
 800117a:	e000      	b.n	800117e <ST7735_WriteString+0x8e>
                break;
 800117c:	bf00      	nop
    }

    ST7735_Unselect();
 800117e:	f7ff fda9 	bl	8000cd4 <ST7735_Unselect>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800118c:	b002      	add	sp, #8
 800118e:	4770      	bx	lr
 8001190:	20001e24 	.word	0x20001e24
 8001194:	20001e28 	.word	0x20001e28

08001198 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	4604      	mov	r4, r0
 80011a0:	4608      	mov	r0, r1
 80011a2:	4611      	mov	r1, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	4623      	mov	r3, r4
 80011a8:	80fb      	strh	r3, [r7, #6]
 80011aa:	4603      	mov	r3, r0
 80011ac:	80bb      	strh	r3, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	807b      	strh	r3, [r7, #2]
 80011b2:	4613      	mov	r3, r2
 80011b4:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	4a38      	ldr	r2, [pc, #224]	; (800129c <ST7735_FillRectangle+0x104>)
 80011ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011be:	4293      	cmp	r3, r2
 80011c0:	da67      	bge.n	8001292 <ST7735_FillRectangle+0xfa>
 80011c2:	88bb      	ldrh	r3, [r7, #4]
 80011c4:	4a36      	ldr	r2, [pc, #216]	; (80012a0 <ST7735_FillRectangle+0x108>)
 80011c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011ca:	4293      	cmp	r3, r2
 80011cc:	da61      	bge.n	8001292 <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 80011ce:	88fa      	ldrh	r2, [r7, #6]
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a31      	ldr	r2, [pc, #196]	; (800129c <ST7735_FillRectangle+0x104>)
 80011d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011da:	4293      	cmp	r3, r2
 80011dc:	dd06      	ble.n	80011ec <ST7735_FillRectangle+0x54>
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <ST7735_FillRectangle+0x104>)
 80011e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 80011ec:	88ba      	ldrh	r2, [r7, #4]
 80011ee:	883b      	ldrh	r3, [r7, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a2b      	ldr	r2, [pc, #172]	; (80012a0 <ST7735_FillRectangle+0x108>)
 80011f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011f8:	4293      	cmp	r3, r2
 80011fa:	dd06      	ble.n	800120a <ST7735_FillRectangle+0x72>
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <ST7735_FillRectangle+0x108>)
 80011fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001202:	b29a      	uxth	r2, r3
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800120a:	f7ff fd57 	bl	8000cbc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	b2d8      	uxtb	r0, r3
 8001212:	88bb      	ldrh	r3, [r7, #4]
 8001214:	b2d9      	uxtb	r1, r3
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4413      	add	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	3b01      	subs	r3, #1
 8001224:	b2dc      	uxtb	r4, r3
 8001226:	88bb      	ldrh	r3, [r7, #4]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	883b      	ldrh	r3, [r7, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4413      	add	r3, r2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3b01      	subs	r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4622      	mov	r2, r4
 8001238:	f7ff fdee 	bl	8000e18 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800123c:	8c3b      	ldrh	r3, [r7, #32]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29b      	uxth	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	733b      	strb	r3, [r7, #12]
 8001246:	8c3b      	ldrh	r3, [r7, #32]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001252:	4814      	ldr	r0, [pc, #80]	; (80012a4 <ST7735_FillRectangle+0x10c>)
 8001254:	f002 feb8 	bl	8003fc8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001258:	883b      	ldrh	r3, [r7, #0]
 800125a:	80bb      	strh	r3, [r7, #4]
 800125c:	e013      	b.n	8001286 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	80fb      	strh	r3, [r7, #6]
 8001262:	e00a      	b.n	800127a <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001264:	f107 010c 	add.w	r1, r7, #12
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	2202      	movs	r2, #2
 800126e:	480e      	ldr	r0, [pc, #56]	; (80012a8 <ST7735_FillRectangle+0x110>)
 8001270:	f004 f859 	bl	8005326 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	3b01      	subs	r3, #1
 8001278:	80fb      	strh	r3, [r7, #6]
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f1      	bne.n	8001264 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8001280:	88bb      	ldrh	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	80bb      	strh	r3, [r7, #4]
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e8      	bne.n	800125e <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 800128c:	f7ff fd22 	bl	8000cd4 <ST7735_Unselect>
 8001290:	e000      	b.n	8001294 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 8001292:	bf00      	nop
}
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	bd90      	pop	{r4, r7, pc}
 800129a:	bf00      	nop
 800129c:	20001e24 	.word	0x20001e24
 80012a0:	20001e28 	.word	0x20001e28
 80012a4:	40020800 	.word	0x40020800
 80012a8:	20002090 	.word	0x20002090

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b0:	f000 ff25 	bl	80020fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b4:	f000 f822 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b8:	f000 fa7e 	bl	80017b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012bc:	f000 f8e8 	bl	8001490 <MX_SPI1_Init>
  MX_DMA_Init();
 80012c0:	f000 fa5c 	bl	800177c <MX_DMA_Init>
  MX_ADC1_Init();
 80012c4:	f000 f884 	bl	80013d0 <MX_ADC1_Init>
  MX_TIM4_Init();
 80012c8:	f000 f97a 	bl	80015c0 <MX_TIM4_Init>
  MX_UART7_Init();
 80012cc:	f000 fa26 	bl	800171c <MX_UART7_Init>
  MX_TIM6_Init();
 80012d0:	f000 f9ee 	bl	80016b0 <MX_TIM6_Init>
  MX_TIM1_Init();
 80012d4:	f000 f91a 	bl	800150c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80012d8:	213c      	movs	r1, #60	; 0x3c
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <main+0x4c>)
 80012dc:	f004 fcf2 	bl	8005cc4 <HAL_TIM_Encoder_Start>

  initiate_runtime();
 80012e0:	f7ff fca8 	bl	8000c34 <initiate_runtime>


  ST7735_Init(0);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fddf 	bl	8000ea8 <ST7735_Init>
  fillScreen(BLACK);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff fccc 	bl	8000c88 <fillScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  mcCore_SM();
 80012f0:	f007 f984 	bl	80085fc <mcCore_SM>
 80012f4:	e7fc      	b.n	80012f0 <main+0x44>
 80012f6:	bf00      	nop
 80012f8:	20002044 	.word	0x20002044

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	2234      	movs	r2, #52	; 0x34
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f00a fda4 	bl	800be58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <SystemClock_Config+0xcc>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <SystemClock_Config+0xcc>)
 8001326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132a:	6413      	str	r3, [r2, #64]	; 0x40
 800132c:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <SystemClock_Config+0xcc>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <SystemClock_Config+0xd0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001340:	4a22      	ldr	r2, [pc, #136]	; (80013cc <SystemClock_Config+0xd0>)
 8001342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <SystemClock_Config+0xd0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001354:	2302      	movs	r3, #2
 8001356:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001358:	2301      	movs	r3, #1
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800135c:	2310      	movs	r3, #16
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001360:	2302      	movs	r3, #2
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001364:	2300      	movs	r3, #0
 8001366:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001368:	2308      	movs	r3, #8
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 800136c:	2390      	movs	r3, #144	; 0x90
 800136e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001370:	2304      	movs	r3, #4
 8001372:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001374:	2302      	movs	r3, #2
 8001376:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001378:	2302      	movs	r3, #2
 800137a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4618      	mov	r0, r3
 8001382:	f002 fe79 	bl	8004078 <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800138c:	f000 fb2c 	bl	80019e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001390:	230f      	movs	r3, #15
 8001392:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001394:	2302      	movs	r3, #2
 8001396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800139c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	2102      	movs	r1, #2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f003 f910 	bl	80045d4 <HAL_RCC_ClockConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013ba:	f000 fb15 	bl	80019e8 <Error_Handler>
  }
}
 80013be:	bf00      	nop
 80013c0:	3750      	adds	r7, #80	; 0x50
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40007000 	.word	0x40007000

080013d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013d6:	463b      	mov	r3, r7
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013e2:	4b28      	ldr	r3, [pc, #160]	; (8001484 <MX_ADC1_Init+0xb4>)
 80013e4:	4a28      	ldr	r2, [pc, #160]	; (8001488 <MX_ADC1_Init+0xb8>)
 80013e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013e8:	4b26      	ldr	r3, [pc, #152]	; (8001484 <MX_ADC1_Init+0xb4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <MX_ADC1_Init+0xb4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <MX_ADC1_Init+0xb4>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <MX_ADC1_Init+0xb4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <MX_ADC1_Init+0xb4>)
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <MX_ADC1_Init+0xb4>)
 800140a:	2200      	movs	r2, #0
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_ADC1_Init+0xb4>)
 8001410:	4a1e      	ldr	r2, [pc, #120]	; (800148c <MX_ADC1_Init+0xbc>)
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_ADC1_Init+0xb4>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_ADC1_Init+0xb4>)
 800141c:	2202      	movs	r2, #2
 800141e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_ADC1_Init+0xb4>)
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_ADC1_Init+0xb4>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800142e:	4815      	ldr	r0, [pc, #84]	; (8001484 <MX_ADC1_Init+0xb4>)
 8001430:	f000 fee6 	bl	8002200 <HAL_ADC_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800143a:	f000 fad5 	bl	80019e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800143e:	2303      	movs	r3, #3
 8001440:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001442:	2301      	movs	r3, #1
 8001444:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001446:	2301      	movs	r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_ADC1_Init+0xb4>)
 8001450:	f001 f942 	bl	80026d8 <HAL_ADC_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800145a:	f000 fac5 	bl	80019e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800145e:	230a      	movs	r3, #10
 8001460:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001462:	2302      	movs	r3, #2
 8001464:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_ADC1_Init+0xb4>)
 800146c:	f001 f934 	bl	80026d8 <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001476:	f000 fab7 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20001f4c 	.word	0x20001f4c
 8001488:	40012000 	.word	0x40012000
 800148c:	0f000001 	.word	0x0f000001

08001490 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_SPI1_Init+0x74>)
 8001496:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <MX_SPI1_Init+0x78>)
 8001498:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_SPI1_Init+0x74>)
 800149c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_SPI1_Init+0x74>)
 80014a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_SPI1_Init+0x74>)
 80014ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_SPI1_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_SPI1_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_SPI1_Init+0x74>)
 80014c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_SPI1_Init+0x74>)
 80014c8:	2220      	movs	r2, #32
 80014ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_SPI1_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_SPI1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_SPI1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_SPI1_Init+0x74>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <MX_SPI1_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_SPI1_Init+0x74>)
 80014ec:	2208      	movs	r2, #8
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_SPI1_Init+0x74>)
 80014f2:	f003 fe6d 	bl	80051d0 <HAL_SPI_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80014fc:	f000 fa74 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20002090 	.word	0x20002090
 8001508:	40013000 	.word	0x40013000

0800150c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	2224      	movs	r2, #36	; 0x24
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f00a fc9c 	bl	800be58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001520:	463b      	mov	r3, r7
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <MX_TIM1_Init+0xac>)
 800152c:	4a23      	ldr	r2, [pc, #140]	; (80015bc <MX_TIM1_Init+0xb0>)
 800152e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <MX_TIM1_Init+0xac>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <MX_TIM1_Init+0xac>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <MX_TIM1_Init+0xac>)
 800153e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001542:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <MX_TIM1_Init+0xac>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <MX_TIM1_Init+0xac>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <MX_TIM1_Init+0xac>)
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001556:	2303      	movs	r3, #3
 8001558:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800155e:	2301      	movs	r3, #1
 8001560:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001566:	230a      	movs	r3, #10
 8001568:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800156e:	2301      	movs	r3, #1
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001576:	230a      	movs	r3, #10
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	4619      	mov	r1, r3
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <MX_TIM1_Init+0xac>)
 8001582:	f004 faf9 	bl	8005b78 <HAL_TIM_Encoder_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800158c:	f000 fa2c 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800159c:	463b      	mov	r3, r7
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_TIM1_Init+0xac>)
 80015a2:	f005 fb01 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80015ac:	f000 fa1c 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	3730      	adds	r7, #48	; 0x30
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20002044 	.word	0x20002044
 80015bc:	40010000 	.word	0x40010000

080015c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	; 0x38
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e0:	463b      	mov	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	615a      	str	r2, [r3, #20]
 80015f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015f2:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <MX_TIM4_Init+0xe8>)
 80015f4:	4a2d      	ldr	r2, [pc, #180]	; (80016ac <MX_TIM4_Init+0xec>)
 80015f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <MX_TIM4_Init+0xe8>)
 80015fa:	2204      	movs	r2, #4
 80015fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fe:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <MX_TIM4_Init+0xe8>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 360;
 8001604:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <MX_TIM4_Init+0xe8>)
 8001606:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800160a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <MX_TIM4_Init+0xe8>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <MX_TIM4_Init+0xe8>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001618:	4823      	ldr	r0, [pc, #140]	; (80016a8 <MX_TIM4_Init+0xe8>)
 800161a:	f004 f97b 	bl	8005914 <HAL_TIM_Base_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001624:	f000 f9e0 	bl	80019e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800162e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001632:	4619      	mov	r1, r3
 8001634:	481c      	ldr	r0, [pc, #112]	; (80016a8 <MX_TIM4_Init+0xe8>)
 8001636:	f004 fe07 	bl	8006248 <HAL_TIM_ConfigClockSource>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001640:	f000 f9d2 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001644:	4818      	ldr	r0, [pc, #96]	; (80016a8 <MX_TIM4_Init+0xe8>)
 8001646:	f004 fa35 	bl	8005ab4 <HAL_TIM_PWM_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001650:	f000 f9ca 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	4811      	ldr	r0, [pc, #68]	; (80016a8 <MX_TIM4_Init+0xe8>)
 8001664:	f005 faa0 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800166e:	f000 f9bb 	bl	80019e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001672:	2360      	movs	r3, #96	; 0x60
 8001674:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001682:	463b      	mov	r3, r7
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM4_Init+0xe8>)
 800168a:	f004 fcc9 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001694:	f000 f9a8 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM4_Init+0xe8>)
 800169a:	f000 fb2d 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 800169e:	bf00      	nop
 80016a0:	3738      	adds	r7, #56	; 0x38
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20001eb0 	.word	0x20001eb0
 80016ac:	40000800 	.word	0x40000800

080016b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <MX_TIM6_Init+0x64>)
 80016c2:	4a15      	ldr	r2, [pc, #84]	; (8001718 <MX_TIM6_Init+0x68>)
 80016c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <MX_TIM6_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_TIM6_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <MX_TIM6_Init+0x64>)
 80016d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80016d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_TIM6_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <MX_TIM6_Init+0x64>)
 80016e2:	f004 f917 	bl	8005914 <HAL_TIM_Base_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80016ec:	f000 f97c 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_TIM6_Init+0x64>)
 80016fe:	f005 fa53 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001708:	f000 f96e 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20001ff8 	.word	0x20001ff8
 8001718:	40001000 	.word	0x40001000

0800171c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_UART7_Init+0x58>)
 8001722:	4a15      	ldr	r2, [pc, #84]	; (8001778 <MX_UART7_Init+0x5c>)
 8001724:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <MX_UART7_Init+0x58>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_UART7_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_UART7_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_UART7_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_UART7_Init+0x58>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_UART7_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_UART7_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_UART7_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_UART7_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_UART7_Init+0x58>)
 8001760:	f005 face 	bl	8006d00 <HAL_UART_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800176a:	f000 f93d 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20001e2c 	.word	0x20001e2c
 8001778:	40007800 	.word	0x40007800

0800177c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_DMA_Init+0x38>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <MX_DMA_Init+0x38>)
 8001788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_DMA_Init+0x38>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	2038      	movs	r0, #56	; 0x38
 80017a0:	f001 fb51 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017a4:	2038      	movs	r0, #56	; 0x38
 80017a6:	f001 fb6a 	bl	8002e7e <HAL_NVIC_EnableIRQ>

}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ce:	4b80      	ldr	r3, [pc, #512]	; (80019d0 <MX_GPIO_Init+0x218>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a7f      	ldr	r2, [pc, #508]	; (80019d0 <MX_GPIO_Init+0x218>)
 80017d4:	f043 0320 	orr.w	r3, r3, #32
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b7d      	ldr	r3, [pc, #500]	; (80019d0 <MX_GPIO_Init+0x218>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e6:	4b7a      	ldr	r3, [pc, #488]	; (80019d0 <MX_GPIO_Init+0x218>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a79      	ldr	r2, [pc, #484]	; (80019d0 <MX_GPIO_Init+0x218>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b77      	ldr	r3, [pc, #476]	; (80019d0 <MX_GPIO_Init+0x218>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	4b74      	ldr	r3, [pc, #464]	; (80019d0 <MX_GPIO_Init+0x218>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a73      	ldr	r2, [pc, #460]	; (80019d0 <MX_GPIO_Init+0x218>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b71      	ldr	r3, [pc, #452]	; (80019d0 <MX_GPIO_Init+0x218>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	4b6e      	ldr	r3, [pc, #440]	; (80019d0 <MX_GPIO_Init+0x218>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a6d      	ldr	r2, [pc, #436]	; (80019d0 <MX_GPIO_Init+0x218>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b6b      	ldr	r3, [pc, #428]	; (80019d0 <MX_GPIO_Init+0x218>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <MX_GPIO_Init+0x218>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a67      	ldr	r2, [pc, #412]	; (80019d0 <MX_GPIO_Init+0x218>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <MX_GPIO_Init+0x218>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001846:	4b62      	ldr	r3, [pc, #392]	; (80019d0 <MX_GPIO_Init+0x218>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a61      	ldr	r2, [pc, #388]	; (80019d0 <MX_GPIO_Init+0x218>)
 800184c:	f043 0310 	orr.w	r3, r3, #16
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b5f      	ldr	r3, [pc, #380]	; (80019d0 <MX_GPIO_Init+0x218>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800185e:	4b5c      	ldr	r3, [pc, #368]	; (80019d0 <MX_GPIO_Init+0x218>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a5b      	ldr	r2, [pc, #364]	; (80019d0 <MX_GPIO_Init+0x218>)
 8001864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <MX_GPIO_Init+0x218>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LD4_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f242 0105 	movw	r1, #8197	; 0x2005
 800187c:	4855      	ldr	r0, [pc, #340]	; (80019d4 <MX_GPIO_Init+0x21c>)
 800187e:	f002 fba3 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	2110      	movs	r1, #16
 8001886:	4854      	ldr	r0, [pc, #336]	; (80019d8 <MX_GPIO_Init+0x220>)
 8001888:	f002 fb9e 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	f244 0181 	movw	r1, #16513	; 0x4081
 8001892:	4852      	ldr	r0, [pc, #328]	; (80019dc <MX_GPIO_Init+0x224>)
 8001894:	f002 fb98 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800189e:	4850      	ldr	r0, [pc, #320]	; (80019e0 <MX_GPIO_Init+0x228>)
 80018a0:	f002 fb92 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD5_Pin|LD6_Pin;
 80018a4:	f242 0305 	movw	r3, #8197	; 0x2005
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4845      	ldr	r0, [pc, #276]	; (80019d4 <MX_GPIO_Init+0x21c>)
 80018be:	f002 f9bf 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF5 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10;
 80018c2:	f44f 6385 	mov.w	r3, #1064	; 0x428
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	483f      	ldr	r0, [pc, #252]	; (80019d4 <MX_GPIO_Init+0x21c>)
 80018d8:	f002 f9b2 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018dc:	2310      	movs	r3, #16
 80018de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4839      	ldr	r0, [pc, #228]	; (80019d8 <MX_GPIO_Init+0x220>)
 80018f4:	f002 f9a4 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Joystick_Button_Pin */
  GPIO_InitStruct.Pin = Joystick_Button_Pin;
 80018f8:	2340      	movs	r3, #64	; 0x40
 80018fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001902:	2301      	movs	r3, #1
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Joystick_Button_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	4619      	mov	r1, r3
 800190c:	4832      	ldr	r0, [pc, #200]	; (80019d8 <MX_GPIO_Init+0x220>)
 800190e:	f002 f997 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001912:	f244 0381 	movw	r3, #16513	; 0x4081
 8001916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	482c      	ldr	r0, [pc, #176]	; (80019dc <MX_GPIO_Init+0x224>)
 800192c:	f002 f988 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001930:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001936:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800193a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	4827      	ldr	r0, [pc, #156]	; (80019e4 <MX_GPIO_Init+0x22c>)
 8001948:	f002 f97a 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001950:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	4820      	ldr	r0, [pc, #128]	; (80019e4 <MX_GPIO_Init+0x22c>)
 8001962:	f002 f96d 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001972:	f107 031c 	add.w	r3, r7, #28
 8001976:	4619      	mov	r1, r3
 8001978:	4819      	ldr	r0, [pc, #100]	; (80019e0 <MX_GPIO_Init+0x228>)
 800197a:	f002 f961 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800197e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	2301      	movs	r3, #1
 8001986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	4619      	mov	r1, r3
 8001996:	4812      	ldr	r0, [pc, #72]	; (80019e0 <MX_GPIO_Init+0x228>)
 8001998:	f002 f952 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Key2_Pin LCD_Key3_Pin LCD_Key0_Pin */
  GPIO_InitStruct.Pin = LCD_Key2_Pin|LCD_Key3_Pin|LCD_Key0_Pin;
 800199c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	480b      	ldr	r0, [pc, #44]	; (80019e0 <MX_GPIO_Init+0x228>)
 80019b2:	f002 f945 	bl	8003c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2017      	movs	r0, #23
 80019bc:	f001 fa43 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019c0:	2017      	movs	r0, #23
 80019c2:	f001 fa5c 	bl	8002e7e <HAL_NVIC_EnableIRQ>

}
 80019c6:	bf00      	nop
 80019c8:	3730      	adds	r7, #48	; 0x30
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40021400 	.word	0x40021400
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40021800 	.word	0x40021800

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80019f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f4:	4801      	ldr	r0, [pc, #4]	; (80019fc <Error_Handler+0x14>)
 80019f6:	f002 fb00 	bl	8003ffa <HAL_GPIO_TogglePin>
 80019fa:	e7f9      	b.n	80019f0 <Error_Handler+0x8>
 80019fc:	40020400 	.word	0x40020400

08001a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_MspInit+0x44>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_MspInit+0x44>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_MspInit+0x44>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_MspInit+0x44>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_MspInit+0x44>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_MspInit+0x44>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800

08001a48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a3d      	ldr	r2, [pc, #244]	; (8001b5c <HAL_ADC_MspInit+0x114>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d173      	bne.n	8001b52 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <HAL_ADC_MspInit+0x118>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a3c      	ldr	r2, [pc, #240]	; (8001b60 <HAL_ADC_MspInit+0x118>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
 8001a76:	4b3a      	ldr	r3, [pc, #232]	; (8001b60 <HAL_ADC_MspInit+0x118>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_ADC_MspInit+0x118>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a36      	ldr	r2, [pc, #216]	; (8001b60 <HAL_ADC_MspInit+0x118>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <HAL_ADC_MspInit+0x118>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <HAL_ADC_MspInit+0x118>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a30      	ldr	r2, [pc, #192]	; (8001b60 <HAL_ADC_MspInit+0x118>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <HAL_ADC_MspInit+0x118>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4827      	ldr	r0, [pc, #156]	; (8001b64 <HAL_ADC_MspInit+0x11c>)
 8001ac6:	f002 f8bb 	bl	8003c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001aca:	2308      	movs	r3, #8
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4822      	ldr	r0, [pc, #136]	; (8001b68 <HAL_ADC_MspInit+0x120>)
 8001ade:	f002 f8af 	bl	8003c40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ae2:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <HAL_ADC_MspInit+0x124>)
 8001ae4:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_ADC_MspInit+0x128>)
 8001ae6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_ADC_MspInit+0x124>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aee:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <HAL_ADC_MspInit+0x124>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_ADC_MspInit+0x124>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <HAL_ADC_MspInit+0x124>)
 8001afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <HAL_ADC_MspInit+0x124>)
 8001b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_ADC_MspInit+0x124>)
 8001b0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_ADC_MspInit+0x124>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_ADC_MspInit+0x124>)
 8001b1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_ADC_MspInit+0x124>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b26:	4811      	ldr	r0, [pc, #68]	; (8001b6c <HAL_ADC_MspInit+0x124>)
 8001b28:	f001 f9c4 	bl	8002eb4 <HAL_DMA_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8001b32:	f7ff ff59 	bl	80019e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <HAL_ADC_MspInit+0x124>)
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <HAL_ADC_MspInit+0x124>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2012      	movs	r0, #18
 8001b48:	f001 f97d 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b4c:	2012      	movs	r0, #18
 8001b4e:	f001 f996 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40012000 	.word	0x40012000
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020800 	.word	0x40020800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	20001f98 	.word	0x20001f98
 8001b70:	40026410 	.word	0x40026410

08001b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <HAL_SPI_MspInit+0x7c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d127      	bne.n	8001be6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_SPI_MspInit+0x80>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a16      	ldr	r2, [pc, #88]	; (8001bf4 <HAL_SPI_MspInit+0x80>)
 8001b9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_SPI_MspInit+0x80>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_SPI_MspInit+0x80>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <HAL_SPI_MspInit+0x80>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_SPI_MspInit+0x80>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001bc6:	23a0      	movs	r3, #160	; 0xa0
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <HAL_SPI_MspInit+0x84>)
 8001be2:	f002 f82d 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	; 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40013000 	.word	0x40013000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d128      	bne.n	8001c70 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x80>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x80>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x80>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x80>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a10      	ldr	r2, [pc, #64]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x80>)
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x80>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001c4e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x84>)
 8001c6c:	f001 ffe8 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	; 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40021000 	.word	0x40021000

08001c84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a16      	ldr	r2, [pc, #88]	; (8001cec <HAL_TIM_Base_MspInit+0x68>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d10c      	bne.n	8001cb0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <HAL_TIM_Base_MspInit+0x6c>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001cae:	e018      	b.n	8001ce2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_TIM_Base_MspInit+0x70>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d113      	bne.n	8001ce2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_TIM_Base_MspInit+0x6c>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <HAL_TIM_Base_MspInit+0x6c>)
 8001cc0:	f043 0310 	orr.w	r3, r3, #16
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_TIM_Base_MspInit+0x6c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2036      	movs	r0, #54	; 0x36
 8001cd8:	f001 f8b5 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cdc:	2036      	movs	r0, #54	; 0x36
 8001cde:	f001 f8ce 	bl	8002e7e <HAL_NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40000800 	.word	0x40000800
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40001000 	.word	0x40001000

08001cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <HAL_TIM_MspPostInit+0x64>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d11b      	bne.n	8001d52 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_TIM_MspPostInit+0x68>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <HAL_TIM_MspPostInit+0x68>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_TIM_MspPostInit+0x68>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = LCD_BackLight_Pin;
 8001d32:	2340      	movs	r3, #64	; 0x40
 8001d34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BackLight_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	; (8001d64 <HAL_TIM_MspPostInit+0x6c>)
 8001d4e:	f001 ff77 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d52:	bf00      	nop
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40000800 	.word	0x40000800
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020400 	.word	0x40020400

08001d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b0ae      	sub	sp, #184	; 0xb8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2290      	movs	r2, #144	; 0x90
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f00a f865 	bl	800be58 <memset>
  if(huart->Instance==UART7)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <HAL_UART_MspInit+0xc0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d143      	bne.n	8001e20 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4618      	mov	r0, r3
 8001da8:	f002 fdea 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001db2:	f7ff fe19 	bl	80019e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_UART_MspInit+0xc4>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_UART_MspInit+0xc4>)
 8001dbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <HAL_UART_MspInit+0xc4>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_UART_MspInit+0xc4>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a16      	ldr	r2, [pc, #88]	; (8001e2c <HAL_UART_MspInit+0xc4>)
 8001dd4:	f043 0320 	orr.w	r3, r3, #32
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_UART_MspInit+0xc4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001de6:	23c0      	movs	r3, #192	; 0xc0
 8001de8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001dfe:	2308      	movs	r3, #8
 8001e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4809      	ldr	r0, [pc, #36]	; (8001e30 <HAL_UART_MspInit+0xc8>)
 8001e0c:	f001 ff18 	bl	8003c40 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2052      	movs	r0, #82	; 0x52
 8001e16:	f001 f816 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001e1a:	2052      	movs	r0, #82	; 0x52
 8001e1c:	f001 f82f 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001e20:	bf00      	nop
 8001e22:	37b8      	adds	r7, #184	; 0xb8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40007800 	.word	0x40007800
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40021400 	.word	0x40021400

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <NMI_Handler+0x4>

08001e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <HardFault_Handler+0x4>

08001e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <MemManage_Handler+0x4>

08001e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e80:	f000 f97a 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <ADC_IRQHandler+0x10>)
 8001e8e:	f000 f9fb 	bl	8002288 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20001f4c 	.word	0x20001f4c

08001e9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 8001ea0:	2020      	movs	r0, #32
 8001ea2:	f002 f8c5 	bl	8004030 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Joystick_Button_Pin);
 8001ea6:	2040      	movs	r0, #64	; 0x40
 8001ea8:	f002 f8c2 	bl	8004030 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_BUTTON_Pin);
 8001eac:	2080      	movs	r0, #128	; 0x80
 8001eae:	f002 f8bf 	bl	8004030 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 8001eb2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001eb6:	f002 f8bb 	bl	8004030 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <TIM6_DAC_IRQHandler+0x10>)
 8001ec6:	f003 ff8b 	bl	8005de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20001ff8 	.word	0x20001ff8

08001ed4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <DMA2_Stream0_IRQHandler+0x10>)
 8001eda:	f001 f98b 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20001f98 	.word	0x20001f98

08001ee8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <UART7_IRQHandler+0x10>)
 8001eee:	f005 f811 	bl	8006f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20001e2c 	.word	0x20001e2c

08001efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
	return 1;
 8001f00:	2301      	movs	r3, #1
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_kill>:

int _kill(int pid, int sig)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f16:	f009 ff41 	bl	800bd9c <__errno>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2216      	movs	r2, #22
 8001f1e:	601a      	str	r2, [r3, #0]
	return -1;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_exit>:

void _exit (int status)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ffe7 	bl	8001f0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f3e:	e7fe      	b.n	8001f3e <_exit+0x12>

08001f40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e00a      	b.n	8001f68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f52:	f3af 8000 	nop.w
 8001f56:	4601      	mov	r1, r0
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	60ba      	str	r2, [r7, #8]
 8001f5e:	b2ca      	uxtb	r2, r1
 8001f60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	dbf0      	blt.n	8001f52 <_read+0x12>
	}

return len;
 8001f70:	687b      	ldr	r3, [r7, #4]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e009      	b.n	8001fa0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	60ba      	str	r2, [r7, #8]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dbf1      	blt.n	8001f8c <_write+0x12>
	}
	return len;
 8001fa8:	687b      	ldr	r3, [r7, #4]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_close>:

int _close(int file)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
	return -1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fda:	605a      	str	r2, [r3, #4]
	return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <_isatty>:

int _isatty(int file)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	return 0;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <_sbrk+0x5c>)
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <_sbrk+0x60>)
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <_sbrk+0x64>)
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <_sbrk+0x68>)
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	429a      	cmp	r2, r3
 800204a:	d207      	bcs.n	800205c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800204c:	f009 fea6 	bl	800bd9c <__errno>
 8002050:	4603      	mov	r3, r0
 8002052:	220c      	movs	r2, #12
 8002054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	e009      	b.n	8002070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <_sbrk+0x64>)
 800206c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20080000 	.word	0x20080000
 800207c:	00000400 	.word	0x00000400
 8002080:	20000178 	.word	0x20000178
 8002084:	20002128 	.word	0x20002128

08002088 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <SystemInit+0x20>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <SystemInit+0x20>)
 8002094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b0:	480d      	ldr	r0, [pc, #52]	; (80020e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020b2:	490e      	ldr	r1, [pc, #56]	; (80020ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020b4:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b8:	e002      	b.n	80020c0 <LoopCopyDataInit>

080020ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020be:	3304      	adds	r3, #4

080020c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c4:	d3f9      	bcc.n	80020ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020c8:	4c0b      	ldr	r4, [pc, #44]	; (80020f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020cc:	e001      	b.n	80020d2 <LoopFillZerobss>

080020ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d0:	3204      	adds	r2, #4

080020d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d4:	d3fb      	bcc.n	80020ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020d6:	f7ff ffd7 	bl	8002088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020da:	f009 fe77 	bl	800bdcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020de:	f7ff f8e5 	bl	80012ac <main>
  bx  lr    
 80020e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ec:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80020f0:	0800d9fc 	.word	0x0800d9fc
  ldr r2, =_sbss
 80020f4:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80020f8:	20002124 	.word	0x20002124

080020fc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020fc:	e7fe      	b.n	80020fc <CAN1_RX0_IRQHandler>

080020fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002102:	2003      	movs	r0, #3
 8002104:	f000 fe94 	bl	8002e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002108:	2000      	movs	r0, #0
 800210a:	f000 f805 	bl	8002118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800210e:	f7ff fc77 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_InitTick+0x54>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_InitTick+0x58>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 feaf 	bl	8002e9a <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f000 fe77 	bl	8002e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	; (8002174 <HAL_InitTick+0x5c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000038 	.word	0x20000038
 8002170:	20000040 	.word	0x20000040
 8002174:	2000003c 	.word	0x2000003c

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000040 	.word	0x20000040
 800219c:	200020f4 	.word	0x200020f4

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	200020f4 	.word	0x200020f4

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffee 	bl	80021a0 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000040 	.word	0x20000040

08002200 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e031      	b.n	800227a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fc12 	bl	8001a48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d116      	bne.n	800226c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_ADC_Init+0x84>)
 8002244:	4013      	ands	r3, r2
 8002246:	f043 0202 	orr.w	r2, r3, #2
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fb98 	bl	8002984 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
 800226a:	e001      	b.n	8002270 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	ffffeefd 	.word	0xffffeefd

08002288 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d049      	beq.n	8002352 <HAL_ADC_IRQHandler+0xca>
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d046      	beq.n	8002352 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d12b      	bne.n	8002342 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d127      	bne.n	8002342 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d006      	beq.n	800230e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800230a:	2b00      	cmp	r3, #0
 800230c:	d119      	bne.n	8002342 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0220 	bic.w	r2, r2, #32
 800231c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d105      	bne.n	8002342 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fa2a 	bl	800079c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0212 	mvn.w	r2, #18
 8002350:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002360:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d057      	beq.n	8002418 <HAL_ADC_IRQHandler+0x190>
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d054      	beq.n	8002418 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d139      	bne.n	8002408 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d12b      	bne.n	8002408 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d124      	bne.n	8002408 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d11d      	bne.n	8002408 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d119      	bne.n	8002408 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fc37 	bl	8002c7c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f06f 020c 	mvn.w	r2, #12
 8002416:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d017      	beq.n	800245e <HAL_ADC_IRQHandler+0x1d6>
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d014      	beq.n	800245e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d10d      	bne.n	800245e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f92e 	bl	80026b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0201 	mvn.w	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800246c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d015      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x218>
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d012      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f043 0202 	orr.w	r2, r3, #2
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f06f 0220 	mvn.w	r2, #32
 800248e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f917 	bl	80026c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f06f 0220 	mvn.w	r2, #32
 800249e:	601a      	str	r2, [r3, #0]
  }
}
 80024a0:	bf00      	nop
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_Start_DMA+0x1e>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e0d4      	b.n	8002670 <HAL_ADC_Start_DMA+0x1c8>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d018      	beq.n	800250e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024ec:	4b62      	ldr	r3, [pc, #392]	; (8002678 <HAL_ADC_Start_DMA+0x1d0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a62      	ldr	r2, [pc, #392]	; (800267c <HAL_ADC_Start_DMA+0x1d4>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0c9a      	lsrs	r2, r3, #18
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002500:	e002      	b.n	8002508 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3b01      	subs	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f9      	bne.n	8002502 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	f040 809c 	bne.w	8002656 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002522:	4b57      	ldr	r3, [pc, #348]	; (8002680 <HAL_ADC_Start_DMA+0x1d8>)
 8002524:	4013      	ands	r3, r2
 8002526:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002544:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002558:	d106      	bne.n	8002568 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f023 0206 	bic.w	r2, r3, #6
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
 8002566:	e002      	b.n	800256e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	4a42      	ldr	r2, [pc, #264]	; (8002684 <HAL_ADC_Start_DMA+0x1dc>)
 800257c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	4a41      	ldr	r2, [pc, #260]	; (8002688 <HAL_ADC_Start_DMA+0x1e0>)
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258a:	4a40      	ldr	r2, [pc, #256]	; (800268c <HAL_ADC_Start_DMA+0x1e4>)
 800258c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002596:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80025a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	334c      	adds	r3, #76	; 0x4c
 80025c2:	4619      	mov	r1, r3
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f000 fd22 	bl	8003010 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_ADC_Start_DMA+0x1e8>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10f      	bne.n	80025f8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d143      	bne.n	800266e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	e03a      	b.n	800266e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a25      	ldr	r2, [pc, #148]	; (8002694 <HAL_ADC_Start_DMA+0x1ec>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10e      	bne.n	8002620 <HAL_ADC_Start_DMA+0x178>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d107      	bne.n	8002620 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800261e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <HAL_ADC_Start_DMA+0x1e8>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d120      	bne.n	800266e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a19      	ldr	r2, [pc, #100]	; (8002698 <HAL_ADC_Start_DMA+0x1f0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d11b      	bne.n	800266e <HAL_ADC_Start_DMA+0x1c6>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d114      	bne.n	800266e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	e00b      	b.n	800266e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f043 0210 	orr.w	r2, r3, #16
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000038 	.word	0x20000038
 800267c:	431bde83 	.word	0x431bde83
 8002680:	fffff8fe 	.word	0xfffff8fe
 8002684:	08002b79 	.word	0x08002b79
 8002688:	08002c33 	.word	0x08002c33
 800268c:	08002c4f 	.word	0x08002c4f
 8002690:	40012300 	.word	0x40012300
 8002694:	40012000 	.word	0x40012000
 8002698:	40012200 	.word	0x40012200

0800269c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1c>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e136      	b.n	8002962 <HAL_ADC_ConfigChannel+0x28a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b09      	cmp	r3, #9
 8002702:	d93a      	bls.n	800277a <HAL_ADC_ConfigChannel+0xa2>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800270c:	d035      	beq.n	800277a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68d9      	ldr	r1, [r3, #12]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	b29b      	uxth	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	3b1e      	subs	r3, #30
 8002724:	2207      	movs	r2, #7
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	400a      	ands	r2, r1
 8002732:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a8d      	ldr	r2, [pc, #564]	; (8002970 <HAL_ADC_ConfigChannel+0x298>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d10a      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68d9      	ldr	r1, [r3, #12]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	061a      	lsls	r2, r3, #24
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002752:	e035      	b.n	80027c0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68d9      	ldr	r1, [r3, #12]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	4618      	mov	r0, r3
 8002766:	4603      	mov	r3, r0
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4403      	add	r3, r0
 800276c:	3b1e      	subs	r3, #30
 800276e:	409a      	lsls	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002778:	e022      	b.n	80027c0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6919      	ldr	r1, [r3, #16]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	2207      	movs	r2, #7
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43da      	mvns	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	400a      	ands	r2, r1
 800279c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6919      	ldr	r1, [r3, #16]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	4603      	mov	r3, r0
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4403      	add	r3, r0
 80027b6:	409a      	lsls	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b06      	cmp	r3, #6
 80027c6:	d824      	bhi.n	8002812 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	3b05      	subs	r3, #5
 80027da:	221f      	movs	r2, #31
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43da      	mvns	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	400a      	ands	r2, r1
 80027e8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	3b05      	subs	r3, #5
 8002804:	fa00 f203 	lsl.w	r2, r0, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	635a      	str	r2, [r3, #52]	; 0x34
 8002810:	e04c      	b.n	80028ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b0c      	cmp	r3, #12
 8002818:	d824      	bhi.n	8002864 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	3b23      	subs	r3, #35	; 0x23
 800282c:	221f      	movs	r2, #31
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	400a      	ands	r2, r1
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	4618      	mov	r0, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	3b23      	subs	r3, #35	; 0x23
 8002856:	fa00 f203 	lsl.w	r2, r0, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
 8002862:	e023      	b.n	80028ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	3b41      	subs	r3, #65	; 0x41
 8002876:	221f      	movs	r2, #31
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43da      	mvns	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	400a      	ands	r2, r1
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	b29b      	uxth	r3, r3
 8002892:	4618      	mov	r0, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	3b41      	subs	r3, #65	; 0x41
 80028a0:	fa00 f203 	lsl.w	r2, r0, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a30      	ldr	r2, [pc, #192]	; (8002974 <HAL_ADC_ConfigChannel+0x29c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d10a      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x1f4>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028be:	d105      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80028c0:	4b2d      	ldr	r3, [pc, #180]	; (8002978 <HAL_ADC_ConfigChannel+0x2a0>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4a2c      	ldr	r2, [pc, #176]	; (8002978 <HAL_ADC_ConfigChannel+0x2a0>)
 80028c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80028ca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a28      	ldr	r2, [pc, #160]	; (8002974 <HAL_ADC_ConfigChannel+0x29c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d10f      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x21e>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b12      	cmp	r3, #18
 80028dc:	d10b      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80028de:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_ADC_ConfigChannel+0x2a0>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4a25      	ldr	r2, [pc, #148]	; (8002978 <HAL_ADC_ConfigChannel+0x2a0>)
 80028e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028e8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80028ea:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_ADC_ConfigChannel+0x2a0>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_ADC_ConfigChannel+0x2a0>)
 80028f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028f4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_ADC_ConfigChannel+0x29c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d12b      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x280>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1a      	ldr	r2, [pc, #104]	; (8002970 <HAL_ADC_ConfigChannel+0x298>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d003      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x23a>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b11      	cmp	r3, #17
 8002910:	d122      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002912:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_ADC_ConfigChannel+0x2a0>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_ADC_ConfigChannel+0x2a0>)
 8002918:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800291c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <HAL_ADC_ConfigChannel+0x2a0>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4a15      	ldr	r2, [pc, #84]	; (8002978 <HAL_ADC_ConfigChannel+0x2a0>)
 8002924:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002928:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_ADC_ConfigChannel+0x298>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d111      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_ADC_ConfigChannel+0x2a4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a11      	ldr	r2, [pc, #68]	; (8002980 <HAL_ADC_ConfigChannel+0x2a8>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0c9a      	lsrs	r2, r3, #18
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800294a:	e002      	b.n	8002952 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3b01      	subs	r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f9      	bne.n	800294c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	10000012 	.word	0x10000012
 8002974:	40012000 	.word	0x40012000
 8002978:	40012300 	.word	0x40012300
 800297c:	20000038 	.word	0x20000038
 8002980:	431bde83 	.word	0x431bde83

08002984 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800298c:	4b78      	ldr	r3, [pc, #480]	; (8002b70 <ADC_Init+0x1ec>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a77      	ldr	r2, [pc, #476]	; (8002b70 <ADC_Init+0x1ec>)
 8002992:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002996:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002998:	4b75      	ldr	r3, [pc, #468]	; (8002b70 <ADC_Init+0x1ec>)
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4973      	ldr	r1, [pc, #460]	; (8002b70 <ADC_Init+0x1ec>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	021a      	lsls	r2, r3, #8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6899      	ldr	r1, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <ADC_Init+0x1f0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6899      	ldr	r1, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6899      	ldr	r1, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	e00f      	b.n	8002a7e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0202 	bic.w	r2, r2, #2
 8002a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6899      	ldr	r1, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	005a      	lsls	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01b      	beq.n	8002ae4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002aca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	035a      	lsls	r2, r3, #13
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	e007      	b.n	8002af4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	051a      	lsls	r2, r3, #20
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6899      	ldr	r1, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b36:	025a      	lsls	r2, r3, #9
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6899      	ldr	r1, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	029a      	lsls	r2, r3, #10
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40012300 	.word	0x40012300
 8002b74:	0f000001 	.word	0x0f000001

08002b78 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d13c      	bne.n	8002c0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d12b      	bne.n	8002c04 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d127      	bne.n	8002c04 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d119      	bne.n	8002c04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0220 	bic.w	r2, r2, #32
 8002bde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7fd fdc9 	bl	800079c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c0a:	e00e      	b.n	8002c2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff fd53 	bl	80026c4 <HAL_ADC_ErrorCallback>
}
 8002c1e:	e004      	b.n	8002c2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
}
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff fd2b 	bl	800269c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f043 0204 	orr.w	r2, r3, #4
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f7ff fd28 	bl	80026c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cbe:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	60d3      	str	r3, [r2, #12]
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00
 8002cd4:	05fa0000 	.word	0x05fa0000

08002cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	f003 0307 	and.w	r3, r3, #7
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0b      	blt.n	8002d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4907      	ldr	r1, [pc, #28]	; (8002d2c <__NVIC_EnableIRQ+0x38>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000e100 	.word	0xe000e100

08002d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db0a      	blt.n	8002d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	490c      	ldr	r1, [pc, #48]	; (8002d7c <__NVIC_SetPriority+0x4c>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	440b      	add	r3, r1
 8002d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d58:	e00a      	b.n	8002d70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4908      	ldr	r1, [pc, #32]	; (8002d80 <__NVIC_SetPriority+0x50>)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	3b04      	subs	r3, #4
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	761a      	strb	r2, [r3, #24]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f1c3 0307 	rsb	r3, r3, #7
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	bf28      	it	cs
 8002da2:	2304      	movcs	r3, #4
 8002da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d902      	bls.n	8002db4 <NVIC_EncodePriority+0x30>
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3b03      	subs	r3, #3
 8002db2:	e000      	b.n	8002db6 <NVIC_EncodePriority+0x32>
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43d9      	mvns	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	4313      	orrs	r3, r2
         );
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dfc:	d301      	bcc.n	8002e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00f      	b.n	8002e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <SysTick_Config+0x40>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0a:	210f      	movs	r1, #15
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e10:	f7ff ff8e 	bl	8002d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <SysTick_Config+0x40>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <SysTick_Config+0x40>)
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	e000e010 	.word	0xe000e010

08002e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff29 	bl	8002c90 <__NVIC_SetPriorityGrouping>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e58:	f7ff ff3e 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	6978      	ldr	r0, [r7, #20]
 8002e64:	f7ff ff8e 	bl	8002d84 <NVIC_EncodePriority>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff5d 	bl	8002d30 <__NVIC_SetPriority>
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff31 	bl	8002cf4 <__NVIC_EnableIRQ>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffa2 	bl	8002dec <SysTick_Config>
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ec0:	f7ff f96e 	bl	80021a0 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e099      	b.n	8003004 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef0:	e00f      	b.n	8002f12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ef2:	f7ff f955 	bl	80021a0 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d908      	bls.n	8002f12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e078      	b.n	8003004 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e8      	bne.n	8002ef2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4b38      	ldr	r3, [pc, #224]	; (800300c <HAL_DMA_Init+0x158>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d107      	bne.n	8002f7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	4313      	orrs	r3, r2
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f023 0307 	bic.w	r3, r3, #7
 8002f92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d117      	bne.n	8002fd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00e      	beq.n	8002fd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fb09 	bl	80035d0 <DMA_CheckFifoParam>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2240      	movs	r2, #64	; 0x40
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e016      	b.n	8003004 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fac0 	bl	8003564 <DMA_CalcBaseAndBitshift>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	223f      	movs	r2, #63	; 0x3f
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	e010803f 	.word	0xe010803f

08003010 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_DMA_Start_IT+0x26>
 8003032:	2302      	movs	r3, #2
 8003034:	e048      	b.n	80030c8 <HAL_DMA_Start_IT+0xb8>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d137      	bne.n	80030ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fa52 	bl	8003508 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	223f      	movs	r2, #63	; 0x3f
 800306a:	409a      	lsls	r2, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0216 	orr.w	r2, r2, #22
 800307e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800308e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0208 	orr.w	r2, r2, #8
 80030a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e005      	b.n	80030c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
 80030c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030de:	f7ff f85f 	bl	80021a0 <HAL_GetTick>
 80030e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d008      	beq.n	8003102 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2280      	movs	r2, #128	; 0x80
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e052      	b.n	80031a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0216 	bic.w	r2, r2, #22
 8003110:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003120:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d103      	bne.n	8003132 <HAL_DMA_Abort+0x62>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0208 	bic.w	r2, r2, #8
 8003140:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003152:	e013      	b.n	800317c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003154:	f7ff f824 	bl	80021a0 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b05      	cmp	r3, #5
 8003160:	d90c      	bls.n	800317c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2203      	movs	r2, #3
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e015      	b.n	80031a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e4      	bne.n	8003154 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	223f      	movs	r2, #63	; 0x3f
 8003190:	409a      	lsls	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d004      	beq.n	80031ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e00c      	b.n	80031e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2205      	movs	r2, #5
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0201 	bic.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003200:	4b92      	ldr	r3, [pc, #584]	; (800344c <HAL_DMA_IRQHandler+0x258>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a92      	ldr	r2, [pc, #584]	; (8003450 <HAL_DMA_IRQHandler+0x25c>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0a9b      	lsrs	r3, r3, #10
 800320c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	2208      	movs	r2, #8
 8003220:	409a      	lsls	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01a      	beq.n	8003260 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d013      	beq.n	8003260 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0204 	bic.w	r2, r2, #4
 8003246:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	2208      	movs	r2, #8
 800324e:	409a      	lsls	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	f043 0201 	orr.w	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	2201      	movs	r2, #1
 8003266:	409a      	lsls	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d012      	beq.n	8003296 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003282:	2201      	movs	r2, #1
 8003284:	409a      	lsls	r2, r3
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	f043 0202 	orr.w	r2, r3, #2
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	2204      	movs	r2, #4
 800329c:	409a      	lsls	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d012      	beq.n	80032cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	2204      	movs	r2, #4
 80032ba:	409a      	lsls	r2, r3
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c4:	f043 0204 	orr.w	r2, r3, #4
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	2210      	movs	r2, #16
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d043      	beq.n	8003364 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d03c      	beq.n	8003364 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	2210      	movs	r2, #16
 80032f0:	409a      	lsls	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d018      	beq.n	8003336 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d024      	beq.n	8003364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4798      	blx	r3
 8003322:	e01f      	b.n	8003364 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01b      	beq.n	8003364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
 8003334:	e016      	b.n	8003364 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d107      	bne.n	8003354 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0208 	bic.w	r2, r2, #8
 8003352:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	2220      	movs	r2, #32
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 808e 	beq.w	8003492 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8086 	beq.w	8003492 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	2220      	movs	r2, #32
 800338c:	409a      	lsls	r2, r3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b05      	cmp	r3, #5
 800339c:	d136      	bne.n	800340c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0216 	bic.w	r2, r2, #22
 80033ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695a      	ldr	r2, [r3, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <HAL_DMA_IRQHandler+0x1da>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0208 	bic.w	r2, r2, #8
 80033dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	223f      	movs	r2, #63	; 0x3f
 80033e4:	409a      	lsls	r2, r3
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d07d      	beq.n	80034fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
        }
        return;
 800340a:	e078      	b.n	80034fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01c      	beq.n	8003454 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d108      	bne.n	800343a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	2b00      	cmp	r3, #0
 800342e:	d030      	beq.n	8003492 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
 8003438:	e02b      	b.n	8003492 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d027      	beq.n	8003492 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
 800344a:	e022      	b.n	8003492 <HAL_DMA_IRQHandler+0x29e>
 800344c:	20000038 	.word	0x20000038
 8003450:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10f      	bne.n	8003482 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0210 	bic.w	r2, r2, #16
 8003470:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	2b00      	cmp	r3, #0
 8003498:	d032      	beq.n	8003500 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d022      	beq.n	80034ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2205      	movs	r2, #5
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	3301      	adds	r3, #1
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d307      	bcc.n	80034da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f2      	bne.n	80034be <HAL_DMA_IRQHandler+0x2ca>
 80034d8:	e000      	b.n	80034dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
 80034fc:	e000      	b.n	8003500 <HAL_DMA_IRQHandler+0x30c>
        return;
 80034fe:	bf00      	nop
    }
  }
}
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop

08003508 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003524:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d108      	bne.n	8003548 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003546:	e007      	b.n	8003558 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]
}
 8003558:	bf00      	nop
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	3b10      	subs	r3, #16
 8003574:	4a13      	ldr	r2, [pc, #76]	; (80035c4 <DMA_CalcBaseAndBitshift+0x60>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800357e:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b03      	cmp	r3, #3
 8003590:	d908      	bls.n	80035a4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <DMA_CalcBaseAndBitshift+0x68>)
 800359a:	4013      	ands	r3, r2
 800359c:	1d1a      	adds	r2, r3, #4
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	659a      	str	r2, [r3, #88]	; 0x58
 80035a2:	e006      	b.n	80035b2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	4b08      	ldr	r3, [pc, #32]	; (80035cc <DMA_CalcBaseAndBitshift+0x68>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	aaaaaaab 	.word	0xaaaaaaab
 80035c8:	0800d694 	.word	0x0800d694
 80035cc:	fffffc00 	.word	0xfffffc00

080035d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d11f      	bne.n	800362a <DMA_CheckFifoParam+0x5a>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d856      	bhi.n	800369e <DMA_CheckFifoParam+0xce>
 80035f0:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <DMA_CheckFifoParam+0x28>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	08003609 	.word	0x08003609
 80035fc:	0800361b 	.word	0x0800361b
 8003600:	08003609 	.word	0x08003609
 8003604:	0800369f 	.word	0x0800369f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d046      	beq.n	80036a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003618:	e043      	b.n	80036a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003622:	d140      	bne.n	80036a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003628:	e03d      	b.n	80036a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003632:	d121      	bne.n	8003678 <DMA_CheckFifoParam+0xa8>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d837      	bhi.n	80036aa <DMA_CheckFifoParam+0xda>
 800363a:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <DMA_CheckFifoParam+0x70>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003651 	.word	0x08003651
 8003644:	08003657 	.word	0x08003657
 8003648:	08003651 	.word	0x08003651
 800364c:	08003669 	.word	0x08003669
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      break;
 8003654:	e030      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d025      	beq.n	80036ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003666:	e022      	b.n	80036ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003670:	d11f      	bne.n	80036b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003676:	e01c      	b.n	80036b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d903      	bls.n	8003686 <DMA_CheckFifoParam+0xb6>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d003      	beq.n	800368c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003684:	e018      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      break;
 800368a:	e015      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      break;
 800369c:	e00b      	b.n	80036b6 <DMA_CheckFifoParam+0xe6>
      break;
 800369e:	bf00      	nop
 80036a0:	e00a      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036a2:	bf00      	nop
 80036a4:	e008      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036a6:	bf00      	nop
 80036a8:	e006      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
 80036ac:	e004      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
 80036b0:	e002      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
    }
  } 
  
  return status; 
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop

080036c8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_FLASH_Program+0xb0>)
 80036dc:	7d1b      	ldrb	r3, [r3, #20]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_FLASH_Program+0x1e>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e043      	b.n	800376e <HAL_FLASH_Program+0xa6>
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_FLASH_Program+0xb0>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80036ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036f0:	f000 f878 	bl	80037e4 <FLASH_WaitForLastOperation>
 80036f4:	4603      	mov	r3, r0
 80036f6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d133      	bne.n	8003766 <HAL_FLASH_Program+0x9e>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b03      	cmp	r3, #3
 8003702:	d823      	bhi.n	800374c <HAL_FLASH_Program+0x84>
 8003704:	a201      	add	r2, pc, #4	; (adr r2, 800370c <HAL_FLASH_Program+0x44>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	0800371d 	.word	0x0800371d
 8003710:	08003729 	.word	0x08003729
 8003714:	08003735 	.word	0x08003735
 8003718:	08003741 	.word	0x08003741
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800371c:	783b      	ldrb	r3, [r7, #0]
 800371e:	4619      	mov	r1, r3
 8003720:	68b8      	ldr	r0, [r7, #8]
 8003722:	f000 f921 	bl	8003968 <FLASH_Program_Byte>
        break;
 8003726:	e012      	b.n	800374e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003728:	883b      	ldrh	r3, [r7, #0]
 800372a:	4619      	mov	r1, r3
 800372c:	68b8      	ldr	r0, [r7, #8]
 800372e:	f000 f8f5 	bl	800391c <FLASH_Program_HalfWord>
        break;
 8003732:	e00c      	b.n	800374e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	4619      	mov	r1, r3
 8003738:	68b8      	ldr	r0, [r7, #8]
 800373a:	f000 f8c9 	bl	80038d0 <FLASH_Program_Word>
        break;
 800373e:	e006      	b.n	800374e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8003740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003744:	68b8      	ldr	r0, [r7, #8]
 8003746:	f000 f88d 	bl	8003864 <FLASH_Program_DoubleWord>
        break;
 800374a:	e000      	b.n	800374e <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 800374c:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800374e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003752:	f000 f847 	bl	80037e4 <FLASH_WaitForLastOperation>
 8003756:	4603      	mov	r3, r0
 8003758:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800375a:	4b08      	ldr	r3, [pc, #32]	; (800377c <HAL_FLASH_Program+0xb4>)
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	4a07      	ldr	r2, [pc, #28]	; (800377c <HAL_FLASH_Program+0xb4>)
 8003760:	f023 0301 	bic.w	r3, r3, #1
 8003764:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <HAL_FLASH_Program+0xb0>)
 8003768:	2200      	movs	r2, #0
 800376a:	751a      	strb	r2, [r3, #20]

  return status;
 800376c:	7dfb      	ldrb	r3, [r7, #23]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	200020f8 	.word	0x200020f8
 800377c:	40023c00 	.word	0x40023c00

08003780 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_FLASH_Unlock+0x38>)
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	da0b      	bge.n	80037aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_FLASH_Unlock+0x38>)
 8003794:	4a09      	ldr	r2, [pc, #36]	; (80037bc <HAL_FLASH_Unlock+0x3c>)
 8003796:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003798:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_FLASH_Unlock+0x38>)
 800379a:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <HAL_FLASH_Unlock+0x40>)
 800379c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_FLASH_Unlock+0x38>)
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	da01      	bge.n	80037aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80037aa:	79fb      	ldrb	r3, [r7, #7]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40023c00 	.word	0x40023c00
 80037bc:	45670123 	.word	0x45670123
 80037c0:	cdef89ab 	.word	0xcdef89ab

080037c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_FLASH_Lock+0x1c>)
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_FLASH_Lock+0x1c>)
 80037ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037d2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40023c00 	.word	0x40023c00

080037e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <FLASH_WaitForLastOperation+0x78>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80037f6:	f7fe fcd3 	bl	80021a0 <HAL_GetTick>
 80037fa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80037fc:	e010      	b.n	8003820 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d00c      	beq.n	8003820 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d007      	beq.n	800381c <FLASH_WaitForLastOperation+0x38>
 800380c:	f7fe fcc8 	bl	80021a0 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	429a      	cmp	r2, r3
 800381a:	d201      	bcs.n	8003820 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e019      	b.n	8003854 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <FLASH_WaitForLastOperation+0x7c>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e8      	bne.n	80037fe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <FLASH_WaitForLastOperation+0x7c>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003838:	f000 f8ba 	bl	80039b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e009      	b.n	8003854 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <FLASH_WaitForLastOperation+0x7c>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <FLASH_WaitForLastOperation+0x7c>)
 800384e:	2201      	movs	r2, #1
 8003850:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
  
}  
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	200020f8 	.word	0x200020f8
 8003860:	40023c00 	.word	0x40023c00

08003864 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003870:	4b16      	ldr	r3, [pc, #88]	; (80038cc <FLASH_Program_DoubleWord+0x68>)
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	4a15      	ldr	r2, [pc, #84]	; (80038cc <FLASH_Program_DoubleWord+0x68>)
 8003876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <FLASH_Program_DoubleWord+0x68>)
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	4a12      	ldr	r2, [pc, #72]	; (80038cc <FLASH_Program_DoubleWord+0x68>)
 8003882:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003886:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <FLASH_Program_DoubleWord+0x68>)
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	4a0f      	ldr	r2, [pc, #60]	; (80038cc <FLASH_Program_DoubleWord+0x68>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800389a:	f3bf 8f6f 	isb	sy
}
 800389e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80038a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	000a      	movs	r2, r1
 80038ae:	2300      	movs	r3, #0
 80038b0:	68f9      	ldr	r1, [r7, #12]
 80038b2:	3104      	adds	r1, #4
 80038b4:	4613      	mov	r3, r2
 80038b6:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80038b8:	f3bf 8f4f 	dsb	sy
}
 80038bc:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40023c00 	.word	0x40023c00

080038d0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <FLASH_Program_Word+0x48>)
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <FLASH_Program_Word+0x48>)
 80038e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <FLASH_Program_Word+0x48>)
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	4a0b      	ldr	r2, [pc, #44]	; (8003918 <FLASH_Program_Word+0x48>)
 80038ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <FLASH_Program_Word+0x48>)
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	4a08      	ldr	r2, [pc, #32]	; (8003918 <FLASH_Program_Word+0x48>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003904:	f3bf 8f4f 	dsb	sy
}
 8003908:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40023c00 	.word	0x40023c00

0800391c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003928:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <FLASH_Program_HalfWord+0x48>)
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	4a0d      	ldr	r2, [pc, #52]	; (8003964 <FLASH_Program_HalfWord+0x48>)
 800392e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003932:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <FLASH_Program_HalfWord+0x48>)
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <FLASH_Program_HalfWord+0x48>)
 800393a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <FLASH_Program_HalfWord+0x48>)
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	4a07      	ldr	r2, [pc, #28]	; (8003964 <FLASH_Program_HalfWord+0x48>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	887a      	ldrh	r2, [r7, #2]
 8003950:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003952:	f3bf 8f4f 	dsb	sy
}
 8003956:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	40023c00 	.word	0x40023c00

08003968 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <FLASH_Program_Byte+0x44>)
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	4a0c      	ldr	r2, [pc, #48]	; (80039ac <FLASH_Program_Byte+0x44>)
 800397a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <FLASH_Program_Byte+0x44>)
 8003982:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <FLASH_Program_Byte+0x44>)
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <FLASH_Program_Byte+0x44>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <FLASH_Program_Byte+0x44>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800399a:	f3bf 8f4f 	dsb	sy
}
 800399e:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40023c00 	.word	0x40023c00

080039b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80039b4:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <FLASH_SetErrorCode+0x8c>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80039c0:	4b1f      	ldr	r3, [pc, #124]	; (8003a40 <FLASH_SetErrorCode+0x90>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f043 0320 	orr.w	r3, r3, #32
 80039c8:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <FLASH_SetErrorCode+0x90>)
 80039ca:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <FLASH_SetErrorCode+0x8c>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <FLASH_SetErrorCode+0x90>)
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f043 0310 	orr.w	r3, r3, #16
 80039e0:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <FLASH_SetErrorCode+0x90>)
 80039e2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80039e4:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <FLASH_SetErrorCode+0x8c>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <FLASH_SetErrorCode+0x90>)
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f043 0308 	orr.w	r3, r3, #8
 80039f8:	4a11      	ldr	r2, [pc, #68]	; (8003a40 <FLASH_SetErrorCode+0x90>)
 80039fa:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80039fc:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <FLASH_SetErrorCode+0x8c>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <FLASH_SetErrorCode+0x90>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <FLASH_SetErrorCode+0x90>)
 8003a12:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8003a14:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <FLASH_SetErrorCode+0x8c>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <FLASH_SetErrorCode+0x90>)
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f043 0302 	orr.w	r3, r3, #2
 8003a28:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <FLASH_SetErrorCode+0x90>)
 8003a2a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8003a2c:	4b03      	ldr	r3, [pc, #12]	; (8003a3c <FLASH_SetErrorCode+0x8c>)
 8003a2e:	22f2      	movs	r2, #242	; 0xf2
 8003a30:	60da      	str	r2, [r3, #12]
}
 8003a32:	bf00      	nop
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	40023c00 	.word	0x40023c00
 8003a40:	200020f8 	.word	0x200020f8

08003a44 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a56:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <HAL_FLASHEx_Erase+0xd4>)
 8003a58:	7d1b      	ldrb	r3, [r3, #20]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_FLASHEx_Erase+0x1e>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e056      	b.n	8003b10 <HAL_FLASHEx_Erase+0xcc>
 8003a62:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <HAL_FLASHEx_Erase+0xd4>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a6c:	f7ff feba 	bl	80037e4 <FLASH_WaitForLastOperation>
 8003a70:	4603      	mov	r3, r0
 8003a72:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d146      	bne.n	8003b08 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a80:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d115      	bne.n	8003ab6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4619      	mov	r1, r3
 8003a96:	4610      	mov	r0, r2
 8003a98:	f000 f844 	bl	8003b24 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003aa0:	f7ff fea0 	bl	80037e4 <FLASH_WaitForLastOperation>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003aa8:	4b1c      	ldr	r3, [pc, #112]	; (8003b1c <HAL_FLASHEx_Erase+0xd8>)
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	491b      	ldr	r1, [pc, #108]	; (8003b1c <HAL_FLASHEx_Erase+0xd8>)
 8003aae:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <HAL_FLASHEx_Erase+0xdc>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	610b      	str	r3, [r1, #16]
 8003ab4:	e028      	b.n	8003b08 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	e01c      	b.n	8003af8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	68b8      	ldr	r0, [r7, #8]
 8003ac8:	f000 f868 	bl	8003b9c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003acc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ad0:	f7ff fe88 	bl	80037e4 <FLASH_WaitForLastOperation>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8003ad8:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <HAL_FLASHEx_Erase+0xd8>)
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	4a0f      	ldr	r2, [pc, #60]	; (8003b1c <HAL_FLASHEx_Erase+0xd8>)
 8003ade:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003ae2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	601a      	str	r2, [r3, #0]
          break;
 8003af0:	e00a      	b.n	8003b08 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	3301      	adds	r3, #1
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4413      	add	r3, r2
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d3da      	bcc.n	8003abe <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_FLASHEx_Erase+0xd4>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	751a      	strb	r2, [r3, #20]

  return status;
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	200020f8 	.word	0x200020f8
 8003b1c:	40023c00 	.word	0x40023c00
 8003b20:	ffff7ffb 	.word	0xffff7ffb

08003b24 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	6039      	str	r1, [r7, #0]
 8003b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <FLASH_MassErase+0x74>)
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	4a18      	ldr	r2, [pc, #96]	; (8003b98 <FLASH_MassErase+0x74>)
 8003b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3a:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d107      	bne.n	8003b52 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <FLASH_MassErase+0x74>)
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	4914      	ldr	r1, [pc, #80]	; (8003b98 <FLASH_MassErase+0x74>)
 8003b48:	f248 0304 	movw	r3, #32772	; 0x8004
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	610b      	str	r3, [r1, #16]
 8003b50:	e00f      	b.n	8003b72 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d106      	bne.n	8003b66 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <FLASH_MassErase+0x74>)
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <FLASH_MassErase+0x74>)
 8003b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b62:	6113      	str	r3, [r2, #16]
 8003b64:	e005      	b.n	8003b72 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <FLASH_MassErase+0x74>)
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <FLASH_MassErase+0x74>)
 8003b6c:	f043 0304 	orr.w	r3, r3, #4
 8003b70:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8003b72:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <FLASH_MassErase+0x74>)
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	021b      	lsls	r3, r3, #8
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <FLASH_MassErase+0x74>)
 8003b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b82:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b84:	f3bf 8f4f 	dsb	sy
}
 8003b88:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40023c00 	.word	0x40023c00

08003b9c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e010      	b.n	8003bda <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d103      	bne.n	8003bc6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e009      	b.n	8003bda <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d103      	bne.n	8003bd4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	e002      	b.n	8003bda <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003bd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bd8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b0b      	cmp	r3, #11
 8003bde:	d902      	bls.n	8003be6 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <FLASH_Erase_Sector+0xa0>)
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <FLASH_Erase_Sector+0xa0>)
 8003bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003bf2:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <FLASH_Erase_Sector+0xa0>)
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	4911      	ldr	r1, [pc, #68]	; (8003c3c <FLASH_Erase_Sector+0xa0>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <FLASH_Erase_Sector+0xa0>)
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	4a0e      	ldr	r2, [pc, #56]	; (8003c3c <FLASH_Erase_Sector+0xa0>)
 8003c04:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <FLASH_Erase_Sector+0xa0>)
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4313      	orrs	r3, r2
 8003c14:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <FLASH_Erase_Sector+0xa0>)
 8003c16:	f043 0302 	orr.w	r3, r3, #2
 8003c1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003c1c:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <FLASH_Erase_Sector+0xa0>)
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	4a06      	ldr	r2, [pc, #24]	; (8003c3c <FLASH_Erase_Sector+0xa0>)
 8003c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c26:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c28:	f3bf 8f4f 	dsb	sy
}
 8003c2c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40023c00 	.word	0x40023c00

08003c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b089      	sub	sp, #36	; 0x24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	e175      	b.n	8003f4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c60:	2201      	movs	r2, #1
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4013      	ands	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	f040 8164 	bne.w	8003f46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d005      	beq.n	8003c96 <HAL_GPIO_Init+0x56>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d130      	bne.n	8003cf8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4013      	ands	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ccc:	2201      	movs	r2, #1
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	f003 0201 	and.w	r2, r3, #1
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d017      	beq.n	8003d34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	2203      	movs	r2, #3
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d123      	bne.n	8003d88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	08da      	lsrs	r2, r3, #3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3208      	adds	r2, #8
 8003d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	220f      	movs	r2, #15
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	08da      	lsrs	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3208      	adds	r2, #8
 8003d82:	69b9      	ldr	r1, [r7, #24]
 8003d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	2203      	movs	r2, #3
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0203 	and.w	r2, r3, #3
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80be 	beq.w	8003f46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dca:	4b66      	ldr	r3, [pc, #408]	; (8003f64 <HAL_GPIO_Init+0x324>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	4a65      	ldr	r2, [pc, #404]	; (8003f64 <HAL_GPIO_Init+0x324>)
 8003dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_GPIO_Init+0x324>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003de2:	4a61      	ldr	r2, [pc, #388]	; (8003f68 <HAL_GPIO_Init+0x328>)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	3302      	adds	r3, #2
 8003dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	220f      	movs	r2, #15
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a58      	ldr	r2, [pc, #352]	; (8003f6c <HAL_GPIO_Init+0x32c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d037      	beq.n	8003e7e <HAL_GPIO_Init+0x23e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a57      	ldr	r2, [pc, #348]	; (8003f70 <HAL_GPIO_Init+0x330>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d031      	beq.n	8003e7a <HAL_GPIO_Init+0x23a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a56      	ldr	r2, [pc, #344]	; (8003f74 <HAL_GPIO_Init+0x334>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d02b      	beq.n	8003e76 <HAL_GPIO_Init+0x236>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a55      	ldr	r2, [pc, #340]	; (8003f78 <HAL_GPIO_Init+0x338>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d025      	beq.n	8003e72 <HAL_GPIO_Init+0x232>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a54      	ldr	r2, [pc, #336]	; (8003f7c <HAL_GPIO_Init+0x33c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d01f      	beq.n	8003e6e <HAL_GPIO_Init+0x22e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a53      	ldr	r2, [pc, #332]	; (8003f80 <HAL_GPIO_Init+0x340>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d019      	beq.n	8003e6a <HAL_GPIO_Init+0x22a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a52      	ldr	r2, [pc, #328]	; (8003f84 <HAL_GPIO_Init+0x344>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d013      	beq.n	8003e66 <HAL_GPIO_Init+0x226>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a51      	ldr	r2, [pc, #324]	; (8003f88 <HAL_GPIO_Init+0x348>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00d      	beq.n	8003e62 <HAL_GPIO_Init+0x222>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a50      	ldr	r2, [pc, #320]	; (8003f8c <HAL_GPIO_Init+0x34c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <HAL_GPIO_Init+0x21e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a4f      	ldr	r2, [pc, #316]	; (8003f90 <HAL_GPIO_Init+0x350>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d101      	bne.n	8003e5a <HAL_GPIO_Init+0x21a>
 8003e56:	2309      	movs	r3, #9
 8003e58:	e012      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e5a:	230a      	movs	r3, #10
 8003e5c:	e010      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e5e:	2308      	movs	r3, #8
 8003e60:	e00e      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e62:	2307      	movs	r3, #7
 8003e64:	e00c      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e66:	2306      	movs	r3, #6
 8003e68:	e00a      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e6a:	2305      	movs	r3, #5
 8003e6c:	e008      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e6e:	2304      	movs	r3, #4
 8003e70:	e006      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e72:	2303      	movs	r3, #3
 8003e74:	e004      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e002      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_GPIO_Init+0x240>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	f002 0203 	and.w	r2, r2, #3
 8003e86:	0092      	lsls	r2, r2, #2
 8003e88:	4093      	lsls	r3, r2
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003e90:	4935      	ldr	r1, [pc, #212]	; (8003f68 <HAL_GPIO_Init+0x328>)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e9e:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ec2:	4a34      	ldr	r2, [pc, #208]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ec8:	4b32      	ldr	r3, [pc, #200]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003eec:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ef2:	4b28      	ldr	r3, [pc, #160]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f16:	4a1f      	ldr	r2, [pc, #124]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f40:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <HAL_GPIO_Init+0x354>)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	f67f ae86 	bls.w	8003c60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3724      	adds	r7, #36	; 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40013800 	.word	0x40013800
 8003f6c:	40020000 	.word	0x40020000
 8003f70:	40020400 	.word	0x40020400
 8003f74:	40020800 	.word	0x40020800
 8003f78:	40020c00 	.word	0x40020c00
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40021400 	.word	0x40021400
 8003f84:	40021800 	.word	0x40021800
 8003f88:	40021c00 	.word	0x40021c00
 8003f8c:	40022000 	.word	0x40022000
 8003f90:	40022400 	.word	0x40022400
 8003f94:	40013c00 	.word	0x40013c00

08003f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	887b      	ldrh	r3, [r7, #2]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
 8003fb4:	e001      	b.n	8003fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fd8:	787b      	ldrb	r3, [r7, #1]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003fe4:	e003      	b.n	8003fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003fe6:	887b      	ldrh	r3, [r7, #2]
 8003fe8:	041a      	lsls	r2, r3, #16
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	619a      	str	r2, [r3, #24]
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800400c:	887a      	ldrh	r2, [r7, #2]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4013      	ands	r3, r2
 8004012:	041a      	lsls	r2, r3, #16
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	43d9      	mvns	r1, r3
 8004018:	887b      	ldrh	r3, [r7, #2]
 800401a:	400b      	ands	r3, r1
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	619a      	str	r2, [r3, #24]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d006      	beq.n	8004054 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004046:	4a05      	ldr	r2, [pc, #20]	; (800405c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f806 	bl	8004060 <HAL_GPIO_EXTI_Callback>
  }
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40013c00 	.word	0x40013c00

08004060 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004080:	2300      	movs	r3, #0
 8004082:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e29b      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8087 	beq.w	80041aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800409c:	4b96      	ldr	r3, [pc, #600]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 030c 	and.w	r3, r3, #12
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d00c      	beq.n	80040c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a8:	4b93      	ldr	r3, [pc, #588]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d112      	bne.n	80040da <HAL_RCC_OscConfig+0x62>
 80040b4:	4b90      	ldr	r3, [pc, #576]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c0:	d10b      	bne.n	80040da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c2:	4b8d      	ldr	r3, [pc, #564]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d06c      	beq.n	80041a8 <HAL_RCC_OscConfig+0x130>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d168      	bne.n	80041a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e275      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e2:	d106      	bne.n	80040f2 <HAL_RCC_OscConfig+0x7a>
 80040e4:	4b84      	ldr	r3, [pc, #528]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a83      	ldr	r2, [pc, #524]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80040ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	e02e      	b.n	8004150 <HAL_RCC_OscConfig+0xd8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x9c>
 80040fa:	4b7f      	ldr	r3, [pc, #508]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a7e      	ldr	r2, [pc, #504]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b7c      	ldr	r3, [pc, #496]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a7b      	ldr	r2, [pc, #492]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 800410c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e01d      	b.n	8004150 <HAL_RCC_OscConfig+0xd8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0xc0>
 800411e:	4b76      	ldr	r3, [pc, #472]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a75      	ldr	r2, [pc, #468]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b73      	ldr	r3, [pc, #460]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a72      	ldr	r2, [pc, #456]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0xd8>
 8004138:	4b6f      	ldr	r3, [pc, #444]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a6e      	ldr	r2, [pc, #440]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 800413e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b6c      	ldr	r3, [pc, #432]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a6b      	ldr	r2, [pc, #428]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 800414a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fe f822 	bl	80021a0 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004160:	f7fe f81e 	bl	80021a0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e229      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004172:	4b61      	ldr	r3, [pc, #388]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0xe8>
 800417e:	e014      	b.n	80041aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fe f80e 	bl	80021a0 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004188:	f7fe f80a 	bl	80021a0 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e215      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419a:	4b57      	ldr	r3, [pc, #348]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x110>
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d069      	beq.n	800428a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041b6:	4b50      	ldr	r3, [pc, #320]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00b      	beq.n	80041da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c2:	4b4d      	ldr	r3, [pc, #308]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d11c      	bne.n	8004208 <HAL_RCC_OscConfig+0x190>
 80041ce:	4b4a      	ldr	r3, [pc, #296]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d116      	bne.n	8004208 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041da:	4b47      	ldr	r3, [pc, #284]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_RCC_OscConfig+0x17a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d001      	beq.n	80041f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e1e9      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f2:	4b41      	ldr	r3, [pc, #260]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	493d      	ldr	r1, [pc, #244]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	e040      	b.n	800428a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004210:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a38      	ldr	r2, [pc, #224]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fd ffc0 	bl	80021a0 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004224:	f7fd ffbc 	bl	80021a0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e1c7      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004236:	4b30      	ldr	r3, [pc, #192]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004242:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4929      	ldr	r1, [pc, #164]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]
 8004256:	e018      	b.n	800428a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a26      	ldr	r2, [pc, #152]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fd ff9c 	bl	80021a0 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800426c:	f7fd ff98 	bl	80021a0 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e1a3      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427e:	4b1e      	ldr	r3, [pc, #120]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d038      	beq.n	8004308 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d019      	beq.n	80042d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800429e:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80042a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a2:	4a15      	ldr	r2, [pc, #84]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7fd ff79 	bl	80021a0 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b2:	f7fd ff75 	bl	80021a0 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e180      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80042c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x23a>
 80042d0:	e01a      	b.n	8004308 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80042d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d6:	4a08      	ldr	r2, [pc, #32]	; (80042f8 <HAL_RCC_OscConfig+0x280>)
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042de:	f7fd ff5f 	bl	80021a0 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e6:	f7fd ff5b 	bl	80021a0 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d903      	bls.n	80042fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e166      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
 80042f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fc:	4b92      	ldr	r3, [pc, #584]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80042fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ee      	bne.n	80042e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80a4 	beq.w	800445e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004316:	4b8c      	ldr	r3, [pc, #560]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10d      	bne.n	800433e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004322:	4b89      	ldr	r3, [pc, #548]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	4a88      	ldr	r2, [pc, #544]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800432c:	6413      	str	r3, [r2, #64]	; 0x40
 800432e:	4b86      	ldr	r3, [pc, #536]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800433a:	2301      	movs	r3, #1
 800433c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800433e:	4b83      	ldr	r3, [pc, #524]	; (800454c <HAL_RCC_OscConfig+0x4d4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d118      	bne.n	800437c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800434a:	4b80      	ldr	r3, [pc, #512]	; (800454c <HAL_RCC_OscConfig+0x4d4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a7f      	ldr	r2, [pc, #508]	; (800454c <HAL_RCC_OscConfig+0x4d4>)
 8004350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004356:	f7fd ff23 	bl	80021a0 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435e:	f7fd ff1f 	bl	80021a0 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b64      	cmp	r3, #100	; 0x64
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e12a      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004370:	4b76      	ldr	r3, [pc, #472]	; (800454c <HAL_RCC_OscConfig+0x4d4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d106      	bne.n	8004392 <HAL_RCC_OscConfig+0x31a>
 8004384:	4b70      	ldr	r3, [pc, #448]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	4a6f      	ldr	r2, [pc, #444]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6713      	str	r3, [r2, #112]	; 0x70
 8004390:	e02d      	b.n	80043ee <HAL_RCC_OscConfig+0x376>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <HAL_RCC_OscConfig+0x33c>
 800439a:	4b6b      	ldr	r3, [pc, #428]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	4a6a      	ldr	r2, [pc, #424]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	6713      	str	r3, [r2, #112]	; 0x70
 80043a6:	4b68      	ldr	r3, [pc, #416]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	4a67      	ldr	r2, [pc, #412]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043ac:	f023 0304 	bic.w	r3, r3, #4
 80043b0:	6713      	str	r3, [r2, #112]	; 0x70
 80043b2:	e01c      	b.n	80043ee <HAL_RCC_OscConfig+0x376>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	d10c      	bne.n	80043d6 <HAL_RCC_OscConfig+0x35e>
 80043bc:	4b62      	ldr	r3, [pc, #392]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	4a61      	ldr	r2, [pc, #388]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043c2:	f043 0304 	orr.w	r3, r3, #4
 80043c6:	6713      	str	r3, [r2, #112]	; 0x70
 80043c8:	4b5f      	ldr	r3, [pc, #380]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a5e      	ldr	r2, [pc, #376]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
 80043d4:	e00b      	b.n	80043ee <HAL_RCC_OscConfig+0x376>
 80043d6:	4b5c      	ldr	r3, [pc, #368]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	4a5b      	ldr	r2, [pc, #364]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	6713      	str	r3, [r2, #112]	; 0x70
 80043e2:	4b59      	ldr	r3, [pc, #356]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	4a58      	ldr	r2, [pc, #352]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	f023 0304 	bic.w	r3, r3, #4
 80043ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d015      	beq.n	8004422 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f6:	f7fd fed3 	bl	80021a0 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fc:	e00a      	b.n	8004414 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fe:	f7fd fecf 	bl	80021a0 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f241 3288 	movw	r2, #5000	; 0x1388
 800440c:	4293      	cmp	r3, r2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e0d8      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004414:	4b4c      	ldr	r3, [pc, #304]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ee      	beq.n	80043fe <HAL_RCC_OscConfig+0x386>
 8004420:	e014      	b.n	800444c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004422:	f7fd febd 	bl	80021a0 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004428:	e00a      	b.n	8004440 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fd feb9 	bl	80021a0 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	; 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e0c2      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004440:	4b41      	ldr	r3, [pc, #260]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ee      	bne.n	800442a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d105      	bne.n	800445e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004452:	4b3d      	ldr	r3, [pc, #244]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	4a3c      	ldr	r2, [pc, #240]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800445c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80ae 	beq.w	80045c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004468:	4b37      	ldr	r3, [pc, #220]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b08      	cmp	r3, #8
 8004472:	d06d      	beq.n	8004550 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d14b      	bne.n	8004514 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447c:	4b32      	ldr	r3, [pc, #200]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a31      	ldr	r2, [pc, #196]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fd fe8a 	bl	80021a0 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004490:	f7fd fe86 	bl	80021a0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e091      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a2:	4b29      	ldr	r3, [pc, #164]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	019b      	lsls	r3, r3, #6
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	3b01      	subs	r3, #1
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	071b      	lsls	r3, r3, #28
 80044da:	491b      	ldr	r1, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044e0:	4b19      	ldr	r3, [pc, #100]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a18      	ldr	r2, [pc, #96]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 80044e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd fe58 	bl	80021a0 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd fe54 	bl	80021a0 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e05f      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x47c>
 8004512:	e057      	b.n	80045c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a0b      	ldr	r2, [pc, #44]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 800451a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800451e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd fe3e 	bl	80021a0 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004528:	f7fd fe3a 	bl	80021a0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e045      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453a:	4b03      	ldr	r3, [pc, #12]	; (8004548 <HAL_RCC_OscConfig+0x4d0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x4b0>
 8004546:	e03d      	b.n	80045c4 <HAL_RCC_OscConfig+0x54c>
 8004548:	40023800 	.word	0x40023800
 800454c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004550:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <HAL_RCC_OscConfig+0x558>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d030      	beq.n	80045c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d129      	bne.n	80045c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004576:	429a      	cmp	r2, r3
 8004578:	d122      	bne.n	80045c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004580:	4013      	ands	r3, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004586:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004588:	4293      	cmp	r3, r2
 800458a:	d119      	bne.n	80045c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	3b01      	subs	r3, #1
 800459a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800459c:	429a      	cmp	r2, r3
 800459e:	d10f      	bne.n	80045c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d107      	bne.n	80045c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40023800 	.word	0x40023800

080045d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0d0      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045ec:	4b6a      	ldr	r3, [pc, #424]	; (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 030f 	and.w	r3, r3, #15
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d910      	bls.n	800461c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fa:	4b67      	ldr	r3, [pc, #412]	; (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 020f 	bic.w	r2, r3, #15
 8004602:	4965      	ldr	r1, [pc, #404]	; (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	4313      	orrs	r3, r2
 8004608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b63      	ldr	r3, [pc, #396]	; (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0b8      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d020      	beq.n	800466a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004634:	4b59      	ldr	r3, [pc, #356]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a58      	ldr	r2, [pc, #352]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 800463a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800463e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800464c:	4b53      	ldr	r3, [pc, #332]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4a52      	ldr	r2, [pc, #328]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004652:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004656:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004658:	4b50      	ldr	r3, [pc, #320]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	494d      	ldr	r1, [pc, #308]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d040      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d115      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e07f      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d107      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004696:	4b41      	ldr	r3, [pc, #260]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e073      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a6:	4b3d      	ldr	r3, [pc, #244]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e06b      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b6:	4b39      	ldr	r3, [pc, #228]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f023 0203 	bic.w	r2, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4936      	ldr	r1, [pc, #216]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c8:	f7fd fd6a 	bl	80021a0 <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d0:	f7fd fd66 	bl	80021a0 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	; 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e053      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e6:	4b2d      	ldr	r3, [pc, #180]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 020c 	and.w	r2, r3, #12
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d1eb      	bne.n	80046d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046f8:	4b27      	ldr	r3, [pc, #156]	; (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d210      	bcs.n	8004728 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b24      	ldr	r3, [pc, #144]	; (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 020f 	bic.w	r2, r3, #15
 800470e:	4922      	ldr	r1, [pc, #136]	; (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b20      	ldr	r3, [pc, #128]	; (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e032      	b.n	800478e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004734:	4b19      	ldr	r3, [pc, #100]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4916      	ldr	r1, [pc, #88]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	490e      	ldr	r1, [pc, #56]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004766:	f000 f821 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 800476a:	4602      	mov	r2, r0
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	490a      	ldr	r1, [pc, #40]	; (80047a0 <HAL_RCC_ClockConfig+0x1cc>)
 8004778:	5ccb      	ldrb	r3, [r1, r3]
 800477a:	fa22 f303 	lsr.w	r3, r2, r3
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_RCC_ClockConfig+0x1d4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fd fcc6 	bl	8002118 <HAL_InitTick>

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40023c00 	.word	0x40023c00
 800479c:	40023800 	.word	0x40023800
 80047a0:	0800d67c 	.word	0x0800d67c
 80047a4:	20000038 	.word	0x20000038
 80047a8:	2000003c 	.word	0x2000003c

080047ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047ac:	b5b0      	push	{r4, r5, r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047b2:	2100      	movs	r1, #0
 80047b4:	6079      	str	r1, [r7, #4]
 80047b6:	2100      	movs	r1, #0
 80047b8:	60f9      	str	r1, [r7, #12]
 80047ba:	2100      	movs	r1, #0
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80047be:	2100      	movs	r1, #0
 80047c0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c2:	4952      	ldr	r1, [pc, #328]	; (800490c <HAL_RCC_GetSysClockFreq+0x160>)
 80047c4:	6889      	ldr	r1, [r1, #8]
 80047c6:	f001 010c 	and.w	r1, r1, #12
 80047ca:	2908      	cmp	r1, #8
 80047cc:	d00d      	beq.n	80047ea <HAL_RCC_GetSysClockFreq+0x3e>
 80047ce:	2908      	cmp	r1, #8
 80047d0:	f200 8094 	bhi.w	80048fc <HAL_RCC_GetSysClockFreq+0x150>
 80047d4:	2900      	cmp	r1, #0
 80047d6:	d002      	beq.n	80047de <HAL_RCC_GetSysClockFreq+0x32>
 80047d8:	2904      	cmp	r1, #4
 80047da:	d003      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0x38>
 80047dc:	e08e      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047de:	4b4c      	ldr	r3, [pc, #304]	; (8004910 <HAL_RCC_GetSysClockFreq+0x164>)
 80047e0:	60bb      	str	r3, [r7, #8]
      break;
 80047e2:	e08e      	b.n	8004902 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047e4:	4b4b      	ldr	r3, [pc, #300]	; (8004914 <HAL_RCC_GetSysClockFreq+0x168>)
 80047e6:	60bb      	str	r3, [r7, #8]
      break;
 80047e8:	e08b      	b.n	8004902 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047ea:	4948      	ldr	r1, [pc, #288]	; (800490c <HAL_RCC_GetSysClockFreq+0x160>)
 80047ec:	6849      	ldr	r1, [r1, #4]
 80047ee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80047f2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80047f4:	4945      	ldr	r1, [pc, #276]	; (800490c <HAL_RCC_GetSysClockFreq+0x160>)
 80047f6:	6849      	ldr	r1, [r1, #4]
 80047f8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80047fc:	2900      	cmp	r1, #0
 80047fe:	d024      	beq.n	800484a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004800:	4942      	ldr	r1, [pc, #264]	; (800490c <HAL_RCC_GetSysClockFreq+0x160>)
 8004802:	6849      	ldr	r1, [r1, #4]
 8004804:	0989      	lsrs	r1, r1, #6
 8004806:	4608      	mov	r0, r1
 8004808:	f04f 0100 	mov.w	r1, #0
 800480c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004810:	f04f 0500 	mov.w	r5, #0
 8004814:	ea00 0204 	and.w	r2, r0, r4
 8004818:	ea01 0305 	and.w	r3, r1, r5
 800481c:	493d      	ldr	r1, [pc, #244]	; (8004914 <HAL_RCC_GetSysClockFreq+0x168>)
 800481e:	fb01 f003 	mul.w	r0, r1, r3
 8004822:	2100      	movs	r1, #0
 8004824:	fb01 f102 	mul.w	r1, r1, r2
 8004828:	1844      	adds	r4, r0, r1
 800482a:	493a      	ldr	r1, [pc, #232]	; (8004914 <HAL_RCC_GetSysClockFreq+0x168>)
 800482c:	fba2 0101 	umull	r0, r1, r2, r1
 8004830:	1863      	adds	r3, r4, r1
 8004832:	4619      	mov	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	461a      	mov	r2, r3
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	f7fb fd50 	bl	80002e0 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4613      	mov	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e04a      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484a:	4b30      	ldr	r3, [pc, #192]	; (800490c <HAL_RCC_GetSysClockFreq+0x160>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	099b      	lsrs	r3, r3, #6
 8004850:	461a      	mov	r2, r3
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	f240 10ff 	movw	r0, #511	; 0x1ff
 800485a:	f04f 0100 	mov.w	r1, #0
 800485e:	ea02 0400 	and.w	r4, r2, r0
 8004862:	ea03 0501 	and.w	r5, r3, r1
 8004866:	4620      	mov	r0, r4
 8004868:	4629      	mov	r1, r5
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	014b      	lsls	r3, r1, #5
 8004874:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004878:	0142      	lsls	r2, r0, #5
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	1b00      	subs	r0, r0, r4
 8004880:	eb61 0105 	sbc.w	r1, r1, r5
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	018b      	lsls	r3, r1, #6
 800488e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004892:	0182      	lsls	r2, r0, #6
 8004894:	1a12      	subs	r2, r2, r0
 8004896:	eb63 0301 	sbc.w	r3, r3, r1
 800489a:	f04f 0000 	mov.w	r0, #0
 800489e:	f04f 0100 	mov.w	r1, #0
 80048a2:	00d9      	lsls	r1, r3, #3
 80048a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048a8:	00d0      	lsls	r0, r2, #3
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	1912      	adds	r2, r2, r4
 80048b0:	eb45 0303 	adc.w	r3, r5, r3
 80048b4:	f04f 0000 	mov.w	r0, #0
 80048b8:	f04f 0100 	mov.w	r1, #0
 80048bc:	0299      	lsls	r1, r3, #10
 80048be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048c2:	0290      	lsls	r0, r2, #10
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4610      	mov	r0, r2
 80048ca:	4619      	mov	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	f7fb fd04 	bl	80002e0 <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4613      	mov	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <HAL_RCC_GetSysClockFreq+0x160>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	3301      	adds	r3, #1
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	60bb      	str	r3, [r7, #8]
      break;
 80048fa:	e002      	b.n	8004902 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048fc:	4b04      	ldr	r3, [pc, #16]	; (8004910 <HAL_RCC_GetSysClockFreq+0x164>)
 80048fe:	60bb      	str	r3, [r7, #8]
      break;
 8004900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004902:	68bb      	ldr	r3, [r7, #8]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bdb0      	pop	{r4, r5, r7, pc}
 800490c:	40023800 	.word	0x40023800
 8004910:	00f42400 	.word	0x00f42400
 8004914:	017d7840 	.word	0x017d7840

08004918 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800491c:	4b03      	ldr	r3, [pc, #12]	; (800492c <HAL_RCC_GetHCLKFreq+0x14>)
 800491e:	681b      	ldr	r3, [r3, #0]
}
 8004920:	4618      	mov	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000038 	.word	0x20000038

08004930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004934:	f7ff fff0 	bl	8004918 <HAL_RCC_GetHCLKFreq>
 8004938:	4602      	mov	r2, r0
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	0a9b      	lsrs	r3, r3, #10
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	4903      	ldr	r1, [pc, #12]	; (8004954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004946:	5ccb      	ldrb	r3, [r1, r3]
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40023800 	.word	0x40023800
 8004954:	0800d68c 	.word	0x0800d68c

08004958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800495c:	f7ff ffdc 	bl	8004918 <HAL_RCC_GetHCLKFreq>
 8004960:	4602      	mov	r2, r0
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	0b5b      	lsrs	r3, r3, #13
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4903      	ldr	r1, [pc, #12]	; (800497c <HAL_RCC_GetPCLK2Freq+0x24>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40023800 	.word	0x40023800
 800497c:	0800d68c 	.word	0x0800d68c

08004980 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d012      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049a8:	4b69      	ldr	r3, [pc, #420]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a68      	ldr	r2, [pc, #416]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049b2:	6093      	str	r3, [r2, #8]
 80049b4:	4b66      	ldr	r3, [pc, #408]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	4964      	ldr	r1, [pc, #400]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80049ca:	2301      	movs	r3, #1
 80049cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d017      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049da:	4b5d      	ldr	r3, [pc, #372]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	4959      	ldr	r1, [pc, #356]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f8:	d101      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049fa:	2301      	movs	r3, #1
 80049fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a06:	2301      	movs	r3, #1
 8004a08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d017      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a16:	4b4e      	ldr	r3, [pc, #312]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	494a      	ldr	r1, [pc, #296]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a34:	d101      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a36:	2301      	movs	r3, #1
 8004a38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a42:	2301      	movs	r3, #1
 8004a44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a52:	2301      	movs	r3, #1
 8004a54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 808b 	beq.w	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a64:	4b3a      	ldr	r3, [pc, #232]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	4a39      	ldr	r2, [pc, #228]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a70:	4b37      	ldr	r3, [pc, #220]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a7c:	4b35      	ldr	r3, [pc, #212]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a34      	ldr	r2, [pc, #208]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a88:	f7fd fb8a 	bl	80021a0 <HAL_GetTick>
 8004a8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a90:	f7fd fb86 	bl	80021a0 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b64      	cmp	r3, #100	; 0x64
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e38f      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004aa2:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004aae:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d035      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d02e      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004acc:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ad6:	4b1e      	ldr	r3, [pc, #120]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	4a1d      	ldr	r2, [pc, #116]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ae2:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	4a1a      	ldr	r2, [pc, #104]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004aee:	4a18      	ldr	r2, [pc, #96]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004af4:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d114      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fd fb4e 	bl	80021a0 <HAL_GetTick>
 8004b04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b06:	e00a      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b08:	f7fd fb4a 	bl	80021a0 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e351      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0ee      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b36:	d111      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b46:	400b      	ands	r3, r1
 8004b48:	4901      	ldr	r1, [pc, #4]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
 8004b4e:	e00b      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b50:	40023800 	.word	0x40023800
 8004b54:	40007000 	.word	0x40007000
 8004b58:	0ffffcff 	.word	0x0ffffcff
 8004b5c:	4bb3      	ldr	r3, [pc, #716]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4ab2      	ldr	r2, [pc, #712]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b66:	6093      	str	r3, [r2, #8]
 8004b68:	4bb0      	ldr	r3, [pc, #704]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b74:	49ad      	ldr	r1, [pc, #692]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d010      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b86:	4ba9      	ldr	r3, [pc, #676]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b8c:	4aa7      	ldr	r2, [pc, #668]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b96:	4ba5      	ldr	r3, [pc, #660]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	49a2      	ldr	r1, [pc, #648]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bb4:	4b9d      	ldr	r3, [pc, #628]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc2:	499a      	ldr	r1, [pc, #616]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bd6:	4b95      	ldr	r3, [pc, #596]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be4:	4991      	ldr	r1, [pc, #580]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bf8:	4b8c      	ldr	r3, [pc, #560]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c06:	4989      	ldr	r1, [pc, #548]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c1a:	4b84      	ldr	r3, [pc, #528]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c28:	4980      	ldr	r1, [pc, #512]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c3c:	4b7b      	ldr	r3, [pc, #492]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c42:	f023 0203 	bic.w	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	4978      	ldr	r1, [pc, #480]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c5e:	4b73      	ldr	r3, [pc, #460]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c64:	f023 020c 	bic.w	r2, r3, #12
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6c:	496f      	ldr	r1, [pc, #444]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c80:	4b6a      	ldr	r3, [pc, #424]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	4967      	ldr	r1, [pc, #412]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ca2:	4b62      	ldr	r3, [pc, #392]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb0:	495e      	ldr	r1, [pc, #376]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cc4:	4b59      	ldr	r3, [pc, #356]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	4956      	ldr	r1, [pc, #344]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ce6:	4b51      	ldr	r3, [pc, #324]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	494d      	ldr	r1, [pc, #308]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d08:	4b48      	ldr	r3, [pc, #288]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d16:	4945      	ldr	r1, [pc, #276]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d2a:	4b40      	ldr	r3, [pc, #256]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d38:	493c      	ldr	r1, [pc, #240]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d4c:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d5a:	4934      	ldr	r1, [pc, #208]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d011      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d6e:	4b2f      	ldr	r3, [pc, #188]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d74:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d7c:	492b      	ldr	r1, [pc, #172]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d8c:	d101      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dae:	4b1f      	ldr	r3, [pc, #124]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dbc:	491b      	ldr	r1, [pc, #108]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00b      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dd0:	4b16      	ldr	r3, [pc, #88]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de0:	4912      	ldr	r1, [pc, #72]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004df4:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e04:	4909      	ldr	r1, [pc, #36]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00f      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e18:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	e002      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	4986      	ldr	r1, [pc, #536]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00b      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e44:	4b81      	ldr	r3, [pc, #516]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e54:	497d      	ldr	r1, [pc, #500]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d006      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 80d6 	beq.w	800501c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e70:	4b76      	ldr	r3, [pc, #472]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a75      	ldr	r2, [pc, #468]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7c:	f7fd f990 	bl	80021a0 <HAL_GetTick>
 8004e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e84:	f7fd f98c 	bl	80021a0 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	; 0x64
 8004e90:	d901      	bls.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e195      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e96:	4b6d      	ldr	r3, [pc, #436]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d021      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d11d      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004eb6:	4b65      	ldr	r3, [pc, #404]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ebc:	0c1b      	lsrs	r3, r3, #16
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ec4:	4b61      	ldr	r3, [pc, #388]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eca:	0e1b      	lsrs	r3, r3, #24
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	019a      	lsls	r2, r3, #6
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	041b      	lsls	r3, r3, #16
 8004edc:	431a      	orrs	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	061b      	lsls	r3, r3, #24
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	071b      	lsls	r3, r3, #28
 8004eea:	4958      	ldr	r1, [pc, #352]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d004      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d02e      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f1c:	d129      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f1e:	4b4b      	ldr	r3, [pc, #300]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f24:	0c1b      	lsrs	r3, r3, #16
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f2c:	4b47      	ldr	r3, [pc, #284]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f32:	0f1b      	lsrs	r3, r3, #28
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	019a      	lsls	r2, r3, #6
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	041b      	lsls	r3, r3, #16
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	061b      	lsls	r3, r3, #24
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	071b      	lsls	r3, r3, #28
 8004f52:	493e      	ldr	r1, [pc, #248]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f5a:	4b3c      	ldr	r3, [pc, #240]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f60:	f023 021f 	bic.w	r2, r3, #31
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	4938      	ldr	r1, [pc, #224]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01d      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f7e:	4b33      	ldr	r3, [pc, #204]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f84:	0e1b      	lsrs	r3, r3, #24
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f8c:	4b2f      	ldr	r3, [pc, #188]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f92:	0f1b      	lsrs	r3, r3, #28
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	019a      	lsls	r2, r3, #6
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	061b      	lsls	r3, r3, #24
 8004fac:	431a      	orrs	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	071b      	lsls	r3, r3, #28
 8004fb2:	4926      	ldr	r1, [pc, #152]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d011      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	019a      	lsls	r2, r3, #6
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	041b      	lsls	r3, r3, #16
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	061b      	lsls	r3, r3, #24
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	071b      	lsls	r3, r3, #28
 8004fe2:	491a      	ldr	r1, [pc, #104]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fea:	4b18      	ldr	r3, [pc, #96]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a17      	ldr	r2, [pc, #92]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff6:	f7fd f8d3 	bl	80021a0 <HAL_GetTick>
 8004ffa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ffe:	f7fd f8cf 	bl	80021a0 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b64      	cmp	r3, #100	; 0x64
 800500a:	d901      	bls.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e0d8      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005010:	4b0e      	ldr	r3, [pc, #56]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b01      	cmp	r3, #1
 8005020:	f040 80ce 	bne.w	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005024:	4b09      	ldr	r3, [pc, #36]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a08      	ldr	r2, [pc, #32]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800502a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800502e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005030:	f7fd f8b6 	bl	80021a0 <HAL_GetTick>
 8005034:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005036:	e00b      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005038:	f7fd f8b2 	bl	80021a0 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b64      	cmp	r3, #100	; 0x64
 8005044:	d904      	bls.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e0bb      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005050:	4b5e      	ldr	r3, [pc, #376]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800505c:	d0ec      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800507a:	2b00      	cmp	r3, #0
 800507c:	d02e      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d12a      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005086:	4b51      	ldr	r3, [pc, #324]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508c:	0c1b      	lsrs	r3, r3, #16
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005094:	4b4d      	ldr	r3, [pc, #308]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509a:	0f1b      	lsrs	r3, r3, #28
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	019a      	lsls	r2, r3, #6
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	041b      	lsls	r3, r3, #16
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	061b      	lsls	r3, r3, #24
 80050b4:	431a      	orrs	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	071b      	lsls	r3, r3, #28
 80050ba:	4944      	ldr	r1, [pc, #272]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050c2:	4b42      	ldr	r3, [pc, #264]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	3b01      	subs	r3, #1
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	493d      	ldr	r1, [pc, #244]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d022      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050f0:	d11d      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050f2:	4b36      	ldr	r3, [pc, #216]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f8:	0e1b      	lsrs	r3, r3, #24
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005100:	4b32      	ldr	r3, [pc, #200]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	0f1b      	lsrs	r3, r3, #28
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	019a      	lsls	r2, r3, #6
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	431a      	orrs	r2, r3
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	061b      	lsls	r3, r3, #24
 8005120:	431a      	orrs	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	071b      	lsls	r3, r3, #28
 8005126:	4929      	ldr	r1, [pc, #164]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d028      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800513a:	4b24      	ldr	r3, [pc, #144]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	0e1b      	lsrs	r3, r3, #24
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005148:	4b20      	ldr	r3, [pc, #128]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514e:	0c1b      	lsrs	r3, r3, #16
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	019a      	lsls	r2, r3, #6
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	041b      	lsls	r3, r3, #16
 8005160:	431a      	orrs	r2, r3
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	061b      	lsls	r3, r3, #24
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	071b      	lsls	r3, r3, #28
 800516e:	4917      	ldr	r1, [pc, #92]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005176:	4b15      	ldr	r3, [pc, #84]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800517c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	4911      	ldr	r1, [pc, #68]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800518c:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a0e      	ldr	r2, [pc, #56]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005198:	f7fd f802 	bl	80021a0 <HAL_GetTick>
 800519c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051a0:	f7fc fffe 	bl	80021a0 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	; 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e007      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051be:	d1ef      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40023800 	.word	0x40023800

080051d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e09d      	b.n	800531e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d108      	bne.n	80051fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f2:	d009      	beq.n	8005208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	61da      	str	r2, [r3, #28]
 80051fa:	e005      	b.n	8005208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fc fca6 	bl	8001b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800523e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005248:	d902      	bls.n	8005250 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	e002      	b.n	8005256 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005254:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800525e:	d007      	beq.n	8005270 <HAL_SPI_Init+0xa0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005268:	d002      	beq.n	8005270 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b2:	ea42 0103 	orr.w	r1, r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	0c1b      	lsrs	r3, r3, #16
 80052cc:	f003 0204 	and.w	r2, r3, #4
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80052ec:	ea42 0103 	orr.w	r1, r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800530c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b088      	sub	sp, #32
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_SPI_Transmit+0x22>
 8005344:	2302      	movs	r3, #2
 8005346:	e158      	b.n	80055fa <HAL_SPI_Transmit+0x2d4>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005350:	f7fc ff26 	bl	80021a0 <HAL_GetTick>
 8005354:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b01      	cmp	r3, #1
 8005364:	d002      	beq.n	800536c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005366:	2302      	movs	r3, #2
 8005368:	77fb      	strb	r3, [r7, #31]
    goto error;
 800536a:	e13d      	b.n	80055e8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_SPI_Transmit+0x52>
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800537c:	e134      	b.n	80055e8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2203      	movs	r2, #3
 8005382:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	88fa      	ldrh	r2, [r7, #6]
 8005396:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	88fa      	ldrh	r2, [r7, #6]
 800539c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c8:	d10f      	bne.n	80053ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f4:	2b40      	cmp	r3, #64	; 0x40
 80053f6:	d007      	beq.n	8005408 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005406:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005410:	d94b      	bls.n	80054aa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <HAL_SPI_Transmit+0xfa>
 800541a:	8afb      	ldrh	r3, [r7, #22]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d13e      	bne.n	800549e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	881a      	ldrh	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	1c9a      	adds	r2, r3, #2
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005444:	e02b      	b.n	800549e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b02      	cmp	r3, #2
 8005452:	d112      	bne.n	800547a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	881a      	ldrh	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	1c9a      	adds	r2, r3, #2
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005478:	e011      	b.n	800549e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800547a:	f7fc fe91 	bl	80021a0 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d803      	bhi.n	8005492 <HAL_SPI_Transmit+0x16c>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005490:	d102      	bne.n	8005498 <HAL_SPI_Transmit+0x172>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800549c:	e0a4      	b.n	80055e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1ce      	bne.n	8005446 <HAL_SPI_Transmit+0x120>
 80054a8:	e07c      	b.n	80055a4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_SPI_Transmit+0x192>
 80054b2:	8afb      	ldrh	r3, [r7, #22]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d170      	bne.n	800559a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d912      	bls.n	80054e8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	881a      	ldrh	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	1c9a      	adds	r2, r3, #2
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b02      	subs	r3, #2
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054e6:	e058      	b.n	800559a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	330c      	adds	r3, #12
 80054f2:	7812      	ldrb	r2, [r2, #0]
 80054f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800550e:	e044      	b.n	800559a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b02      	cmp	r3, #2
 800551c:	d12b      	bne.n	8005576 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	d912      	bls.n	800554e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	881a      	ldrh	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	1c9a      	adds	r2, r3, #2
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b02      	subs	r3, #2
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800554c:	e025      	b.n	800559a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	7812      	ldrb	r2, [r2, #0]
 800555a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005574:	e011      	b.n	800559a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005576:	f7fc fe13 	bl	80021a0 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d803      	bhi.n	800558e <HAL_SPI_Transmit+0x268>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558c:	d102      	bne.n	8005594 <HAL_SPI_Transmit+0x26e>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d102      	bne.n	800559a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005598:	e026      	b.n	80055e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1b5      	bne.n	8005510 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	6839      	ldr	r1, [r7, #0]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f949 	bl	8005840 <SPI_EndRxTxTransaction>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055c2:	2300      	movs	r3, #0
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	77fb      	strb	r3, [r7, #31]
 80055e4:	e000      	b.n	80055e8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80055e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80055f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005614:	f7fc fdc4 	bl	80021a0 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	4413      	add	r3, r2
 8005622:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005624:	f7fc fdbc 	bl	80021a0 <HAL_GetTick>
 8005628:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800562a:	4b39      	ldr	r3, [pc, #228]	; (8005710 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	015b      	lsls	r3, r3, #5
 8005630:	0d1b      	lsrs	r3, r3, #20
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	fb02 f303 	mul.w	r3, r2, r3
 8005638:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800563a:	e054      	b.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	d050      	beq.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005644:	f7fc fdac 	bl	80021a0 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	429a      	cmp	r2, r3
 8005652:	d902      	bls.n	800565a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d13d      	bne.n	80056d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005672:	d111      	bne.n	8005698 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800567c:	d004      	beq.n	8005688 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005686:	d107      	bne.n	8005698 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005696:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a0:	d10f      	bne.n	80056c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e017      	b.n	8005706 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4013      	ands	r3, r2
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	bf0c      	ite	eq
 80056f6:	2301      	moveq	r3, #1
 80056f8:	2300      	movne	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	429a      	cmp	r2, r3
 8005702:	d19b      	bne.n	800563c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3720      	adds	r7, #32
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	20000038 	.word	0x20000038

08005714 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08a      	sub	sp, #40	; 0x28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005726:	f7fc fd3b 	bl	80021a0 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	4413      	add	r3, r2
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005736:	f7fc fd33 	bl	80021a0 <HAL_GetTick>
 800573a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005744:	4b3d      	ldr	r3, [pc, #244]	; (800583c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	00da      	lsls	r2, r3, #3
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	0d1b      	lsrs	r3, r3, #20
 8005754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800575c:	e060      	b.n	8005820 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005764:	d107      	bne.n	8005776 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d104      	bne.n	8005776 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005774:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d050      	beq.n	8005820 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800577e:	f7fc fd0f 	bl	80021a0 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578a:	429a      	cmp	r2, r3
 800578c:	d902      	bls.n	8005794 <SPI_WaitFifoStateUntilTimeout+0x80>
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	2b00      	cmp	r3, #0
 8005792:	d13d      	bne.n	8005810 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ac:	d111      	bne.n	80057d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b6:	d004      	beq.n	80057c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c0:	d107      	bne.n	80057d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057da:	d10f      	bne.n	80057fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e010      	b.n	8005832 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	3b01      	subs	r3, #1
 800581e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d196      	bne.n	800575e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3728      	adds	r7, #40	; 0x28
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000038 	.word	0x20000038

08005840 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af02      	add	r7, sp, #8
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2200      	movs	r2, #0
 8005854:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7ff ff5b 	bl	8005714 <SPI_WaitFifoStateUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	f043 0220 	orr.w	r2, r3, #32
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e046      	b.n	8005902 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005874:	4b25      	ldr	r3, [pc, #148]	; (800590c <SPI_EndRxTxTransaction+0xcc>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a25      	ldr	r2, [pc, #148]	; (8005910 <SPI_EndRxTxTransaction+0xd0>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	0d5b      	lsrs	r3, r3, #21
 8005880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005884:	fb02 f303 	mul.w	r3, r2, r3
 8005888:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005892:	d112      	bne.n	80058ba <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2200      	movs	r2, #0
 800589c:	2180      	movs	r1, #128	; 0x80
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f7ff feb0 	bl	8005604 <SPI_WaitFlagStateUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d016      	beq.n	80058d8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ae:	f043 0220 	orr.w	r2, r3, #32
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e023      	b.n	8005902 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d0:	2b80      	cmp	r3, #128	; 0x80
 80058d2:	d0f2      	beq.n	80058ba <SPI_EndRxTxTransaction+0x7a>
 80058d4:	e000      	b.n	80058d8 <SPI_EndRxTxTransaction+0x98>
        break;
 80058d6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2200      	movs	r2, #0
 80058e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f7ff ff15 	bl	8005714 <SPI_WaitFifoStateUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d007      	beq.n	8005900 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f4:	f043 0220 	orr.w	r2, r3, #32
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e000      	b.n	8005902 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000038 	.word	0x20000038
 8005910:	165e9f81 	.word	0x165e9f81

08005914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e049      	b.n	80059ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fc f9a2 	bl	8001c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4610      	mov	r0, r2
 8005954:	f000 fd6a 	bl	800642c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d001      	beq.n	80059dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e054      	b.n	8005a86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a26      	ldr	r2, [pc, #152]	; (8005a94 <HAL_TIM_Base_Start_IT+0xd0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d022      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a06:	d01d      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d018      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a21      	ldr	r2, [pc, #132]	; (8005a9c <HAL_TIM_Base_Start_IT+0xd8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d013      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a1f      	ldr	r2, [pc, #124]	; (8005aa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00e      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d009      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1b      	ldr	r2, [pc, #108]	; (8005aac <HAL_TIM_Base_Start_IT+0xe8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d115      	bne.n	8005a70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	4b19      	ldr	r3, [pc, #100]	; (8005ab0 <HAL_TIM_Base_Start_IT+0xec>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b06      	cmp	r3, #6
 8005a54:	d015      	beq.n	8005a82 <HAL_TIM_Base_Start_IT+0xbe>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5c:	d011      	beq.n	8005a82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0201 	orr.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6e:	e008      	b.n	8005a82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	e000      	b.n	8005a84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40010000 	.word	0x40010000
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40000c00 	.word	0x40000c00
 8005aa4:	40010400 	.word	0x40010400
 8005aa8:	40014000 	.word	0x40014000
 8005aac:	40001800 	.word	0x40001800
 8005ab0:	00010007 	.word	0x00010007

08005ab4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e049      	b.n	8005b5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f841 	bl	8005b62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	4619      	mov	r1, r3
 8005af2:	4610      	mov	r0, r2
 8005af4:	f000 fc9a 	bl	800642c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e08f      	b.n	8005cac <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d106      	bne.n	8005ba6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7fc f82b 	bl	8001bfc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6899      	ldr	r1, [r3, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4b3e      	ldr	r3, [pc, #248]	; (8005cb4 <HAL_TIM_Encoder_Init+0x13c>)
 8005bba:	400b      	ands	r3, r1
 8005bbc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4610      	mov	r0, r2
 8005bca:	f000 fc2f 	bl	800642c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4b31      	ldr	r3, [pc, #196]	; (8005cb8 <HAL_TIM_Encoder_Init+0x140>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	4313      	orrs	r3, r2
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4b2b      	ldr	r3, [pc, #172]	; (8005cbc <HAL_TIM_Encoder_Init+0x144>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4b2a      	ldr	r3, [pc, #168]	; (8005cc0 <HAL_TIM_Encoder_Init+0x148>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	4313      	orrs	r3, r2
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	011a      	lsls	r2, r3, #4
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	031b      	lsls	r3, r3, #12
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	fffebff8 	.word	0xfffebff8
 8005cb8:	fffffcfc 	.word	0xfffffcfc
 8005cbc:	fffff3f3 	.word	0xfffff3f3
 8005cc0:	ffff0f0f 	.word	0xffff0f0f

08005cc4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cd4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cdc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ce4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d110      	bne.n	8005d16 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d102      	bne.n	8005d00 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cfa:	7b7b      	ldrb	r3, [r7, #13]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d001      	beq.n	8005d04 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e069      	b.n	8005dd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d14:	e031      	b.n	8005d7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d110      	bne.n	8005d3e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d1c:	7bbb      	ldrb	r3, [r7, #14]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d102      	bne.n	8005d28 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d22:	7b3b      	ldrb	r3, [r7, #12]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d001      	beq.n	8005d2c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e055      	b.n	8005dd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d3c:	e01d      	b.n	8005d7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d108      	bne.n	8005d56 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d44:	7bbb      	ldrb	r3, [r7, #14]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d105      	bne.n	8005d56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d4a:	7b7b      	ldrb	r3, [r7, #13]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d102      	bne.n	8005d56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d50:	7b3b      	ldrb	r3, [r7, #12]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d001      	beq.n	8005d5a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e03e      	b.n	8005dd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2202      	movs	r2, #2
 8005d66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2202      	movs	r2, #2
 8005d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <HAL_TIM_Encoder_Start+0xc4>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d008      	beq.n	8005d98 <HAL_TIM_Encoder_Start+0xd4>
 8005d86:	e00f      	b.n	8005da8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fee3 	bl	8006b5c <TIM_CCxChannelCmd>
      break;
 8005d96:	e016      	b.n	8005dc6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	2104      	movs	r1, #4
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fedb 	bl	8006b5c <TIM_CCxChannelCmd>
      break;
 8005da6:	e00e      	b.n	8005dc6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2201      	movs	r2, #1
 8005dae:	2100      	movs	r1, #0
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 fed3 	bl	8006b5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	2104      	movs	r1, #4
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fecc 	bl	8006b5c <TIM_CCxChannelCmd>
      break;
 8005dc4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f042 0201 	orr.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d122      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d11b      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0202 	mvn.w	r2, #2
 8005e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fae4 	bl	80063f0 <HAL_TIM_IC_CaptureCallback>
 8005e28:	e005      	b.n	8005e36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fad6 	bl	80063dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fae7 	bl	8006404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d122      	bne.n	8005e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d11b      	bne.n	8005e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f06f 0204 	mvn.w	r2, #4
 8005e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 faba 	bl	80063f0 <HAL_TIM_IC_CaptureCallback>
 8005e7c:	e005      	b.n	8005e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 faac 	bl	80063dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fabd 	bl	8006404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d122      	bne.n	8005ee4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d11b      	bne.n	8005ee4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0208 	mvn.w	r2, #8
 8005eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2204      	movs	r2, #4
 8005eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fa90 	bl	80063f0 <HAL_TIM_IC_CaptureCallback>
 8005ed0:	e005      	b.n	8005ede <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fa82 	bl	80063dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fa93 	bl	8006404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f003 0310 	and.w	r3, r3, #16
 8005eee:	2b10      	cmp	r3, #16
 8005ef0:	d122      	bne.n	8005f38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f003 0310 	and.w	r3, r3, #16
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d11b      	bne.n	8005f38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f06f 0210 	mvn.w	r2, #16
 8005f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fa66 	bl	80063f0 <HAL_TIM_IC_CaptureCallback>
 8005f24:	e005      	b.n	8005f32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fa58 	bl	80063dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fa69 	bl	8006404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d10e      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d107      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f06f 0201 	mvn.w	r2, #1
 8005f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fa fcce 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6e:	2b80      	cmp	r3, #128	; 0x80
 8005f70:	d10e      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7c:	2b80      	cmp	r3, #128	; 0x80
 8005f7e:	d107      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fea4 	bl	8006cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f9e:	d10e      	bne.n	8005fbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005faa:	2b80      	cmp	r3, #128	; 0x80
 8005fac:	d107      	bne.n	8005fbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fe97 	bl	8006cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc8:	2b40      	cmp	r3, #64	; 0x40
 8005fca:	d10e      	bne.n	8005fea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd6:	2b40      	cmp	r3, #64	; 0x40
 8005fd8:	d107      	bne.n	8005fea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fa17 	bl	8006418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d10e      	bne.n	8006016 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b20      	cmp	r3, #32
 8006004:	d107      	bne.n	8006016 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f06f 0220 	mvn.w	r2, #32
 800600e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fe57 	bl	8006cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006016:	bf00      	nop
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800603a:	2302      	movs	r3, #2
 800603c:	e0ff      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b14      	cmp	r3, #20
 800604a:	f200 80f0 	bhi.w	800622e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800604e:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	080060a9 	.word	0x080060a9
 8006058:	0800622f 	.word	0x0800622f
 800605c:	0800622f 	.word	0x0800622f
 8006060:	0800622f 	.word	0x0800622f
 8006064:	080060e9 	.word	0x080060e9
 8006068:	0800622f 	.word	0x0800622f
 800606c:	0800622f 	.word	0x0800622f
 8006070:	0800622f 	.word	0x0800622f
 8006074:	0800612b 	.word	0x0800612b
 8006078:	0800622f 	.word	0x0800622f
 800607c:	0800622f 	.word	0x0800622f
 8006080:	0800622f 	.word	0x0800622f
 8006084:	0800616b 	.word	0x0800616b
 8006088:	0800622f 	.word	0x0800622f
 800608c:	0800622f 	.word	0x0800622f
 8006090:	0800622f 	.word	0x0800622f
 8006094:	080061ad 	.word	0x080061ad
 8006098:	0800622f 	.word	0x0800622f
 800609c:	0800622f 	.word	0x0800622f
 80060a0:	0800622f 	.word	0x0800622f
 80060a4:	080061ed 	.word	0x080061ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fa5c 	bl	800656c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0208 	orr.w	r2, r2, #8
 80060c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0204 	bic.w	r2, r2, #4
 80060d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6999      	ldr	r1, [r3, #24]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	691a      	ldr	r2, [r3, #16]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	619a      	str	r2, [r3, #24]
      break;
 80060e6:	e0a5      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 faae 	bl	8006650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699a      	ldr	r2, [r3, #24]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6999      	ldr	r1, [r3, #24]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	021a      	lsls	r2, r3, #8
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	619a      	str	r2, [r3, #24]
      break;
 8006128:	e084      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fb05 	bl	8006740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69da      	ldr	r2, [r3, #28]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f042 0208 	orr.w	r2, r2, #8
 8006144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0204 	bic.w	r2, r2, #4
 8006154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69d9      	ldr	r1, [r3, #28]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	61da      	str	r2, [r3, #28]
      break;
 8006168:	e064      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fb5b 	bl	800682c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69d9      	ldr	r1, [r3, #28]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	021a      	lsls	r2, r3, #8
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	61da      	str	r2, [r3, #28]
      break;
 80061aa:	e043      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68b9      	ldr	r1, [r7, #8]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fb92 	bl	80068dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0208 	orr.w	r2, r2, #8
 80061c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0204 	bic.w	r2, r2, #4
 80061d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061ea:	e023      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fbc4 	bl	8006980 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006206:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006216:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	021a      	lsls	r2, r3, #8
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800622c:	e002      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	75fb      	strb	r3, [r7, #23]
      break;
 8006232:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800623c:	7dfb      	ldrb	r3, [r7, #23]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop

08006248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_TIM_ConfigClockSource+0x1c>
 8006260:	2302      	movs	r3, #2
 8006262:	e0b4      	b.n	80063ce <HAL_TIM_ConfigClockSource+0x186>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	4b56      	ldr	r3, [pc, #344]	; (80063d8 <HAL_TIM_ConfigClockSource+0x190>)
 8006280:	4013      	ands	r3, r2
 8006282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800628a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800629c:	d03e      	beq.n	800631c <HAL_TIM_ConfigClockSource+0xd4>
 800629e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a2:	f200 8087 	bhi.w	80063b4 <HAL_TIM_ConfigClockSource+0x16c>
 80062a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062aa:	f000 8086 	beq.w	80063ba <HAL_TIM_ConfigClockSource+0x172>
 80062ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b2:	d87f      	bhi.n	80063b4 <HAL_TIM_ConfigClockSource+0x16c>
 80062b4:	2b70      	cmp	r3, #112	; 0x70
 80062b6:	d01a      	beq.n	80062ee <HAL_TIM_ConfigClockSource+0xa6>
 80062b8:	2b70      	cmp	r3, #112	; 0x70
 80062ba:	d87b      	bhi.n	80063b4 <HAL_TIM_ConfigClockSource+0x16c>
 80062bc:	2b60      	cmp	r3, #96	; 0x60
 80062be:	d050      	beq.n	8006362 <HAL_TIM_ConfigClockSource+0x11a>
 80062c0:	2b60      	cmp	r3, #96	; 0x60
 80062c2:	d877      	bhi.n	80063b4 <HAL_TIM_ConfigClockSource+0x16c>
 80062c4:	2b50      	cmp	r3, #80	; 0x50
 80062c6:	d03c      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0xfa>
 80062c8:	2b50      	cmp	r3, #80	; 0x50
 80062ca:	d873      	bhi.n	80063b4 <HAL_TIM_ConfigClockSource+0x16c>
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	d058      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x13a>
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d86f      	bhi.n	80063b4 <HAL_TIM_ConfigClockSource+0x16c>
 80062d4:	2b30      	cmp	r3, #48	; 0x30
 80062d6:	d064      	beq.n	80063a2 <HAL_TIM_ConfigClockSource+0x15a>
 80062d8:	2b30      	cmp	r3, #48	; 0x30
 80062da:	d86b      	bhi.n	80063b4 <HAL_TIM_ConfigClockSource+0x16c>
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d060      	beq.n	80063a2 <HAL_TIM_ConfigClockSource+0x15a>
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d867      	bhi.n	80063b4 <HAL_TIM_ConfigClockSource+0x16c>
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d05c      	beq.n	80063a2 <HAL_TIM_ConfigClockSource+0x15a>
 80062e8:	2b10      	cmp	r3, #16
 80062ea:	d05a      	beq.n	80063a2 <HAL_TIM_ConfigClockSource+0x15a>
 80062ec:	e062      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	6899      	ldr	r1, [r3, #8]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f000 fc0d 	bl	8006b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006310:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	609a      	str	r2, [r3, #8]
      break;
 800631a:	e04f      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6818      	ldr	r0, [r3, #0]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	6899      	ldr	r1, [r3, #8]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f000 fbf6 	bl	8006b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800633e:	609a      	str	r2, [r3, #8]
      break;
 8006340:	e03c      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	6859      	ldr	r1, [r3, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	461a      	mov	r2, r3
 8006350:	f000 fb6a 	bl	8006a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2150      	movs	r1, #80	; 0x50
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fbc3 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 8006360:	e02c      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	6859      	ldr	r1, [r3, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	461a      	mov	r2, r3
 8006370:	f000 fb89 	bl	8006a86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2160      	movs	r1, #96	; 0x60
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fbb3 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 8006380:	e01c      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	6859      	ldr	r1, [r3, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	461a      	mov	r2, r3
 8006390:	f000 fb4a 	bl	8006a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2140      	movs	r1, #64	; 0x40
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fba3 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 80063a0:	e00c      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4619      	mov	r1, r3
 80063ac:	4610      	mov	r0, r2
 80063ae:	f000 fb9a 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 80063b2:	e003      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
      break;
 80063b8:	e000      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	fffeff88 	.word	0xfffeff88

080063dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a40      	ldr	r2, [pc, #256]	; (8006540 <TIM_Base_SetConfig+0x114>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d013      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644a:	d00f      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a3d      	ldr	r2, [pc, #244]	; (8006544 <TIM_Base_SetConfig+0x118>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00b      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a3c      	ldr	r2, [pc, #240]	; (8006548 <TIM_Base_SetConfig+0x11c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d007      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a3b      	ldr	r2, [pc, #236]	; (800654c <TIM_Base_SetConfig+0x120>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d003      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a3a      	ldr	r2, [pc, #232]	; (8006550 <TIM_Base_SetConfig+0x124>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d108      	bne.n	800647e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2f      	ldr	r2, [pc, #188]	; (8006540 <TIM_Base_SetConfig+0x114>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d02b      	beq.n	80064de <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648c:	d027      	beq.n	80064de <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2c      	ldr	r2, [pc, #176]	; (8006544 <TIM_Base_SetConfig+0x118>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d023      	beq.n	80064de <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2b      	ldr	r2, [pc, #172]	; (8006548 <TIM_Base_SetConfig+0x11c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d01f      	beq.n	80064de <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2a      	ldr	r2, [pc, #168]	; (800654c <TIM_Base_SetConfig+0x120>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d01b      	beq.n	80064de <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a29      	ldr	r2, [pc, #164]	; (8006550 <TIM_Base_SetConfig+0x124>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d017      	beq.n	80064de <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a28      	ldr	r2, [pc, #160]	; (8006554 <TIM_Base_SetConfig+0x128>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d013      	beq.n	80064de <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a27      	ldr	r2, [pc, #156]	; (8006558 <TIM_Base_SetConfig+0x12c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00f      	beq.n	80064de <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a26      	ldr	r2, [pc, #152]	; (800655c <TIM_Base_SetConfig+0x130>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d00b      	beq.n	80064de <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a25      	ldr	r2, [pc, #148]	; (8006560 <TIM_Base_SetConfig+0x134>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d007      	beq.n	80064de <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a24      	ldr	r2, [pc, #144]	; (8006564 <TIM_Base_SetConfig+0x138>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a23      	ldr	r2, [pc, #140]	; (8006568 <TIM_Base_SetConfig+0x13c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d108      	bne.n	80064f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a0a      	ldr	r2, [pc, #40]	; (8006540 <TIM_Base_SetConfig+0x114>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_Base_SetConfig+0xf8>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a0c      	ldr	r2, [pc, #48]	; (8006550 <TIM_Base_SetConfig+0x124>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d103      	bne.n	800652c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	615a      	str	r2, [r3, #20]
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40010400 	.word	0x40010400
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800
 8006560:	40001800 	.word	0x40001800
 8006564:	40001c00 	.word	0x40001c00
 8006568:	40002000 	.word	0x40002000

0800656c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f023 0201 	bic.w	r2, r3, #1
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4b2b      	ldr	r3, [pc, #172]	; (8006644 <TIM_OC1_SetConfig+0xd8>)
 8006598:	4013      	ands	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f023 0302 	bic.w	r3, r3, #2
 80065b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a21      	ldr	r2, [pc, #132]	; (8006648 <TIM_OC1_SetConfig+0xdc>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <TIM_OC1_SetConfig+0x64>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a20      	ldr	r2, [pc, #128]	; (800664c <TIM_OC1_SetConfig+0xe0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d10c      	bne.n	80065ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f023 0308 	bic.w	r3, r3, #8
 80065d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f023 0304 	bic.w	r3, r3, #4
 80065e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a16      	ldr	r2, [pc, #88]	; (8006648 <TIM_OC1_SetConfig+0xdc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d003      	beq.n	80065fa <TIM_OC1_SetConfig+0x8e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a15      	ldr	r2, [pc, #84]	; (800664c <TIM_OC1_SetConfig+0xe0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d111      	bne.n	800661e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4313      	orrs	r3, r2
 800661c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	621a      	str	r2, [r3, #32]
}
 8006638:	bf00      	nop
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	fffeff8f 	.word	0xfffeff8f
 8006648:	40010000 	.word	0x40010000
 800664c:	40010400 	.word	0x40010400

08006650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f023 0210 	bic.w	r2, r3, #16
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4b2e      	ldr	r3, [pc, #184]	; (8006734 <TIM_OC2_SetConfig+0xe4>)
 800667c:	4013      	ands	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	021b      	lsls	r3, r3, #8
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f023 0320 	bic.w	r3, r3, #32
 800669a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a23      	ldr	r2, [pc, #140]	; (8006738 <TIM_OC2_SetConfig+0xe8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d003      	beq.n	80066b8 <TIM_OC2_SetConfig+0x68>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a22      	ldr	r2, [pc, #136]	; (800673c <TIM_OC2_SetConfig+0xec>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d10d      	bne.n	80066d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a18      	ldr	r2, [pc, #96]	; (8006738 <TIM_OC2_SetConfig+0xe8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_OC2_SetConfig+0x94>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a17      	ldr	r2, [pc, #92]	; (800673c <TIM_OC2_SetConfig+0xec>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d113      	bne.n	800670c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	621a      	str	r2, [r3, #32]
}
 8006726:	bf00      	nop
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	feff8fff 	.word	0xfeff8fff
 8006738:	40010000 	.word	0x40010000
 800673c:	40010400 	.word	0x40010400

08006740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4b2d      	ldr	r3, [pc, #180]	; (8006820 <TIM_OC3_SetConfig+0xe0>)
 800676c:	4013      	ands	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	021b      	lsls	r3, r3, #8
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a22      	ldr	r2, [pc, #136]	; (8006824 <TIM_OC3_SetConfig+0xe4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_OC3_SetConfig+0x66>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a21      	ldr	r2, [pc, #132]	; (8006828 <TIM_OC3_SetConfig+0xe8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d10d      	bne.n	80067c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a17      	ldr	r2, [pc, #92]	; (8006824 <TIM_OC3_SetConfig+0xe4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d003      	beq.n	80067d2 <TIM_OC3_SetConfig+0x92>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a16      	ldr	r2, [pc, #88]	; (8006828 <TIM_OC3_SetConfig+0xe8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d113      	bne.n	80067fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	621a      	str	r2, [r3, #32]
}
 8006814:	bf00      	nop
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	fffeff8f 	.word	0xfffeff8f
 8006824:	40010000 	.word	0x40010000
 8006828:	40010400 	.word	0x40010400

0800682c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4b1e      	ldr	r3, [pc, #120]	; (80068d0 <TIM_OC4_SetConfig+0xa4>)
 8006858:	4013      	ands	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	031b      	lsls	r3, r3, #12
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a13      	ldr	r2, [pc, #76]	; (80068d4 <TIM_OC4_SetConfig+0xa8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_OC4_SetConfig+0x68>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a12      	ldr	r2, [pc, #72]	; (80068d8 <TIM_OC4_SetConfig+0xac>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d109      	bne.n	80068a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800689a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	019b      	lsls	r3, r3, #6
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	feff8fff 	.word	0xfeff8fff
 80068d4:	40010000 	.word	0x40010000
 80068d8:	40010400 	.word	0x40010400

080068dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4b1b      	ldr	r3, [pc, #108]	; (8006974 <TIM_OC5_SetConfig+0x98>)
 8006908:	4013      	ands	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800691c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	041b      	lsls	r3, r3, #16
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a12      	ldr	r2, [pc, #72]	; (8006978 <TIM_OC5_SetConfig+0x9c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d003      	beq.n	800693a <TIM_OC5_SetConfig+0x5e>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a11      	ldr	r2, [pc, #68]	; (800697c <TIM_OC5_SetConfig+0xa0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d109      	bne.n	800694e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006940:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	621a      	str	r2, [r3, #32]
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	fffeff8f 	.word	0xfffeff8f
 8006978:	40010000 	.word	0x40010000
 800697c:	40010400 	.word	0x40010400

08006980 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	4b1c      	ldr	r3, [pc, #112]	; (8006a1c <TIM_OC6_SetConfig+0x9c>)
 80069ac:	4013      	ands	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	021b      	lsls	r3, r3, #8
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	051b      	lsls	r3, r3, #20
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a13      	ldr	r2, [pc, #76]	; (8006a20 <TIM_OC6_SetConfig+0xa0>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d003      	beq.n	80069e0 <TIM_OC6_SetConfig+0x60>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a12      	ldr	r2, [pc, #72]	; (8006a24 <TIM_OC6_SetConfig+0xa4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d109      	bne.n	80069f4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	029b      	lsls	r3, r3, #10
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	621a      	str	r2, [r3, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	feff8fff 	.word	0xfeff8fff
 8006a20:	40010000 	.word	0x40010000
 8006a24:	40010400 	.word	0x40010400

08006a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	f023 0201 	bic.w	r2, r3, #1
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	011b      	lsls	r3, r3, #4
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f023 030a 	bic.w	r3, r3, #10
 8006a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	621a      	str	r2, [r3, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b087      	sub	sp, #28
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f023 0210 	bic.w	r2, r3, #16
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	031b      	lsls	r3, r3, #12
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f043 0307 	orr.w	r3, r3, #7
 8006b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	609a      	str	r2, [r3, #8]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	021a      	lsls	r2, r3, #8
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	609a      	str	r2, [r3, #8]
}
 8006b50:	bf00      	nop
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 031f 	and.w	r3, r3, #31
 8006b6e:	2201      	movs	r2, #1
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1a      	ldr	r2, [r3, #32]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	401a      	ands	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1a      	ldr	r2, [r3, #32]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	fa01 f303 	lsl.w	r3, r1, r3
 8006b94:	431a      	orrs	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
	...

08006ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e06d      	b.n	8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a30      	ldr	r2, [pc, #192]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a2f      	ldr	r2, [pc, #188]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d108      	bne.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a20      	ldr	r2, [pc, #128]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d022      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c32:	d01d      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a1d      	ldr	r2, [pc, #116]	; (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d018      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1c      	ldr	r2, [pc, #112]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d013      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a1a      	ldr	r2, [pc, #104]	; (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00e      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a15      	ldr	r2, [pc, #84]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d009      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a16      	ldr	r2, [pc, #88]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d004      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a15      	ldr	r2, [pc, #84]	; (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d10c      	bne.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	40010000 	.word	0x40010000
 8006cac:	40010400 	.word	0x40010400
 8006cb0:	40000400 	.word	0x40000400
 8006cb4:	40000800 	.word	0x40000800
 8006cb8:	40000c00 	.word	0x40000c00
 8006cbc:	40014000 	.word	0x40014000
 8006cc0:	40001800 	.word	0x40001800

08006cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e040      	b.n	8006d94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d106      	bne.n	8006d28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fb f820 	bl	8001d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2224      	movs	r2, #36	; 0x24
 8006d2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fbe8 	bl	8007514 <UART_SetConfig>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e022      	b.n	8006d94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fe3e 	bl	80079d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fec5 	bl	8007b1c <UART_CheckIdleState>
 8006d92:	4603      	mov	r3, r0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b08b      	sub	sp, #44	; 0x2c
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4613      	mov	r3, r2
 8006da8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dae:	2b20      	cmp	r3, #32
 8006db0:	d156      	bne.n	8006e60 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <HAL_UART_Transmit_IT+0x22>
 8006db8:	88fb      	ldrh	r3, [r7, #6]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e04f      	b.n	8006e62 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d101      	bne.n	8006dd0 <HAL_UART_Transmit_IT+0x34>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	e048      	b.n	8006e62 <HAL_UART_Transmit_IT+0xc6>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	88fa      	ldrh	r2, [r7, #6]
 8006de2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	88fa      	ldrh	r2, [r7, #6]
 8006dea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2221      	movs	r2, #33	; 0x21
 8006e00:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e0a:	d107      	bne.n	8006e1c <HAL_UART_Transmit_IT+0x80>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4a16      	ldr	r2, [pc, #88]	; (8006e70 <HAL_UART_Transmit_IT+0xd4>)
 8006e18:	669a      	str	r2, [r3, #104]	; 0x68
 8006e1a:	e002      	b.n	8006e22 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <HAL_UART_Transmit_IT+0xd8>)
 8006e20:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	613b      	str	r3, [r7, #16]
   return(result);
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	623b      	str	r3, [r7, #32]
 8006e4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	69f9      	ldr	r1, [r7, #28]
 8006e4e:	6a3a      	ldr	r2, [r7, #32]
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e6      	bne.n	8006e2a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e000      	b.n	8006e62 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006e60:	2302      	movs	r3, #2
  }
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	372c      	adds	r7, #44	; 0x2c
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	08008075 	.word	0x08008075
 8006e74:	08007fbf 	.word	0x08007fbf

08006e78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	; 0x28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e8a:	2b20      	cmp	r3, #32
 8006e8c:	d13d      	bne.n	8006f0a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <HAL_UART_Receive_IT+0x22>
 8006e94:	88fb      	ldrh	r3, [r7, #6]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e036      	b.n	8006f0c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_UART_Receive_IT+0x34>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e02f      	b.n	8006f0c <HAL_UART_Receive_IT+0x94>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d018      	beq.n	8006efa <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	623b      	str	r3, [r7, #32]
 8006ee8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	69f9      	ldr	r1, [r7, #28]
 8006eec:	6a3a      	ldr	r2, [r7, #32]
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e6      	bne.n	8006ec8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006efa:	88fb      	ldrh	r3, [r7, #6]
 8006efc:	461a      	mov	r2, r3
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 ff19 	bl	8007d38 <UART_Start_Receive_IT>
 8006f06:	4603      	mov	r3, r0
 8006f08:	e000      	b.n	8006f0c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f0a:	2302      	movs	r3, #2
  }
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3728      	adds	r7, #40	; 0x28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b0ba      	sub	sp, #232	; 0xe8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f42:	4013      	ands	r3, r2
 8006f44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d115      	bne.n	8006f7c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00f      	beq.n	8006f7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d009      	beq.n	8006f7c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 82a4 	beq.w	80074ba <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
      }
      return;
 8006f7a:	e29e      	b.n	80074ba <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8117 	beq.w	80071b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006f92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f96:	4b85      	ldr	r3, [pc, #532]	; (80071ac <HAL_UART_IRQHandler+0x298>)
 8006f98:	4013      	ands	r3, r2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 810a 	beq.w	80071b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d011      	beq.n	8006fd0 <HAL_UART_IRQHandler+0xbc>
 8006fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc6:	f043 0201 	orr.w	r2, r3, #1
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d011      	beq.n	8007000 <HAL_UART_IRQHandler+0xec>
 8006fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2202      	movs	r2, #2
 8006fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ff6:	f043 0204 	orr.w	r2, r3, #4
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d011      	beq.n	8007030 <HAL_UART_IRQHandler+0x11c>
 800700c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2204      	movs	r2, #4
 800701e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007026:	f043 0202 	orr.w	r2, r3, #2
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007034:	f003 0308 	and.w	r3, r3, #8
 8007038:	2b00      	cmp	r3, #0
 800703a:	d017      	beq.n	800706c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800703c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	2b00      	cmp	r3, #0
 8007046:	d105      	bne.n	8007054 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800704c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00b      	beq.n	800706c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2208      	movs	r2, #8
 800705a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007062:	f043 0208 	orr.w	r2, r3, #8
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800706c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007074:	2b00      	cmp	r3, #0
 8007076:	d012      	beq.n	800709e <HAL_UART_IRQHandler+0x18a>
 8007078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800707c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00c      	beq.n	800709e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800708c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007094:	f043 0220 	orr.w	r2, r3, #32
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 820a 	beq.w	80074be <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80070aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00d      	beq.n	80070d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d007      	beq.n	80070d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e6:	2b40      	cmp	r3, #64	; 0x40
 80070e8:	d005      	beq.n	80070f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d04f      	beq.n	8007196 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fee8 	bl	8007ecc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007106:	2b40      	cmp	r3, #64	; 0x40
 8007108:	d141      	bne.n	800718e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3308      	adds	r3, #8
 8007110:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007120:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3308      	adds	r3, #8
 8007132:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007136:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800713a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007142:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800714e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1d9      	bne.n	800710a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715a:	2b00      	cmp	r3, #0
 800715c:	d013      	beq.n	8007186 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007162:	4a13      	ldr	r2, [pc, #76]	; (80071b0 <HAL_UART_IRQHandler+0x29c>)
 8007164:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716a:	4618      	mov	r0, r3
 800716c:	f7fc f820 	bl	80031b0 <HAL_DMA_Abort_IT>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d017      	beq.n	80071a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007180:	4610      	mov	r0, r2
 8007182:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007184:	e00f      	b.n	80071a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f9a4 	bl	80074d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718c:	e00b      	b.n	80071a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f9a0 	bl	80074d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007194:	e007      	b.n	80071a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f99c 	bl	80074d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80071a4:	e18b      	b.n	80074be <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a6:	bf00      	nop
    return;
 80071a8:	e189      	b.n	80074be <HAL_UART_IRQHandler+0x5aa>
 80071aa:	bf00      	nop
 80071ac:	04000120 	.word	0x04000120
 80071b0:	08007f93 	.word	0x08007f93

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	f040 8144 	bne.w	8007446 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c2:	f003 0310 	and.w	r3, r3, #16
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 813d 	beq.w	8007446 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d0:	f003 0310 	and.w	r3, r3, #16
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8136 	beq.w	8007446 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2210      	movs	r2, #16
 80071e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ec:	2b40      	cmp	r3, #64	; 0x40
 80071ee:	f040 80b2 	bne.w	8007356 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 815d 	beq.w	80074c2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800720e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007212:	429a      	cmp	r2, r3
 8007214:	f080 8155 	bcs.w	80074c2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800721e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800722c:	f000 8085 	beq.w	800733a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800724c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	461a      	mov	r2, r3
 8007256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800725a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800725e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007262:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007266:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1da      	bne.n	8007230 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3308      	adds	r3, #8
 8007280:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800728a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800728c:	f023 0301 	bic.w	r3, r3, #1
 8007290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3308      	adds	r3, #8
 800729a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800729e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e1      	bne.n	800727a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3308      	adds	r3, #8
 80072bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3308      	adds	r3, #8
 80072d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e3      	bne.n	80072b6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2220      	movs	r2, #32
 80072f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800730a:	f023 0310 	bic.w	r3, r3, #16
 800730e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800731c:	65bb      	str	r3, [r7, #88]	; 0x58
 800731e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007322:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800732a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e4      	bne.n	80072fa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007334:	4618      	mov	r0, r3
 8007336:	f7fb fecb 	bl	80030d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007346:	b29b      	uxth	r3, r3
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	b29b      	uxth	r3, r3
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f8ca 	bl	80074e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007354:	e0b5      	b.n	80074c2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007362:	b29b      	uxth	r3, r3
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 80a7 	beq.w	80074c6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8007378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 80a2 	beq.w	80074c6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	e853 3f00 	ldrex	r3, [r3]
 800738e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007392:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073a4:	647b      	str	r3, [r7, #68]	; 0x44
 80073a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e4      	bne.n	8007382 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3308      	adds	r3, #8
 80073be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	623b      	str	r3, [r7, #32]
   return(result);
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	f023 0301 	bic.w	r3, r3, #1
 80073ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3308      	adds	r3, #8
 80073d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073dc:	633a      	str	r2, [r7, #48]	; 0x30
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e3      	bne.n	80073b8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2220      	movs	r2, #32
 80073f4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0310 	bic.w	r3, r3, #16
 8007416:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	461a      	mov	r2, r3
 8007420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007424:	61fb      	str	r3, [r7, #28]
 8007426:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	69b9      	ldr	r1, [r7, #24]
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	617b      	str	r3, [r7, #20]
   return(result);
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e4      	bne.n	8007402 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f852 	bl	80074e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007444:	e03f      	b.n	80074c6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00e      	beq.n	8007470 <HAL_UART_IRQHandler+0x55c>
 8007452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d008      	beq.n	8007470 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007466:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f849 	bl	8007500 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800746e:	e02d      	b.n	80074cc <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00e      	beq.n	800749a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800747c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007484:	2b00      	cmp	r3, #0
 8007486:	d008      	beq.n	800749a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01c      	beq.n	80074ca <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
    }
    return;
 8007498:	e017      	b.n	80074ca <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800749a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d012      	beq.n	80074cc <HAL_UART_IRQHandler+0x5b8>
 80074a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00c      	beq.n	80074cc <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fe3e 	bl	8008134 <UART_EndTransmit_IT>
    return;
 80074b8:	e008      	b.n	80074cc <HAL_UART_IRQHandler+0x5b8>
      return;
 80074ba:	bf00      	nop
 80074bc:	e006      	b.n	80074cc <HAL_UART_IRQHandler+0x5b8>
    return;
 80074be:	bf00      	nop
 80074c0:	e004      	b.n	80074cc <HAL_UART_IRQHandler+0x5b8>
      return;
 80074c2:	bf00      	nop
 80074c4:	e002      	b.n	80074cc <HAL_UART_IRQHandler+0x5b8>
      return;
 80074c6:	bf00      	nop
 80074c8:	e000      	b.n	80074cc <HAL_UART_IRQHandler+0x5b8>
    return;
 80074ca:	bf00      	nop
  }

}
 80074cc:	37e8      	adds	r7, #232	; 0xe8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop

080074d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	431a      	orrs	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	4313      	orrs	r3, r2
 8007536:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4ba7      	ldr	r3, [pc, #668]	; (80077dc <UART_SetConfig+0x2c8>)
 8007540:	4013      	ands	r3, r2
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	6979      	ldr	r1, [r7, #20]
 8007548:	430b      	orrs	r3, r1
 800754a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	4313      	orrs	r3, r2
 8007570:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	430a      	orrs	r2, r1
 8007584:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a95      	ldr	r2, [pc, #596]	; (80077e0 <UART_SetConfig+0x2cc>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d120      	bne.n	80075d2 <UART_SetConfig+0xbe>
 8007590:	4b94      	ldr	r3, [pc, #592]	; (80077e4 <UART_SetConfig+0x2d0>)
 8007592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007596:	f003 0303 	and.w	r3, r3, #3
 800759a:	2b03      	cmp	r3, #3
 800759c:	d816      	bhi.n	80075cc <UART_SetConfig+0xb8>
 800759e:	a201      	add	r2, pc, #4	; (adr r2, 80075a4 <UART_SetConfig+0x90>)
 80075a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a4:	080075b5 	.word	0x080075b5
 80075a8:	080075c1 	.word	0x080075c1
 80075ac:	080075bb 	.word	0x080075bb
 80075b0:	080075c7 	.word	0x080075c7
 80075b4:	2301      	movs	r3, #1
 80075b6:	77fb      	strb	r3, [r7, #31]
 80075b8:	e14f      	b.n	800785a <UART_SetConfig+0x346>
 80075ba:	2302      	movs	r3, #2
 80075bc:	77fb      	strb	r3, [r7, #31]
 80075be:	e14c      	b.n	800785a <UART_SetConfig+0x346>
 80075c0:	2304      	movs	r3, #4
 80075c2:	77fb      	strb	r3, [r7, #31]
 80075c4:	e149      	b.n	800785a <UART_SetConfig+0x346>
 80075c6:	2308      	movs	r3, #8
 80075c8:	77fb      	strb	r3, [r7, #31]
 80075ca:	e146      	b.n	800785a <UART_SetConfig+0x346>
 80075cc:	2310      	movs	r3, #16
 80075ce:	77fb      	strb	r3, [r7, #31]
 80075d0:	e143      	b.n	800785a <UART_SetConfig+0x346>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a84      	ldr	r2, [pc, #528]	; (80077e8 <UART_SetConfig+0x2d4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d132      	bne.n	8007642 <UART_SetConfig+0x12e>
 80075dc:	4b81      	ldr	r3, [pc, #516]	; (80077e4 <UART_SetConfig+0x2d0>)
 80075de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e2:	f003 030c 	and.w	r3, r3, #12
 80075e6:	2b0c      	cmp	r3, #12
 80075e8:	d828      	bhi.n	800763c <UART_SetConfig+0x128>
 80075ea:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <UART_SetConfig+0xdc>)
 80075ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f0:	08007625 	.word	0x08007625
 80075f4:	0800763d 	.word	0x0800763d
 80075f8:	0800763d 	.word	0x0800763d
 80075fc:	0800763d 	.word	0x0800763d
 8007600:	08007631 	.word	0x08007631
 8007604:	0800763d 	.word	0x0800763d
 8007608:	0800763d 	.word	0x0800763d
 800760c:	0800763d 	.word	0x0800763d
 8007610:	0800762b 	.word	0x0800762b
 8007614:	0800763d 	.word	0x0800763d
 8007618:	0800763d 	.word	0x0800763d
 800761c:	0800763d 	.word	0x0800763d
 8007620:	08007637 	.word	0x08007637
 8007624:	2300      	movs	r3, #0
 8007626:	77fb      	strb	r3, [r7, #31]
 8007628:	e117      	b.n	800785a <UART_SetConfig+0x346>
 800762a:	2302      	movs	r3, #2
 800762c:	77fb      	strb	r3, [r7, #31]
 800762e:	e114      	b.n	800785a <UART_SetConfig+0x346>
 8007630:	2304      	movs	r3, #4
 8007632:	77fb      	strb	r3, [r7, #31]
 8007634:	e111      	b.n	800785a <UART_SetConfig+0x346>
 8007636:	2308      	movs	r3, #8
 8007638:	77fb      	strb	r3, [r7, #31]
 800763a:	e10e      	b.n	800785a <UART_SetConfig+0x346>
 800763c:	2310      	movs	r3, #16
 800763e:	77fb      	strb	r3, [r7, #31]
 8007640:	e10b      	b.n	800785a <UART_SetConfig+0x346>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a69      	ldr	r2, [pc, #420]	; (80077ec <UART_SetConfig+0x2d8>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d120      	bne.n	800768e <UART_SetConfig+0x17a>
 800764c:	4b65      	ldr	r3, [pc, #404]	; (80077e4 <UART_SetConfig+0x2d0>)
 800764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007652:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007656:	2b30      	cmp	r3, #48	; 0x30
 8007658:	d013      	beq.n	8007682 <UART_SetConfig+0x16e>
 800765a:	2b30      	cmp	r3, #48	; 0x30
 800765c:	d814      	bhi.n	8007688 <UART_SetConfig+0x174>
 800765e:	2b20      	cmp	r3, #32
 8007660:	d009      	beq.n	8007676 <UART_SetConfig+0x162>
 8007662:	2b20      	cmp	r3, #32
 8007664:	d810      	bhi.n	8007688 <UART_SetConfig+0x174>
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <UART_SetConfig+0x15c>
 800766a:	2b10      	cmp	r3, #16
 800766c:	d006      	beq.n	800767c <UART_SetConfig+0x168>
 800766e:	e00b      	b.n	8007688 <UART_SetConfig+0x174>
 8007670:	2300      	movs	r3, #0
 8007672:	77fb      	strb	r3, [r7, #31]
 8007674:	e0f1      	b.n	800785a <UART_SetConfig+0x346>
 8007676:	2302      	movs	r3, #2
 8007678:	77fb      	strb	r3, [r7, #31]
 800767a:	e0ee      	b.n	800785a <UART_SetConfig+0x346>
 800767c:	2304      	movs	r3, #4
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	e0eb      	b.n	800785a <UART_SetConfig+0x346>
 8007682:	2308      	movs	r3, #8
 8007684:	77fb      	strb	r3, [r7, #31]
 8007686:	e0e8      	b.n	800785a <UART_SetConfig+0x346>
 8007688:	2310      	movs	r3, #16
 800768a:	77fb      	strb	r3, [r7, #31]
 800768c:	e0e5      	b.n	800785a <UART_SetConfig+0x346>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a57      	ldr	r2, [pc, #348]	; (80077f0 <UART_SetConfig+0x2dc>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d120      	bne.n	80076da <UART_SetConfig+0x1c6>
 8007698:	4b52      	ldr	r3, [pc, #328]	; (80077e4 <UART_SetConfig+0x2d0>)
 800769a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076a2:	2bc0      	cmp	r3, #192	; 0xc0
 80076a4:	d013      	beq.n	80076ce <UART_SetConfig+0x1ba>
 80076a6:	2bc0      	cmp	r3, #192	; 0xc0
 80076a8:	d814      	bhi.n	80076d4 <UART_SetConfig+0x1c0>
 80076aa:	2b80      	cmp	r3, #128	; 0x80
 80076ac:	d009      	beq.n	80076c2 <UART_SetConfig+0x1ae>
 80076ae:	2b80      	cmp	r3, #128	; 0x80
 80076b0:	d810      	bhi.n	80076d4 <UART_SetConfig+0x1c0>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <UART_SetConfig+0x1a8>
 80076b6:	2b40      	cmp	r3, #64	; 0x40
 80076b8:	d006      	beq.n	80076c8 <UART_SetConfig+0x1b4>
 80076ba:	e00b      	b.n	80076d4 <UART_SetConfig+0x1c0>
 80076bc:	2300      	movs	r3, #0
 80076be:	77fb      	strb	r3, [r7, #31]
 80076c0:	e0cb      	b.n	800785a <UART_SetConfig+0x346>
 80076c2:	2302      	movs	r3, #2
 80076c4:	77fb      	strb	r3, [r7, #31]
 80076c6:	e0c8      	b.n	800785a <UART_SetConfig+0x346>
 80076c8:	2304      	movs	r3, #4
 80076ca:	77fb      	strb	r3, [r7, #31]
 80076cc:	e0c5      	b.n	800785a <UART_SetConfig+0x346>
 80076ce:	2308      	movs	r3, #8
 80076d0:	77fb      	strb	r3, [r7, #31]
 80076d2:	e0c2      	b.n	800785a <UART_SetConfig+0x346>
 80076d4:	2310      	movs	r3, #16
 80076d6:	77fb      	strb	r3, [r7, #31]
 80076d8:	e0bf      	b.n	800785a <UART_SetConfig+0x346>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a45      	ldr	r2, [pc, #276]	; (80077f4 <UART_SetConfig+0x2e0>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d125      	bne.n	8007730 <UART_SetConfig+0x21c>
 80076e4:	4b3f      	ldr	r3, [pc, #252]	; (80077e4 <UART_SetConfig+0x2d0>)
 80076e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076f2:	d017      	beq.n	8007724 <UART_SetConfig+0x210>
 80076f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076f8:	d817      	bhi.n	800772a <UART_SetConfig+0x216>
 80076fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076fe:	d00b      	beq.n	8007718 <UART_SetConfig+0x204>
 8007700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007704:	d811      	bhi.n	800772a <UART_SetConfig+0x216>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <UART_SetConfig+0x1fe>
 800770a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770e:	d006      	beq.n	800771e <UART_SetConfig+0x20a>
 8007710:	e00b      	b.n	800772a <UART_SetConfig+0x216>
 8007712:	2300      	movs	r3, #0
 8007714:	77fb      	strb	r3, [r7, #31]
 8007716:	e0a0      	b.n	800785a <UART_SetConfig+0x346>
 8007718:	2302      	movs	r3, #2
 800771a:	77fb      	strb	r3, [r7, #31]
 800771c:	e09d      	b.n	800785a <UART_SetConfig+0x346>
 800771e:	2304      	movs	r3, #4
 8007720:	77fb      	strb	r3, [r7, #31]
 8007722:	e09a      	b.n	800785a <UART_SetConfig+0x346>
 8007724:	2308      	movs	r3, #8
 8007726:	77fb      	strb	r3, [r7, #31]
 8007728:	e097      	b.n	800785a <UART_SetConfig+0x346>
 800772a:	2310      	movs	r3, #16
 800772c:	77fb      	strb	r3, [r7, #31]
 800772e:	e094      	b.n	800785a <UART_SetConfig+0x346>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a30      	ldr	r2, [pc, #192]	; (80077f8 <UART_SetConfig+0x2e4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d125      	bne.n	8007786 <UART_SetConfig+0x272>
 800773a:	4b2a      	ldr	r3, [pc, #168]	; (80077e4 <UART_SetConfig+0x2d0>)
 800773c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007740:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007744:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007748:	d017      	beq.n	800777a <UART_SetConfig+0x266>
 800774a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800774e:	d817      	bhi.n	8007780 <UART_SetConfig+0x26c>
 8007750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007754:	d00b      	beq.n	800776e <UART_SetConfig+0x25a>
 8007756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800775a:	d811      	bhi.n	8007780 <UART_SetConfig+0x26c>
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <UART_SetConfig+0x254>
 8007760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007764:	d006      	beq.n	8007774 <UART_SetConfig+0x260>
 8007766:	e00b      	b.n	8007780 <UART_SetConfig+0x26c>
 8007768:	2301      	movs	r3, #1
 800776a:	77fb      	strb	r3, [r7, #31]
 800776c:	e075      	b.n	800785a <UART_SetConfig+0x346>
 800776e:	2302      	movs	r3, #2
 8007770:	77fb      	strb	r3, [r7, #31]
 8007772:	e072      	b.n	800785a <UART_SetConfig+0x346>
 8007774:	2304      	movs	r3, #4
 8007776:	77fb      	strb	r3, [r7, #31]
 8007778:	e06f      	b.n	800785a <UART_SetConfig+0x346>
 800777a:	2308      	movs	r3, #8
 800777c:	77fb      	strb	r3, [r7, #31]
 800777e:	e06c      	b.n	800785a <UART_SetConfig+0x346>
 8007780:	2310      	movs	r3, #16
 8007782:	77fb      	strb	r3, [r7, #31]
 8007784:	e069      	b.n	800785a <UART_SetConfig+0x346>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a1c      	ldr	r2, [pc, #112]	; (80077fc <UART_SetConfig+0x2e8>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d137      	bne.n	8007800 <UART_SetConfig+0x2ec>
 8007790:	4b14      	ldr	r3, [pc, #80]	; (80077e4 <UART_SetConfig+0x2d0>)
 8007792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007796:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800779a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800779e:	d017      	beq.n	80077d0 <UART_SetConfig+0x2bc>
 80077a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077a4:	d817      	bhi.n	80077d6 <UART_SetConfig+0x2c2>
 80077a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077aa:	d00b      	beq.n	80077c4 <UART_SetConfig+0x2b0>
 80077ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b0:	d811      	bhi.n	80077d6 <UART_SetConfig+0x2c2>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <UART_SetConfig+0x2aa>
 80077b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ba:	d006      	beq.n	80077ca <UART_SetConfig+0x2b6>
 80077bc:	e00b      	b.n	80077d6 <UART_SetConfig+0x2c2>
 80077be:	2300      	movs	r3, #0
 80077c0:	77fb      	strb	r3, [r7, #31]
 80077c2:	e04a      	b.n	800785a <UART_SetConfig+0x346>
 80077c4:	2302      	movs	r3, #2
 80077c6:	77fb      	strb	r3, [r7, #31]
 80077c8:	e047      	b.n	800785a <UART_SetConfig+0x346>
 80077ca:	2304      	movs	r3, #4
 80077cc:	77fb      	strb	r3, [r7, #31]
 80077ce:	e044      	b.n	800785a <UART_SetConfig+0x346>
 80077d0:	2308      	movs	r3, #8
 80077d2:	77fb      	strb	r3, [r7, #31]
 80077d4:	e041      	b.n	800785a <UART_SetConfig+0x346>
 80077d6:	2310      	movs	r3, #16
 80077d8:	77fb      	strb	r3, [r7, #31]
 80077da:	e03e      	b.n	800785a <UART_SetConfig+0x346>
 80077dc:	efff69f3 	.word	0xefff69f3
 80077e0:	40011000 	.word	0x40011000
 80077e4:	40023800 	.word	0x40023800
 80077e8:	40004400 	.word	0x40004400
 80077ec:	40004800 	.word	0x40004800
 80077f0:	40004c00 	.word	0x40004c00
 80077f4:	40005000 	.word	0x40005000
 80077f8:	40011400 	.word	0x40011400
 80077fc:	40007800 	.word	0x40007800
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a71      	ldr	r2, [pc, #452]	; (80079cc <UART_SetConfig+0x4b8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d125      	bne.n	8007856 <UART_SetConfig+0x342>
 800780a:	4b71      	ldr	r3, [pc, #452]	; (80079d0 <UART_SetConfig+0x4bc>)
 800780c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007814:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007818:	d017      	beq.n	800784a <UART_SetConfig+0x336>
 800781a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800781e:	d817      	bhi.n	8007850 <UART_SetConfig+0x33c>
 8007820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007824:	d00b      	beq.n	800783e <UART_SetConfig+0x32a>
 8007826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800782a:	d811      	bhi.n	8007850 <UART_SetConfig+0x33c>
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <UART_SetConfig+0x324>
 8007830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007834:	d006      	beq.n	8007844 <UART_SetConfig+0x330>
 8007836:	e00b      	b.n	8007850 <UART_SetConfig+0x33c>
 8007838:	2300      	movs	r3, #0
 800783a:	77fb      	strb	r3, [r7, #31]
 800783c:	e00d      	b.n	800785a <UART_SetConfig+0x346>
 800783e:	2302      	movs	r3, #2
 8007840:	77fb      	strb	r3, [r7, #31]
 8007842:	e00a      	b.n	800785a <UART_SetConfig+0x346>
 8007844:	2304      	movs	r3, #4
 8007846:	77fb      	strb	r3, [r7, #31]
 8007848:	e007      	b.n	800785a <UART_SetConfig+0x346>
 800784a:	2308      	movs	r3, #8
 800784c:	77fb      	strb	r3, [r7, #31]
 800784e:	e004      	b.n	800785a <UART_SetConfig+0x346>
 8007850:	2310      	movs	r3, #16
 8007852:	77fb      	strb	r3, [r7, #31]
 8007854:	e001      	b.n	800785a <UART_SetConfig+0x346>
 8007856:	2310      	movs	r3, #16
 8007858:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007862:	d15a      	bne.n	800791a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007864:	7ffb      	ldrb	r3, [r7, #31]
 8007866:	2b08      	cmp	r3, #8
 8007868:	d827      	bhi.n	80078ba <UART_SetConfig+0x3a6>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <UART_SetConfig+0x35c>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	08007895 	.word	0x08007895
 8007874:	0800789d 	.word	0x0800789d
 8007878:	080078a5 	.word	0x080078a5
 800787c:	080078bb 	.word	0x080078bb
 8007880:	080078ab 	.word	0x080078ab
 8007884:	080078bb 	.word	0x080078bb
 8007888:	080078bb 	.word	0x080078bb
 800788c:	080078bb 	.word	0x080078bb
 8007890:	080078b3 	.word	0x080078b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007894:	f7fd f84c 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8007898:	61b8      	str	r0, [r7, #24]
        break;
 800789a:	e013      	b.n	80078c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800789c:	f7fd f85c 	bl	8004958 <HAL_RCC_GetPCLK2Freq>
 80078a0:	61b8      	str	r0, [r7, #24]
        break;
 80078a2:	e00f      	b.n	80078c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078a4:	4b4b      	ldr	r3, [pc, #300]	; (80079d4 <UART_SetConfig+0x4c0>)
 80078a6:	61bb      	str	r3, [r7, #24]
        break;
 80078a8:	e00c      	b.n	80078c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078aa:	f7fc ff7f 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 80078ae:	61b8      	str	r0, [r7, #24]
        break;
 80078b0:	e008      	b.n	80078c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078b6:	61bb      	str	r3, [r7, #24]
        break;
 80078b8:	e004      	b.n	80078c4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	77bb      	strb	r3, [r7, #30]
        break;
 80078c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d074      	beq.n	80079b4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	005a      	lsls	r2, r3, #1
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	085b      	lsrs	r3, r3, #1
 80078d4:	441a      	add	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	fbb2 f3f3 	udiv	r3, r2, r3
 80078de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	2b0f      	cmp	r3, #15
 80078e4:	d916      	bls.n	8007914 <UART_SetConfig+0x400>
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ec:	d212      	bcs.n	8007914 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	f023 030f 	bic.w	r3, r3, #15
 80078f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	b29a      	uxth	r2, r3
 8007904:	89fb      	ldrh	r3, [r7, #14]
 8007906:	4313      	orrs	r3, r2
 8007908:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	89fa      	ldrh	r2, [r7, #14]
 8007910:	60da      	str	r2, [r3, #12]
 8007912:	e04f      	b.n	80079b4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	77bb      	strb	r3, [r7, #30]
 8007918:	e04c      	b.n	80079b4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800791a:	7ffb      	ldrb	r3, [r7, #31]
 800791c:	2b08      	cmp	r3, #8
 800791e:	d828      	bhi.n	8007972 <UART_SetConfig+0x45e>
 8007920:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <UART_SetConfig+0x414>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	0800794d 	.word	0x0800794d
 800792c:	08007955 	.word	0x08007955
 8007930:	0800795d 	.word	0x0800795d
 8007934:	08007973 	.word	0x08007973
 8007938:	08007963 	.word	0x08007963
 800793c:	08007973 	.word	0x08007973
 8007940:	08007973 	.word	0x08007973
 8007944:	08007973 	.word	0x08007973
 8007948:	0800796b 	.word	0x0800796b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800794c:	f7fc fff0 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8007950:	61b8      	str	r0, [r7, #24]
        break;
 8007952:	e013      	b.n	800797c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007954:	f7fd f800 	bl	8004958 <HAL_RCC_GetPCLK2Freq>
 8007958:	61b8      	str	r0, [r7, #24]
        break;
 800795a:	e00f      	b.n	800797c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800795c:	4b1d      	ldr	r3, [pc, #116]	; (80079d4 <UART_SetConfig+0x4c0>)
 800795e:	61bb      	str	r3, [r7, #24]
        break;
 8007960:	e00c      	b.n	800797c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007962:	f7fc ff23 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 8007966:	61b8      	str	r0, [r7, #24]
        break;
 8007968:	e008      	b.n	800797c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800796a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800796e:	61bb      	str	r3, [r7, #24]
        break;
 8007970:	e004      	b.n	800797c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	77bb      	strb	r3, [r7, #30]
        break;
 800797a:	bf00      	nop
    }

    if (pclk != 0U)
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d018      	beq.n	80079b4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	085a      	lsrs	r2, r3, #1
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	441a      	add	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	fbb2 f3f3 	udiv	r3, r2, r3
 8007994:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2b0f      	cmp	r3, #15
 800799a:	d909      	bls.n	80079b0 <UART_SetConfig+0x49c>
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a2:	d205      	bcs.n	80079b0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	60da      	str	r2, [r3, #12]
 80079ae:	e001      	b.n	80079b4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80079c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3720      	adds	r7, #32
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	40007c00 	.word	0x40007c00
 80079d0:	40023800 	.word	0x40023800
 80079d4:	00f42400 	.word	0x00f42400

080079d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00a      	beq.n	8007a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a28:	f003 0304 	and.w	r3, r3, #4
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00a      	beq.n	8007a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	430a      	orrs	r2, r1
 8007a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	f003 0310 	and.w	r3, r3, #16
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00a      	beq.n	8007a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00a      	beq.n	8007aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01a      	beq.n	8007aee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ad6:	d10a      	bne.n	8007aee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	605a      	str	r2, [r3, #4]
  }
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b2c:	f7fa fb38 	bl	80021a0 <HAL_GetTick>
 8007b30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0308 	and.w	r3, r3, #8
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d10e      	bne.n	8007b5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f82d 	bl	8007bae <UART_WaitOnFlagUntilTimeout>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e023      	b.n	8007ba6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d10e      	bne.n	8007b8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f817 	bl	8007bae <UART_WaitOnFlagUntilTimeout>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e00d      	b.n	8007ba6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2220      	movs	r2, #32
 8007b94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b09c      	sub	sp, #112	; 0x70
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	603b      	str	r3, [r7, #0]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bbe:	e0a5      	b.n	8007d0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc6:	f000 80a1 	beq.w	8007d0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bca:	f7fa fae9 	bl	80021a0 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d302      	bcc.n	8007be0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d13e      	bne.n	8007c5e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e6      	bne.n	8007be0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3308      	adds	r3, #8
 8007c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	f023 0301 	bic.w	r3, r3, #1
 8007c28:	663b      	str	r3, [r7, #96]	; 0x60
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c32:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e5      	bne.n	8007c12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e067      	b.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d04f      	beq.n	8007d0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c7a:	d147      	bne.n	8007d0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e6      	bne.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	e853 3f00 	ldrex	r3, [r3]
 8007cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f023 0301 	bic.w	r3, r3, #1
 8007cce:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cd8:	623a      	str	r2, [r7, #32]
 8007cda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	69f9      	ldr	r1, [r7, #28]
 8007cde:	6a3a      	ldr	r2, [r7, #32]
 8007ce0:	e841 2300 	strex	r3, r2, [r1]
 8007ce4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e5      	bne.n	8007cb8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e010      	b.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	69da      	ldr	r2, [r3, #28]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	4013      	ands	r3, r2
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	bf0c      	ite	eq
 8007d1c:	2301      	moveq	r3, #1
 8007d1e:	2300      	movne	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	461a      	mov	r2, r3
 8007d24:	79fb      	ldrb	r3, [r7, #7]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	f43f af4a 	beq.w	8007bc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3770      	adds	r7, #112	; 0x70
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b097      	sub	sp, #92	; 0x5c
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	4613      	mov	r3, r2
 8007d44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	88fa      	ldrh	r2, [r7, #6]
 8007d58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6a:	d10e      	bne.n	8007d8a <UART_Start_Receive_IT+0x52>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d105      	bne.n	8007d80 <UART_Start_Receive_IT+0x48>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d7e:	e02d      	b.n	8007ddc <UART_Start_Receive_IT+0xa4>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	22ff      	movs	r2, #255	; 0xff
 8007d84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d88:	e028      	b.n	8007ddc <UART_Start_Receive_IT+0xa4>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10d      	bne.n	8007dae <UART_Start_Receive_IT+0x76>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d104      	bne.n	8007da4 <UART_Start_Receive_IT+0x6c>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	22ff      	movs	r2, #255	; 0xff
 8007d9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007da2:	e01b      	b.n	8007ddc <UART_Start_Receive_IT+0xa4>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	227f      	movs	r2, #127	; 0x7f
 8007da8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dac:	e016      	b.n	8007ddc <UART_Start_Receive_IT+0xa4>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007db6:	d10d      	bne.n	8007dd4 <UART_Start_Receive_IT+0x9c>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d104      	bne.n	8007dca <UART_Start_Receive_IT+0x92>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	227f      	movs	r2, #127	; 0x7f
 8007dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dc8:	e008      	b.n	8007ddc <UART_Start_Receive_IT+0xa4>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	223f      	movs	r2, #63	; 0x3f
 8007dce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dd2:	e003      	b.n	8007ddc <UART_Start_Receive_IT+0xa4>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2222      	movs	r2, #34	; 0x22
 8007de8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3308      	adds	r3, #8
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	f043 0301 	orr.w	r3, r3, #1
 8007e00:	657b      	str	r3, [r7, #84]	; 0x54
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3308      	adds	r3, #8
 8007e08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e5      	bne.n	8007dea <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e26:	d107      	bne.n	8007e38 <UART_Start_Receive_IT+0x100>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d103      	bne.n	8007e38 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4a24      	ldr	r2, [pc, #144]	; (8007ec4 <UART_Start_Receive_IT+0x18c>)
 8007e34:	665a      	str	r2, [r3, #100]	; 0x64
 8007e36:	e002      	b.n	8007e3e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4a23      	ldr	r2, [pc, #140]	; (8007ec8 <UART_Start_Receive_IT+0x190>)
 8007e3c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d019      	beq.n	8007e82 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e6      	bne.n	8007e4e <UART_Start_Receive_IT+0x116>
 8007e80:	e018      	b.n	8007eb4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f043 0320 	orr.w	r3, r3, #32
 8007e96:	653b      	str	r3, [r7, #80]	; 0x50
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ea0:	623b      	str	r3, [r7, #32]
 8007ea2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	69f9      	ldr	r1, [r7, #28]
 8007ea6:	6a3a      	ldr	r2, [r7, #32]
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e6      	bne.n	8007e82 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	375c      	adds	r7, #92	; 0x5c
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	080082e5 	.word	0x080082e5
 8007ec8:	08008189 	.word	0x08008189

08007ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b095      	sub	sp, #84	; 0x54
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ef8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007efa:	e841 2300 	strex	r3, r2, [r1]
 8007efe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e6      	bne.n	8007ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	f023 0301 	bic.w	r3, r3, #1
 8007f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3308      	adds	r3, #8
 8007f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e5      	bne.n	8007f06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d118      	bne.n	8007f74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f023 0310 	bic.w	r3, r3, #16
 8007f56:	647b      	str	r3, [r7, #68]	; 0x44
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f60:	61bb      	str	r3, [r7, #24]
 8007f62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f64:	6979      	ldr	r1, [r7, #20]
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	e841 2300 	strex	r3, r2, [r1]
 8007f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e6      	bne.n	8007f42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007f86:	bf00      	nop
 8007f88:	3754      	adds	r7, #84	; 0x54
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f7ff fa8f 	bl	80074d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fb6:	bf00      	nop
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b08f      	sub	sp, #60	; 0x3c
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fca:	2b21      	cmp	r3, #33	; 0x21
 8007fcc:	d14c      	bne.n	8008068 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d132      	bne.n	8008040 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fee:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ffa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008000:	e841 2300 	strex	r3, r2, [r1]
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e6      	bne.n	8007fda <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	60bb      	str	r3, [r7, #8]
   return(result);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008020:	633b      	str	r3, [r7, #48]	; 0x30
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	61bb      	str	r3, [r7, #24]
 800802c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6979      	ldr	r1, [r7, #20]
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	613b      	str	r3, [r7, #16]
   return(result);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e6      	bne.n	800800c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800803e:	e013      	b.n	8008068 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008044:	781a      	ldrb	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800805c:	b29b      	uxth	r3, r3
 800805e:	3b01      	subs	r3, #1
 8008060:	b29a      	uxth	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008068:	bf00      	nop
 800806a:	373c      	adds	r7, #60	; 0x3c
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008074:	b480      	push	{r7}
 8008076:	b091      	sub	sp, #68	; 0x44
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008080:	2b21      	cmp	r3, #33	; 0x21
 8008082:	d151      	bne.n	8008128 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800808a:	b29b      	uxth	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d132      	bne.n	80080f6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	623b      	str	r3, [r7, #32]
   return(result);
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	633b      	str	r3, [r7, #48]	; 0x30
 80080b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b6:	e841 2300 	strex	r3, r2, [r1]
 80080ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1e6      	bne.n	8008090 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080d6:	637b      	str	r3, [r7, #52]	; 0x34
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e0:	61fb      	str	r3, [r7, #28]
 80080e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	69b9      	ldr	r1, [r7, #24]
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	617b      	str	r3, [r7, #20]
   return(result);
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e6      	bne.n	80080c2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80080f4:	e018      	b.n	8008128 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80080fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800810a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008110:	1c9a      	adds	r2, r3, #2
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800811c:	b29b      	uxth	r3, r3
 800811e:	3b01      	subs	r3, #1
 8008120:	b29a      	uxth	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008128:	bf00      	nop
 800812a:	3744      	adds	r7, #68	; 0x44
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	60bb      	str	r3, [r7, #8]
   return(result);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008150:	61fb      	str	r3, [r7, #28]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	61bb      	str	r3, [r7, #24]
 800815c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	6979      	ldr	r1, [r7, #20]
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	613b      	str	r3, [r7, #16]
   return(result);
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e6      	bne.n	800813c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7f8 fbec 	bl	8000958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008180:	bf00      	nop
 8008182:	3720      	adds	r7, #32
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b096      	sub	sp, #88	; 0x58
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008196:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800819e:	2b22      	cmp	r3, #34	; 0x22
 80081a0:	f040 8094 	bne.w	80082cc <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081ae:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80081b2:	b2d9      	uxtb	r1, r3
 80081b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081be:	400a      	ands	r2, r1
 80081c0:	b2d2      	uxtb	r2, r2
 80081c2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d177      	bne.n	80082dc <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008200:	653b      	str	r3, [r7, #80]	; 0x50
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800820a:	647b      	str	r3, [r7, #68]	; 0x44
 800820c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e6      	bne.n	80081ec <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3308      	adds	r3, #8
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	623b      	str	r3, [r7, #32]
   return(result);
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	f023 0301 	bic.w	r3, r3, #1
 8008234:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3308      	adds	r3, #8
 800823c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800823e:	633a      	str	r2, [r7, #48]	; 0x30
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e5      	bne.n	800821e <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2220      	movs	r2, #32
 8008256:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008262:	2b01      	cmp	r3, #1
 8008264:	d12e      	bne.n	80082c4 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	60fb      	str	r3, [r7, #12]
   return(result);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f023 0310 	bic.w	r3, r3, #16
 8008280:	64bb      	str	r3, [r7, #72]	; 0x48
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	461a      	mov	r2, r3
 8008288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800828a:	61fb      	str	r3, [r7, #28]
 800828c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	69b9      	ldr	r1, [r7, #24]
 8008290:	69fa      	ldr	r2, [r7, #28]
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	617b      	str	r3, [r7, #20]
   return(result);
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e6      	bne.n	800826c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	f003 0310 	and.w	r3, r3, #16
 80082a8:	2b10      	cmp	r3, #16
 80082aa:	d103      	bne.n	80082b4 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2210      	movs	r2, #16
 80082b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff f913 	bl	80074e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082c2:	e00b      	b.n	80082dc <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7f8 faff 	bl	80008c8 <HAL_UART_RxCpltCallback>
}
 80082ca:	e007      	b.n	80082dc <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699a      	ldr	r2, [r3, #24]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f042 0208 	orr.w	r2, r2, #8
 80082da:	619a      	str	r2, [r3, #24]
}
 80082dc:	bf00      	nop
 80082de:	3758      	adds	r7, #88	; 0x58
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b096      	sub	sp, #88	; 0x58
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082f2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082fa:	2b22      	cmp	r3, #34	; 0x22
 80082fc:	f040 8094 	bne.w	8008428 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008310:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008314:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008318:	4013      	ands	r3, r2
 800831a:	b29a      	uxth	r2, r3
 800831c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800831e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008324:	1c9a      	adds	r2, r3, #2
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008330:	b29b      	uxth	r3, r3
 8008332:	3b01      	subs	r3, #1
 8008334:	b29a      	uxth	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008342:	b29b      	uxth	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	d177      	bne.n	8008438 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800835c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008366:	643b      	str	r3, [r7, #64]	; 0x40
 8008368:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800836c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e6      	bne.n	8008348 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3308      	adds	r3, #8
 8008380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	61fb      	str	r3, [r7, #28]
   return(result);
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	f023 0301 	bic.w	r3, r3, #1
 8008390:	64bb      	str	r3, [r7, #72]	; 0x48
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3308      	adds	r3, #8
 8008398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800839a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800839c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e5      	bne.n	800837a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2220      	movs	r2, #32
 80083b2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d12e      	bne.n	8008420 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	e853 3f00 	ldrex	r3, [r3]
 80083d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f023 0310 	bic.w	r3, r3, #16
 80083dc:	647b      	str	r3, [r7, #68]	; 0x44
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e6:	61bb      	str	r3, [r7, #24]
 80083e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ea:	6979      	ldr	r1, [r7, #20]
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	e841 2300 	strex	r3, r2, [r1]
 80083f2:	613b      	str	r3, [r7, #16]
   return(result);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1e6      	bne.n	80083c8 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	f003 0310 	and.w	r3, r3, #16
 8008404:	2b10      	cmp	r3, #16
 8008406:	d103      	bne.n	8008410 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2210      	movs	r2, #16
 800840e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff f865 	bl	80074e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800841e:	e00b      	b.n	8008438 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7f8 fa51 	bl	80008c8 <HAL_UART_RxCpltCallback>
}
 8008426:	e007      	b.n	8008438 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0208 	orr.w	r2, r2, #8
 8008436:	619a      	str	r2, [r3, #24]
}
 8008438:	bf00      	nop
 800843a:	3758      	adds	r7, #88	; 0x58
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <get_paramAddrTable>:

s_FBTable fbTable; //table holding function blocks
s_FBTable* get_fbTable(){return &fbTable;}

s_Param paramAddrTable; //parameters pointing function block in/out arguments
s_Param* get_paramAddrTable(){return &paramAddrTable;}
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
 8008444:	4b02      	ldr	r3, [pc, #8]	; (8008450 <get_paramAddrTable+0x10>)
 8008446:	4618      	mov	r0, r3
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	200004a0 	.word	0x200004a0

08008454 <writeToFBTable>:
}
*/

//general functions

uint8_t writeToFBTable(void* callback, uint8_t startParamIndex){
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
	uint8_t fb_index = fbTable.length;
 8008460:	4b0d      	ldr	r3, [pc, #52]	; (8008498 <writeToFBTable+0x44>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	73fb      	strb	r3, [r7, #15]
	fbTable.fb[fb_index].callback = callback;
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	490b      	ldr	r1, [pc, #44]	; (8008498 <writeToFBTable+0x44>)
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	440b      	add	r3, r1
 8008470:	609a      	str	r2, [r3, #8]
	fbTable.fb[fb_index].param_start_index = startParamIndex;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	4a08      	ldr	r2, [pc, #32]	; (8008498 <writeToFBTable+0x44>)
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	4413      	add	r3, r2
 800847a:	78fa      	ldrb	r2, [r7, #3]
 800847c:	711a      	strb	r2, [r3, #4]
	fbTable.length++;
 800847e:	4b06      	ldr	r3, [pc, #24]	; (8008498 <writeToFBTable+0x44>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	3301      	adds	r3, #1
 8008484:	b2da      	uxtb	r2, r3
 8008486:	4b04      	ldr	r3, [pc, #16]	; (8008498 <writeToFBTable+0x44>)
 8008488:	701a      	strb	r2, [r3, #0]
	return fb_index;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	2000017c 	.word	0x2000017c

0800849c <createParameter>:

uint32_t createParameter(int32_t init_val){
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
	paramAddrTable.value[paramAddrTable.currentIndex] = init_val;
 80084a4:	4b10      	ldr	r3, [pc, #64]	; (80084e8 <createParameter+0x4c>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	4a0f      	ldr	r2, [pc, #60]	; (80084e8 <createParameter+0x4c>)
 80084aa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	605a      	str	r2, [r3, #4]
	paramAddrTable.addr[paramAddrTable.currentIndex] = paramAddrTable.currentIndex;
 80084b6:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <createParameter+0x4c>)
 80084b8:	781a      	ldrb	r2, [r3, #0]
 80084ba:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <createParameter+0x4c>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	4611      	mov	r1, r2
 80084c0:	4a09      	ldr	r2, [pc, #36]	; (80084e8 <createParameter+0x4c>)
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	6059      	str	r1, [r3, #4]
	paramAddrTable.currentIndex++;
 80084c8:	4b07      	ldr	r3, [pc, #28]	; (80084e8 <createParameter+0x4c>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	3301      	adds	r3, #1
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	4b05      	ldr	r3, [pc, #20]	; (80084e8 <createParameter+0x4c>)
 80084d2:	701a      	strb	r2, [r3, #0]
	return paramAddrTable.currentIndex-1;
 80084d4:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <createParameter+0x4c>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	3b01      	subs	r3, #1
}
 80084da:	4618      	mov	r0, r3
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	200004a0 	.word	0x200004a0

080084ec <make_connection>:

void make_connection(uint32_t dest_port_i, uint32_t src_port_i)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
	paramAddrTable.addr[dest_port_i] = paramAddrTable.addr[src_port_i] ;
 80084f6:	4a08      	ldr	r2, [pc, #32]	; (8008518 <make_connection+0x2c>)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	4905      	ldr	r1, [pc, #20]	; (8008518 <make_connection+0x2c>)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	440b      	add	r3, r1
 8008508:	605a      	str	r2, [r3, #4]
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	200004a0 	.word	0x200004a0

0800851c <initiate_mccore>:

void initiate_mccore(){
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
	fbTable.length = 0;
 8008520:	4b06      	ldr	r3, [pc, #24]	; (800853c <initiate_mccore+0x20>)
 8008522:	2200      	movs	r2, #0
 8008524:	701a      	strb	r2, [r3, #0]
	paramAddrTable.currentIndex = 0;
 8008526:	4b06      	ldr	r3, [pc, #24]	; (8008540 <initiate_mccore+0x24>)
 8008528:	2200      	movs	r2, #0
 800852a:	701a      	strb	r2, [r3, #0]
	init_uniqueid();
 800852c:	f000 f9a0 	bl	8008870 <init_uniqueid>
	init_deployment_ch();
 8008530:	f001 fda2 	bl	800a078 <init_deployment_ch>
	init_text_table();
 8008534:	f000 f8f8 	bl	8008728 <init_text_table>
}
 8008538:	bf00      	nop
 800853a:	bd80      	pop	{r7, pc}
 800853c:	2000017c 	.word	0x2000017c
 8008540:	200004a0 	.word	0x200004a0

08008544 <clear_display>:

//clear the display data if there is an gui display element
void clear_display(){
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
	uint8_t is_there_any_gui_disp = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	71fb      	strb	r3, [r7, #7]
	//search the fbtable for fb_gui_display
	for(uint8_t i = 0;i<fbTable.length;i++){
 800854e:	2300      	movs	r3, #0
 8008550:	71bb      	strb	r3, [r7, #6]
 8008552:	e00d      	b.n	8008570 <clear_display+0x2c>
		if(fbTable.fb[i].callback == fb_gui_display){
 8008554:	79bb      	ldrb	r3, [r7, #6]
 8008556:	4a0d      	ldr	r2, [pc, #52]	; (800858c <clear_display+0x48>)
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	4413      	add	r3, r2
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	4a0c      	ldr	r2, [pc, #48]	; (8008590 <clear_display+0x4c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d102      	bne.n	800856a <clear_display+0x26>
			is_there_any_gui_disp = 1;
 8008564:	2301      	movs	r3, #1
 8008566:	71fb      	strb	r3, [r7, #7]
			break;
 8008568:	e007      	b.n	800857a <clear_display+0x36>
	for(uint8_t i = 0;i<fbTable.length;i++){
 800856a:	79bb      	ldrb	r3, [r7, #6]
 800856c:	3301      	adds	r3, #1
 800856e:	71bb      	strb	r3, [r7, #6]
 8008570:	4b06      	ldr	r3, [pc, #24]	; (800858c <clear_display+0x48>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	79ba      	ldrb	r2, [r7, #6]
 8008576:	429a      	cmp	r2, r3
 8008578:	d3ec      	bcc.n	8008554 <clear_display+0x10>
		}
	}

	if(is_there_any_gui_disp){
 800857a:	79fb      	ldrb	r3, [r7, #7]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <clear_display+0x40>
		Display_Clear();
 8008580:	f7f8 fb4e 	bl	8000c20 <Display_Clear>
	}
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	2000017c 	.word	0x2000017c
 8008590:	0800948d 	.word	0x0800948d

08008594 <initiate_circuit>:

void initiate_circuit(){
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
	clear_display();
 8008598:	f7ff ffd4 	bl	8008544 <clear_display>
	hal_init_tick();
 800859c:	f7f8 f939 	bl	8000812 <hal_init_tick>
	reset_all_output_channels();
 80085a0:	f7f8 f8b6 	bl	8000710 <reset_all_output_channels>
}
 80085a4:	bf00      	nop
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <run_one_cycle>:

void run_one_cycle(){
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
	//get inputs
	//run the input related function blocks

	//process inputs
	//run the processing related input blocks
	for(uint8_t i= 0;i<fbTable.length;i++){
 80085ae:	2300      	movs	r3, #0
 80085b0:	71fb      	strb	r3, [r7, #7]
 80085b2:	e00e      	b.n	80085d2 <run_one_cycle+0x2a>
		(*fbTable.fb[i].callback)((uint8_t)fbTable.fb[i].param_start_index);
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	4a0c      	ldr	r2, [pc, #48]	; (80085e8 <run_one_cycle+0x40>)
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	4413      	add	r3, r2
 80085bc:	689a      	ldr	r2, [r3, #8]
 80085be:	79fb      	ldrb	r3, [r7, #7]
 80085c0:	4909      	ldr	r1, [pc, #36]	; (80085e8 <run_one_cycle+0x40>)
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	440b      	add	r3, r1
 80085c6:	791b      	ldrb	r3, [r3, #4]
 80085c8:	4618      	mov	r0, r3
 80085ca:	4790      	blx	r2
	for(uint8_t i= 0;i<fbTable.length;i++){
 80085cc:	79fb      	ldrb	r3, [r7, #7]
 80085ce:	3301      	adds	r3, #1
 80085d0:	71fb      	strb	r3, [r7, #7]
 80085d2:	4b05      	ldr	r3, [pc, #20]	; (80085e8 <run_one_cycle+0x40>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	79fa      	ldrb	r2, [r7, #7]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d3eb      	bcc.n	80085b4 <run_one_cycle+0xc>
	}

	//refresh outputs
	//run the output related function blocks
}
 80085dc:	bf00      	nop
 80085de:	bf00      	nop
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	2000017c 	.word	0x2000017c

080085ec <run_test_functions>:

void run_test_functions()
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0
	//test_watch_function();
	//test_deployment();
	//test_memory_service();
	//test_application_load_fromflash();
	//test_watch_function();
}
 80085f0:	bf00      	nop
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
	...

080085fc <mcCore_SM>:

void mcCore_SM()
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
	test_circuit_t* test_circ = get_test_circuit();
 8008602:	f000 f85f 	bl	80086c4 <get_test_circuit>
 8008606:	4603      	mov	r3, r0
 8008608:	607b      	str	r3, [r7, #4]
	static uint8_t mcCore_state;

	switch (mcCore_state){
 800860a:	4b2d      	ldr	r3, [pc, #180]	; (80086c0 <mcCore_SM+0xc4>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b06      	cmp	r3, #6
 8008610:	d852      	bhi.n	80086b8 <mcCore_SM+0xbc>
 8008612:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <mcCore_SM+0x1c>)
 8008614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008618:	08008635 	.word	0x08008635
 800861c:	0800868d 	.word	0x0800868d
 8008620:	080086b9 	.word	0x080086b9
 8008624:	08008677 	.word	0x08008677
 8008628:	080086a5 	.word	0x080086a5
 800862c:	080086b1 	.word	0x080086b1
 8008630:	0800866b 	.word	0x0800866b
		case ST_MCCORE_INIT:
			run_test_functions();
 8008634:	f7ff ffda 	bl	80085ec <run_test_functions>
			if(test_circ->do_test == 1){
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d103      	bne.n	8008648 <mcCore_SM+0x4c>
				mcCore_state = ST_MCCORE_TEST;
 8008640:	4b1f      	ldr	r3, [pc, #124]	; (80086c0 <mcCore_SM+0xc4>)
 8008642:	2204      	movs	r2, #4
 8008644:	701a      	strb	r2, [r3, #0]
					//Some error occured on application load
					initiate_mccore(); //kill all the program memory
					mcCore_state = ST_WAIT_RUN;
				}
			}
			break;
 8008646:	e037      	b.n	80086b8 <mcCore_SM+0xbc>
				initiate_mccore(); //kill all the program memory
 8008648:	f7ff ff68 	bl	800851c <initiate_mccore>
				if(application_load() == 0){
 800864c:	f001 fcc6 	bl	8009fdc <application_load>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d103      	bne.n	800865e <mcCore_SM+0x62>
					mcCore_state = ST_MCCORE_RUN;
 8008656:	4b1a      	ldr	r3, [pc, #104]	; (80086c0 <mcCore_SM+0xc4>)
 8008658:	2201      	movs	r2, #1
 800865a:	701a      	strb	r2, [r3, #0]
			break;
 800865c:	e02c      	b.n	80086b8 <mcCore_SM+0xbc>
					initiate_mccore(); //kill all the program memory
 800865e:	f7ff ff5d 	bl	800851c <initiate_mccore>
					mcCore_state = ST_WAIT_RUN;
 8008662:	4b17      	ldr	r3, [pc, #92]	; (80086c0 <mcCore_SM+0xc4>)
 8008664:	2203      	movs	r2, #3
 8008666:	701a      	strb	r2, [r3, #0]
			break;
 8008668:	e026      	b.n	80086b8 <mcCore_SM+0xbc>

		case ST_MCCORE_INIT2:
				initiate_mccore(); //kill all the program memory
 800866a:	f7ff ff57 	bl	800851c <initiate_mccore>
				mcCore_state = ST_WAIT_RUN;
 800866e:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <mcCore_SM+0xc4>)
 8008670:	2203      	movs	r2, #3
 8008672:	701a      	strb	r2, [r3, #0]

			break;
 8008674:	e020      	b.n	80086b8 <mcCore_SM+0xbc>
		case ST_WAIT_RUN: //wait for the deployment finish and run cmd arrival
			if(
#ifdef DEPLOYMENT_PARSER_V1
				Parser(get_deployment_ch())
#else
		Parser_Modbus_GetState()
 8008676:	f001 fb59 	bl	8009d2c <Parser_Modbus_GetState>
 800867a:	4603      	mov	r3, r0
			if(
 800867c:	2b67      	cmp	r3, #103	; 0x67
 800867e:	d11a      	bne.n	80086b6 <mcCore_SM+0xba>
#endif
		== CMD_RUN){
				initiate_circuit();
 8008680:	f7ff ff88 	bl	8008594 <initiate_circuit>
				mcCore_state = ST_MCCORE_RUN;
 8008684:	4b0e      	ldr	r3, [pc, #56]	; (80086c0 <mcCore_SM+0xc4>)
 8008686:	2201      	movs	r2, #1
 8008688:	701a      	strb	r2, [r3, #0]
			}
			break;
 800868a:	e014      	b.n	80086b6 <mcCore_SM+0xba>
		case ST_MCCORE_RUN:
			if(
#ifdef DEPLOYMENT_PARSER_V1
				Parser(get_deployment_ch())
#else
		Parser_Modbus_GetState()
 800868c:	f001 fb4e 	bl	8009d2c <Parser_Modbus_GetState>
 8008690:	4603      	mov	r3, r0
			if(
 8008692:	2b68      	cmp	r3, #104	; 0x68
 8008694:	d103      	bne.n	800869e <mcCore_SM+0xa2>
#endif
		== CMD_KILL) { //when running if KILL cmd received go to the initial state
				mcCore_state = ST_MCCORE_INIT2;
 8008696:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <mcCore_SM+0xc4>)
 8008698:	2206      	movs	r2, #6
 800869a:	701a      	strb	r2, [r3, #0]
				run_one_cycle();
				//burdaki zamanı ölç
				//delta
				//bu deltaları kullanıcıya logla
			}
			break;
 800869c:	e00c      	b.n	80086b8 <mcCore_SM+0xbc>
				run_one_cycle();
 800869e:	f7ff ff83 	bl	80085a8 <run_one_cycle>
			break;
 80086a2:	e009      	b.n	80086b8 <mcCore_SM+0xbc>

		case ST_MCCORE_TEST:
			//test_circ->test_func_ptr(); //function defined in test_circuits.c
			//create_display_test_circuit();
			create_test_circuit_f746();
 80086a4:	f000 f818 	bl	80086d8 <create_test_circuit_f746>
			mcCore_state = ST_MCCORE_TEST_RUN;
 80086a8:	4b05      	ldr	r3, [pc, #20]	; (80086c0 <mcCore_SM+0xc4>)
 80086aa:	2205      	movs	r2, #5
 80086ac:	701a      	strb	r2, [r3, #0]
			break;
 80086ae:	e003      	b.n	80086b8 <mcCore_SM+0xbc>

		case ST_MCCORE_TEST_RUN:
			run_one_cycle();
 80086b0:	f7ff ff7a 	bl	80085a8 <run_one_cycle>
			break;
 80086b4:	e000      	b.n	80086b8 <mcCore_SM+0xbc>
			break;
 80086b6:	bf00      	nop
	}
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	20001124 	.word	0x20001124

080086c4 <get_test_circuit>:
#include "mcCore.h"
#include "fb_inc.h"
#include "test_circuits.h"

test_circuit_t test_circuit = {.do_test=0, .test_func_ptr=&create_test_circuit_f746};
test_circuit_t* get_test_circuit(){return &test_circuit;}
 80086c4:	b480      	push	{r7}
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	4b02      	ldr	r3, [pc, #8]	; (80086d4 <get_test_circuit+0x10>)
 80086ca:	4618      	mov	r0, r3
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	20000044 	.word	0x20000044

080086d8 <create_test_circuit_f746>:

void create_test_circuit_f746()
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b092      	sub	sp, #72	; 0x48
 80086dc:	af02      	add	r7, sp, #8
	type_fb_cycle cyc1 = create_fb_cycle(0, 0, 100, 100, 0);
 80086de:	f107 0018 	add.w	r0, r7, #24
 80086e2:	2300      	movs	r3, #0
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	2364      	movs	r3, #100	; 0x64
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	2364      	movs	r3, #100	; 0x64
 80086ec:	2200      	movs	r2, #0
 80086ee:	2100      	movs	r1, #0
 80086f0:	f000 fd36 	bl	8009160 <create_fb_cycle>
	type_fb_outputpin ld1 = create_fb_outputpin(0, 0, 0);
 80086f4:	4638      	mov	r0, r7
 80086f6:	2300      	movs	r3, #0
 80086f8:	2200      	movs	r2, #0
 80086fa:	2100      	movs	r1, #0
 80086fc:	f001 fa5c 	bl	8009bb8 <create_fb_outputpin>

	make_connection(ld1.fp.val, cyc1.fp.out);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff fef0 	bl	80084ec <make_connection>
}
 800870c:	bf00      	nop
 800870e:	3740      	adds	r7, #64	; 0x40
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <get_text_element_table>:

#include "stdint.h"
#include "text_table.h"

glob_text_element_table_t text_element_table = {.i=0};
glob_text_element_table_t* get_text_element_table(){return &text_element_table;}
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
 8008718:	4b02      	ldr	r3, [pc, #8]	; (8008724 <get_text_element_table+0x10>)
 800871a:	4618      	mov	r0, r3
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	20001128 	.word	0x20001128

08008728 <init_text_table>:

void init_text_table(){
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
	glob_text_element_table_t* t = get_text_element_table();
 800872e:	f7ff fff1 	bl	8008714 <get_text_element_table>
 8008732:	6038      	str	r0, [r7, #0]
	//clear previous records
	for(uint16_t i=0;i<t->i;i++){
 8008734:	2300      	movs	r3, #0
 8008736:	80fb      	strh	r3, [r7, #6]
 8008738:	e034      	b.n	80087a4 <init_text_table+0x7c>
		for(uint16_t j= 0; j<t->e[i].length;j++){
 800873a:	2300      	movs	r3, #0
 800873c:	80bb      	strh	r3, [r7, #4]
 800873e:	e00e      	b.n	800875e <init_text_table+0x36>
			t->e[i].value[j] = 0;
 8008740:	88fa      	ldrh	r2, [r7, #6]
 8008742:	88b9      	ldrh	r1, [r7, #4]
 8008744:	6838      	ldr	r0, [r7, #0]
 8008746:	4613      	mov	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4403      	add	r3, r0
 8008750:	440b      	add	r3, r1
 8008752:	3306      	adds	r3, #6
 8008754:	2200      	movs	r2, #0
 8008756:	701a      	strb	r2, [r3, #0]
		for(uint16_t j= 0; j<t->e[i].length;j++){
 8008758:	88bb      	ldrh	r3, [r7, #4]
 800875a:	3301      	adds	r3, #1
 800875c:	80bb      	strh	r3, [r7, #4]
 800875e:	88fa      	ldrh	r2, [r7, #6]
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	440b      	add	r3, r1
 800876c:	3304      	adds	r3, #4
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	88ba      	ldrh	r2, [r7, #4]
 8008772:	429a      	cmp	r2, r3
 8008774:	d3e4      	bcc.n	8008740 <init_text_table+0x18>
		}
		t->e[i].length = 0;
 8008776:	88fa      	ldrh	r2, [r7, #6]
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	440b      	add	r3, r1
 8008784:	3304      	adds	r3, #4
 8008786:	2200      	movs	r2, #0
 8008788:	801a      	strh	r2, [r3, #0]
		t->e[i].index = 0;
 800878a:	88fa      	ldrh	r2, [r7, #6]
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	440b      	add	r3, r1
 8008798:	3302      	adds	r3, #2
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0;i<t->i;i++){
 800879e:	88fb      	ldrh	r3, [r7, #6]
 80087a0:	3301      	adds	r3, #1
 80087a2:	80fb      	strh	r3, [r7, #6]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	88fa      	ldrh	r2, [r7, #6]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d3c5      	bcc.n	800873a <init_text_table+0x12>
	}

	//set the index to zero
	t->i = 0;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2200      	movs	r2, #0
 80087b2:	801a      	strh	r2, [r3, #0]
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <get_next_text_element>:

static text_element_t* get_next_text_element(){
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
	text_element_t* ret_element = &text_element_table.e[text_element_table.i];
 80087c2:	4b10      	ldr	r3, [pc, #64]	; (8008804 <get_next_text_element+0x48>)
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	4613      	mov	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4a0c      	ldr	r2, [pc, #48]	; (8008804 <get_next_text_element+0x48>)
 80087d2:	4413      	add	r3, r2
 80087d4:	3302      	adds	r3, #2
 80087d6:	607b      	str	r3, [r7, #4]
	ret_element->index = text_element_table.i;
 80087d8:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <get_next_text_element+0x48>)
 80087da:	881b      	ldrh	r3, [r3, #0]
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	701a      	strb	r2, [r3, #0]

	if(text_element_table.i < TEXT_TABLE_MAX_ELEMENT_COUNT-1){
 80087e2:	4b08      	ldr	r3, [pc, #32]	; (8008804 <get_next_text_element+0x48>)
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	2b1e      	cmp	r3, #30
 80087e8:	d805      	bhi.n	80087f6 <get_next_text_element+0x3a>
		text_element_table.i++;
 80087ea:	4b06      	ldr	r3, [pc, #24]	; (8008804 <get_next_text_element+0x48>)
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	3301      	adds	r3, #1
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	4b04      	ldr	r3, [pc, #16]	; (8008804 <get_next_text_element+0x48>)
 80087f4:	801a      	strh	r2, [r3, #0]
	}
	return ret_element;
 80087f6:	687b      	ldr	r3, [r7, #4]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	20001128 	.word	0x20001128

08008808 <create_text_table_entry>:

uint8_t create_text_table_entry(uint8_t len, char* str){
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	4603      	mov	r3, r0
 8008810:	6039      	str	r1, [r7, #0]
 8008812:	71fb      	strb	r3, [r7, #7]
	text_element_t* text_el = get_next_text_element();
 8008814:	f7ff ffd2 	bl	80087bc <get_next_text_element>
 8008818:	60b8      	str	r0, [r7, #8]
	text_el->length = len;
 800881a:	79fb      	ldrb	r3, [r7, #7]
 800881c:	b29a      	uxth	r2, r3
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	805a      	strh	r2, [r3, #2]
	//first clear entry
	for(uint8_t i = 0;i<TEXT_TABLE_CHAR_LENGTH;i++){
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
 8008826:	e007      	b.n	8008838 <create_text_table_entry+0x30>
		text_el->value[i] = 0;
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4413      	add	r3, r2
 800882e:	2200      	movs	r2, #0
 8008830:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0;i<TEXT_TABLE_CHAR_LENGTH;i++){
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	3301      	adds	r3, #1
 8008836:	73fb      	strb	r3, [r7, #15]
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	2b0f      	cmp	r3, #15
 800883c:	d9f4      	bls.n	8008828 <create_text_table_entry+0x20>
	}

	//fill with new values
	for(uint8_t i = 0;i<len;i++){
 800883e:	2300      	movs	r3, #0
 8008840:	73bb      	strb	r3, [r7, #14]
 8008842:	e00b      	b.n	800885c <create_text_table_entry+0x54>
		text_el->value[i] = str[i];
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	441a      	add	r2, r3
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	7811      	ldrb	r1, [r2, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	4413      	add	r3, r2
 8008852:	460a      	mov	r2, r1
 8008854:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0;i<len;i++){
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	3301      	adds	r3, #1
 800885a:	73bb      	strb	r3, [r7, #14]
 800885c:	7bba      	ldrb	r2, [r7, #14]
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	429a      	cmp	r2, r3
 8008862:	d3ef      	bcc.n	8008844 <create_text_table_entry+0x3c>
	}

	return text_el->index;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	781b      	ldrb	r3, [r3, #0]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <init_uniqueid>:
#include "modbus_slave.h"
#include "adaptor.h"

#define UID_LEN 16

void init_uniqueid(){
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
	uint8_t uniqueid[UID_LEN];
	//clear uniqueid buffer
	for(uint8_t i = 0;i<UID_LEN;i++){
 8008876:	2300      	movs	r3, #0
 8008878:	75fb      	strb	r3, [r7, #23]
 800887a:	e008      	b.n	800888e <init_uniqueid+0x1e>
		uniqueid[i] = 0;
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	3318      	adds	r3, #24
 8008880:	443b      	add	r3, r7
 8008882:	2200      	movs	r2, #0
 8008884:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(uint8_t i = 0;i<UID_LEN;i++){
 8008888:	7dfb      	ldrb	r3, [r7, #23]
 800888a:	3301      	adds	r3, #1
 800888c:	75fb      	strb	r3, [r7, #23]
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	2b0f      	cmp	r3, #15
 8008892:	d9f3      	bls.n	800887c <init_uniqueid+0xc>
	}
	//read unique id from the adaptor function
	get_uniqueid(uniqueid, UID_LEN);
 8008894:	463b      	mov	r3, r7
 8008896:	2110      	movs	r1, #16
 8008898:	4618      	mov	r0, r3
 800889a:	f7f8 f867 	bl	800096c <get_uniqueid>

	//copy this value to the memory place where mapped to a modbus read only input registers
	uint8_t* modbus_p = (uint8_t*) get_Modbus_Buf_Input_Registers_30001();
 800889e:	f000 f887 	bl	80089b0 <get_Modbus_Buf_Input_Registers_30001>
 80088a2:	6138      	str	r0, [r7, #16]

	for(uint8_t i= 0; i<UID_LEN;i++){
 80088a4:	2300      	movs	r3, #0
 80088a6:	75bb      	strb	r3, [r7, #22]
 80088a8:	e00b      	b.n	80088c2 <init_uniqueid+0x52>
		modbus_p[i] = uniqueid[i];
 80088aa:	7dba      	ldrb	r2, [r7, #22]
 80088ac:	7dbb      	ldrb	r3, [r7, #22]
 80088ae:	6939      	ldr	r1, [r7, #16]
 80088b0:	440b      	add	r3, r1
 80088b2:	3218      	adds	r2, #24
 80088b4:	443a      	add	r2, r7
 80088b6:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80088ba:	701a      	strb	r2, [r3, #0]
	for(uint8_t i= 0; i<UID_LEN;i++){
 80088bc:	7dbb      	ldrb	r3, [r7, #22]
 80088be:	3301      	adds	r3, #1
 80088c0:	75bb      	strb	r3, [r7, #22]
 80088c2:	7dbb      	ldrb	r3, [r7, #22]
 80088c4:	2b0f      	cmp	r3, #15
 80088c6:	d9f0      	bls.n	80088aa <init_uniqueid+0x3a>
	}
}
 80088c8:	bf00      	nop
 80088ca:	bf00      	nop
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <Channel_Mapping>:
 */
#include "stdint.h"
#include "deployment.h"
#include "comm_service.h"

Communication_Ch* Channel_Mapping(uint32_t channel){
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
	Communication_Ch* comm_ch;

	//channel mappings
	if(channel == 0){
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d103      	bne.n	80088e8 <Channel_Mapping+0x16>
		comm_ch = get_deployment_ch();
 80088e0:	f001 fba8 	bl	800a034 <get_deployment_ch>
 80088e4:	4603      	mov	r3, r0
 80088e6:	60fb      	str	r3, [r7, #12]
	}
	return comm_ch;
 80088e8:	68fb      	ldr	r3, [r7, #12]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <Runtime_CommDataService_NewData_Received>:

void Runtime_CommDataService_NewData_Received(uint32_t channel, uint8_t* buf, uint32_t len)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b086      	sub	sp, #24
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
	Communication_Ch* comm_ch = Channel_Mapping(channel);
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff ffe7 	bl	80088d2 <Channel_Mapping>
 8008904:	6138      	str	r0, [r7, #16]

	//put data to the channel buffer
	for(uint32_t i= 0;i<len;i++)
 8008906:	2300      	movs	r3, #0
 8008908:	617b      	str	r3, [r7, #20]
 800890a:	e014      	b.n	8008936 <Runtime_CommDataService_NewData_Received+0x44>
	if(comm_ch->rx_data_cntr < CH_RX_DATA_BUF_LEN){ //parse edilmeyi bekleyen bir data varsa üzerine yazma.
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	795b      	ldrb	r3, [r3, #5]
 8008910:	2b3f      	cmp	r3, #63	; 0x3f
 8008912:	d80d      	bhi.n	8008930 <Runtime_CommDataService_NewData_Received+0x3e>
		comm_ch->rx_data_buf[comm_ch->rx_data_cntr++] = buf[i];
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	441a      	add	r2, r3
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	795b      	ldrb	r3, [r3, #5]
 800891e:	1c59      	adds	r1, r3, #1
 8008920:	b2c8      	uxtb	r0, r1
 8008922:	6939      	ldr	r1, [r7, #16]
 8008924:	7148      	strb	r0, [r1, #5]
 8008926:	4619      	mov	r1, r3
 8008928:	7812      	ldrb	r2, [r2, #0]
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	440b      	add	r3, r1
 800892e:	719a      	strb	r2, [r3, #6]
	for(uint32_t i= 0;i<len;i++)
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	3301      	adds	r3, #1
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	429a      	cmp	r2, r3
 800893c:	d3e6      	bcc.n	800890c <Runtime_CommDataService_NewData_Received+0x1a>
	}
}
 800893e:	bf00      	nop
 8008940:	bf00      	nop
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <Runtime_CommDataService_Process_DataBuffer>:

uint8_t Runtime_CommDataService_Process_DataBuffer(uint32_t channel)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
	Communication_Ch* comm_ch = Channel_Mapping(channel);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff ffbe 	bl	80088d2 <Channel_Mapping>
 8008956:	60f8      	str	r0, [r7, #12]

	if(comm_ch->rx_data_cntr < 2) {
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	795b      	ldrb	r3, [r3, #5]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d803      	bhi.n	8008968 <Runtime_CommDataService_Process_DataBuffer+0x20>
		comm_ch->rx_data_cntr = 0;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	715a      	strb	r2, [r3, #5]
 8008966:	e014      	b.n	8008992 <Runtime_CommDataService_Process_DataBuffer+0x4a>
	}
	else if(comm_ch->data_validity_check_callback()  == 0) {
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800896c:	4798      	blx	r3
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10c      	bne.n	800898e <Runtime_CommDataService_Process_DataBuffer+0x46>
		comm_ch->fdata_ready = 1;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		comm_ch->process_callback(comm_ch);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	4610      	mov	r0, r2
 8008984:	4798      	blx	r3
		comm_ch->rx_data_cntr = 0;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	715a      	strb	r2, [r3, #5]
 800898c:	e001      	b.n	8008992 <Runtime_CommDataService_Process_DataBuffer+0x4a>
	}
	else{
		return 1;
 800898e:	2301      	movs	r3, #1
 8008990:	e000      	b.n	8008994 <Runtime_CommDataService_Process_DataBuffer+0x4c>
	}

	return 0;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <get_Modbus_Buf_Holding_Registers_40001>:
//uint8_t Modbus_Buf_Discrete_Inputs_10001; //todo: implement
uint16_t Modbus_Buf_Input_Registers_30001[MODBUS_INPUT_REGISTER_COUNT]; //todo: implement
uint16_t Modbus_Buf_Holding_Registers_40001[MODBUS_HOLDING_REGISTER_COUNT];
Modbus_Slave_Responce_Data resp_data;

uint16_t* get_Modbus_Buf_Holding_Registers_40001(){return Modbus_Buf_Holding_Registers_40001;}
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0
 80089a0:	4b02      	ldr	r3, [pc, #8]	; (80089ac <get_Modbus_Buf_Holding_Registers_40001+0x10>)
 80089a2:	4618      	mov	r0, r3
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	200013cc 	.word	0x200013cc

080089b0 <get_Modbus_Buf_Input_Registers_30001>:
uint16_t* get_Modbus_Buf_Input_Registers_30001(){return Modbus_Buf_Input_Registers_30001;}
 80089b0:	b480      	push	{r7}
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	4b02      	ldr	r3, [pc, #8]	; (80089c0 <get_Modbus_Buf_Input_Registers_30001+0x10>)
 80089b6:	4618      	mov	r0, r3
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	200013ac 	.word	0x200013ac

080089c4 <get_low_byte>:

uint8_t MODBUS_SLAVE_ADDR  = 0x01;
uint8_t* get_MODBUS_SLAVE_ADDR(){return &MODBUS_SLAVE_ADDR;}

uint8_t get_low_byte(uint16_t word){
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)(word & 0xFF);
 80089ce:	88fb      	ldrh	r3, [r7, #6]
 80089d0:	b2db      	uxtb	r3, r3
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <get_hi_byte>:

uint8_t get_hi_byte(uint16_t word){
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	4603      	mov	r3, r0
 80089e6:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)((word>>8) & 0xFF);
 80089e8:	88fb      	ldrh	r3, [r7, #6]
 80089ea:	0a1b      	lsrs	r3, r3, #8
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	b2db      	uxtb	r3, r3
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <modbus_byte2word>:

uint16_t modbus_byte2word(uint8_t* p){
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
	return ((p[0] << 8) + p[1]);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	021b      	lsls	r3, r3, #8
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3301      	adds	r3, #1
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	4413      	add	r3, r2
 8008a18:	b29b      	uxth	r3, r3
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
	...

08008a28 <modbus_slave_prep_resp_data>:
}

void modbus_slave_prep_resp_data(Modbus_Slave_Responce_Data* resp_data,
									uint8_t function,
									uint16_t register_addr,
									uint16_t register_qty){
 8008a28:	b590      	push	{r4, r7, lr}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	4608      	mov	r0, r1
 8008a32:	4611      	mov	r1, r2
 8008a34:	461a      	mov	r2, r3
 8008a36:	4603      	mov	r3, r0
 8008a38:	72fb      	strb	r3, [r7, #11]
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	813b      	strh	r3, [r7, #8]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	80fb      	strh	r3, [r7, #6]
	uint16_t i;

	uint16_t register_addr_0 = register_addr; //40001 means register 0
 8008a42:	893b      	ldrh	r3, [r7, #8]
 8008a44:	82bb      	strh	r3, [r7, #20]

	resp_data->index = 0;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	resp_data->buf[resp_data->index++] = MODBUS_SLAVE_ADDR; //Slave address
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	b2d1      	uxtb	r1, r2
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 8008a5e:	461a      	mov	r2, r3
 8008a60:	4b8e      	ldr	r3, [pc, #568]	; (8008c9c <modbus_slave_prep_resp_data+0x274>)
 8008a62:	7819      	ldrb	r1, [r3, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	5499      	strb	r1, [r3, r2]
	resp_data->buf[resp_data->index++] = function; //Function
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008a6e:	1c5a      	adds	r2, r3, #1
 8008a70:	b2d1      	uxtb	r1, r2
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 8008a78:	4619      	mov	r1, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	7afa      	ldrb	r2, [r7, #11]
 8008a7e:	545a      	strb	r2, [r3, r1]
	if(function == MODBUS_READ_HOLDING_REGISTER){
 8008a80:	7afb      	ldrb	r3, [r7, #11]
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d16d      	bne.n	8008b62 <modbus_slave_prep_resp_data+0x13a>
		resp_data->buf[resp_data->index++] = register_qty*2;
 8008a86:	88fb      	ldrh	r3, [r7, #6]
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008a90:	1c59      	adds	r1, r3, #1
 8008a92:	b2c8      	uxtb	r0, r1
 8008a94:	68f9      	ldr	r1, [r7, #12]
 8008a96:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	0053      	lsls	r3, r2, #1
 8008a9e:	b2da      	uxtb	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	545a      	strb	r2, [r3, r1]
		for(i = 0;i<register_qty;i++){
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	82fb      	strh	r3, [r7, #22]
 8008aa8:	e056      	b.n	8008b58 <modbus_slave_prep_resp_data+0x130>
			if(register_addr_0+i <= MODBUS_HOLDING_REGISTER_COUNT) {
 8008aaa:	8aba      	ldrh	r2, [r7, #20]
 8008aac:	8afb      	ldrh	r3, [r7, #22]
 8008aae:	4413      	add	r3, r2
 8008ab0:	2b10      	cmp	r3, #16
 8008ab2:	dc2c      	bgt.n	8008b0e <modbus_slave_prep_resp_data+0xe6>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 8008ab4:	8aba      	ldrh	r2, [r7, #20]
 8008ab6:	8afb      	ldrh	r3, [r7, #22]
 8008ab8:	4413      	add	r3, r2
 8008aba:	4a79      	ldr	r2, [pc, #484]	; (8008ca0 <modbus_slave_prep_resp_data+0x278>)
 8008abc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	b2d0      	uxtb	r0, r2
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 8008ad0:	461c      	mov	r4, r3
 8008ad2:	4608      	mov	r0, r1
 8008ad4:	f7ff ff83 	bl	80089de <get_hi_byte>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	461a      	mov	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	551a      	strb	r2, [r3, r4]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 8008ae0:	8aba      	ldrh	r2, [r7, #20]
 8008ae2:	8afb      	ldrh	r3, [r7, #22]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	4a6e      	ldr	r2, [pc, #440]	; (8008ca0 <modbus_slave_prep_resp_data+0x278>)
 8008ae8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008af2:	1c5a      	adds	r2, r3, #1
 8008af4:	b2d0      	uxtb	r0, r2
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 8008afc:	461c      	mov	r4, r3
 8008afe:	4608      	mov	r0, r1
 8008b00:	f7ff ff60 	bl	80089c4 <get_low_byte>
 8008b04:	4603      	mov	r3, r0
 8008b06:	461a      	mov	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	551a      	strb	r2, [r3, r4]
 8008b0c:	e021      	b.n	8008b52 <modbus_slave_prep_resp_data+0x12a>
			}

			//Issuing MONITOR command, Watch function
			else if(register_addr+i >= MODBUS_APP_MONITOR_REGISTER) {
 8008b0e:	893a      	ldrh	r2, [r7, #8]
 8008b10:	8afb      	ldrh	r3, [r7, #22]
 8008b12:	4413      	add	r3, r2
 8008b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b18:	db1b      	blt.n	8008b52 <modbus_slave_prep_resp_data+0x12a>
				uint16_t value = get_watch_value(register_addr - MODBUS_APP_MONITOR_REGISTER + i);
 8008b1a:	893a      	ldrh	r2, [r7, #8]
 8008b1c:	8afb      	ldrh	r3, [r7, #22]
 8008b1e:	4413      	add	r3, r2
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f001 fab9 	bl	800a0a0 <get_watch_value>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	823b      	strh	r3, [r7, #16]
				memcpy(&(resp_data->buf[resp_data->index]), &value, sizeof(value));
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008b38:	461a      	mov	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	8a3a      	ldrh	r2, [r7, #16]
 8008b40:	801a      	strh	r2, [r3, #0]
				resp_data->index += sizeof(value);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008b48:	3302      	adds	r3, #2
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		for(i = 0;i<register_qty;i++){
 8008b52:	8afb      	ldrh	r3, [r7, #22]
 8008b54:	3301      	adds	r3, #1
 8008b56:	82fb      	strh	r3, [r7, #22]
 8008b58:	8afa      	ldrh	r2, [r7, #22]
 8008b5a:	88fb      	ldrh	r3, [r7, #6]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d3a4      	bcc.n	8008aaa <modbus_slave_prep_resp_data+0x82>
 8008b60:	e0e9      	b.n	8008d36 <modbus_slave_prep_resp_data+0x30e>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_READ_INPUT_REGISTER){
 8008b62:	7afb      	ldrb	r3, [r7, #11]
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d14a      	bne.n	8008bfe <modbus_slave_prep_resp_data+0x1d6>
		resp_data->buf[resp_data->index++] = register_qty*2;
 8008b68:	88fb      	ldrh	r3, [r7, #6]
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008b72:	1c59      	adds	r1, r3, #1
 8008b74:	b2c8      	uxtb	r0, r1
 8008b76:	68f9      	ldr	r1, [r7, #12]
 8008b78:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	0053      	lsls	r3, r2, #1
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	545a      	strb	r2, [r3, r1]
		for(i = 0;i<register_qty;i++){
 8008b86:	2300      	movs	r3, #0
 8008b88:	82fb      	strh	r3, [r7, #22]
 8008b8a:	e033      	b.n	8008bf4 <modbus_slave_prep_resp_data+0x1cc>
			if(register_addr_0+i <= MODBUS_INPUT_REGISTER_COUNT) {
 8008b8c:	8aba      	ldrh	r2, [r7, #20]
 8008b8e:	8afb      	ldrh	r3, [r7, #22]
 8008b90:	4413      	add	r3, r2
 8008b92:	2b10      	cmp	r3, #16
 8008b94:	dc2b      	bgt.n	8008bee <modbus_slave_prep_resp_data+0x1c6>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 8008b96:	8aba      	ldrh	r2, [r7, #20]
 8008b98:	8afb      	ldrh	r3, [r7, #22]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	4a41      	ldr	r2, [pc, #260]	; (8008ca4 <modbus_slave_prep_resp_data+0x27c>)
 8008b9e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	b2d0      	uxtb	r0, r2
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 8008bb2:	461c      	mov	r4, r3
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	f7ff ff12 	bl	80089de <get_hi_byte>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	551a      	strb	r2, [r3, r4]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 8008bc2:	8aba      	ldrh	r2, [r7, #20]
 8008bc4:	8afb      	ldrh	r3, [r7, #22]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	4a36      	ldr	r2, [pc, #216]	; (8008ca4 <modbus_slave_prep_resp_data+0x27c>)
 8008bca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	b2d0      	uxtb	r0, r2
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 8008bde:	461c      	mov	r4, r3
 8008be0:	4608      	mov	r0, r1
 8008be2:	f7ff feef 	bl	80089c4 <get_low_byte>
 8008be6:	4603      	mov	r3, r0
 8008be8:	461a      	mov	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	551a      	strb	r2, [r3, r4]
		for(i = 0;i<register_qty;i++){
 8008bee:	8afb      	ldrh	r3, [r7, #22]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	82fb      	strh	r3, [r7, #22]
 8008bf4:	8afa      	ldrh	r2, [r7, #22]
 8008bf6:	88fb      	ldrh	r3, [r7, #6]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d3c7      	bcc.n	8008b8c <modbus_slave_prep_resp_data+0x164>
 8008bfc:	e09b      	b.n	8008d36 <modbus_slave_prep_resp_data+0x30e>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_WRITE_SINGLE_REGISTER){
 8008bfe:	7afb      	ldrb	r3, [r7, #11]
 8008c00:	2b06      	cmp	r3, #6
 8008c02:	d151      	bne.n	8008ca8 <modbus_slave_prep_resp_data+0x280>
		resp_data->buf[resp_data->index++] = get_hi_byte(register_addr);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	b2d1      	uxtb	r1, r2
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 8008c14:	461c      	mov	r4, r3
 8008c16:	893b      	ldrh	r3, [r7, #8]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7ff fee0 	bl	80089de <get_hi_byte>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	461a      	mov	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_addr);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	b2d1      	uxtb	r1, r2
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 8008c36:	461c      	mov	r4, r3
 8008c38:	893b      	ldrh	r3, [r7, #8]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff fec2 	bl	80089c4 <get_low_byte>
 8008c40:	4603      	mov	r3, r0
 8008c42:	461a      	mov	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 8008c48:	8abb      	ldrh	r3, [r7, #20]
 8008c4a:	4a15      	ldr	r2, [pc, #84]	; (8008ca0 <modbus_slave_prep_resp_data+0x278>)
 8008c4c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	b2d0      	uxtb	r0, r2
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 8008c60:	461c      	mov	r4, r3
 8008c62:	4608      	mov	r0, r1
 8008c64:	f7ff febb 	bl	80089de <get_hi_byte>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 8008c70:	8abb      	ldrh	r3, [r7, #20]
 8008c72:	4a0b      	ldr	r2, [pc, #44]	; (8008ca0 <modbus_slave_prep_resp_data+0x278>)
 8008c74:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	b2d0      	uxtb	r0, r2
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 8008c88:	461c      	mov	r4, r3
 8008c8a:	4608      	mov	r0, r1
 8008c8c:	f7ff fe9a 	bl	80089c4 <get_low_byte>
 8008c90:	4603      	mov	r3, r0
 8008c92:	461a      	mov	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	551a      	strb	r2, [r3, r4]
 8008c98:	e04d      	b.n	8008d36 <modbus_slave_prep_resp_data+0x30e>
 8008c9a:	bf00      	nop
 8008c9c:	2000004c 	.word	0x2000004c
 8008ca0:	200013cc 	.word	0x200013cc
 8008ca4:	200013ac 	.word	0x200013ac
	}

	else if(function == MODBUS_WRITE_MULTIPLE_REGISTER){
 8008ca8:	7afb      	ldrb	r3, [r7, #11]
 8008caa:	2b10      	cmp	r3, #16
 8008cac:	d143      	bne.n	8008d36 <modbus_slave_prep_resp_data+0x30e>
		resp_data->buf[resp_data->index++] = get_hi_byte(register_addr);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	b2d1      	uxtb	r1, r2
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 8008cbe:	461c      	mov	r4, r3
 8008cc0:	893b      	ldrh	r3, [r7, #8]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff fe8b 	bl	80089de <get_hi_byte>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	461a      	mov	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_addr);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	b2d1      	uxtb	r1, r2
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 8008ce0:	461c      	mov	r4, r3
 8008ce2:	893b      	ldrh	r3, [r7, #8]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7ff fe6d 	bl	80089c4 <get_low_byte>
 8008cea:	4603      	mov	r3, r0
 8008cec:	461a      	mov	r2, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_hi_byte(register_qty);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	b2d1      	uxtb	r1, r2
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 8008d02:	461c      	mov	r4, r3
 8008d04:	88fb      	ldrh	r3, [r7, #6]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7ff fe69 	bl	80089de <get_hi_byte>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	461a      	mov	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_qty);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	b2d1      	uxtb	r1, r2
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 8008d24:	461c      	mov	r4, r3
 8008d26:	88fb      	ldrh	r3, [r7, #6]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7ff fe4b 	bl	80089c4 <get_low_byte>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	461a      	mov	r2, r3
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	551a      	strb	r2, [r3, r4]
	}

	//todo: crc
	uint16_t crc = CRC16(resp_data->buf, resp_data->index);
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	4619      	mov	r1, r3
 8008d42:	4610      	mov	r0, r2
 8008d44:	f000 f8d4 	bl	8008ef0 <CRC16>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	827b      	strh	r3, [r7, #18]

	resp_data->buf[resp_data->index++] = get_low_byte(crc);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	b2d1      	uxtb	r1, r2
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 8008d5c:	461c      	mov	r4, r3
 8008d5e:	8a7b      	ldrh	r3, [r7, #18]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7ff fe2f 	bl	80089c4 <get_low_byte>
 8008d66:	4603      	mov	r3, r0
 8008d68:	461a      	mov	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	551a      	strb	r2, [r3, r4]
	resp_data->buf[resp_data->index++] = get_hi_byte(crc);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	b2d1      	uxtb	r1, r2
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 8008d7e:	461c      	mov	r4, r3
 8008d80:	8a7b      	ldrh	r3, [r7, #18]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff fe2b 	bl	80089de <get_hi_byte>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	551a      	strb	r2, [r3, r4]

	resp_data->len = resp_data->index;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8008d9c:	bf00      	nop
 8008d9e:	371c      	adds	r7, #28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd90      	pop	{r4, r7, pc}

08008da4 <modbus_slave_tx>:

void modbus_slave_tx(Modbus_Slave_Responce_Data* resp_data){
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	hal_modbus_uart_tx(resp_data->buf, resp_data->len);
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008db4:	4619      	mov	r1, r3
 8008db6:	4610      	mov	r0, r2
 8008db8:	f7f7 fdba 	bl	8000930 <hal_modbus_uart_tx>
}
 8008dbc:	bf00      	nop
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <modbus_slave_rx>:

uint8_t modbus_slave_rx(Communication_Ch* ch ){
 8008dc4:	b590      	push	{r4, r7, lr}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
	uint16_t register_addr = 0;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	82bb      	strh	r3, [r7, #20]
	uint16_t register_val = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	827b      	strh	r3, [r7, #18]
	uint16_t register_qty = 0;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	823b      	strh	r3, [r7, #16]
	uint8_t byte_count = 0;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]

	uint16_t starting_addr = 0;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	81bb      	strh	r3, [r7, #12]
	uint16_t quantity_of_register = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	817b      	strh	r3, [r7, #10]

	//Communication_Ch* ch = Channel_Mapping(channel);

	//todo: crc check

	if(ch->rx_data_buf[0] == MODBUS_SLAVE_ADDR){
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	799a      	ldrb	r2, [r3, #6]
 8008de8:	4b3d      	ldr	r3, [pc, #244]	; (8008ee0 <modbus_slave_rx+0x11c>)
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d171      	bne.n	8008ed4 <modbus_slave_rx+0x110>
		register_addr = modbus_byte2word(&ch->rx_data_buf[2]);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	3308      	adds	r3, #8
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7ff fe01 	bl	80089fc <modbus_byte2word>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	82bb      	strh	r3, [r7, #20]
		register_qty = modbus_byte2word(&ch->rx_data_buf[4]);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	330a      	adds	r3, #10
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff fdfa 	bl	80089fc <modbus_byte2word>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	823b      	strh	r3, [r7, #16]
		byte_count = ch->rx_data_buf[6];
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	7b1b      	ldrb	r3, [r3, #12]
 8008e10:	73fb      	strb	r3, [r7, #15]
		starting_addr = register_addr;
 8008e12:	8abb      	ldrh	r3, [r7, #20]
 8008e14:	81bb      	strh	r3, [r7, #12]

		if(ch->rx_data_buf[1] == MODBUS_WRITE_SINGLE_REGISTER){
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	79db      	ldrb	r3, [r3, #7]
 8008e1a:	2b06      	cmp	r3, #6
 8008e1c:	d10e      	bne.n	8008e3c <modbus_slave_rx+0x78>
			//todo: need to save parameter to flash
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 8008e1e:	89bb      	ldrh	r3, [r7, #12]
 8008e20:	2b0f      	cmp	r3, #15
 8008e22:	d838      	bhi.n	8008e96 <modbus_slave_rx+0xd2>
				Modbus_Buf_Holding_Registers_40001[starting_addr] = modbus_byte2word(&ch->rx_data_buf[4]);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	330a      	adds	r3, #10
 8008e28:	89bc      	ldrh	r4, [r7, #12]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff fde6 	bl	80089fc <modbus_byte2word>
 8008e30:	4603      	mov	r3, r0
 8008e32:	461a      	mov	r2, r3
 8008e34:	4b2b      	ldr	r3, [pc, #172]	; (8008ee4 <modbus_slave_rx+0x120>)
 8008e36:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8008e3a:	e02c      	b.n	8008e96 <modbus_slave_rx+0xd2>
			}
		}

		else if(ch->rx_data_buf[1] == MODBUS_WRITE_MULTIPLE_REGISTER){
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	79db      	ldrb	r3, [r3, #7]
 8008e40:	2b10      	cmp	r3, #16
 8008e42:	d128      	bne.n	8008e96 <modbus_slave_rx+0xd2>
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 8008e44:	89bb      	ldrh	r3, [r7, #12]
 8008e46:	2b0f      	cmp	r3, #15
 8008e48:	d81c      	bhi.n	8008e84 <modbus_slave_rx+0xc0>
				for(uint8_t i = 0;i<register_qty;i++){
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	75fb      	strb	r3, [r7, #23]
 8008e4e:	e013      	b.n	8008e78 <modbus_slave_rx+0xb4>
					Modbus_Buf_Holding_Registers_40001[starting_addr+i] = modbus_byte2word(&ch->rx_data_buf[7+i*2]);
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	3307      	adds	r3, #7
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	4413      	add	r3, r2
 8008e5a:	1d99      	adds	r1, r3, #6
 8008e5c:	89ba      	ldrh	r2, [r7, #12]
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	18d4      	adds	r4, r2, r3
 8008e62:	4608      	mov	r0, r1
 8008e64:	f7ff fdca 	bl	80089fc <modbus_byte2word>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	4b1d      	ldr	r3, [pc, #116]	; (8008ee4 <modbus_slave_rx+0x120>)
 8008e6e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				for(uint8_t i = 0;i<register_qty;i++){
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	3301      	adds	r3, #1
 8008e76:	75fb      	strb	r3, [r7, #23]
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	8a3a      	ldrh	r2, [r7, #16]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d8e6      	bhi.n	8008e50 <modbus_slave_rx+0x8c>
 8008e82:	e008      	b.n	8008e96 <modbus_slave_rx+0xd2>
				}
			}
			else if(starting_addr = MODBUS_DEPLOYMENT_REGISTER){//deployment command
 8008e84:	23ff      	movs	r3, #255	; 0xff
 8008e86:	81bb      	strh	r3, [r7, #12]
				Parser_Modbus(&ch->rx_data_buf[7], byte_count);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	330d      	adds	r3, #13
 8008e8c:	7bfa      	ldrb	r2, [r7, #15]
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 ff57 	bl	8009d44 <Parser_Modbus>
		}

		else if(ch->rx_data_buf[1] == MODBUS_READ_HOLDING_REGISTER){
		}

		switch(ch->rx_data_buf[1]){
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	79db      	ldrb	r3, [r3, #7]
 8008e9a:	2b10      	cmp	r3, #16
 8008e9c:	bf8c      	ite	hi
 8008e9e:	2201      	movhi	r2, #1
 8008ea0:	2200      	movls	r2, #0
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	2a00      	cmp	r2, #0
 8008ea6:	d116      	bne.n	8008ed6 <modbus_slave_rx+0x112>
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	409a      	lsls	r2, r3
 8008eac:	4b0e      	ldr	r3, [pc, #56]	; (8008ee8 <modbus_slave_rx+0x124>)
 8008eae:	4013      	ands	r3, r2
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	bf14      	ite	ne
 8008eb4:	2301      	movne	r3, #1
 8008eb6:	2300      	moveq	r3, #0
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00b      	beq.n	8008ed6 <modbus_slave_rx+0x112>
			case MODBUS_WRITE_SINGLE_REGISTER:
			case MODBUS_WRITE_MULTIPLE_REGISTER:
			case MODBUS_READ_HOLDING_REGISTER:
			case MODBUS_READ_INPUT_REGISTER:
				//fill the responce structure
					modbus_slave_prep_resp_data(&resp_data,
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	79d9      	ldrb	r1, [r3, #7]
 8008ec2:	8a3b      	ldrh	r3, [r7, #16]
 8008ec4:	8aba      	ldrh	r2, [r7, #20]
 8008ec6:	4809      	ldr	r0, [pc, #36]	; (8008eec <modbus_slave_rx+0x128>)
 8008ec8:	f7ff fdae 	bl	8008a28 <modbus_slave_prep_resp_data>
													ch->rx_data_buf[1],
														register_addr,
															register_qty);

				//initiate_tx
				modbus_slave_tx(&resp_data);
 8008ecc:	4807      	ldr	r0, [pc, #28]	; (8008eec <modbus_slave_rx+0x128>)
 8008ece:	f7ff ff69 	bl	8008da4 <modbus_slave_tx>
				break;
 8008ed2:	e000      	b.n	8008ed6 <modbus_slave_rx+0x112>
		}
	}
 8008ed4:	bf00      	nop
	return 0;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	371c      	adds	r7, #28
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd90      	pop	{r4, r7, pc}
 8008ee0:	2000004c 	.word	0x2000004c
 8008ee4:	200013cc 	.word	0x200013cc
 8008ee8:	00010058 	.word	0x00010058
 8008eec:	200013ec 	.word	0x200013ec

08008ef0 <CRC16>:

uint16_t CRC16 (const uint8_t *nData, uint16_t wLength)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	807b      	strh	r3, [r7, #2]
   0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
   0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

uint8_t nTemp;
uint16_t wCRCWord = 0xFFFF;
 8008efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f00:	81fb      	strh	r3, [r7, #14]

   while (wLength--)
 8008f02:	e011      	b.n	8008f28 <CRC16+0x38>
   {
      nTemp = *nData++ ^ wCRCWord;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	1c5a      	adds	r2, r3, #1
 8008f08:	607a      	str	r2, [r7, #4]
 8008f0a:	781a      	ldrb	r2, [r3, #0]
 8008f0c:	89fb      	ldrh	r3, [r7, #14]
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	4053      	eors	r3, r2
 8008f12:	737b      	strb	r3, [r7, #13]
      wCRCWord >>= 8;
 8008f14:	89fb      	ldrh	r3, [r7, #14]
 8008f16:	0a1b      	lsrs	r3, r3, #8
 8008f18:	81fb      	strh	r3, [r7, #14]
      wCRCWord  ^= wCRCTable[nTemp];
 8008f1a:	7b7b      	ldrb	r3, [r7, #13]
 8008f1c:	4a08      	ldr	r2, [pc, #32]	; (8008f40 <CRC16+0x50>)
 8008f1e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008f22:	89fb      	ldrh	r3, [r7, #14]
 8008f24:	4053      	eors	r3, r2
 8008f26:	81fb      	strh	r3, [r7, #14]
   while (wLength--)
 8008f28:	887b      	ldrh	r3, [r7, #2]
 8008f2a:	1e5a      	subs	r2, r3, #1
 8008f2c:	807a      	strh	r2, [r7, #2]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1e8      	bne.n	8008f04 <CRC16+0x14>
   }
   return wCRCWord;
 8008f32:	89fb      	ldrh	r3, [r7, #14]
} // End: CRC16
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	0800d69c 	.word	0x0800d69c

08008f44 <fb_cycle_parser>:
#include "fb_cycle.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_cycle_parser(uint8_t* p){
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b092      	sub	sp, #72	; 0x48
 8008f48:	af02      	add	r7, sp, #8
 8008f4a:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint8_t rst = p[0];
 8008f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t don = (uint32_t) p[1] << 24 | p[2] << 16 | p[3] <<8 | p[4];
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	3301      	adds	r3, #1
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	061b      	lsls	r3, r3, #24
 8008f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f5e:	3202      	adds	r2, #2
 8008f60:	7812      	ldrb	r2, [r2, #0]
 8008f62:	0412      	lsls	r2, r2, #16
 8008f64:	4313      	orrs	r3, r2
 8008f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f68:	3203      	adds	r2, #3
 8008f6a:	7812      	ldrb	r2, [r2, #0]
 8008f6c:	0212      	lsls	r2, r2, #8
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f72:	3204      	adds	r2, #4
 8008f74:	7812      	ldrb	r2, [r2, #0]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t doff = (uint32_t) p[5] << 24 | p[6] << 16 | p[7] <<8 | p[8];
 8008f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7c:	3305      	adds	r3, #5
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	061b      	lsls	r3, r3, #24
 8008f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f84:	3206      	adds	r2, #6
 8008f86:	7812      	ldrb	r2, [r2, #0]
 8008f88:	0412      	lsls	r2, r2, #16
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f8e:	3207      	adds	r2, #7
 8008f90:	7812      	ldrb	r2, [r2, #0]
 8008f92:	0212      	lsls	r2, r2, #8
 8008f94:	4313      	orrs	r3, r2
 8008f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f98:	3208      	adds	r2, #8
 8008f9a:	7812      	ldrb	r2, [r2, #0]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t mode = p[9];
 8008fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa2:	7a5b      	ldrb	r3, [r3, #9]
 8008fa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t in = p[10];
 8008fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008faa:	7a9b      	ldrb	r3, [r3, #10]
 8008fac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	create_fb_cycle(rst,in, don,doff,mode);
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8008fb6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008fba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008fbe:	9301      	str	r3, [sp, #4]
 8008fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc6:	f000 f8cb 	bl	8009160 <create_fb_cycle>
	return 0;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3740      	adds	r7, #64	; 0x40
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <fb_cycle>:

void fb_cycle(uint8_t p){
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b08e      	sub	sp, #56	; 0x38
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	71fb      	strb	r3, [r7, #7]
	int32_t delta_time = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	637b      	str	r3, [r7, #52]	; 0x34

	s_Param* pAddrTable = get_paramAddrTable();
 8008fe2:	f7ff fa2d 	bl	8008440 <get_paramAddrTable>
 8008fe6:	6338      	str	r0, [r7, #48]	; 0x30
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ffa:	4413      	add	r3, r2
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t* in = &pAddrTable->value[pAddrTable->addr[p+1]];
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	3301      	adds	r3, #1
 8009004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009014:	4413      	add	r3, r2
 8009016:	3304      	adds	r3, #4
 8009018:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* don = &pAddrTable->value[pAddrTable->addr[p+2]];
 800901a:	79fb      	ldrb	r3, [r7, #7]
 800901c:	3302      	adds	r3, #2
 800901e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800902e:	4413      	add	r3, r2
 8009030:	3304      	adds	r3, #4
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* doff = &pAddrTable->value[pAddrTable->addr[p+3]];
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	3303      	adds	r3, #3
 8009038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009048:	4413      	add	r3, r2
 800904a:	3304      	adds	r3, #4
 800904c:	623b      	str	r3, [r7, #32]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+4]];
 800904e:	79fb      	ldrb	r3, [r7, #7]
 8009050:	3304      	adds	r3, #4
 8009052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009062:	4413      	add	r3, r2
 8009064:	3304      	adds	r3, #4
 8009066:	61fb      	str	r3, [r7, #28]
	int32_t* out = &pAddrTable->value[pAddrTable->addr[p+5]];
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	3305      	adds	r3, #5
 800906c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800907c:	4413      	add	r3, r2
 800907e:	3304      	adds	r3, #4
 8009080:	61bb      	str	r3, [r7, #24]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 8009082:	79fb      	ldrb	r3, [r7, #7]
 8009084:	3306      	adds	r3, #6
 8009086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009096:	4413      	add	r3, r2
 8009098:	3304      	adds	r3, #4
 800909a:	617b      	str	r3, [r7, #20]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+7]];
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	3307      	adds	r3, #7
 80090a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090b0:	4413      	add	r3, r2
 80090b2:	3304      	adds	r3, #4
 80090b4:	613b      	str	r3, [r7, #16]
	int32_t* cycle_counter = &pAddrTable->value[pAddrTable->addr[p+8]];
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	3308      	adds	r3, #8
 80090ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ca:	4413      	add	r3, r2
 80090cc:	3304      	adds	r3, #4
 80090ce:	60fb      	str	r3, [r7, #12]

	//get cycle_counter
	if(*cycle_counter == 0xFFFFFFFF) //initial value
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d8:	d10b      	bne.n	80090f2 <fb_cycle+0x11e>
	{
		*cycle_counter = hal_get_tick();
 80090da:	f7f7 fb93 	bl	8000804 <hal_get_tick>
 80090de:	4602      	mov	r2, r0
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	601a      	str	r2, [r3, #0]
		*val = 0;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	2200      	movs	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]
		*out = 0;
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	2200      	movs	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]
		else{
			*cycle_counter = hal_get_tick(); //resample again
			*val = *val + 1;
		}
	}
}
 80090f0:	e031      	b.n	8009156 <fb_cycle+0x182>
		delta_time = hal_get_tick() - *cycle_counter;
 80090f2:	f7f7 fb87 	bl	8000804 <hal_get_tick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	637b      	str	r3, [r7, #52]	; 0x34
		if(delta_time < 0){
 8009100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009102:	2b00      	cmp	r3, #0
 8009104:	da08      	bge.n	8009118 <fb_cycle+0x144>
			delta_time = 0xFFFFFFFF - *cycle_counter + hal_get_tick();
 8009106:	f7f7 fb7d 	bl	8000804 <hal_get_tick>
 800910a:	4603      	mov	r3, r0
 800910c:	461a      	mov	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	3b01      	subs	r3, #1
 8009116:	637b      	str	r3, [r7, #52]	; 0x34
		if(delta_time < *doff){
 8009118:	6a3b      	ldr	r3, [r7, #32]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800911e:	429a      	cmp	r2, r3
 8009120:	da03      	bge.n	800912a <fb_cycle+0x156>
			*out = 0;
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	2200      	movs	r2, #0
 8009126:	601a      	str	r2, [r3, #0]
}
 8009128:	e015      	b.n	8009156 <fb_cycle+0x182>
		else if(delta_time < *doff + *don){
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4413      	add	r3, r2
 8009134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009136:	429a      	cmp	r2, r3
 8009138:	da03      	bge.n	8009142 <fb_cycle+0x16e>
			*out = 1;
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	2201      	movs	r2, #1
 800913e:	601a      	str	r2, [r3, #0]
}
 8009140:	e009      	b.n	8009156 <fb_cycle+0x182>
			*cycle_counter = hal_get_tick(); //resample again
 8009142:	f7f7 fb5f 	bl	8000804 <hal_get_tick>
 8009146:	4602      	mov	r2, r0
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	601a      	str	r2, [r3, #0]
			*val = *val + 1;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	1c5a      	adds	r2, r3, #1
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	601a      	str	r2, [r3, #0]
}
 8009156:	bf00      	nop
 8009158:	3738      	adds	r7, #56	; 0x38
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <create_fb_cycle>:

type_fb_cycle create_fb_cycle(uint8_t rst,
								uint8_t in,
									uint32_t don,
										uint32_t doff,
											uint8_t mode){
 8009160:	b5b0      	push	{r4, r5, r7, lr}
 8009162:	b090      	sub	sp, #64	; 0x40
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	607b      	str	r3, [r7, #4]
 800916a:	460b      	mov	r3, r1
 800916c:	72fb      	strb	r3, [r7, #11]
 800916e:	4613      	mov	r3, r2
 8009170:	72bb      	strb	r3, [r7, #10]
	type_fb_cycle fb;

	s_Param* pAddrTable = get_paramAddrTable();
 8009172:	f7ff f965 	bl	8008440 <get_paramAddrTable>
 8009176:	63f8      	str	r0, [r7, #60]	; 0x3c

	fb.startParamIndex = pAddrTable->currentIndex;
 8009178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	757b      	strb	r3, [r7, #21]

	//input ports
	fb.fp.rst = createParameter(rst);
 800917e:	7afb      	ldrb	r3, [r7, #11]
 8009180:	4618      	mov	r0, r3
 8009182:	f7ff f98b 	bl	800849c <createParameter>
 8009186:	4603      	mov	r3, r0
 8009188:	61bb      	str	r3, [r7, #24]
	fb.fp.in = createParameter(in);
 800918a:	7abb      	ldrb	r3, [r7, #10]
 800918c:	4618      	mov	r0, r3
 800918e:	f7ff f985 	bl	800849c <createParameter>
 8009192:	4603      	mov	r3, r0
 8009194:	61fb      	str	r3, [r7, #28]
	fb.fp.don = createParameter(don);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff f97f 	bl	800849c <createParameter>
 800919e:	4603      	mov	r3, r0
 80091a0:	623b      	str	r3, [r7, #32]
	fb.fp.doff = createParameter(doff);
 80091a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7ff f979 	bl	800849c <createParameter>
 80091aa:	4603      	mov	r3, r0
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.mode = createParameter(mode);
 80091ae:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7ff f972 	bl	800849c <createParameter>
 80091b8:	4603      	mov	r3, r0
 80091ba:	62bb      	str	r3, [r7, #40]	; 0x28

	//output ports
	fb.fp.out = createParameter(0);
 80091bc:	2000      	movs	r0, #0
 80091be:	f7ff f96d 	bl	800849c <createParameter>
 80091c2:	4603      	mov	r3, r0
 80091c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.stat = createParameter(0);
 80091c6:	2000      	movs	r0, #0
 80091c8:	f7ff f968 	bl	800849c <createParameter>
 80091cc:	4603      	mov	r3, r0
 80091ce:	633b      	str	r3, [r7, #48]	; 0x30
	fb.fp.val = createParameter(0);
 80091d0:	2000      	movs	r0, #0
 80091d2:	f7ff f963 	bl	800849c <createParameter>
 80091d6:	4603      	mov	r3, r0
 80091d8:	637b      	str	r3, [r7, #52]	; 0x34

	//internal parameters
	fb.fp.cycle_counter = createParameter(0xFFFFFFFF);
 80091da:	f04f 30ff 	mov.w	r0, #4294967295
 80091de:	f7ff f95d 	bl	800849c <createParameter>
 80091e2:	4603      	mov	r3, r0
 80091e4:	63bb      	str	r3, [r7, #56]	; 0x38

	fb.fb_index = writeToFBTable(fb_cycle, fb.startParamIndex);
 80091e6:	7d7b      	ldrb	r3, [r7, #21]
 80091e8:	4619      	mov	r1, r3
 80091ea:	480a      	ldr	r0, [pc, #40]	; (8009214 <create_fb_cycle+0xb4>)
 80091ec:	f7ff f932 	bl	8008454 <writeToFBTable>
 80091f0:	4603      	mov	r3, r0
 80091f2:	753b      	strb	r3, [r7, #20]

	return fb;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	461d      	mov	r5, r3
 80091f8:	f107 0414 	add.w	r4, r7, #20
 80091fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009204:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009208:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	3740      	adds	r7, #64	; 0x40
 8009210:	46bd      	mov	sp, r7
 8009212:	bdb0      	pop	{r4, r5, r7, pc}
 8009214:	08008fd5 	.word	0x08008fd5

08009218 <fb_encoder_parser>:
#include "mcCore.h"
#include "fb_encoder.h"
#include "adaptor.h"

//cyclic event fb
uint8_t fb_encoder_parser(uint8_t* p){
 8009218:	b580      	push	{r7, lr}
 800921a:	b08a      	sub	sp, #40	; 0x28
 800921c:	af00      	add	r7, sp, #0
 800921e:	6278      	str	r0, [r7, #36]	; 0x24
	create_fb_encoder(p[0],p[1]);
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	7819      	ldrb	r1, [r3, #0]
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	3301      	adds	r3, #1
 8009228:	781a      	ldrb	r2, [r3, #0]
 800922a:	463b      	mov	r3, r7
 800922c:	4618      	mov	r0, r3
 800922e:	f000 f87d 	bl	800932c <create_fb_encoder>
	return 0;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3728      	adds	r7, #40	; 0x28
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <fb_encoder>:

void fb_encoder(uint8_t p){
 800923c:	b580      	push	{r7, lr}
 800923e:	b08a      	sub	sp, #40	; 0x28
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	71fb      	strb	r3, [r7, #7]
	int32_t newtimer;
	s_Param* pAddrTable = get_paramAddrTable();
 8009246:	f7ff f8fb 	bl	8008440 <get_paramAddrTable>
 800924a:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 800924c:	79fb      	ldrb	r3, [r7, #7]
 800924e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800925e:	4413      	add	r3, r2
 8009260:	3304      	adds	r3, #4
 8009262:	623b      	str	r3, [r7, #32]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p+1]];
 8009264:	79fb      	ldrb	r3, [r7, #7]
 8009266:	3301      	adds	r3, #1
 8009268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009278:	4413      	add	r3, r2
 800927a:	3304      	adds	r3, #4
 800927c:	61fb      	str	r3, [r7, #28]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	3302      	adds	r3, #2
 8009282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4413      	add	r3, r2
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009292:	4413      	add	r3, r2
 8009294:	3304      	adds	r3, #4
 8009296:	61bb      	str	r3, [r7, #24]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+3]];
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	3303      	adds	r3, #3
 800929c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ac:	4413      	add	r3, r2
 80092ae:	3304      	adds	r3, #4
 80092b0:	617b      	str	r3, [r7, #20]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	3304      	adds	r3, #4
 80092b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c6:	4413      	add	r3, r2
 80092c8:	3304      	adds	r3, #4
 80092ca:	613b      	str	r3, [r7, #16]
	int32_t* oldtimer = &pAddrTable->value[pAddrTable->addr[p+5]];
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	3305      	adds	r3, #5
 80092d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	4413      	add	r3, r2
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e0:	4413      	add	r3, r2
 80092e2:	3304      	adds	r3, #4
 80092e4:	60fb      	str	r3, [r7, #12]

	newtimer = hal_get_encoder_value(*ch);
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7f7 fc24 	bl	8000b38 <hal_get_encoder_value>
 80092f0:	60b8      	str	r0, [r7, #8]

	if(newtimer != *oldtimer){
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d00b      	beq.n	8009314 <fb_encoder+0xd8>
		*val = *val + (newtimer-*oldtimer);
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68b9      	ldr	r1, [r7, #8]
 8009306:	1acb      	subs	r3, r1, r3
 8009308:	441a      	add	r2, r3
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	601a      	str	r2, [r3, #0]
		*oldtimer = newtimer;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	601a      	str	r2, [r3, #0]
	}

	if(*rst == 1){
 8009314:	6a3b      	ldr	r3, [r7, #32]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d102      	bne.n	8009322 <fb_encoder+0xe6>
		*val = 0;
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
	}

}
 8009322:	bf00      	nop
 8009324:	3728      	adds	r7, #40	; 0x28
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <create_fb_encoder>:

type_fb_encoder create_fb_encoder(uint8_t ch,
									uint8_t mode){
 800932c:	b5b0      	push	{r4, r5, r7, lr}
 800932e:	b08a      	sub	sp, #40	; 0x28
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
 8009338:	4613      	mov	r3, r2
 800933a:	70bb      	strb	r3, [r7, #2]
	type_fb_encoder fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800933c:	f7ff f880 	bl	8008440 <get_paramAddrTable>
 8009340:	6278      	str	r0, [r7, #36]	; 0x24

	fb.startParamIndex = pAddrTable->currentIndex;
 8009342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	727b      	strb	r3, [r7, #9]

	//input ports
	fb.fp.rst = createParameter(0);
 8009348:	2000      	movs	r0, #0
 800934a:	f7ff f8a7 	bl	800849c <createParameter>
 800934e:	4603      	mov	r3, r0
 8009350:	60fb      	str	r3, [r7, #12]
	fb.fp.ch = createParameter(ch);
 8009352:	78fb      	ldrb	r3, [r7, #3]
 8009354:	4618      	mov	r0, r3
 8009356:	f7ff f8a1 	bl	800849c <createParameter>
 800935a:	4603      	mov	r3, r0
 800935c:	613b      	str	r3, [r7, #16]
	fb.fp.mode = createParameter(mode);
 800935e:	78bb      	ldrb	r3, [r7, #2]
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff f89b 	bl	800849c <createParameter>
 8009366:	4603      	mov	r3, r0
 8009368:	617b      	str	r3, [r7, #20]

	//output ports
	fb.fp.val = createParameter(0);
 800936a:	2000      	movs	r0, #0
 800936c:	f7ff f896 	bl	800849c <createParameter>
 8009370:	4603      	mov	r3, r0
 8009372:	61bb      	str	r3, [r7, #24]
	fb.fp.stat = createParameter(0);
 8009374:	2000      	movs	r0, #0
 8009376:	f7ff f891 	bl	800849c <createParameter>
 800937a:	4603      	mov	r3, r0
 800937c:	61fb      	str	r3, [r7, #28]

	//internal parameters
	fb.fp.oldtimer = createParameter(0);
 800937e:	2000      	movs	r0, #0
 8009380:	f7ff f88c 	bl	800849c <createParameter>
 8009384:	4603      	mov	r3, r0
 8009386:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_encoder, fb.startParamIndex);
 8009388:	7a7b      	ldrb	r3, [r7, #9]
 800938a:	4619      	mov	r1, r3
 800938c:	4809      	ldr	r0, [pc, #36]	; (80093b4 <create_fb_encoder+0x88>)
 800938e:	f7ff f861 	bl	8008454 <writeToFBTable>
 8009392:	4603      	mov	r3, r0
 8009394:	723b      	strb	r3, [r7, #8]

	return fb;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	461d      	mov	r5, r3
 800939a:	f107 0408 	add.w	r4, r7, #8
 800939e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80093a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	3728      	adds	r7, #40	; 0x28
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bdb0      	pop	{r4, r5, r7, pc}
 80093b2:	bf00      	nop
 80093b4:	0800923d 	.word	0x0800923d

080093b8 <fb_gui_display_parser>:
#include "utility.h"
#include "fb_gui_display.h"


//gui_display fb
uint8_t fb_gui_display_parser(uint8_t* p){
 80093b8:	b590      	push	{r4, r7, lr}
 80093ba:	b09b      	sub	sp, #108	; 0x6c
 80093bc:	af06      	add	r7, sp, #24
 80093be:	6378      	str	r0, [r7, #52]	; 0x34
	uint16_t index = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	87bb      	strh	r3, [r7, #60]	; 0x3c

	uint16_t startX = get_uint16(p, &index);
 80093c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80093c8:	4619      	mov	r1, r3
 80093ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80093cc:	f000 fec1 	bl	800a152 <get_uint16>
 80093d0:	4603      	mov	r3, r0
 80093d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t startY = get_uint16(p, &index);
 80093d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80093da:	4619      	mov	r1, r3
 80093dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80093de:	f000 feb8 	bl	800a152 <get_uint16>
 80093e2:	4603      	mov	r3, r0
 80093e4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t width = get_uint16(p, &index);
 80093e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80093ec:	4619      	mov	r1, r3
 80093ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80093f0:	f000 feaf 	bl	800a152 <get_uint16>
 80093f4:	4603      	mov	r3, r0
 80093f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint16_t height = get_uint16(p, &index);
 80093fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80093fe:	4619      	mov	r1, r3
 8009400:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009402:	f000 fea6 	bl	800a152 <get_uint16>
 8009406:	4603      	mov	r3, r0
 8009408:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint8_t attr = get_uint8(p, &index);
 800940c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009410:	4619      	mov	r1, r3
 8009412:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009414:	f000 fe84 	bl	800a120 <get_uint8>
 8009418:	4603      	mov	r3, r0
 800941a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t val = get_uint32(p, &index);
 800941e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009422:	4619      	mov	r1, r3
 8009424:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009426:	f000 feb8 	bl	800a19a <get_uint32>
 800942a:	4603      	mov	r3, r0
 800942c:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t mode = get_uint8(p, &index);
 800942e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009432:	4619      	mov	r1, r3
 8009434:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009436:	f000 fe73 	bl	800a120 <get_uint8>
 800943a:	4603      	mov	r3, r0
 800943c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t mid = get_uint8(p, &index);
 8009440:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009444:	4619      	mov	r1, r3
 8009446:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009448:	f000 fe6a 	bl	800a120 <get_uint8>
 800944c:	4603      	mov	r3, r0
 800944e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	create_fb_gui_display(startX, startY, width, height, attr, val, mode, mid);
 8009452:	4638      	mov	r0, r7
 8009454:	f8b7 404a 	ldrh.w	r4, [r7, #74]	; 0x4a
 8009458:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800945c:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8009460:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009464:	9304      	str	r3, [sp, #16]
 8009466:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800946a:	9303      	str	r3, [sp, #12]
 800946c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946e:	9302      	str	r3, [sp, #8]
 8009470:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	4623      	mov	r3, r4
 800947e:	f000 f90f 	bl	80096a0 <create_fb_gui_display>

	return 0;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3754      	adds	r7, #84	; 0x54
 8009488:	46bd      	mov	sp, r7
 800948a:	bd90      	pop	{r4, r7, pc}

0800948c <fb_gui_display>:

void fb_gui_display(uint8_t p){
 800948c:	b5b0      	push	{r4, r5, r7, lr}
 800948e:	b098      	sub	sp, #96	; 0x60
 8009490:	af04      	add	r7, sp, #16
 8009492:	4603      	mov	r3, r0
 8009494:	71fb      	strb	r3, [r7, #7]
	uint32_t time, delta;

	s_Param* pAddrTable = get_paramAddrTable();
 8009496:	f7fe ffd3 	bl	8008440 <get_paramAddrTable>
 800949a:	64b8      	str	r0, [r7, #72]	; 0x48
	int32_t* startX = &pAddrTable->value[pAddrTable->addr[p]];
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094ae:	4413      	add	r3, r2
 80094b0:	3304      	adds	r3, #4
 80094b2:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t* startY = &pAddrTable->value[pAddrTable->addr[p+1]];
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	3301      	adds	r3, #1
 80094b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094c8:	4413      	add	r3, r2
 80094ca:	3304      	adds	r3, #4
 80094cc:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t* width = &pAddrTable->value[pAddrTable->addr[p+2]];
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	3302      	adds	r3, #2
 80094d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094e2:	4413      	add	r3, r2
 80094e4:	3304      	adds	r3, #4
 80094e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t* height = &pAddrTable->value[pAddrTable->addr[p+3]];
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	3303      	adds	r3, #3
 80094ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094fc:	4413      	add	r3, r2
 80094fe:	3304      	adds	r3, #4
 8009500:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t* attr = &pAddrTable->value[pAddrTable->addr[p+4]];
 8009502:	79fb      	ldrb	r3, [r7, #7]
 8009504:	3304      	adds	r3, #4
 8009506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009516:	4413      	add	r3, r2
 8009518:	3304      	adds	r3, #4
 800951a:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+5]];
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	3305      	adds	r3, #5
 8009520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009530:	4413      	add	r3, r2
 8009532:	3304      	adds	r3, #4
 8009534:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+6]];
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	3306      	adds	r3, #6
 800953a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800954a:	4413      	add	r3, r2
 800954c:	3304      	adds	r3, #4
 800954e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t* mid = &pAddrTable->value[pAddrTable->addr[p+7]];
 8009550:	79fb      	ldrb	r3, [r7, #7]
 8009552:	3307      	adds	r3, #7
 8009554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009564:	4413      	add	r3, r2
 8009566:	3304      	adds	r3, #4
 8009568:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+8]];
 800956a:	79fb      	ldrb	r3, [r7, #7]
 800956c:	3308      	adds	r3, #8
 800956e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800957e:	4413      	add	r3, r2
 8009580:	3304      	adds	r3, #4
 8009582:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* old_val = &pAddrTable->value[pAddrTable->addr[p+9]];
 8009584:	79fb      	ldrb	r3, [r7, #7]
 8009586:	3309      	adds	r3, #9
 8009588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009598:	4413      	add	r3, r2
 800959a:	3304      	adds	r3, #4
 800959c:	623b      	str	r3, [r7, #32]
	int32_t* old_time = &pAddrTable->value[pAddrTable->addr[p+10]];
 800959e:	79fb      	ldrb	r3, [r7, #7]
 80095a0:	330a      	adds	r3, #10
 80095a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095b2:	4413      	add	r3, r2
 80095b4:	3304      	adds	r3, #4
 80095b6:	61fb      	str	r3, [r7, #28]

	if(*old_val != *val){
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d069      	beq.n	8009698 <fb_gui_display+0x20c>
		time = hal_get_tick();
 80095c4:	f7f7 f91e 	bl	8000804 <hal_get_tick>
 80095c8:	4603      	mov	r3, r0
 80095ca:	61bb      	str	r3, [r7, #24]

		if(time > *old_time){
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	461a      	mov	r2, r3
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d906      	bls.n	80095e6 <fb_gui_display+0x15a>
			delta = time - (uint32_t) *old_time;
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	1a9b      	subs	r3, r3, r2
 80095e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095e4:	e006      	b.n	80095f4 <fb_gui_display+0x168>
		}

		else{
			delta = time + (0xFFFFFFFF - *old_time);
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	1a9b      	subs	r3, r3, r2
 80095f0:	3b01      	subs	r3, #1
 80095f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		}

		if(delta > 1000){ //1000ms'den önce refresh işlemi yapma
 80095f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095fa:	d94d      	bls.n	8009698 <fb_gui_display+0x20c>
			*old_val = *val;
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	601a      	str	r2, [r3, #0]
			*old_time = time;
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	601a      	str	r2, [r3, #0]
			if(*mode == 0){ //text mode
 800960a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d12c      	bne.n	800966c <fb_gui_display+0x1e0>
				//val holds the data at the global text table
				glob_text_element_table_t* table = get_text_element_table();
 8009612:	f7ff f87f 	bl	8008714 <get_text_element_table>
 8009616:	4603      	mov	r3, r0
 8009618:	617b      	str	r3, [r7, #20]
				char* str = table->e[*val].value;
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	4613      	mov	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	4413      	add	r3, r2
 800962a:	3306      	adds	r3, #6
 800962c:	613b      	str	r3, [r7, #16]
				uint16_t len = table->e[*val].length;
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	6979      	ldr	r1, [r7, #20]
 8009634:	4613      	mov	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	440b      	add	r3, r1
 800963e:	3304      	adds	r3, #4
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	81fb      	strh	r3, [r7, #14]
				Display_String(*startX, *startY, *width, *height, *attr, str, len);
 8009644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800964a:	6819      	ldr	r1, [r3, #0]
 800964c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964e:	681c      	ldr	r4, [r3, #0]
 8009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009652:	681d      	ldr	r5, [r3, #0]
 8009654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	89fa      	ldrh	r2, [r7, #14]
 800965a:	9202      	str	r2, [sp, #8]
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	9201      	str	r2, [sp, #4]
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	462b      	mov	r3, r5
 8009664:	4622      	mov	r2, r4
 8009666:	f7f7 fa7f 	bl	8000b68 <Display_String>
			else if(*mode == 1){ //number mode
				Display_Number(*startX, *startY, *width, *height, *attr, *val);
			}
		}
	}
}
 800966a:	e015      	b.n	8009698 <fb_gui_display+0x20c>
			else if(*mode == 1){ //number mode
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d111      	bne.n	8009698 <fb_gui_display+0x20c>
				Display_Number(*startX, *startY, *width, *height, *attr, *val);
 8009674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009676:	6818      	ldr	r0, [r3, #0]
 8009678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800967a:	6819      	ldr	r1, [r3, #0]
 800967c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967e:	681c      	ldr	r4, [r3, #0]
 8009680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009682:	681d      	ldr	r5, [r3, #0]
 8009684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800968a:	6812      	ldr	r2, [r2, #0]
 800968c:	9201      	str	r2, [sp, #4]
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	462b      	mov	r3, r5
 8009692:	4622      	mov	r2, r4
 8009694:	f7f7 fa92 	bl	8000bbc <Display_Number>
}
 8009698:	bf00      	nop
 800969a:	3750      	adds	r7, #80	; 0x50
 800969c:	46bd      	mov	sp, r7
 800969e:	bdb0      	pop	{r4, r5, r7, pc}

080096a0 <create_fb_gui_display>:

type_fb_gui_display create_fb_gui_display(uint16_t startX, uint16_t startY,
											uint16_t width, uint16_t height,
												uint8_t attr, uint32_t val,
													uint8_t mode, uint8_t mid)
{
 80096a0:	b5b0      	push	{r4, r5, r7, lr}
 80096a2:	b092      	sub	sp, #72	; 0x48
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	4608      	mov	r0, r1
 80096aa:	4611      	mov	r1, r2
 80096ac:	461a      	mov	r2, r3
 80096ae:	4603      	mov	r3, r0
 80096b0:	817b      	strh	r3, [r7, #10]
 80096b2:	460b      	mov	r3, r1
 80096b4:	813b      	strh	r3, [r7, #8]
 80096b6:	4613      	mov	r3, r2
 80096b8:	80fb      	strh	r3, [r7, #6]
	
	type_fb_gui_display fb;

	s_Param* pAddrTable = get_paramAddrTable();
 80096ba:	f7fe fec1 	bl	8008440 <get_paramAddrTable>
 80096be:	6478      	str	r0, [r7, #68]	; 0x44

	fb.startParamIndex = pAddrTable->currentIndex;
 80096c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	757b      	strb	r3, [r7, #21]

	//input ports
	fb.fp.startX = createParameter(startX);
 80096c6:	897b      	ldrh	r3, [r7, #10]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fe fee7 	bl	800849c <createParameter>
 80096ce:	4603      	mov	r3, r0
 80096d0:	61bb      	str	r3, [r7, #24]
	fb.fp.startY = createParameter(startY);
 80096d2:	893b      	ldrh	r3, [r7, #8]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fe fee1 	bl	800849c <createParameter>
 80096da:	4603      	mov	r3, r0
 80096dc:	61fb      	str	r3, [r7, #28]
	fb.fp.width = createParameter(width);
 80096de:	88fb      	ldrh	r3, [r7, #6]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fe fedb 	bl	800849c <createParameter>
 80096e6:	4603      	mov	r3, r0
 80096e8:	623b      	str	r3, [r7, #32]
	fb.fp.height = createParameter(height);
 80096ea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fed4 	bl	800849c <createParameter>
 80096f4:	4603      	mov	r3, r0
 80096f6:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.attr = createParameter(attr);
 80096f8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fe fecd 	bl	800849c <createParameter>
 8009702:	4603      	mov	r3, r0
 8009704:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.val = createParameter(val);
 8009706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe fec7 	bl	800849c <createParameter>
 800970e:	4603      	mov	r3, r0
 8009710:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.mode = createParameter(mode);
 8009712:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe fec0 	bl	800849c <createParameter>
 800971c:	4603      	mov	r3, r0
 800971e:	633b      	str	r3, [r7, #48]	; 0x30
	fb.fp.mid = createParameter(mid);
 8009720:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8009724:	4618      	mov	r0, r3
 8009726:	f7fe feb9 	bl	800849c <createParameter>
 800972a:	4603      	mov	r3, r0
 800972c:	637b      	str	r3, [r7, #52]	; 0x34

	//output ports
	fb.fp.stat = createParameter(0);
 800972e:	2000      	movs	r0, #0
 8009730:	f7fe feb4 	bl	800849c <createParameter>
 8009734:	4603      	mov	r3, r0
 8009736:	63bb      	str	r3, [r7, #56]	; 0x38

	//internal parameters
	fb.fp.old_val = createParameter(-1);
 8009738:	f04f 30ff 	mov.w	r0, #4294967295
 800973c:	f7fe feae 	bl	800849c <createParameter>
 8009740:	4603      	mov	r3, r0
 8009742:	63fb      	str	r3, [r7, #60]	; 0x3c
	fb.fp.old_time = createParameter(0);
 8009744:	2000      	movs	r0, #0
 8009746:	f7fe fea9 	bl	800849c <createParameter>
 800974a:	4603      	mov	r3, r0
 800974c:	643b      	str	r3, [r7, #64]	; 0x40

	fb.fb_index = writeToFBTable(fb_gui_display, fb.startParamIndex);
 800974e:	7d7b      	ldrb	r3, [r7, #21]
 8009750:	4619      	mov	r1, r3
 8009752:	480a      	ldr	r0, [pc, #40]	; (800977c <create_fb_gui_display+0xdc>)
 8009754:	f7fe fe7e 	bl	8008454 <writeToFBTable>
 8009758:	4603      	mov	r3, r0
 800975a:	753b      	strb	r3, [r7, #20]

	return fb;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	461d      	mov	r5, r3
 8009760:	f107 0414 	add.w	r4, r7, #20
 8009764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800976a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800976c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009770:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	3748      	adds	r7, #72	; 0x48
 8009778:	46bd      	mov	sp, r7
 800977a:	bdb0      	pop	{r4, r5, r7, pc}
 800977c:	0800948d 	.word	0x0800948d

08009780 <fb_inputpin_parser>:

/*--------------------------------------------------------------------------------------
						Function Block Functions
----------------------------------------------------------------------------------------*/

uint8_t fb_inputpin_parser(uint8_t* p){
 8009780:	b580      	push	{r7, lr}
 8009782:	b08a      	sub	sp, #40	; 0x28
 8009784:	af00      	add	r7, sp, #0
 8009786:	61f8      	str	r0, [r7, #28]
	uint8_t ch = p[0];
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t mode = p[1];
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	785b      	ldrb	r3, [r3, #1]
 8009794:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_inputpin(ch, mode);
 8009798:	463b      	mov	r3, r7
 800979a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800979e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 f84c 	bl	8009840 <create_fb_inputpin>
	return 0;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3728      	adds	r7, #40	; 0x28
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <fb_inputpin>:

void fb_inputpin(uint8_t p){
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b088      	sub	sp, #32
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	4603      	mov	r3, r0
 80097ba:	71fb      	strb	r3, [r7, #7]

	s_Param* pAddrTable = get_paramAddrTable();
 80097bc:	f7fe fe40 	bl	8008440 <get_paramAddrTable>
 80097c0:	61f8      	str	r0, [r7, #28]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p]];
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	69fa      	ldr	r2, [r7, #28]
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	69fa      	ldr	r2, [r7, #28]
 80097d4:	4413      	add	r3, r2
 80097d6:	3304      	adds	r3, #4
 80097d8:	61bb      	str	r3, [r7, #24]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+1]];
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	3301      	adds	r3, #1
 80097de:	69fa      	ldr	r2, [r7, #28]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	69fa      	ldr	r2, [r7, #28]
 80097ee:	4413      	add	r3, r2
 80097f0:	3304      	adds	r3, #4
 80097f2:	617b      	str	r3, [r7, #20]
	int32_t* q = &pAddrTable->value[pAddrTable->addr[p+2]];
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	3302      	adds	r3, #2
 80097f8:	69fa      	ldr	r2, [r7, #28]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	69fa      	ldr	r2, [r7, #28]
 8009808:	4413      	add	r3, r2
 800980a:	3304      	adds	r3, #4
 800980c:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	3303      	adds	r3, #3
 8009812:	69fa      	ldr	r2, [r7, #28]
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	69fa      	ldr	r2, [r7, #28]
 8009822:	4413      	add	r3, r2
 8009824:	3304      	adds	r3, #4
 8009826:	60fb      	str	r3, [r7, #12]

	*q =  hal_gpio_read_pin((uint32_t)*ch);
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4618      	mov	r0, r3
 800982e:	f7f6 ff55 	bl	80006dc <hal_gpio_read_pin>
 8009832:	4602      	mov	r2, r0
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	601a      	str	r2, [r3, #0]
}
 8009838:	bf00      	nop
 800983a:	3720      	adds	r7, #32
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <create_fb_inputpin>:


type_fb_inputpin create_fb_inputpin(uint8_t ch, uint8_t mode){
 8009840:	b5b0      	push	{r4, r5, r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	70fb      	strb	r3, [r7, #3]
 800984c:	4613      	mov	r3, r2
 800984e:	70bb      	strb	r3, [r7, #2]
	type_fb_inputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 8009850:	f7fe fdf6 	bl	8008440 <get_paramAddrTable>
 8009854:	61f8      	str	r0, [r7, #28]

	fb.startParamIndex = pAddrTable->currentIndex;
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	727b      	strb	r3, [r7, #9]

	fb.fp.ch = createParameter(ch); //input
 800985c:	78fb      	ldrb	r3, [r7, #3]
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe fe1c 	bl	800849c <createParameter>
 8009864:	4603      	mov	r3, r0
 8009866:	60fb      	str	r3, [r7, #12]
	fb.fp.mode = createParameter(mode); //pin
 8009868:	78bb      	ldrb	r3, [r7, #2]
 800986a:	4618      	mov	r0, r3
 800986c:	f7fe fe16 	bl	800849c <createParameter>
 8009870:	4603      	mov	r3, r0
 8009872:	613b      	str	r3, [r7, #16]
	fb.fp.q = createParameter(0);
 8009874:	2000      	movs	r0, #0
 8009876:	f7fe fe11 	bl	800849c <createParameter>
 800987a:	4603      	mov	r3, r0
 800987c:	617b      	str	r3, [r7, #20]
	fb.fp.stat = createParameter(0);
 800987e:	2000      	movs	r0, #0
 8009880:	f7fe fe0c 	bl	800849c <createParameter>
 8009884:	4603      	mov	r3, r0
 8009886:	61bb      	str	r3, [r7, #24]

	fb.fb_index = writeToFBTable(fb_inputpin, fb.startParamIndex);
 8009888:	7a7b      	ldrb	r3, [r7, #9]
 800988a:	4619      	mov	r1, r3
 800988c:	4808      	ldr	r0, [pc, #32]	; (80098b0 <create_fb_inputpin+0x70>)
 800988e:	f7fe fde1 	bl	8008454 <writeToFBTable>
 8009892:	4603      	mov	r3, r0
 8009894:	723b      	strb	r3, [r7, #8]

	return fb;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	461d      	mov	r5, r3
 800989a:	f107 0408 	add.w	r4, r7, #8
 800989e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	602b      	str	r3, [r5, #0]
}
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	3720      	adds	r7, #32
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bdb0      	pop	{r4, r5, r7, pc}
 80098ae:	bf00      	nop
 80098b0:	080097b3 	.word	0x080097b3

080098b4 <fb_jy_parser>:
#include "fb_jy.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_jy_parser(uint8_t* p){
 80098b4:	b590      	push	{r4, r7, lr}
 80098b6:	b08f      	sub	sp, #60	; 0x3c
 80098b8:	af02      	add	r7, sp, #8
 80098ba:	62f8      	str	r0, [r7, #44]	; 0x2c
	create_fb_jy(p[0],p[1], p[2],p[3]);
 80098bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098be:	7819      	ldrb	r1, [r3, #0]
 80098c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c2:	3301      	adds	r3, #1
 80098c4:	781a      	ldrb	r2, [r3, #0]
 80098c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c8:	3302      	adds	r3, #2
 80098ca:	781c      	ldrb	r4, [r3, #0]
 80098cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ce:	3303      	adds	r3, #3
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	4638      	mov	r0, r7
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	4623      	mov	r3, r4
 80098d8:	f000 f890 	bl	80099fc <create_fb_jy>
	return 0;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3734      	adds	r7, #52	; 0x34
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd90      	pop	{r4, r7, pc}

080098e6 <fb_jy>:

void fb_jy(uint8_t p){
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b08c      	sub	sp, #48	; 0x30
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	4603      	mov	r3, r0
 80098ee:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 80098f0:	f7fe fda6 	bl	8008440 <get_paramAddrTable>
 80098f4:	62f8      	str	r0, [r7, #44]	; 0x2c
	int32_t* ch_x = &pAddrTable->value[pAddrTable->addr[p]];
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009908:	4413      	add	r3, r2
 800990a:	3304      	adds	r3, #4
 800990c:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* ch_y = &pAddrTable->value[pAddrTable->addr[p+1]];
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	3301      	adds	r3, #1
 8009912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009922:	4413      	add	r3, r2
 8009924:	3304      	adds	r3, #4
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* ch_btn = &pAddrTable->value[pAddrTable->addr[p+2]];
 8009928:	79fb      	ldrb	r3, [r7, #7]
 800992a:	3302      	adds	r3, #2
 800992c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800993c:	4413      	add	r3, r2
 800993e:	3304      	adds	r3, #4
 8009940:	623b      	str	r3, [r7, #32]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+3]];
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	3303      	adds	r3, #3
 8009946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009956:	4413      	add	r3, r2
 8009958:	3304      	adds	r3, #4
 800995a:	61fb      	str	r3, [r7, #28]
	int32_t* x = &pAddrTable->value[pAddrTable->addr[p+4]];
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	3304      	adds	r3, #4
 8009960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009970:	4413      	add	r3, r2
 8009972:	3304      	adds	r3, #4
 8009974:	61bb      	str	r3, [r7, #24]
	int32_t* y = &pAddrTable->value[pAddrTable->addr[p+5]];
 8009976:	79fb      	ldrb	r3, [r7, #7]
 8009978:	3305      	adds	r3, #5
 800997a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800998a:	4413      	add	r3, r2
 800998c:	3304      	adds	r3, #4
 800998e:	617b      	str	r3, [r7, #20]
	int32_t* btn = &pAddrTable->value[pAddrTable->addr[p+6]];
 8009990:	79fb      	ldrb	r3, [r7, #7]
 8009992:	3306      	adds	r3, #6
 8009994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4413      	add	r3, r2
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099a4:	4413      	add	r3, r2
 80099a6:	3304      	adds	r3, #4
 80099a8:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+7]];
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	3307      	adds	r3, #7
 80099ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099be:	4413      	add	r3, r2
 80099c0:	3304      	adds	r3, #4
 80099c2:	60fb      	str	r3, [r7, #12]

	*x = hal_read_analog_ch(*ch_x);
 80099c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7f6 feb9 	bl	8000740 <hal_read_analog_ch>
 80099ce:	4602      	mov	r2, r0
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	601a      	str	r2, [r3, #0]
	*y = hal_read_analog_ch(*ch_y);
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4618      	mov	r0, r3
 80099da:	f7f6 feb1 	bl	8000740 <hal_read_analog_ch>
 80099de:	4602      	mov	r2, r0
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	601a      	str	r2, [r3, #0]
	*btn = hal_gpio_read_pin(*ch_btn);
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7f6 fe77 	bl	80006dc <hal_gpio_read_pin>
 80099ee:	4602      	mov	r2, r0
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	601a      	str	r2, [r3, #0]
}
 80099f4:	bf00      	nop
 80099f6:	3730      	adds	r7, #48	; 0x30
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <create_fb_jy>:

type_fb_jy create_fb_jy(uint8_t ch_x,
								uint8_t ch_y,
									uint8_t ch_btn,
											uint8_t mode){
 80099fc:	b5b0      	push	{r4, r5, r7, lr}
 80099fe:	b08c      	sub	sp, #48	; 0x30
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	4608      	mov	r0, r1
 8009a06:	4611      	mov	r1, r2
 8009a08:	461a      	mov	r2, r3
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	70fb      	strb	r3, [r7, #3]
 8009a0e:	460b      	mov	r3, r1
 8009a10:	70bb      	strb	r3, [r7, #2]
 8009a12:	4613      	mov	r3, r2
 8009a14:	707b      	strb	r3, [r7, #1]
	type_fb_jy fb;

	s_Param* pAddrTable = get_paramAddrTable();
 8009a16:	f7fe fd13 	bl	8008440 <get_paramAddrTable>
 8009a1a:	62f8      	str	r0, [r7, #44]	; 0x2c

	fb.startParamIndex = pAddrTable->currentIndex;
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	727b      	strb	r3, [r7, #9]

	//input ports
	fb.fp.ch_x = createParameter(ch_x);
 8009a22:	78fb      	ldrb	r3, [r7, #3]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe fd39 	bl	800849c <createParameter>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	60fb      	str	r3, [r7, #12]
	fb.fp.ch_y = createParameter(ch_y);
 8009a2e:	78bb      	ldrb	r3, [r7, #2]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7fe fd33 	bl	800849c <createParameter>
 8009a36:	4603      	mov	r3, r0
 8009a38:	613b      	str	r3, [r7, #16]
	fb.fp.ch_btn = createParameter(ch_btn);
 8009a3a:	787b      	ldrb	r3, [r7, #1]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fe fd2d 	bl	800849c <createParameter>
 8009a42:	4603      	mov	r3, r0
 8009a44:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode);
 8009a46:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe fd26 	bl	800849c <createParameter>
 8009a50:	4603      	mov	r3, r0
 8009a52:	61bb      	str	r3, [r7, #24]

	//output ports
	fb.fp.x = createParameter(0);
 8009a54:	2000      	movs	r0, #0
 8009a56:	f7fe fd21 	bl	800849c <createParameter>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	61fb      	str	r3, [r7, #28]
	fb.fp.y = createParameter(0);
 8009a5e:	2000      	movs	r0, #0
 8009a60:	f7fe fd1c 	bl	800849c <createParameter>
 8009a64:	4603      	mov	r3, r0
 8009a66:	623b      	str	r3, [r7, #32]
	fb.fp.btn = createParameter(0);
 8009a68:	2000      	movs	r0, #0
 8009a6a:	f7fe fd17 	bl	800849c <createParameter>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.stat = createParameter(0);
 8009a72:	2000      	movs	r0, #0
 8009a74:	f7fe fd12 	bl	800849c <createParameter>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	62bb      	str	r3, [r7, #40]	; 0x28

	//internal parameters

	fb.fb_index = writeToFBTable(fb_jy, fb.startParamIndex);
 8009a7c:	7a7b      	ldrb	r3, [r7, #9]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4809      	ldr	r0, [pc, #36]	; (8009aa8 <create_fb_jy+0xac>)
 8009a82:	f7fe fce7 	bl	8008454 <writeToFBTable>
 8009a86:	4603      	mov	r3, r0
 8009a88:	723b      	strb	r3, [r7, #8]

	return fb;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	461d      	mov	r5, r3
 8009a8e:	f107 0408 	add.w	r4, r7, #8
 8009a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	602b      	str	r3, [r5, #0]
}
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	3730      	adds	r7, #48	; 0x30
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	080098e7 	.word	0x080098e7

08009aac <fb_output_pin_parser>:
#include "fb_outputpin.h"
#include "adaptor.h"


//output fb
uint8_t fb_output_pin_parser(uint8_t* p){
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08a      	sub	sp, #40	; 0x28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	61f8      	str	r0, [r7, #28]
	uint8_t ch = p[0];
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t val = p[1];
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	785b      	ldrb	r3, [r3, #1]
 8009ac0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t mode = p[2];
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	789b      	ldrb	r3, [r3, #2]
 8009ac8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	create_fb_outputpin(ch, val, mode);
 8009acc:	4638      	mov	r0, r7
 8009ace:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009ad2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009ad6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8009ada:	f000 f86d 	bl	8009bb8 <create_fb_outputpin>
	return 0;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3728      	adds	r7, #40	; 0x28
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <fb_outputpin>:

void fb_outputpin(uint8_t p){
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b088      	sub	sp, #32
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 8009af2:	f7fe fca5 	bl	8008440 <get_paramAddrTable>
 8009af6:	61f8      	str	r0, [r7, #28]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p]];
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	69fa      	ldr	r2, [r7, #28]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	69fa      	ldr	r2, [r7, #28]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	61bb      	str	r3, [r7, #24]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+1]];
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	3301      	adds	r3, #1
 8009b14:	69fa      	ldr	r2, [r7, #28]
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	69fa      	ldr	r2, [r7, #28]
 8009b24:	4413      	add	r3, r2
 8009b26:	3304      	adds	r3, #4
 8009b28:	617b      	str	r3, [r7, #20]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
 8009b2c:	3302      	adds	r3, #2
 8009b2e:	69fa      	ldr	r2, [r7, #28]
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	4413      	add	r3, r2
 8009b40:	3304      	adds	r3, #4
 8009b42:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 8009b44:	79fb      	ldrb	r3, [r7, #7]
 8009b46:	3303      	adds	r3, #3
 8009b48:	69fa      	ldr	r2, [r7, #28]
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4413      	add	r3, r2
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	69fa      	ldr	r2, [r7, #28]
 8009b58:	4413      	add	r3, r2
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	60fb      	str	r3, [r7, #12]
	int32_t* last_val = &pAddrTable->value[pAddrTable->addr[p+4]];
 8009b5e:	79fb      	ldrb	r3, [r7, #7]
 8009b60:	3304      	adds	r3, #4
 8009b62:	69fa      	ldr	r2, [r7, #28]
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	69fa      	ldr	r2, [r7, #28]
 8009b72:	4413      	add	r3, r2
 8009b74:	3304      	adds	r3, #4
 8009b76:	60bb      	str	r3, [r7, #8]

	if ( *val != *last_val){
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d015      	beq.n	8009bb0 <fb_outputpin+0xc8>
		*last_val = *val;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	601a      	str	r2, [r3, #0]
		if(*val >1) *val = 1;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	dd02      	ble.n	8009b9a <fb_outputpin+0xb2>
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2201      	movs	r2, #1
 8009b98:	601a      	str	r2, [r3, #0]

		hal_gpio_write_pin((uint16_t)*ch, (uint8_t)*val);
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4610      	mov	r0, r2
 8009bac:	f7f6 fd78 	bl	80006a0 <hal_gpio_write_pin>
	}
}
 8009bb0:	bf00      	nop
 8009bb2:	3720      	adds	r7, #32
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <create_fb_outputpin>:

type_fb_outputpin create_fb_outputpin(uint8_t ch, uint8_t val, uint8_t mode){
 8009bb8:	b5b0      	push	{r4, r5, r7, lr}
 8009bba:	b08a      	sub	sp, #40	; 0x28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	70fb      	strb	r3, [r7, #3]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	70bb      	strb	r3, [r7, #2]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	707b      	strb	r3, [r7, #1]
	type_fb_outputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 8009bd2:	f7fe fc35 	bl	8008440 <get_paramAddrTable>
 8009bd6:	6278      	str	r0, [r7, #36]	; 0x24

	fb.startParamIndex = pAddrTable->currentIndex;
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	737b      	strb	r3, [r7, #13]

	//input ports
	fb.fp.ch = createParameter(ch); //output
 8009bde:	78fb      	ldrb	r3, [r7, #3]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fe fc5b 	bl	800849c <createParameter>
 8009be6:	4603      	mov	r3, r0
 8009be8:	613b      	str	r3, [r7, #16]
	fb.fp.val = createParameter(val); //pin
 8009bea:	78bb      	ldrb	r3, [r7, #2]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fe fc55 	bl	800849c <createParameter>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode); //pin
 8009bf6:	787b      	ldrb	r3, [r7, #1]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fe fc4f 	bl	800849c <createParameter>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	61bb      	str	r3, [r7, #24]

	//output ports
	fb.fp.stat = createParameter(0);
 8009c02:	2000      	movs	r0, #0
 8009c04:	f7fe fc4a 	bl	800849c <createParameter>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	61fb      	str	r3, [r7, #28]

	//internal values
	fb.fp.last_val = createParameter(-1);
 8009c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c10:	f7fe fc44 	bl	800849c <createParameter>
 8009c14:	4603      	mov	r3, r0
 8009c16:	623b      	str	r3, [r7, #32]



	fb.fb_index = writeToFBTable(fb_outputpin, fb.startParamIndex);
 8009c18:	7b7b      	ldrb	r3, [r7, #13]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4809      	ldr	r0, [pc, #36]	; (8009c44 <create_fb_outputpin+0x8c>)
 8009c1e:	f7fe fc19 	bl	8008454 <writeToFBTable>
 8009c22:	4603      	mov	r3, r0
 8009c24:	733b      	strb	r3, [r7, #12]
	return fb;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	461d      	mov	r5, r3
 8009c2a:	f107 040c 	add.w	r4, r7, #12
 8009c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009c32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009c36:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	3728      	adds	r7, #40	; 0x28
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bdb0      	pop	{r4, r5, r7, pc}
 8009c42:	bf00      	nop
 8009c44:	08009ae9 	.word	0x08009ae9

08009c48 <fb_text_parser>:
#include "utility.h"
#include "text_table.h"
#include "fb_text.h"

//output fb
uint8_t fb_text_parser(uint8_t* p){
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b088      	sub	sp, #32
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6178      	str	r0, [r7, #20]
	uint16_t index = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	83bb      	strh	r3, [r7, #28]
	uint8_t len = get_uint8(p, &index);
 8009c54:	f107 031c 	add.w	r3, r7, #28
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6978      	ldr	r0, [r7, #20]
 8009c5c:	f000 fa60 	bl	800a120 <get_uint8>
 8009c60:	4603      	mov	r3, r0
 8009c62:	77fb      	strb	r3, [r7, #31]

	create_fb_text(len, &p[index]);
 8009c64:	8bbb      	ldrh	r3, [r7, #28]
 8009c66:	461a      	mov	r2, r3
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	441a      	add	r2, r3
 8009c6c:	463b      	mov	r3, r7
 8009c6e:	7ff9      	ldrb	r1, [r7, #31]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 f811 	bl	8009c98 <create_fb_text>
	return 0;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3720      	adds	r7, #32
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <fb_text>:

void fb_text(uint8_t p){
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	4603      	mov	r3, r0
 8009c88:	71fb      	strb	r3, [r7, #7]
}
 8009c8a:	bf00      	nop
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
	...

08009c98 <create_fb_text>:

type_fb_text create_fb_text(uint8_t len, char* str){
 8009c98:	b590      	push	{r4, r7, lr}
 8009c9a:	b08b      	sub	sp, #44	; 0x2c
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	607a      	str	r2, [r7, #4]
 8009ca4:	72fb      	strb	r3, [r7, #11]
	type_fb_text fb;
	s_Param* pAddrTable = get_paramAddrTable();
 8009ca6:	f7fe fbcb 	bl	8008440 <get_paramAddrTable>
 8009caa:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t text_table_index;

	fb.startParamIndex = pAddrTable->currentIndex;
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	757b      	strb	r3, [r7, #21]

	//not creating a parameter for str, instead of this create an entry to the global text table
	text_table_index = create_text_table_entry(len, str);
 8009cb2:	7afb      	ldrb	r3, [r7, #11]
 8009cb4:	6879      	ldr	r1, [r7, #4]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fe fda6 	bl	8008808 <create_text_table_entry>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	fb.fp.stat = createParameter(0);
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	f7fe fbea 	bl	800849c <createParameter>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	61bb      	str	r3, [r7, #24]
	fb.fp.val = createParameter(text_table_index);
 8009ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fe fbe3 	bl	800849c <createParameter>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	61fb      	str	r3, [r7, #28]

	fb.fb_index = writeToFBTable(fb_text, fb.startParamIndex);
 8009cda:	7d7b      	ldrb	r3, [r7, #21]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4808      	ldr	r0, [pc, #32]	; (8009d00 <create_fb_text+0x68>)
 8009ce0:	f7fe fbb8 	bl	8008454 <writeToFBTable>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	753b      	strb	r3, [r7, #20]
	return fb;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	461c      	mov	r4, r3
 8009cec:	f107 0314 	add.w	r3, r7, #20
 8009cf0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009cf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	372c      	adds	r7, #44	; 0x2c
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd90      	pop	{r4, r7, pc}
 8009d00:	08009c81 	.word	0x08009c81

08009d04 <parser_create_connection>:
		fb_encoder_parser,
		fb_gui_display_parser,
		fb_text_parser
};

uint8_t parser_create_connection(uint8_t* p){
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
	make_connection(p[0], p[1]); //dest,src
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	461a      	mov	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	3301      	adds	r3, #1
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	f7fe fbe6 	bl	80084ec <make_connection>
	return 2;
 8009d20:	2302      	movs	r3, #2
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
	...

08009d2c <Parser_Modbus_GetState>:

uint8_t Parser_Modbus_GetState(){
 8009d2c:	b480      	push	{r7}
 8009d2e:	af00      	add	r7, sp, #0
	return parser_modbus_state;
 8009d30:	4b03      	ldr	r3, [pc, #12]	; (8009d40 <Parser_Modbus_GetState+0x14>)
 8009d32:	781b      	ldrb	r3, [r3, #0]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	20001434 	.word	0x20001434

08009d44 <Parser_Modbus>:

//This parser will parse the deployment data coming from modbus
uint8_t Parser_Modbus(uint8_t* buf, uint8_t len){
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	70fb      	strb	r3, [r7, #3]
	uint16_t parser_id;
	uint16_t cmd = modbus_byte2word(&buf[0]) ; //function
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7fe fe53 	bl	80089fc <modbus_byte2word>
 8009d56:	4603      	mov	r3, r0
 8009d58:	81fb      	strh	r3, [r7, #14]

	switch (cmd)
 8009d5a:	89fb      	ldrh	r3, [r7, #14]
 8009d5c:	3b65      	subs	r3, #101	; 0x65
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d82b      	bhi.n	8009dba <Parser_Modbus+0x76>
 8009d62:	a201      	add	r2, pc, #4	; (adr r2, 8009d68 <Parser_Modbus+0x24>)
 8009d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d68:	08009d79 	.word	0x08009d79
 8009d6c:	08009d9f 	.word	0x08009d9f
 8009d70:	08009dab 	.word	0x08009dab
 8009d74:	08009db3 	.word	0x08009db3
	{
	case CMD_CREATE_FB: //FBTYPE-PARAMS
		parser_id = modbus_byte2word(&buf[2]) ;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	3302      	adds	r3, #2
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fe fe3d 	bl	80089fc <modbus_byte2word>
 8009d82:	4603      	mov	r3, r0
 8009d84:	81bb      	strh	r3, [r7, #12]
		if(parser_id<FB_PARSERS_SIZE){
 8009d86:	89bb      	ldrh	r3, [r7, #12]
 8009d88:	2b13      	cmp	r3, #19
 8009d8a:	d818      	bhi.n	8009dbe <Parser_Modbus+0x7a>
			fb_parsers[parser_id](&buf[4]);
 8009d8c:	89bb      	ldrh	r3, [r7, #12]
 8009d8e:	4a11      	ldr	r2, [pc, #68]	; (8009dd4 <Parser_Modbus+0x90>)
 8009d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	3204      	adds	r2, #4
 8009d98:	4610      	mov	r0, r2
 8009d9a:	4798      	blx	r3
		}
		break;
 8009d9c:	e00f      	b.n	8009dbe <Parser_Modbus+0x7a>
	case CMD_CREATE_CONN: //DEST-SRC
		parser_create_connection(&buf[2]);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	3302      	adds	r3, #2
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7ff ffae 	bl	8009d04 <parser_create_connection>
		break;
 8009da8:	e00a      	b.n	8009dc0 <Parser_Modbus+0x7c>
	case CMD_RUN:
		//set state value to inform mccore state machine
		parser_modbus_state = CMD_RUN;
 8009daa:	4b0b      	ldr	r3, [pc, #44]	; (8009dd8 <Parser_Modbus+0x94>)
 8009dac:	2267      	movs	r2, #103	; 0x67
 8009dae:	701a      	strb	r2, [r3, #0]
		break;
 8009db0:	e006      	b.n	8009dc0 <Parser_Modbus+0x7c>
	case CMD_KILL:
		//set state value to inform mccore state machine
		parser_modbus_state = CMD_KILL;
 8009db2:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <Parser_Modbus+0x94>)
 8009db4:	2268      	movs	r2, #104	; 0x68
 8009db6:	701a      	strb	r2, [r3, #0]
		break;
 8009db8:	e002      	b.n	8009dc0 <Parser_Modbus+0x7c>

	default:
		return 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	e006      	b.n	8009dcc <Parser_Modbus+0x88>
		break;
 8009dbe:	bf00      	nop
	}

	application_record(cmd, buf, len);
 8009dc0:	78fa      	ldrb	r2, [r7, #3]
 8009dc2:	89fb      	ldrh	r3, [r7, #14]
 8009dc4:	6879      	ldr	r1, [r7, #4]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 f8da 	bl	8009f80 <application_record>
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	20000050 	.word	0x20000050
 8009dd8:	20001434 	.word	0x20001434

08009ddc <init_application>:
extern const uint8_t (*fb_parsers[FB_PARSERS_SIZE])(uint8_t* p);

/*
 * Allocates memory for application record and load processes
 */
static uint8_t init_application(){
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	af00      	add	r7, sp, #0
	if(runtime_malloc_memory(APPLICATION_FILE_MEMORY_SIZE, MEM_TYPE_CYCLIC_FIFO, &application_file) == 1){
 8009de0:	4a06      	ldr	r2, [pc, #24]	; (8009dfc <init_application+0x20>)
 8009de2:	2100      	movs	r1, #0
 8009de4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009de8:	f000 fb52 	bl	800a490 <runtime_malloc_memory>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d101      	bne.n	8009df6 <init_application+0x1a>
		return 0; //success
 8009df2:	2300      	movs	r3, #0
 8009df4:	e000      	b.n	8009df8 <init_application+0x1c>
	}
	return 1; //error, cannot malloc memory
 8009df6:	2301      	movs	r3, #1
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	20001436 	.word	0x20001436

08009e00 <application_record2flash>:

static void application_record2flash(){
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
	memory_file_t* file = get_file_pointer(application_file);
 8009e06:	4b0c      	ldr	r3, [pc, #48]	; (8009e38 <application_record2flash+0x38>)
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 fbb4 	bl	800a578 <get_file_pointer>
 8009e10:	4603      	mov	r3, r0
 8009e12:	60fb      	str	r3, [r7, #12]
	memory_buf_t* buf = (file->mbuf);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	60bb      	str	r3, [r7, #8]
	uint32_t len = sizeof(MBUF_DATA_T)*buf->head;
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	889b      	ldrh	r3, [r3, #4]
 8009e1e:	607b      	str	r3, [r7, #4]

	write_flash_data((uint8_t*)buf->buffer, len , APPLICATION_MEMORY_ID);
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2200      	movs	r2, #0
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 fa71 	bl	800a310 <write_flash_data>
}
 8009e2e:	bf00      	nop
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20001436 	.word	0x20001436

08009e3c <save2ram_application_data>:

static uint8_t save2ram_application_data(uint8_t* buf, uint32_t len){
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
	writesingle_to_file(application_file, len);
 8009e46:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <save2ram_application_data+0x34>)
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	b2d2      	uxtb	r2, r2
 8009e4e:	4611      	mov	r1, r2
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 fb73 	bl	800a53c <writesingle_to_file>
	writebuf_to_file(application_file, buf, len);
 8009e56:	4b06      	ldr	r3, [pc, #24]	; (8009e70 <save2ram_application_data+0x34>)
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	6879      	ldr	r1, [r7, #4]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 fb42 	bl	800a4e8 <writebuf_to_file>
}
 8009e64:	bf00      	nop
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20001436 	.word	0x20001436

08009e74 <application_load_fromflash>:

static uint8_t application_load_fromflash(uint8_t* buf, uint32_t len){
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
	uint8_t ret = RET_APP_ERROR_ABNORMAL_DATA, app_load_finish = 0;
 8009e7e:	2302      	movs	r3, #2
 8009e80:	75fb      	strb	r3, [r7, #23]
 8009e82:	2300      	movs	r3, #0
 8009e84:	75bb      	strb	r3, [r7, #22]
	uint32_t index = 0;
 8009e86:	2300      	movs	r3, #0
 8009e88:	60fb      	str	r3, [r7, #12]
	uint16_t parser_id;
	uint8_t cmd, cmdbuflen;
	uint16_t next_cmd_index = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	82bb      	strh	r3, [r7, #20]

	while(app_load_finish == 0){
 8009e8e:	e057      	b.n	8009f40 <application_load_fromflash+0xcc>
		index = next_cmd_index;
 8009e90:	8abb      	ldrh	r3, [r7, #20]
 8009e92:	60fb      	str	r3, [r7, #12]
		if(index > len) {
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d203      	bcs.n	8009ea4 <application_load_fromflash+0x30>
			app_load_finish = 1;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	75bb      	strb	r3, [r7, #22]
			ret = RET_APP_ERROR_OVERFLOW; //overflow error
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	75fb      	strb	r3, [r7, #23]
		}
		cmdbuflen = get_uint8(buf, &index);
 8009ea4:	f107 030c 	add.w	r3, r7, #12
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f938 	bl	800a120 <get_uint8>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	74fb      	strb	r3, [r7, #19]
		next_cmd_index = index + cmdbuflen;
 8009eb4:	7cfb      	ldrb	r3, [r7, #19]
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	4413      	add	r3, r2
 8009ebe:	82bb      	strh	r3, [r7, #20]

		cmd = get_uint16(buf, &index);
 8009ec0:	f107 030c 	add.w	r3, r7, #12
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f943 	bl	800a152 <get_uint16>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	74bb      	strb	r3, [r7, #18]
		switch (cmd)
 8009ed0:	7cbb      	ldrb	r3, [r7, #18]
 8009ed2:	3b65      	subs	r3, #101	; 0x65
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d82f      	bhi.n	8009f38 <application_load_fromflash+0xc4>
 8009ed8:	a201      	add	r2, pc, #4	; (adr r2, 8009ee0 <application_load_fromflash+0x6c>)
 8009eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ede:	bf00      	nop
 8009ee0:	08009ef1 	.word	0x08009ef1
 8009ee4:	08009f1b 	.word	0x08009f1b
 8009ee8:	08009f29 	.word	0x08009f29
 8009eec:	08009f33 	.word	0x08009f33
		{
		case CMD_CREATE_FB: //FBTYPE-PARAMS
			parser_id = get_uint16(buf, &index) ;
 8009ef0:	f107 030c 	add.w	r3, r7, #12
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f92b 	bl	800a152 <get_uint16>
 8009efc:	4603      	mov	r3, r0
 8009efe:	823b      	strh	r3, [r7, #16]
			if(parser_id<FB_PARSERS_SIZE){
 8009f00:	8a3b      	ldrh	r3, [r7, #16]
 8009f02:	2b13      	cmp	r3, #19
 8009f04:	d81c      	bhi.n	8009f40 <application_load_fromflash+0xcc>
				fb_parsers[parser_id](&buf[index]);
 8009f06:	8a3b      	ldrh	r3, [r7, #16]
 8009f08:	4a11      	ldr	r2, [pc, #68]	; (8009f50 <application_load_fromflash+0xdc>)
 8009f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	6879      	ldr	r1, [r7, #4]
 8009f12:	440a      	add	r2, r1
 8009f14:	4610      	mov	r0, r2
 8009f16:	4798      	blx	r3
			}
			break;
 8009f18:	e012      	b.n	8009f40 <application_load_fromflash+0xcc>
		case CMD_CREATE_CONN: //DEST-SRC
			parser_create_connection(&buf[index]);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	4413      	add	r3, r2
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7ff feef 	bl	8009d04 <parser_create_connection>
			break;
 8009f26:	e00b      	b.n	8009f40 <application_load_fromflash+0xcc>
		case CMD_RUN:
			//set state value to inform mccore state machine
			app_load_finish = 1;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	75bb      	strb	r3, [r7, #22]
			ret = 0; //load succeed
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	75fb      	strb	r3, [r7, #23]
			break;
 8009f30:	e006      	b.n	8009f40 <application_load_fromflash+0xcc>
		case CMD_KILL:
			initiate_mccore();
 8009f32:	f7fe faf3 	bl	800851c <initiate_mccore>
			break;
 8009f36:	e003      	b.n	8009f40 <application_load_fromflash+0xcc>

		default:
			ret = RET_APP_ERROR_ABNORMAL_DATA;
 8009f38:	2302      	movs	r3, #2
 8009f3a:	75fb      	strb	r3, [r7, #23]
			app_load_finish = 1;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	75bb      	strb	r3, [r7, #22]
	while(app_load_finish == 0){
 8009f40:	7dbb      	ldrb	r3, [r7, #22]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0a4      	beq.n	8009e90 <application_load_fromflash+0x1c>
		}
	}

	return ret;
 8009f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	20000050 	.word	0x20000050

08009f54 <check_flash_memory>:

static uint8_t check_flash_memory(){
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
	uint32_t mem_start_address, mem_size;

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size, APPLICATION_MEMORY_ID);
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	1d3b      	adds	r3, r7, #4
 8009f5e:	2200      	movs	r2, #0
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7f6 fd25 	bl	80009b0 <get_flash_memory_info>

	if(mem_start_address == 0)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d102      	bne.n	8009f72 <check_flash_memory+0x1e>
		application_flash_error = RET_APP_ERROR_FLASHHAL;
 8009f6c:	4b03      	ldr	r3, [pc, #12]	; (8009f7c <check_flash_memory+0x28>)
 8009f6e:	2204      	movs	r2, #4
 8009f70:	701a      	strb	r2, [r3, #0]
}
 8009f72:	bf00      	nop
 8009f74:	4618      	mov	r0, r3
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	20001438 	.word	0x20001438

08009f80 <application_record>:
	application_load_fromflash(apptestbuf, sizeof(apptestbuf));
}
*/

void application_record(uint16_t cmd, uint8_t* buf, uint8_t len)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	6039      	str	r1, [r7, #0]
 8009f8a:	80fb      	strh	r3, [r7, #6]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	717b      	strb	r3, [r7, #5]
	//If flash error flag setted than do nothing related to flash
	if(application_flash_error != 0) return RET_APP_ERROR_FLASHHAL;
 8009f90:	4b11      	ldr	r3, [pc, #68]	; (8009fd8 <application_record+0x58>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d11a      	bne.n	8009fce <application_record+0x4e>

	switch (cmd){
 8009f98:	88fb      	ldrh	r3, [r7, #6]
 8009f9a:	2b68      	cmp	r3, #104	; 0x68
 8009f9c:	d009      	beq.n	8009fb2 <application_record+0x32>
 8009f9e:	2b68      	cmp	r3, #104	; 0x68
 8009fa0:	dc16      	bgt.n	8009fd0 <application_record+0x50>
 8009fa2:	2b66      	cmp	r3, #102	; 0x66
 8009fa4:	dc02      	bgt.n	8009fac <application_record+0x2c>
 8009fa6:	2b65      	cmp	r3, #101	; 0x65
 8009fa8:	da03      	bge.n	8009fb2 <application_record+0x32>
 8009faa:	e011      	b.n	8009fd0 <application_record+0x50>
 8009fac:	2b67      	cmp	r3, #103	; 0x67
 8009fae:	d006      	beq.n	8009fbe <application_record+0x3e>
 8009fb0:	e00e      	b.n	8009fd0 <application_record+0x50>
	case CMD_CREATE_FB:
	case CMD_CREATE_CONN:
	case CMD_KILL:
		save2ram_application_data(buf, len);
 8009fb2:	797b      	ldrb	r3, [r7, #5]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6838      	ldr	r0, [r7, #0]
 8009fb8:	f7ff ff40 	bl	8009e3c <save2ram_application_data>
		break;
 8009fbc:	e008      	b.n	8009fd0 <application_record+0x50>
	case CMD_RUN:
		save2ram_application_data(buf, len);
 8009fbe:	797b      	ldrb	r3, [r7, #5]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6838      	ldr	r0, [r7, #0]
 8009fc4:	f7ff ff3a 	bl	8009e3c <save2ram_application_data>
		application_record2flash();
 8009fc8:	f7ff ff1a 	bl	8009e00 <application_record2flash>
		break;
 8009fcc:	e000      	b.n	8009fd0 <application_record+0x50>
	if(application_flash_error != 0) return RET_APP_ERROR_FLASHHAL;
 8009fce:	bf00      	nop
	}
}
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20001438 	.word	0x20001438

08009fdc <application_load>:

uint8_t application_load(){
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0

	//Application load is fired at power-up.
	//So it is the first called functions from application domain
	//We are checking flash here and if an error detected
	//disable all the activities related to flash
	check_flash_memory();
 8009fe2:	f7ff ffb7 	bl	8009f54 <check_flash_memory>

	//Check Flash if everything OK then continue
	if(application_flash_error != 0) return RET_APP_ERROR_FLASHHAL;
 8009fe6:	4b11      	ldr	r3, [pc, #68]	; (800a02c <application_load+0x50>)
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <application_load+0x16>
 8009fee:	2304      	movs	r3, #4
 8009ff0:	e018      	b.n	800a024 <application_load+0x48>

	Flash_Block* app_flash = get_flash_data(APPLICATION_MEMORY_ID);
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	f000 f9c8 	bl	800a388 <get_flash_data>
 8009ff8:	60f8      	str	r0, [r7, #12]
	init_application();
 8009ffa:	f7ff feef 	bl	8009ddc <init_application>

	if(app_flash->block_start_marker1 == BLOCK_START_MAGIC1){
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a0b      	ldr	r2, [pc, #44]	; (800a030 <application_load+0x54>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d10c      	bne.n	800a022 <application_load+0x46>
		uint8_t* p_flash = (uint8_t*)app_flash + FLASHBLOCK_HEADER_SIZE;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3308      	adds	r3, #8
 800a00c:	60bb      	str	r3, [r7, #8]

		ret = application_load_fromflash(p_flash, app_flash->length);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	4619      	mov	r1, r3
 800a014:	68b8      	ldr	r0, [r7, #8]
 800a016:	f7ff ff2d 	bl	8009e74 <application_load_fromflash>
 800a01a:	4603      	mov	r3, r0
 800a01c:	71fb      	strb	r3, [r7, #7]
		return ret;
 800a01e:	79fb      	ldrb	r3, [r7, #7]
 800a020:	e000      	b.n	800a024 <application_load+0x48>
	}

	else
		return RET_APP_ERROR_NORECORDING;
 800a022:	2303      	movs	r3, #3
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	20001438 	.word	0x20001438
 800a030:	01234567 	.word	0x01234567

0800a034 <get_deployment_ch>:
#include "modbus_slave.h"
#include "deployment.h"

Communication_Ch deployment_ch = {.fdata_ready=0,.rx_data_cntr=0};

Communication_Ch* get_deployment_ch(){
 800a034:	b480      	push	{r7}
 800a036:	af00      	add	r7, sp, #0
	return &deployment_ch;
 800a038:	4b02      	ldr	r3, [pc, #8]	; (800a044 <get_deployment_ch+0x10>)
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	2000143c 	.word	0x2000143c

0800a048 <deployment_data_validity_check>:

uint8_t deployment_data_validity_check()
{
 800a048:	b480      	push	{r7}
 800a04a:	af00      	add	r7, sp, #0
	if(deployment_ch.rx_data_cntr <2) {
 800a04c:	4b09      	ldr	r3, [pc, #36]	; (800a074 <deployment_data_validity_check+0x2c>)
 800a04e:	795b      	ldrb	r3, [r3, #5]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d809      	bhi.n	800a068 <deployment_data_validity_check+0x20>
		deployment_ch.data_error_counter = deployment_ch.data_error_counter + 1;
 800a054:	4b07      	ldr	r3, [pc, #28]	; (800a074 <deployment_data_validity_check+0x2c>)
 800a056:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a05a:	3301      	adds	r3, #1
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	4b05      	ldr	r3, [pc, #20]	; (800a074 <deployment_data_validity_check+0x2c>)
 800a060:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		return 1;
 800a064:	2301      	movs	r3, #1
 800a066:	e000      	b.n	800a06a <deployment_data_validity_check+0x22>
	}
	else{
		return 0;
 800a068:	2300      	movs	r3, #0
	}
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	2000143c 	.word	0x2000143c

0800a078 <init_deployment_ch>:

void init_deployment_ch(){
 800a078:	b480      	push	{r7}
 800a07a:	af00      	add	r7, sp, #0
	deployment_ch.process_callback = modbus_slave_rx;
 800a07c:	4b05      	ldr	r3, [pc, #20]	; (800a094 <init_deployment_ch+0x1c>)
 800a07e:	4a06      	ldr	r2, [pc, #24]	; (800a098 <init_deployment_ch+0x20>)
 800a080:	649a      	str	r2, [r3, #72]	; 0x48
	deployment_ch.data_validity_check_callback = deployment_data_validity_check;
 800a082:	4b04      	ldr	r3, [pc, #16]	; (800a094 <init_deployment_ch+0x1c>)
 800a084:	4a05      	ldr	r2, [pc, #20]	; (800a09c <init_deployment_ch+0x24>)
 800a086:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800a088:	bf00      	nop
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	2000143c 	.word	0x2000143c
 800a098:	08008dc5 	.word	0x08008dc5
 800a09c:	0800a049 	.word	0x0800a049

0800a0a0 <get_watch_value>:
#include "mcCore.h"
#include "mcCore_Watch.h"


uint16_t get_watch_value(uint16_t param_index)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b088      	sub	sp, #32
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	80fb      	strh	r3, [r7, #6]
	uint16_t value16 = 0;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	83fb      	strh	r3, [r7, #30]
	s_Param* pAddrTable = get_paramAddrTable();
 800a0ae:	f7fe f9c7 	bl	8008440 <get_paramAddrTable>
 800a0b2:	61b8      	str	r0, [r7, #24]

	uint32_t value_index = pAddrTable->addr[param_index >> 1]; //take half of the incoming param_index
 800a0b4:	88fb      	ldrh	r3, [r7, #6]
 800a0b6:	085b      	lsrs	r3, r3, #1
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	617b      	str	r3, [r7, #20]
	uint32_t value = pAddrTable->value[value_index];
 800a0c4:	69ba      	ldr	r2, [r7, #24]
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4413      	add	r3, r2
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	60fb      	str	r3, [r7, #12]
	uint8_t* p = (uint8_t*) (&value);
 800a0d4:	f107 030c 	add.w	r3, r7, #12
 800a0d8:	613b      	str	r3, [r7, #16]

	if(param_index % 2 == 0){
 800a0da:	88fb      	ldrh	r3, [r7, #6]
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10c      	bne.n	800a100 <get_watch_value+0x60>
		value16 = ((uint16_t)p[2]<<8) + (uint16_t)p[3];
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	3302      	adds	r3, #2
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	021b      	lsls	r3, r3, #8
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	3303      	adds	r3, #3
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	4413      	add	r3, r2
 800a0fc:	83fb      	strh	r3, [r7, #30]
 800a0fe:	e00a      	b.n	800a116 <get_watch_value+0x76>
	}
	else{
		value16 = ((uint16_t)p[0]<<8) + (uint16_t)p[1];
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	b29b      	uxth	r3, r3
 800a106:	021b      	lsls	r3, r3, #8
 800a108:	b29a      	uxth	r2, r3
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	3301      	adds	r3, #1
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	b29b      	uxth	r3, r3
 800a112:	4413      	add	r3, r2
 800a114:	83fb      	strh	r3, [r7, #30]
	}

	return value16;
 800a116:	8bfb      	ldrh	r3, [r7, #30]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3720      	adds	r7, #32
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <get_uint8>:

/*
 * Utility Functions
 */
uint8_t get_uint8(uint8_t*p, uint16_t* index)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
	uint8_t ret;
	ret = (uint16_t) p[*index];
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	881b      	ldrh	r3, [r3, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4413      	add	r3, r2
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	73fb      	strb	r3, [r7, #15]
	*index += 1;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	881b      	ldrh	r3, [r3, #0]
 800a13c:	3301      	adds	r3, #1
 800a13e:	b29a      	uxth	r2, r3
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	801a      	strh	r2, [r3, #0]
	return ret;
 800a144:	7bfb      	ldrb	r3, [r7, #15]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <get_uint16>:

uint16_t get_uint16(uint8_t*p, uint16_t* index)
{
 800a152:	b480      	push	{r7}
 800a154:	b085      	sub	sp, #20
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
 800a15a:	6039      	str	r1, [r7, #0]
	uint16_t ret;
	ret = (uint16_t) p[*index] <<8 | p[*index+1];
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	461a      	mov	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4413      	add	r3, r2
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	021b      	lsls	r3, r3, #8
 800a16a:	b21a      	sxth	r2, r3
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	3301      	adds	r3, #1
 800a172:	6879      	ldr	r1, [r7, #4]
 800a174:	440b      	add	r3, r1
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	b21b      	sxth	r3, r3
 800a17a:	4313      	orrs	r3, r2
 800a17c:	b21b      	sxth	r3, r3
 800a17e:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	881b      	ldrh	r3, [r3, #0]
 800a184:	3302      	adds	r3, #2
 800a186:	b29a      	uxth	r2, r3
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	801a      	strh	r2, [r3, #0]
	return ret;
 800a18c:	89fb      	ldrh	r3, [r7, #14]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <get_uint32>:

uint16_t get_uint32(uint8_t*p, uint16_t* index)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b085      	sub	sp, #20
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	6039      	str	r1, [r7, #0]
	uint32_t ret;
	ret = (uint32_t) p[*index] << 24 | p[*index+1]<< 16 | p[*index+2] <<8 | p[*index+3];
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	061b      	lsls	r3, r3, #24
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	8812      	ldrh	r2, [r2, #0]
 800a1b6:	3201      	adds	r2, #1
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	440a      	add	r2, r1
 800a1bc:	7812      	ldrb	r2, [r2, #0]
 800a1be:	0412      	lsls	r2, r2, #16
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	8812      	ldrh	r2, [r2, #0]
 800a1c6:	3202      	adds	r2, #2
 800a1c8:	6879      	ldr	r1, [r7, #4]
 800a1ca:	440a      	add	r2, r1
 800a1cc:	7812      	ldrb	r2, [r2, #0]
 800a1ce:	0212      	lsls	r2, r2, #8
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	683a      	ldr	r2, [r7, #0]
 800a1d4:	8812      	ldrh	r2, [r2, #0]
 800a1d6:	3203      	adds	r2, #3
 800a1d8:	6879      	ldr	r1, [r7, #4]
 800a1da:	440a      	add	r2, r1
 800a1dc:	7812      	ldrb	r2, [r2, #0]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	801a      	strh	r2, [r3, #0]
	return ret;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	b29b      	uxth	r3, r3
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <check_for_available_memory>:
 */

#include "stdint.h"
#include "fcb.h"

static uint8_t check_for_available_memory(uint32_t start_addr, uint32_t datalen, uint8_t mem_id){
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b088      	sub	sp, #32
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	4613      	mov	r3, r2
 800a20a:	71fb      	strb	r3, [r7, #7]
	uint32_t mem_start, mem_end, mem_size;
	get_flash_memory_info(&mem_start, &mem_size, mem_id);
 800a20c:	79fa      	ldrb	r2, [r7, #7]
 800a20e:	f107 0114 	add.w	r1, r7, #20
 800a212:	f107 0318 	add.w	r3, r7, #24
 800a216:	4618      	mov	r0, r3
 800a218:	f7f6 fbca 	bl	80009b0 <get_flash_memory_info>
	mem_end = mem_start+ mem_size;
 800a21c:	69ba      	ldr	r2, [r7, #24]
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	4413      	add	r3, r2
 800a222:	61fb      	str	r3, [r7, #28]

	if(mem_end < start_addr+FLASHBLOCK_HEADER_SIZE+datalen){
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	4413      	add	r3, r2
 800a22a:	3308      	adds	r3, #8
 800a22c:	69fa      	ldr	r2, [r7, #28]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d201      	bcs.n	800a236 <check_for_available_memory+0x38>
		return 0; //no available memory
 800a232:	2300      	movs	r3, #0
 800a234:	e000      	b.n	800a238 <check_for_available_memory+0x3a>
	}

	return 1;
 800a236:	2301      	movs	r3, #1
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3720      	adds	r7, #32
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <write_flash_block>:

static uint32_t write_flash_block(uint32_t start_addr, uint8_t* data, uint32_t datalen, uint8_t mem_id)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	70fb      	strb	r3, [r7, #3]
	//first control for the available space if there is no space then return error
	if(check_for_available_memory(start_addr, datalen, mem_id) == 1){
 800a24e:	78fb      	ldrb	r3, [r7, #3]
 800a250:	461a      	mov	r2, r3
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7ff ffd2 	bl	800a1fe <check_for_available_memory>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d116      	bne.n	800a28e <write_flash_block+0x4e>
		Flash_Block fb = {.block_start_marker1= BLOCK_START_MAGIC1, .length = datalen};
 800a260:	4b0d      	ldr	r3, [pc, #52]	; (800a298 <write_flash_block+0x58>)
 800a262:	613b      	str	r3, [r7, #16]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	617b      	str	r3, [r7, #20]

		//write header
		write_to_flash((uint8_t*) (&fb), start_addr, FLASHBLOCK_HEADER_SIZE);
 800a268:	f107 0310 	add.w	r3, r7, #16
 800a26c:	2208      	movs	r2, #8
 800a26e:	68f9      	ldr	r1, [r7, #12]
 800a270:	4618      	mov	r0, r3
 800a272:	f7f6 fbe9 	bl	8000a48 <write_to_flash>

		//write data
		write_to_flash(data, start_addr+FLASHBLOCK_HEADER_SIZE, datalen);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	3308      	adds	r3, #8
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	4619      	mov	r1, r3
 800a27e:	68b8      	ldr	r0, [r7, #8]
 800a280:	f7f6 fbe2 	bl	8000a48 <write_to_flash>

		return start_addr+FLASHBLOCK_HEADER_SIZE+datalen; //return the finish address of the block
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4413      	add	r3, r2
 800a28a:	3308      	adds	r3, #8
 800a28c:	e000      	b.n	800a290 <write_flash_block+0x50>
	}

	return 0; //no available memory
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3718      	adds	r7, #24
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	01234567 	.word	0x01234567

0800a29c <get_current_address>:

//search all flash to find the end of record
//last record: when doing search if you need the address of the last record function returns this value from the last_record
static Get_Current_Addr_Data get_current_address(uint32_t start_address, uint32_t memory_size){
 800a29c:	b480      	push	{r7}
 800a29e:	b08b      	sub	sp, #44	; 0x2c
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
	uint32_t* pflash_data;
	uint32_t flashptr, inc = 1;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	623b      	str	r3, [r7, #32]
	Flash_Block* temp_fb = (Flash_Block*) start_address;
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	61fb      	str	r3, [r7, #28]
	Get_Current_Addr_Data ret;

	ret.last_record_fb = temp_fb; //If there is no record at flash to initiate last record
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	617b      	str	r3, [r7, #20]

	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b8:	e010      	b.n	800a2dc <get_current_address+0x40>
	{
		temp_fb = (Flash_Block*) flashptr;
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	61fb      	str	r3, [r7, #28]

		if(temp_fb->block_start_marker1 ==BLOCK_START_MAGIC1){
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a12      	ldr	r2, [pc, #72]	; (800a30c <get_current_address+0x70>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d110      	bne.n	800a2ea <get_current_address+0x4e>
			inc = temp_fb->length + FLASHBLOCK_HEADER_SIZE;
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	623b      	str	r3, [r7, #32]
			ret.last_record_fb = temp_fb;
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	617b      	str	r3, [r7, #20]
	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 800a2d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	4413      	add	r3, r2
 800a2da:	627b      	str	r3, [r7, #36]	; 0x24
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d3e8      	bcc.n	800a2ba <get_current_address+0x1e>
 800a2e8:	e000      	b.n	800a2ec <get_current_address+0x50>
		}
		else{
			break;
 800a2ea:	bf00      	nop
		}
	}
	ret.flash_pointer = flashptr;
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ee:	61bb      	str	r3, [r7, #24]

	return ret;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f107 0314 	add.w	r3, r7, #20
 800a2f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a2fc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	372c      	adds	r7, #44	; 0x2c
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	01234567 	.word	0x01234567

0800a310 <write_flash_data>:
//mem_id: 0 -> Function Blocks
//mem_id: 1 -> Static Parameters
//mem_id: 2 -> Dynamic Parameters
//mem_id: 3 -> Circular FIFO (Data Storage)

uint32_t write_flash_data(uint8_t* data, uint32_t length, uint8_t mem_id){
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	4613      	mov	r3, r2
 800a31c:	71fb      	strb	r3, [r7, #7]
	uint32_t mem_start_address, mem_size;

	//Its very important length to be multiply of 4
	if(length%4 != 0){
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	f003 0303 	and.w	r3, r3, #3
 800a324:	2b00      	cmp	r3, #0
 800a326:	d004      	beq.n	800a332 <write_flash_data+0x22>
		length = length + 4 - (length %4);
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	f023 0303 	bic.w	r3, r3, #3
 800a32e:	3304      	adds	r3, #4
 800a330:	60bb      	str	r3, [r7, #8]
	}

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size, mem_id);
 800a332:	79fa      	ldrb	r2, [r7, #7]
 800a334:	f107 0118 	add.w	r1, r7, #24
 800a338:	f107 031c 	add.w	r3, r7, #28
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7f6 fb37 	bl	80009b0 <get_flash_memory_info>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);
 800a342:	69f9      	ldr	r1, [r7, #28]
 800a344:	69ba      	ldr	r2, [r7, #24]
 800a346:	f107 0310 	add.w	r3, r7, #16
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7ff ffa6 	bl	800a29c <get_current_address>

	if(check_for_available_memory(lastrecord_info.flash_pointer, length, mem_id) == 0){
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	79fa      	ldrb	r2, [r7, #7]
 800a354:	68b9      	ldr	r1, [r7, #8]
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff ff51 	bl	800a1fe <check_for_available_memory>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d107      	bne.n	800a372 <write_flash_data+0x62>
		erase_flash(mem_start_address, mem_id);
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	79fa      	ldrb	r2, [r7, #7]
 800a366:	4611      	mov	r1, r2
 800a368:	4618      	mov	r0, r3
 800a36a:	f7f6 fba1 	bl	8000ab0 <erase_flash>
		lastrecord_info.flash_pointer = mem_start_address;
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	617b      	str	r3, [r7, #20]
	}

	//write data to flash and return current flash pointer address
	return write_flash_block(lastrecord_info.flash_pointer, data, length, mem_id);
 800a372:	6978      	ldr	r0, [r7, #20]
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	68f9      	ldr	r1, [r7, #12]
 800a37a:	f7ff ff61 	bl	800a240 <write_flash_block>
 800a37e:	4603      	mov	r3, r0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3720      	adds	r7, #32
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <get_flash_data>:

Flash_Block* get_flash_data(uint8_t mem_id){
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	71fb      	strb	r3, [r7, #7]
	uint32_t mem_start_address, mem_size;

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size, mem_id);
 800a392:	79fa      	ldrb	r2, [r7, #7]
 800a394:	f107 0110 	add.w	r1, r7, #16
 800a398:	f107 0314 	add.w	r3, r7, #20
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7f6 fb07 	bl	80009b0 <get_flash_memory_info>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);
 800a3a2:	6979      	ldr	r1, [r7, #20]
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	f107 0308 	add.w	r3, r7, #8
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7ff ff76 	bl	800a29c <get_current_address>

	return lastrecord_info.last_record_fb;
 800a3b0:	68bb      	ldr	r3, [r7, #8]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3718      	adds	r7, #24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
	...

0800a3bc <checkfor_available_memory>:
#include "stdint.h"
#include "memory_service.h"

memory_controller_t memory_controller;

static uint8_t checkfor_available_memory(uint32_t len){
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
    if(len+memory_controller.raw_index >= MEMORY_SERVICE_TOTAL_MEMORY |
 800a3c4:	4b0f      	ldr	r3, [pc, #60]	; (800a404 <checkfor_available_memory+0x48>)
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	bf8c      	ite	hi
 800a3d4:	2301      	movhi	r3, #1
 800a3d6:	2300      	movls	r3, #0
 800a3d8:	b2da      	uxtb	r2, r3
        memory_controller.file_index >= MEMORY_SERVICE_MAX_FILE_COUNT) //check for available free space
 800a3da:	4b0a      	ldr	r3, [pc, #40]	; (800a404 <checkfor_available_memory+0x48>)
 800a3dc:	881b      	ldrh	r3, [r3, #0]
    if(len+memory_controller.raw_index >= MEMORY_SERVICE_TOTAL_MEMORY |
 800a3de:	2b0f      	cmp	r3, #15
 800a3e0:	bf8c      	ite	hi
 800a3e2:	2301      	movhi	r3, #1
 800a3e4:	2300      	movls	r3, #0
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <checkfor_available_memory+0x38>
    {
        return 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e000      	b.n	800a3f6 <checkfor_available_memory+0x3a>
    }

    //else
    return 1;
 800a3f4:	2301      	movs	r3, #1
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	2000148c 	.word	0x2000148c

0800a408 <allocate_memory>:

static uint16_t allocate_memory(uint32_t len, memory_type_t memory_type){
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	460b      	mov	r3, r1
 800a412:	70fb      	strb	r3, [r7, #3]
    memory_file_t* new_fp = &memory_controller.files[memory_controller.file_index];
 800a414:	4b1d      	ldr	r3, [pc, #116]	; (800a48c <allocate_memory+0x84>)
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	461a      	mov	r2, r3
 800a41a:	4613      	mov	r3, r2
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	4413      	add	r3, r2
 800a420:	00db      	lsls	r3, r3, #3
 800a422:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800a426:	4a19      	ldr	r2, [pc, #100]	; (800a48c <allocate_memory+0x84>)
 800a428:	4413      	add	r3, r2
 800a42a:	60fb      	str	r3, [r7, #12]

    new_fp->id = memory_controller.file_index;
 800a42c:	4b17      	ldr	r3, [pc, #92]	; (800a48c <allocate_memory+0x84>)
 800a42e:	881a      	ldrh	r2, [r3, #0]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	801a      	strh	r2, [r3, #0]
    new_fp->len = len;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	605a      	str	r2, [r3, #4]
    new_fp->crc = 0;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	609a      	str	r2, [r3, #8]
    new_fp->raw_index = memory_controller.raw_index;
 800a440:	4b12      	ldr	r3, [pc, #72]	; (800a48c <allocate_memory+0x84>)
 800a442:	685a      	ldr	r2, [r3, #4]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	611a      	str	r2, [r3, #16]

    //initiate memory buffer
    new_fp->mbuf = memory_buf_init(&memory_controller.raw[memory_controller.raw_index], new_fp->len, memory_type);
 800a448:	4b10      	ldr	r3, [pc, #64]	; (800a48c <allocate_memory+0x84>)
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	3308      	adds	r3, #8
 800a44e:	4a0f      	ldr	r2, [pc, #60]	; (800a48c <allocate_memory+0x84>)
 800a450:	1898      	adds	r0, r3, r2
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	b29b      	uxth	r3, r3
 800a458:	78fa      	ldrb	r2, [r7, #3]
 800a45a:	4619      	mov	r1, r3
 800a45c:	f001 fb7e 	bl	800bb5c <memory_buf_init>
 800a460:	4602      	mov	r2, r0
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	60da      	str	r2, [r3, #12]

    memory_controller.file_index++;
 800a466:	4b09      	ldr	r3, [pc, #36]	; (800a48c <allocate_memory+0x84>)
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	3301      	adds	r3, #1
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	4b07      	ldr	r3, [pc, #28]	; (800a48c <allocate_memory+0x84>)
 800a470:	801a      	strh	r2, [r3, #0]
    memory_controller.raw_index += len;
 800a472:	4b06      	ldr	r3, [pc, #24]	; (800a48c <allocate_memory+0x84>)
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4413      	add	r3, r2
 800a47a:	4a04      	ldr	r2, [pc, #16]	; (800a48c <allocate_memory+0x84>)
 800a47c:	6053      	str	r3, [r2, #4]

    return new_fp->id;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	881b      	ldrh	r3, [r3, #0]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	2000148c 	.word	0x2000148c

0800a490 <runtime_malloc_memory>:
//returns id of the new file for ret_id
//if success return 1, fail return 0
uint8_t runtime_malloc_memory(uint32_t len, 
                                memory_type_t memory_type, 
                                    uint16_t* ret_id)
{ 
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	460b      	mov	r3, r1
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	72fb      	strb	r3, [r7, #11]
    if(checkfor_available_memory(len) != 0){
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f7ff ff8c 	bl	800a3bc <checkfor_available_memory>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d008      	beq.n	800a4bc <runtime_malloc_memory+0x2c>
        *ret_id = allocate_memory(len, memory_type);
 800a4aa:	7afb      	ldrb	r3, [r7, #11]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f7ff ffaa 	bl	800a408 <allocate_memory>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	801a      	strh	r2, [r3, #0]
    }   
}
 800a4bc:	bf00      	nop
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <put_file_val>:


static void put_file_val(memory_file_t* file, MBUF_DATA_T data){
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	70fb      	strb	r3, [r7, #3]
	memory_buf_put(file->mbuf, data);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	78fa      	ldrb	r2, [r7, #3]
 800a4d8:	4611      	mov	r1, r2
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f001 fc18 	bl	800bd10 <memory_buf_put>
}
 800a4e0:	bf00      	nop
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <writebuf_to_file>:
static uint8_t get_file_val(memory_file_t* file, MBUF_DATA_T* data){
	return memory_buf_get(file->mbuf, data);
}

//Buffer write/read functions
void writebuf_to_file(uint16_t file_id, MBUF_DATA_T* buf, uint32_t len){
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
 800a4f4:	81fb      	strh	r3, [r7, #14]
    memory_file_t* file = &(memory_controller.files[file_id]);
 800a4f6:	89fa      	ldrh	r2, [r7, #14]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	4413      	add	r3, r2
 800a4fe:	00db      	lsls	r3, r3, #3
 800a500:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800a504:	4a0c      	ldr	r2, [pc, #48]	; (800a538 <writebuf_to_file+0x50>)
 800a506:	4413      	add	r3, r2
 800a508:	613b      	str	r3, [r7, #16]

    for(uint32_t i=0;i<len;i++){
 800a50a:	2300      	movs	r3, #0
 800a50c:	617b      	str	r3, [r7, #20]
 800a50e:	e00a      	b.n	800a526 <writebuf_to_file+0x3e>
    	put_file_val(file, buf[i]);
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	4413      	add	r3, r2
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	4619      	mov	r1, r3
 800a51a:	6938      	ldr	r0, [r7, #16]
 800a51c:	f7ff ffd3 	bl	800a4c6 <put_file_val>
    for(uint32_t i=0;i<len;i++){
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	3301      	adds	r3, #1
 800a524:	617b      	str	r3, [r7, #20]
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d3f0      	bcc.n	800a510 <writebuf_to_file+0x28>
    }
}
 800a52e:	bf00      	nop
 800a530:	bf00      	nop
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	2000148c 	.word	0x2000148c

0800a53c <writesingle_to_file>:
    	get_file_val(file, &buf[i]);
    }
}

//Single value write/read functions
void writesingle_to_file(uint16_t file_id, MBUF_DATA_T val){
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	4603      	mov	r3, r0
 800a544:	460a      	mov	r2, r1
 800a546:	80fb      	strh	r3, [r7, #6]
 800a548:	4613      	mov	r3, r2
 800a54a:	717b      	strb	r3, [r7, #5]
    memory_file_t* file = &(memory_controller.files[file_id]);
 800a54c:	88fa      	ldrh	r2, [r7, #6]
 800a54e:	4613      	mov	r3, r2
 800a550:	005b      	lsls	r3, r3, #1
 800a552:	4413      	add	r3, r2
 800a554:	00db      	lsls	r3, r3, #3
 800a556:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800a55a:	4a06      	ldr	r2, [pc, #24]	; (800a574 <writesingle_to_file+0x38>)
 800a55c:	4413      	add	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]
    put_file_val(file, val);
 800a560:	797b      	ldrb	r3, [r7, #5]
 800a562:	4619      	mov	r1, r3
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f7ff ffae 	bl	800a4c6 <put_file_val>
}
 800a56a:	bf00      	nop
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	2000148c 	.word	0x2000148c

0800a578 <get_file_pointer>:
void readsingle_from_file(uint16_t file_id, MBUF_DATA_T* val){
    memory_file_t* file = &(memory_controller.files[file_id]);
    get_file_val(file, val);
}

memory_file_t* get_file_pointer(uint16_t file_id){
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	4603      	mov	r3, r0
 800a580:	80fb      	strh	r3, [r7, #6]
	if(file_id < memory_controller.file_index)
 800a582:	4b0a      	ldr	r3, [pc, #40]	; (800a5ac <get_file_pointer+0x34>)
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	88fa      	ldrh	r2, [r7, #6]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d209      	bcs.n	800a5a0 <get_file_pointer+0x28>
		return &memory_controller.files[file_id];
 800a58c:	88fa      	ldrh	r2, [r7, #6]
 800a58e:	4613      	mov	r3, r2
 800a590:	005b      	lsls	r3, r3, #1
 800a592:	4413      	add	r3, r2
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800a59a:	4a04      	ldr	r2, [pc, #16]	; (800a5ac <get_file_pointer+0x34>)
 800a59c:	4413      	add	r3, r2
 800a59e:	e7ff      	b.n	800a5a0 <get_file_pointer+0x28>
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	2000148c 	.word	0x2000148c

0800a5b0 <fb_and_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_and.h"

uint8_t fb_and_parser(uint8_t* p){
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b08c      	sub	sp, #48	; 0x30
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_and(type);
 800a5c0:	463b      	mov	r3, r7
 800a5c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 f893 	bl	800a6f4 <create_fb_and>
	return 0;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3730      	adds	r7, #48	; 0x30
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <fb_and>:

void fb_and(uint8_t p){
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b08a      	sub	sp, #40	; 0x28
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800a5e2:	f7fd ff2d 	bl	8008440 <get_paramAddrTable>
 800a5e6:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800a5e8:	79fb      	ldrb	r3, [r7, #7]
 800a5ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5fa:	4413      	add	r3, r2
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800a600:	79fb      	ldrb	r3, [r7, #7]
 800a602:	3301      	adds	r3, #1
 800a604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a614:	4413      	add	r3, r2
 800a616:	3304      	adds	r3, #4
 800a618:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800a61a:	79fb      	ldrb	r3, [r7, #7]
 800a61c:	3302      	adds	r3, #2
 800a61e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4413      	add	r3, r2
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62e:	4413      	add	r3, r2
 800a630:	3304      	adds	r3, #4
 800a632:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 800a634:	79fb      	ldrb	r3, [r7, #7]
 800a636:	3303      	adds	r3, #3
 800a638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a648:	4413      	add	r3, r2
 800a64a:	3304      	adds	r3, #4
 800a64c:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 800a64e:	79fb      	ldrb	r3, [r7, #7]
 800a650:	3304      	adds	r3, #4
 800a652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4413      	add	r3, r2
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a662:	4413      	add	r3, r2
 800a664:	3304      	adds	r3, #4
 800a666:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 800a668:	79fb      	ldrb	r3, [r7, #7]
 800a66a:	3305      	adds	r3, #5
 800a66c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4413      	add	r3, r2
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a67c:	4413      	add	r3, r2
 800a67e:	3304      	adds	r3, #4
 800a680:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 800a682:	79fb      	ldrb	r3, [r7, #7]
 800a684:	3306      	adds	r3, #6
 800a686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4413      	add	r3, r2
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a696:	4413      	add	r3, r2
 800a698:	3304      	adds	r3, #4
 800a69a:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 800a69c:	6a3b      	ldr	r3, [r7, #32]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d10d      	bne.n	800a6c0 <fb_and+0xe8>
		*output =  (*input1)&(*input2)&(*input3)&(*input4);
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	401a      	ands	r2, r3
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	401a      	ands	r2, r3
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	401a      	ands	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  (*input1)&&(*input2)&&(*input3)&&(*input4);
	}

}
 800a6be:	e014      	b.n	800a6ea <fb_and+0x112>
		*output =  (*input1)&&(*input2)&&(*input3)&&(*input4);
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00d      	beq.n	800a6e4 <fb_and+0x10c>
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d009      	beq.n	800a6e4 <fb_and+0x10c>
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d005      	beq.n	800a6e4 <fb_and+0x10c>
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <fb_and+0x10c>
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	e000      	b.n	800a6e6 <fb_and+0x10e>
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	601a      	str	r2, [r3, #0]
}
 800a6ea:	bf00      	nop
 800a6ec:	3728      	adds	r7, #40	; 0x28
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <create_fb_and>:

type_fb_and create_fb_and(uint8_t type){
 800a6f4:	b5b0      	push	{r4, r5, r7, lr}
 800a6f6:	b08c      	sub	sp, #48	; 0x30
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 800a700:	f7fd fe9e 	bl	8008440 <get_paramAddrTable>
 800a704:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_and fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800a706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //in4
 800a70c:	78fb      	ldrb	r3, [r7, #3]
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fd fec4 	bl	800849c <createParameter>
 800a714:	4603      	mov	r3, r0
 800a716:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(1); //in1
 800a718:	2001      	movs	r0, #1
 800a71a:	f7fd febf 	bl	800849c <createParameter>
 800a71e:	4603      	mov	r3, r0
 800a720:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(1); //in2
 800a722:	2001      	movs	r0, #1
 800a724:	f7fd feba 	bl	800849c <createParameter>
 800a728:	4603      	mov	r3, r0
 800a72a:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(1); //in3
 800a72c:	2001      	movs	r0, #1
 800a72e:	f7fd feb5 	bl	800849c <createParameter>
 800a732:	4603      	mov	r3, r0
 800a734:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(1); //in4
 800a736:	2001      	movs	r0, #1
 800a738:	f7fd feb0 	bl	800849c <createParameter>
 800a73c:	4603      	mov	r3, r0
 800a73e:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(1); //output
 800a740:	2001      	movs	r0, #1
 800a742:	f7fd feab 	bl	800849c <createParameter>
 800a746:	4603      	mov	r3, r0
 800a748:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //output
 800a74a:	2000      	movs	r0, #0
 800a74c:	f7fd fea6 	bl	800849c <createParameter>
 800a750:	4603      	mov	r3, r0
 800a752:	62bb      	str	r3, [r7, #40]	; 0x28



	fb.fb_index = writeToFBTable(fb_and, fb.startParamIndex);
 800a754:	7b7b      	ldrb	r3, [r7, #13]
 800a756:	4619      	mov	r1, r3
 800a758:	4809      	ldr	r0, [pc, #36]	; (800a780 <create_fb_and+0x8c>)
 800a75a:	f7fd fe7b 	bl	8008454 <writeToFBTable>
 800a75e:	4603      	mov	r3, r0
 800a760:	733b      	strb	r3, [r7, #12]

	return fb;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	461d      	mov	r5, r3
 800a766:	f107 040c 	add.w	r4, r7, #12
 800a76a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a76c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a76e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a772:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	3730      	adds	r7, #48	; 0x30
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bdb0      	pop	{r4, r5, r7, pc}
 800a77e:	bf00      	nop
 800a780:	0800a5d9 	.word	0x0800a5d9

0800a784 <fb_nand_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_nand.h"

uint8_t fb_nand_parser(uint8_t* p){
 800a784:	b580      	push	{r7, lr}
 800a786:	b08c      	sub	sp, #48	; 0x30
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_nand(type);
 800a794:	463b      	mov	r3, r7
 800a796:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a79a:	4611      	mov	r1, r2
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 f893 	bl	800a8c8 <create_fb_nand>
	return 0;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3730      	adds	r7, #48	; 0x30
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <fb_nand>:

void fb_nand(uint8_t p){
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b08a      	sub	sp, #40	; 0x28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800a7b6:	f7fd fe43 	bl	8008440 <get_paramAddrTable>
 800a7ba:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800a7bc:	79fb      	ldrb	r3, [r7, #7]
 800a7be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4413      	add	r3, r2
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ce:	4413      	add	r3, r2
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	4413      	add	r3, r2
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7e8:	4413      	add	r3, r2
 800a7ea:	3304      	adds	r3, #4
 800a7ec:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	3302      	adds	r3, #2
 800a7f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a802:	4413      	add	r3, r2
 800a804:	3304      	adds	r3, #4
 800a806:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	3303      	adds	r3, #3
 800a80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4413      	add	r3, r2
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a81c:	4413      	add	r3, r2
 800a81e:	3304      	adds	r3, #4
 800a820:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 800a822:	79fb      	ldrb	r3, [r7, #7]
 800a824:	3304      	adds	r3, #4
 800a826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4413      	add	r3, r2
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a836:	4413      	add	r3, r2
 800a838:	3304      	adds	r3, #4
 800a83a:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	3305      	adds	r3, #5
 800a840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4413      	add	r3, r2
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a850:	4413      	add	r3, r2
 800a852:	3304      	adds	r3, #4
 800a854:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 800a856:	79fb      	ldrb	r3, [r7, #7]
 800a858:	3306      	adds	r3, #6
 800a85a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a86a:	4413      	add	r3, r2
 800a86c:	3304      	adds	r3, #4
 800a86e:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 800a870:	6a3b      	ldr	r3, [r7, #32]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d10e      	bne.n	800a896 <fb_nand+0xea>
		*output =  ~((*input1)&(*input2)&(*input3)&(*input4));
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	401a      	ands	r2, r3
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	401a      	ands	r2, r3
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4013      	ands	r3, r2
 800a88e:	43da      	mvns	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  !((*input1)&&(*input2)&&(*input3)&&(*input4));
	}
}
 800a894:	e014      	b.n	800a8c0 <fb_nand+0x114>
		*output =  !((*input1)&&(*input2)&&(*input3)&&(*input4));
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00b      	beq.n	800a8b6 <fb_nand+0x10a>
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d007      	beq.n	800a8b6 <fb_nand+0x10a>
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d003      	beq.n	800a8b6 <fb_nand+0x10a>
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d101      	bne.n	800a8ba <fb_nand+0x10e>
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	e000      	b.n	800a8bc <fb_nand+0x110>
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	601a      	str	r2, [r3, #0]
}
 800a8c0:	bf00      	nop
 800a8c2:	3728      	adds	r7, #40	; 0x28
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <create_fb_nand>:

type_fb_nand create_fb_nand(uint8_t type){
 800a8c8:	b5b0      	push	{r4, r5, r7, lr}
 800a8ca:	b08c      	sub	sp, #48	; 0x30
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 800a8d4:	f7fd fdb4 	bl	8008440 <get_paramAddrTable>
 800a8d8:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_nand fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800a8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //in4
 800a8e0:	78fb      	ldrb	r3, [r7, #3]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fd fdda 	bl	800849c <createParameter>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(1); //in1
 800a8ec:	2001      	movs	r0, #1
 800a8ee:	f7fd fdd5 	bl	800849c <createParameter>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(1); //in2
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	f7fd fdd0 	bl	800849c <createParameter>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(1); //in3
 800a900:	2001      	movs	r0, #1
 800a902:	f7fd fdcb 	bl	800849c <createParameter>
 800a906:	4603      	mov	r3, r0
 800a908:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(1); //in4
 800a90a:	2001      	movs	r0, #1
 800a90c:	f7fd fdc6 	bl	800849c <createParameter>
 800a910:	4603      	mov	r3, r0
 800a912:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(0); //output
 800a914:	2000      	movs	r0, #0
 800a916:	f7fd fdc1 	bl	800849c <createParameter>
 800a91a:	4603      	mov	r3, r0
 800a91c:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0);
 800a91e:	2000      	movs	r0, #0
 800a920:	f7fd fdbc 	bl	800849c <createParameter>
 800a924:	4603      	mov	r3, r0
 800a926:	62bb      	str	r3, [r7, #40]	; 0x28


	fb.fb_index = writeToFBTable(fb_nand, fb.startParamIndex);
 800a928:	7b7b      	ldrb	r3, [r7, #13]
 800a92a:	4619      	mov	r1, r3
 800a92c:	4809      	ldr	r0, [pc, #36]	; (800a954 <create_fb_nand+0x8c>)
 800a92e:	f7fd fd91 	bl	8008454 <writeToFBTable>
 800a932:	4603      	mov	r3, r0
 800a934:	733b      	strb	r3, [r7, #12]

	return fb;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	461d      	mov	r5, r3
 800a93a:	f107 040c 	add.w	r4, r7, #12
 800a93e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a942:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a946:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	3730      	adds	r7, #48	; 0x30
 800a94e:	46bd      	mov	sp, r7
 800a950:	bdb0      	pop	{r4, r5, r7, pc}
 800a952:	bf00      	nop
 800a954:	0800a7ad 	.word	0x0800a7ad

0800a958 <fb_nor_parser>:
#include "logic/fb_nor.h"



//logic fb
uint8_t fb_nor_parser(uint8_t* p){
 800a958:	b580      	push	{r7, lr}
 800a95a:	b08a      	sub	sp, #40	; 0x28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6278      	str	r0, [r7, #36]	; 0x24
	create_fb_nor();
 800a960:	463b      	mov	r3, r7
 800a962:	4618      	mov	r0, r3
 800a964:	f000 f872 	bl	800aa4c <create_fb_nor>
	return 0;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3728      	adds	r7, #40	; 0x28
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <fb_nor>:
void fb_nor(uint8_t p){
 800a972:	b580      	push	{r7, lr}
 800a974:	b08a      	sub	sp, #40	; 0x28
 800a976:	af00      	add	r7, sp, #0
 800a978:	4603      	mov	r3, r0
 800a97a:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800a97c:	f7fd fd60 	bl	8008440 <get_paramAddrTable>
 800a980:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p]];
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4413      	add	r3, r2
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a994:	4413      	add	r3, r2
 800a996:	3304      	adds	r3, #4
 800a998:	623b      	str	r3, [r7, #32]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800a99a:	79fb      	ldrb	r3, [r7, #7]
 800a99c:	3301      	adds	r3, #1
 800a99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4413      	add	r3, r2
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ae:	4413      	add	r3, r2
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	61fb      	str	r3, [r7, #28]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800a9b4:	79fb      	ldrb	r3, [r7, #7]
 800a9b6:	3302      	adds	r3, #2
 800a9b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9c8:	4413      	add	r3, r2
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	61bb      	str	r3, [r7, #24]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+3]];
 800a9ce:	79fb      	ldrb	r3, [r7, #7]
 800a9d0:	3303      	adds	r3, #3
 800a9d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e2:	4413      	add	r3, r2
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	617b      	str	r3, [r7, #20]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+4]];
 800a9e8:	79fb      	ldrb	r3, [r7, #7]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4413      	add	r3, r2
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9fc:	4413      	add	r3, r2
 800a9fe:	3304      	adds	r3, #4
 800aa00:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+5]];
 800aa02:	79fb      	ldrb	r3, [r7, #7]
 800aa04:	3305      	adds	r3, #5
 800aa06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	4413      	add	r3, r2
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa16:	4413      	add	r3, r2
 800aa18:	3304      	adds	r3, #4
 800aa1a:	60fb      	str	r3, [r7, #12]


	*output =  !((*input1)|(*input2)|(*input3)|(*input4));
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	431a      	orrs	r2, r3
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	431a      	orrs	r2, r3
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	bf0c      	ite	eq
 800aa36:	2301      	moveq	r3, #1
 800aa38:	2300      	movne	r3, #0
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	601a      	str	r2, [r3, #0]

}
 800aa42:	bf00      	nop
 800aa44:	3728      	adds	r7, #40	; 0x28
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <create_fb_nor>:


type_fb_nor create_fb_nor(void){
 800aa4c:	b5b0      	push	{r4, r5, r7, lr}
 800aa4e:	b08a      	sub	sp, #40	; 0x28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
	s_Param* pAddrTable = get_paramAddrTable();
 800aa54:	f7fd fcf4 	bl	8008440 <get_paramAddrTable>
 800aa58:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_nor fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	727b      	strb	r3, [r7, #9]


	fb.fp.input1 = createParameter(0); //in1
 800aa60:	2000      	movs	r0, #0
 800aa62:	f7fd fd1b 	bl	800849c <createParameter>
 800aa66:	4603      	mov	r3, r0
 800aa68:	613b      	str	r3, [r7, #16]
	fb.fp.input2 = createParameter(0); //in2
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	f7fd fd16 	bl	800849c <createParameter>
 800aa70:	4603      	mov	r3, r0
 800aa72:	617b      	str	r3, [r7, #20]
	fb.fp.input3 = createParameter(0); //in3
 800aa74:	2000      	movs	r0, #0
 800aa76:	f7fd fd11 	bl	800849c <createParameter>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	61bb      	str	r3, [r7, #24]
	fb.fp.input4 = createParameter(0); //in4
 800aa7e:	2000      	movs	r0, #0
 800aa80:	f7fd fd0c 	bl	800849c <createParameter>
 800aa84:	4603      	mov	r3, r0
 800aa86:	61fb      	str	r3, [r7, #28]
	fb.fp.output = createParameter(0); //output
 800aa88:	2000      	movs	r0, #0
 800aa8a:	f7fd fd07 	bl	800849c <createParameter>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	60fb      	str	r3, [r7, #12]
	fb.fp.stat = createParameter(0); //output
 800aa92:	2000      	movs	r0, #0
 800aa94:	f7fd fd02 	bl	800849c <createParameter>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	623b      	str	r3, [r7, #32]


	fb.fb_index = writeToFBTable(fb_nor, fb.startParamIndex);
 800aa9c:	7a7b      	ldrb	r3, [r7, #9]
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	4809      	ldr	r0, [pc, #36]	; (800aac8 <create_fb_nor+0x7c>)
 800aaa2:	f7fd fcd7 	bl	8008454 <writeToFBTable>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	723b      	strb	r3, [r7, #8]

	return fb;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	461d      	mov	r5, r3
 800aaae:	f107 0408 	add.w	r4, r7, #8
 800aab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aab6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800aaba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	3728      	adds	r7, #40	; 0x28
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bdb0      	pop	{r4, r5, r7, pc}
 800aac6:	bf00      	nop
 800aac8:	0800a973 	.word	0x0800a973

0800aacc <fb_not_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_not.h"

//logic fb
uint8_t fb_not_parser(uint8_t* p){
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08a      	sub	sp, #40	; 0x28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	61f8      	str	r0, [r7, #28]
	uint8_t type = p[0];
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t input = p[1];
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	785b      	ldrb	r3, [r3, #1]
 800aae0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_not(type, input);
 800aae4:	463b      	mov	r3, r7
 800aae6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aaea:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 f858 	bl	800aba4 <create_fb_not>
	return 0;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3728      	adds	r7, #40	; 0x28
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <fb_not>:

void fb_not(uint8_t p){
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b088      	sub	sp, #32
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	4603      	mov	r3, r0
 800ab06:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800ab08:	f7fd fc9a 	bl	8008440 <get_paramAddrTable>
 800ab0c:	61f8      	str	r0, [r7, #28]
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800ab0e:	79fb      	ldrb	r3, [r7, #7]
 800ab10:	69fa      	ldr	r2, [r7, #28]
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4413      	add	r3, r2
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	69fa      	ldr	r2, [r7, #28]
 800ab20:	4413      	add	r3, r2
 800ab22:	3304      	adds	r3, #4
 800ab24:	61bb      	str	r3, [r7, #24]
	int32_t* input = &pAddrTable->value[pAddrTable->addr[p+1]];
 800ab26:	79fb      	ldrb	r3, [r7, #7]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	69fa      	ldr	r2, [r7, #28]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4413      	add	r3, r2
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	69fa      	ldr	r2, [r7, #28]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	617b      	str	r3, [r7, #20]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+2]];
 800ab40:	79fb      	ldrb	r3, [r7, #7]
 800ab42:	3302      	adds	r3, #2
 800ab44:	69fa      	ldr	r2, [r7, #28]
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	69fa      	ldr	r2, [r7, #28]
 800ab54:	4413      	add	r3, r2
 800ab56:	3304      	adds	r3, #4
 800ab58:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 800ab5a:	79fb      	ldrb	r3, [r7, #7]
 800ab5c:	3303      	adds	r3, #3
 800ab5e:	69fa      	ldr	r2, [r7, #28]
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4413      	add	r3, r2
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	69fa      	ldr	r2, [r7, #28]
 800ab6e:	4413      	add	r3, r2
 800ab70:	3304      	adds	r3, #4
 800ab72:	60fb      	str	r3, [r7, #12]

	// returns true if the conditions is false
	// else returns false

	if(*type == 1){
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d105      	bne.n	800ab88 <fb_not+0x8a>
		*output =  ~(*input);
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	43da      	mvns	r2, r3
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  !(*input);
	}

}
 800ab86:	e009      	b.n	800ab9c <fb_not+0x9e>
		*output =  !(*input);
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	bf0c      	ite	eq
 800ab90:	2301      	moveq	r3, #1
 800ab92:	2300      	movne	r3, #0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	461a      	mov	r2, r3
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	601a      	str	r2, [r3, #0]
}
 800ab9c:	bf00      	nop
 800ab9e:	3720      	adds	r7, #32
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <create_fb_not>:


type_fb_not create_fb_not(uint8_t type, uint8_t input){
 800aba4:	b5b0      	push	{r4, r5, r7, lr}
 800aba6:	b088      	sub	sp, #32
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	460b      	mov	r3, r1
 800abae:	70fb      	strb	r3, [r7, #3]
 800abb0:	4613      	mov	r3, r2
 800abb2:	70bb      	strb	r3, [r7, #2]
	s_Param* pAddrTable = get_paramAddrTable();
 800abb4:	f7fd fc44 	bl	8008440 <get_paramAddrTable>
 800abb8:	61f8      	str	r0, [r7, #28]
	type_fb_not fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	727b      	strb	r3, [r7, #9]

	//input not connected -> output = 1
	fb.fp.type = createParameter(type); //in
 800abc0:	78fb      	ldrb	r3, [r7, #3]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fd fc6a 	bl	800849c <createParameter>
 800abc8:	4603      	mov	r3, r0
 800abca:	617b      	str	r3, [r7, #20]
	fb.fp.input = createParameter(input); //in
 800abcc:	78bb      	ldrb	r3, [r7, #2]
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fd fc64 	bl	800849c <createParameter>
 800abd4:	4603      	mov	r3, r0
 800abd6:	613b      	str	r3, [r7, #16]
	fb.fp.output = createParameter(0); //output
 800abd8:	2000      	movs	r0, #0
 800abda:	f7fd fc5f 	bl	800849c <createParameter>
 800abde:	4603      	mov	r3, r0
 800abe0:	60fb      	str	r3, [r7, #12]
	fb.fp.stat = createParameter(0);
 800abe2:	2000      	movs	r0, #0
 800abe4:	f7fd fc5a 	bl	800849c <createParameter>
 800abe8:	4603      	mov	r3, r0
 800abea:	61bb      	str	r3, [r7, #24]



	fb.fb_index = writeToFBTable(fb_not, fb.startParamIndex);
 800abec:	7a7b      	ldrb	r3, [r7, #9]
 800abee:	4619      	mov	r1, r3
 800abf0:	4808      	ldr	r0, [pc, #32]	; (800ac14 <create_fb_not+0x70>)
 800abf2:	f7fd fc2f 	bl	8008454 <writeToFBTable>
 800abf6:	4603      	mov	r3, r0
 800abf8:	723b      	strb	r3, [r7, #8]

	return fb;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	461d      	mov	r5, r3
 800abfe:	f107 0408 	add.w	r4, r7, #8
 800ac02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	602b      	str	r3, [r5, #0]
}
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	3720      	adds	r7, #32
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bdb0      	pop	{r4, r5, r7, pc}
 800ac12:	bf00      	nop
 800ac14:	0800aaff 	.word	0x0800aaff

0800ac18 <fb_or_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_or.h"

uint8_t fb_or_parser(uint8_t* p){
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b08c      	sub	sp, #48	; 0x30
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_or(type);
 800ac28:	463b      	mov	r3, r7
 800ac2a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ac2e:	4611      	mov	r1, r2
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 f893 	bl	800ad5c <create_fb_or>
	return 0;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3730      	adds	r7, #48	; 0x30
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <fb_or>:

void fb_or(uint8_t p){
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b08a      	sub	sp, #40	; 0x28
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800ac4a:	f7fd fbf9 	bl	8008440 <get_paramAddrTable>
 800ac4e:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800ac50:	79fb      	ldrb	r3, [r7, #7]
 800ac52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac62:	4413      	add	r3, r2
 800ac64:	3304      	adds	r3, #4
 800ac66:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800ac68:	79fb      	ldrb	r3, [r7, #7]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac7c:	4413      	add	r3, r2
 800ac7e:	3304      	adds	r3, #4
 800ac80:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800ac82:	79fb      	ldrb	r3, [r7, #7]
 800ac84:	3302      	adds	r3, #2
 800ac86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac96:	4413      	add	r3, r2
 800ac98:	3304      	adds	r3, #4
 800ac9a:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 800ac9c:	79fb      	ldrb	r3, [r7, #7]
 800ac9e:	3303      	adds	r3, #3
 800aca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acb0:	4413      	add	r3, r2
 800acb2:	3304      	adds	r3, #4
 800acb4:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	3304      	adds	r3, #4
 800acba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acca:	4413      	add	r3, r2
 800accc:	3304      	adds	r3, #4
 800acce:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 800acd0:	79fb      	ldrb	r3, [r7, #7]
 800acd2:	3305      	adds	r3, #5
 800acd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4413      	add	r3, r2
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ace4:	4413      	add	r3, r2
 800ace6:	3304      	adds	r3, #4
 800ace8:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 800acea:	79fb      	ldrb	r3, [r7, #7]
 800acec:	3306      	adds	r3, #6
 800acee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acfe:	4413      	add	r3, r2
 800ad00:	3304      	adds	r3, #4
 800ad02:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d10d      	bne.n	800ad28 <fb_or+0xe8>
		*output =  (*input1)|(*input2)|(*input3)|(*input4);
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	431a      	orrs	r2, r3
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	431a      	orrs	r2, r3
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	431a      	orrs	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	601a      	str	r2, [r3, #0]
	else{
		*output =  (*input1)||(*input2)||(*input3)||(*input4);
	}


}
 800ad26:	e014      	b.n	800ad52 <fb_or+0x112>
		*output =  (*input1)||(*input2)||(*input3)||(*input4);
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d10b      	bne.n	800ad48 <fb_or+0x108>
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d107      	bne.n	800ad48 <fb_or+0x108>
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d103      	bne.n	800ad48 <fb_or+0x108>
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <fb_or+0x10c>
 800ad48:	2201      	movs	r2, #1
 800ad4a:	e000      	b.n	800ad4e <fb_or+0x10e>
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	601a      	str	r2, [r3, #0]
}
 800ad52:	bf00      	nop
 800ad54:	3728      	adds	r7, #40	; 0x28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
	...

0800ad5c <create_fb_or>:


type_fb_or create_fb_or(uint8_t type){
 800ad5c:	b5b0      	push	{r4, r5, r7, lr}
 800ad5e:	b08c      	sub	sp, #48	; 0x30
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	460b      	mov	r3, r1
 800ad66:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 800ad68:	f7fd fb6a 	bl	8008440 <get_paramAddrTable>
 800ad6c:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_or fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800ad6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //type
 800ad74:	78fb      	ldrb	r3, [r7, #3]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fd fb90 	bl	800849c <createParameter>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(0); //input1
 800ad80:	2000      	movs	r0, #0
 800ad82:	f7fd fb8b 	bl	800849c <createParameter>
 800ad86:	4603      	mov	r3, r0
 800ad88:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(0); //input2
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	f7fd fb86 	bl	800849c <createParameter>
 800ad90:	4603      	mov	r3, r0
 800ad92:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(0); //input3
 800ad94:	2000      	movs	r0, #0
 800ad96:	f7fd fb81 	bl	800849c <createParameter>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(0); //input4
 800ad9e:	2000      	movs	r0, #0
 800ada0:	f7fd fb7c 	bl	800849c <createParameter>
 800ada4:	4603      	mov	r3, r0
 800ada6:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(0); //output
 800ada8:	2000      	movs	r0, #0
 800adaa:	f7fd fb77 	bl	800849c <createParameter>
 800adae:	4603      	mov	r3, r0
 800adb0:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //output
 800adb2:	2000      	movs	r0, #0
 800adb4:	f7fd fb72 	bl	800849c <createParameter>
 800adb8:	4603      	mov	r3, r0
 800adba:	62bb      	str	r3, [r7, #40]	; 0x28

	fb.fb_index = writeToFBTable(fb_or, fb.startParamIndex);
 800adbc:	7b7b      	ldrb	r3, [r7, #13]
 800adbe:	4619      	mov	r1, r3
 800adc0:	4809      	ldr	r0, [pc, #36]	; (800ade8 <create_fb_or+0x8c>)
 800adc2:	f7fd fb47 	bl	8008454 <writeToFBTable>
 800adc6:	4603      	mov	r3, r0
 800adc8:	733b      	strb	r3, [r7, #12]

	return fb;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	461d      	mov	r5, r3
 800adce:	f107 040c 	add.w	r4, r7, #12
 800add2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800add4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800add6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800adda:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	3730      	adds	r7, #48	; 0x30
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bdb0      	pop	{r4, r5, r7, pc}
 800ade6:	bf00      	nop
 800ade8:	0800ac41 	.word	0x0800ac41

0800adec <fb_xor_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_xor.h"

//logic fb
uint8_t fb_xor_parser(uint8_t* p){
 800adec:	b580      	push	{r7, lr}
 800adee:	b088      	sub	sp, #32
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	61f8      	str	r0, [r7, #28]
	create_fb_xor();
 800adf4:	463b      	mov	r3, r7
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 f858 	bl	800aeac <create_fb_xor>
	return 0;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3720      	adds	r7, #32
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <fb_xor>:
void fb_xor(uint8_t p){
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b088      	sub	sp, #32
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800ae10:	f7fd fb16 	bl	8008440 <get_paramAddrTable>
 800ae14:	61f8      	str	r0, [r7, #28]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p]];
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	69fa      	ldr	r2, [r7, #28]
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	69fa      	ldr	r2, [r7, #28]
 800ae28:	4413      	add	r3, r2
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	61bb      	str	r3, [r7, #24]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800ae2e:	79fb      	ldrb	r3, [r7, #7]
 800ae30:	3301      	adds	r3, #1
 800ae32:	69fa      	ldr	r2, [r7, #28]
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4413      	add	r3, r2
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	69fa      	ldr	r2, [r7, #28]
 800ae42:	4413      	add	r3, r2
 800ae44:	3304      	adds	r3, #4
 800ae46:	617b      	str	r3, [r7, #20]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 800ae48:	79fb      	ldrb	r3, [r7, #7]
 800ae4a:	3302      	adds	r3, #2
 800ae4c:	69fa      	ldr	r2, [r7, #28]
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	69fa      	ldr	r2, [r7, #28]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	3304      	adds	r3, #4
 800ae60:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+3]];
 800ae62:	79fb      	ldrb	r3, [r7, #7]
 800ae64:	3303      	adds	r3, #3
 800ae66:	69fa      	ldr	r2, [r7, #28]
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	4413      	add	r3, r2
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	69fa      	ldr	r2, [r7, #28]
 800ae76:	4413      	add	r3, r2
 800ae78:	3304      	adds	r3, #4
 800ae7a:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 800ae7c:	79fb      	ldrb	r3, [r7, #7]
 800ae7e:	3304      	adds	r3, #4
 800ae80:	69fa      	ldr	r2, [r7, #28]
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4413      	add	r3, r2
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	69fa      	ldr	r2, [r7, #28]
 800ae90:	4413      	add	r3, r2
 800ae92:	3304      	adds	r3, #4
 800ae94:	60bb      	str	r3, [r7, #8]

	*output =  (*input1)^(*input2);
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	405a      	eors	r2, r3
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	601a      	str	r2, [r3, #0]
}
 800aea4:	bf00      	nop
 800aea6:	3720      	adds	r7, #32
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <create_fb_xor>:


type_fb_xor create_fb_xor(void){
 800aeac:	b5b0      	push	{r4, r5, r7, lr}
 800aeae:	b08a      	sub	sp, #40	; 0x28
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
	s_Param* pAddrTable = get_paramAddrTable();
 800aeb4:	f7fd fac4 	bl	8008440 <get_paramAddrTable>
 800aeb8:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_xor fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	737b      	strb	r3, [r7, #13]


	fb.fp.input1 = createParameter(0); //in
 800aec0:	2000      	movs	r0, #0
 800aec2:	f7fd faeb 	bl	800849c <createParameter>
 800aec6:	4603      	mov	r3, r0
 800aec8:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(0); //in
 800aeca:	2000      	movs	r0, #0
 800aecc:	f7fd fae6 	bl	800849c <createParameter>
 800aed0:	4603      	mov	r3, r0
 800aed2:	61bb      	str	r3, [r7, #24]
	fb.fp.mode = createParameter(0); //in
 800aed4:	2000      	movs	r0, #0
 800aed6:	f7fd fae1 	bl	800849c <createParameter>
 800aeda:	4603      	mov	r3, r0
 800aedc:	61fb      	str	r3, [r7, #28]
	fb.fp.output = createParameter(0); //output
 800aede:	2000      	movs	r0, #0
 800aee0:	f7fd fadc 	bl	800849c <createParameter>
 800aee4:	4603      	mov	r3, r0
 800aee6:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //in
 800aee8:	2000      	movs	r0, #0
 800aeea:	f7fd fad7 	bl	800849c <createParameter>
 800aeee:	4603      	mov	r3, r0
 800aef0:	623b      	str	r3, [r7, #32]



	fb.fb_index = writeToFBTable(fb_xor, fb.startParamIndex);
 800aef2:	7b7b      	ldrb	r3, [r7, #13]
 800aef4:	4619      	mov	r1, r3
 800aef6:	4809      	ldr	r0, [pc, #36]	; (800af1c <create_fb_xor+0x70>)
 800aef8:	f7fd faac 	bl	8008454 <writeToFBTable>
 800aefc:	4603      	mov	r3, r0
 800aefe:	733b      	strb	r3, [r7, #12]

	return fb;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	461d      	mov	r5, r3
 800af04:	f107 040c 	add.w	r4, r7, #12
 800af08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800af10:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	3728      	adds	r7, #40	; 0x28
 800af18:	46bd      	mov	sp, r7
 800af1a:	bdb0      	pop	{r4, r5, r7, pc}
 800af1c:	0800ae07 	.word	0x0800ae07

0800af20 <fb_condition_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_condition.h"

//fb_condition
uint8_t fb_condition_parser(uint8_t* p){
 800af20:	b580      	push	{r7, lr}
 800af22:	b08a      	sub	sp, #40	; 0x28
 800af24:	af00      	add	r7, sp, #0
 800af26:	61f8      	str	r0, [r7, #28]
	uint8_t mode = p[0];
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	create_fb_condition(mode);
 800af30:	463b      	mov	r3, r7
 800af32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800af36:	4611      	mov	r1, r2
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 f8bd 	bl	800b0b8 <create_fb_condition>
	return 0;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3728      	adds	r7, #40	; 0x28
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <fb_condition>:

void fb_condition(uint8_t p){
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	4603      	mov	r3, r0
 800af50:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800af52:	f7fd fa75 	bl	8008440 <get_paramAddrTable>
 800af56:	61f8      	str	r0, [r7, #28]
	int32_t* in1 = &pAddrTable->value[pAddrTable->addr[p]];
 800af58:	79fb      	ldrb	r3, [r7, #7]
 800af5a:	69fa      	ldr	r2, [r7, #28]
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	4413      	add	r3, r2
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	69fa      	ldr	r2, [r7, #28]
 800af6a:	4413      	add	r3, r2
 800af6c:	3304      	adds	r3, #4
 800af6e:	61bb      	str	r3, [r7, #24]
	int32_t* in2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800af70:	79fb      	ldrb	r3, [r7, #7]
 800af72:	3301      	adds	r3, #1
 800af74:	69fa      	ldr	r2, [r7, #28]
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4413      	add	r3, r2
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	69fa      	ldr	r2, [r7, #28]
 800af84:	4413      	add	r3, r2
 800af86:	3304      	adds	r3, #4
 800af88:	617b      	str	r3, [r7, #20]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 800af8a:	79fb      	ldrb	r3, [r7, #7]
 800af8c:	3302      	adds	r3, #2
 800af8e:	69fa      	ldr	r2, [r7, #28]
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	69fa      	ldr	r2, [r7, #28]
 800af9e:	4413      	add	r3, r2
 800afa0:	3304      	adds	r3, #4
 800afa2:	613b      	str	r3, [r7, #16]
	uint32_t* output = &pAddrTable->value[pAddrTable->addr[p+3]];
 800afa4:	79fb      	ldrb	r3, [r7, #7]
 800afa6:	3303      	adds	r3, #3
 800afa8:	69fa      	ldr	r2, [r7, #28]
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4413      	add	r3, r2
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	69fa      	ldr	r2, [r7, #28]
 800afb8:	4413      	add	r3, r2
 800afba:	3304      	adds	r3, #4
 800afbc:	60fb      	str	r3, [r7, #12]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 800afbe:	79fb      	ldrb	r3, [r7, #7]
 800afc0:	3304      	adds	r3, #4
 800afc2:	69fa      	ldr	r2, [r7, #28]
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4413      	add	r3, r2
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	69fa      	ldr	r2, [r7, #28]
 800afd2:	4413      	add	r3, r2
 800afd4:	3304      	adds	r3, #4
 800afd6:	60bb      	str	r3, [r7, #8]

	switch ( *mode ){
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b05      	cmp	r3, #5
 800afde:	d863      	bhi.n	800b0a8 <fb_condition+0x160>
 800afe0:	a201      	add	r2, pc, #4	; (adr r2, 800afe8 <fb_condition+0xa0>)
 800afe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe6:	bf00      	nop
 800afe8:	0800b001 	.word	0x0800b001
 800afec:	0800b01d 	.word	0x0800b01d
 800aff0:	0800b039 	.word	0x0800b039
 800aff4:	0800b055 	.word	0x0800b055
 800aff8:	0800b071 	.word	0x0800b071
 800affc:	0800b08d 	.word	0x0800b08d
		case 0:
			if( *in1 > *in2)
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	429a      	cmp	r2, r3
 800b00a:	dd03      	ble.n	800b014 <fb_condition+0xcc>
				*output = 1;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2201      	movs	r2, #1
 800b010:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800b012:	e04d      	b.n	800b0b0 <fb_condition+0x168>
				*output = 0;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	601a      	str	r2, [r3, #0]
			break;
 800b01a:	e049      	b.n	800b0b0 <fb_condition+0x168>

		case 1:
			if( *in1 >= *in2)
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	429a      	cmp	r2, r3
 800b026:	db03      	blt.n	800b030 <fb_condition+0xe8>
				*output = 1;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2201      	movs	r2, #1
 800b02c:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800b02e:	e03f      	b.n	800b0b0 <fb_condition+0x168>
				*output = 0;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]
			break;
 800b036:	e03b      	b.n	800b0b0 <fb_condition+0x168>

		case 2:
			if( *in1 == *in2)
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	429a      	cmp	r2, r3
 800b042:	d103      	bne.n	800b04c <fb_condition+0x104>
				*output = 1;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2201      	movs	r2, #1
 800b048:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800b04a:	e031      	b.n	800b0b0 <fb_condition+0x168>
				*output = 0;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	601a      	str	r2, [r3, #0]
			break;
 800b052:	e02d      	b.n	800b0b0 <fb_condition+0x168>

		case 3:
			if( *in1 != *in2)
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d003      	beq.n	800b068 <fb_condition+0x120>
				*output = 1;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2201      	movs	r2, #1
 800b064:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800b066:	e023      	b.n	800b0b0 <fb_condition+0x168>
				*output = 0;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
			break;
 800b06e:	e01f      	b.n	800b0b0 <fb_condition+0x168>

		case 4:
			if( *in1 <= *in2)
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	429a      	cmp	r2, r3
 800b07a:	dc03      	bgt.n	800b084 <fb_condition+0x13c>
				*output = 1;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2201      	movs	r2, #1
 800b080:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800b082:	e015      	b.n	800b0b0 <fb_condition+0x168>
				*output = 0;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	601a      	str	r2, [r3, #0]
			break;
 800b08a:	e011      	b.n	800b0b0 <fb_condition+0x168>

		case 5:
			if( *in1 < *in2)
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	429a      	cmp	r2, r3
 800b096:	da03      	bge.n	800b0a0 <fb_condition+0x158>
				*output = 1;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2201      	movs	r2, #1
 800b09c:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800b09e:	e007      	b.n	800b0b0 <fb_condition+0x168>
				*output = 0;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	601a      	str	r2, [r3, #0]
			break;
 800b0a6:	e003      	b.n	800b0b0 <fb_condition+0x168>

		default:
			*output = 0;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
	}

}
 800b0ae:	bf00      	nop
 800b0b0:	bf00      	nop
 800b0b2:	3720      	adds	r7, #32
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <create_fb_condition>:


type_fb_condition create_fb_condition(uint8_t mode){
 800b0b8:	b5b0      	push	{r4, r5, r7, lr}
 800b0ba:	b08a      	sub	sp, #40	; 0x28
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 800b0c4:	f7fd f9bc 	bl	8008440 <get_paramAddrTable>
 800b0c8:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_condition fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	737b      	strb	r3, [r7, #13]


	fb.fp.in1 = createParameter(0); //in1
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	f7fd f9e3 	bl	800849c <createParameter>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	613b      	str	r3, [r7, #16]
	fb.fp.in2 = createParameter(0); //in2
 800b0da:	2000      	movs	r0, #0
 800b0dc:	f7fd f9de 	bl	800849c <createParameter>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode); //op
 800b0e4:	78fb      	ldrb	r3, [r7, #3]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fd f9d8 	bl	800849c <createParameter>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	61bb      	str	r3, [r7, #24]
	fb.fp.out = createParameter(0); //output
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	f7fd f9d3 	bl	800849c <createParameter>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	61fb      	str	r3, [r7, #28]
	fb.fp.stat = createParameter(0); //output
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	f7fd f9ce 	bl	800849c <createParameter>
 800b100:	4603      	mov	r3, r0
 800b102:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_condition, fb.startParamIndex);
 800b104:	7b7b      	ldrb	r3, [r7, #13]
 800b106:	4619      	mov	r1, r3
 800b108:	4809      	ldr	r0, [pc, #36]	; (800b130 <create_fb_condition+0x78>)
 800b10a:	f7fd f9a3 	bl	8008454 <writeToFBTable>
 800b10e:	4603      	mov	r3, r0
 800b110:	733b      	strb	r3, [r7, #12]

	return fb;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	461d      	mov	r5, r3
 800b116:	f107 040c 	add.w	r4, r7, #12
 800b11a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b11c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b11e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b122:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	3728      	adds	r7, #40	; 0x28
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bdb0      	pop	{r4, r5, r7, pc}
 800b12e:	bf00      	nop
 800b130:	0800af49 	.word	0x0800af49

0800b134 <fb_hsc_parser>:
#include "fb_hsc.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_hsc_parser(uint8_t* p){
 800b134:	b590      	push	{r4, r7, lr}
 800b136:	b091      	sub	sp, #68	; 0x44
 800b138:	af02      	add	r7, sp, #8
 800b13a:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t preset = (uint32_t) p[3] << 24 | p[4] << 16 | p[5] <<8 | p[6];
 800b13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13e:	3303      	adds	r3, #3
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	061b      	lsls	r3, r3, #24
 800b144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b146:	3204      	adds	r2, #4
 800b148:	7812      	ldrb	r2, [r2, #0]
 800b14a:	0412      	lsls	r2, r2, #16
 800b14c:	4313      	orrs	r3, r2
 800b14e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b150:	3205      	adds	r2, #5
 800b152:	7812      	ldrb	r2, [r2, #0]
 800b154:	0212      	lsls	r2, r2, #8
 800b156:	4313      	orrs	r3, r2
 800b158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b15a:	3206      	adds	r2, #6
 800b15c:	7812      	ldrb	r2, [r2, #0]
 800b15e:	4313      	orrs	r3, r2
 800b160:	637b      	str	r3, [r7, #52]	; 0x34
	create_fb_hsc(p[0],p[1], p[2],preset);
 800b162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b164:	7819      	ldrb	r1, [r3, #0]
 800b166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b168:	3301      	adds	r3, #1
 800b16a:	781a      	ldrb	r2, [r3, #0]
 800b16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16e:	3302      	adds	r3, #2
 800b170:	781c      	ldrb	r4, [r3, #0]
 800b172:	4638      	mov	r0, r7
 800b174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	4623      	mov	r3, r4
 800b17a:	f000 f885 	bl	800b288 <create_fb_hsc>
	return 0;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	373c      	adds	r7, #60	; 0x3c
 800b184:	46bd      	mov	sp, r7
 800b186:	bd90      	pop	{r4, r7, pc}

0800b188 <fb_hsc>:

void fb_hsc(uint8_t p){
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08c      	sub	sp, #48	; 0x30
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	4603      	mov	r3, r0
 800b190:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800b192:	f7fd f955 	bl	8008440 <get_paramAddrTable>
 800b196:	62f8      	str	r0, [r7, #44]	; 0x2c
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 800b198:	79fb      	ldrb	r3, [r7, #7]
 800b19a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1aa:	4413      	add	r3, r2
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* ch1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800b1b0:	79fb      	ldrb	r3, [r7, #7]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1c4:	4413      	add	r3, r2
 800b1c6:	3304      	adds	r3, #4
 800b1c8:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* ch2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	3302      	adds	r3, #2
 800b1ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1de:	4413      	add	r3, r2
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	623b      	str	r3, [r7, #32]
	int32_t* pf = &pAddrTable->value[pAddrTable->addr[p+3]];
 800b1e4:	79fb      	ldrb	r3, [r7, #7]
 800b1e6:	3303      	adds	r3, #3
 800b1e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1f8:	4413      	add	r3, r2
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	61fb      	str	r3, [r7, #28]
	int32_t* preset = &pAddrTable->value[pAddrTable->addr[p+4]];
 800b1fe:	79fb      	ldrb	r3, [r7, #7]
 800b200:	3304      	adds	r3, #4
 800b202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b212:	4413      	add	r3, r2
 800b214:	3304      	adds	r3, #4
 800b216:	61bb      	str	r3, [r7, #24]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+5]];
 800b218:	79fb      	ldrb	r3, [r7, #7]
 800b21a:	3305      	adds	r3, #5
 800b21c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b22c:	4413      	add	r3, r2
 800b22e:	3304      	adds	r3, #4
 800b230:	617b      	str	r3, [r7, #20]
	int32_t* out = &pAddrTable->value[pAddrTable->addr[p+6]];
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	3306      	adds	r3, #6
 800b236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b246:	4413      	add	r3, r2
 800b248:	3304      	adds	r3, #4
 800b24a:	613b      	str	r3, [r7, #16]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+7]];
 800b24c:	79fb      	ldrb	r3, [r7, #7]
 800b24e:	3307      	adds	r3, #7
 800b250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4413      	add	r3, r2
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b260:	4413      	add	r3, r2
 800b262:	3304      	adds	r3, #4
 800b264:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+8]];
 800b266:	79fb      	ldrb	r3, [r7, #7]
 800b268:	3308      	adds	r3, #8
 800b26a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	4413      	add	r3, r2
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b27a:	4413      	add	r3, r2
 800b27c:	3304      	adds	r3, #4
 800b27e:	60bb      	str	r3, [r7, #8]

	//todo:implement
}
 800b280:	bf00      	nop
 800b282:	3730      	adds	r7, #48	; 0x30
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <create_fb_hsc>:

type_fb_hsc create_fb_hsc(uint8_t ch1,
								uint8_t ch2,
									uint8_t mode,
											uint32_t preset){
 800b288:	b5b0      	push	{r4, r5, r7, lr}
 800b28a:	b08e      	sub	sp, #56	; 0x38
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	4608      	mov	r0, r1
 800b292:	4611      	mov	r1, r2
 800b294:	461a      	mov	r2, r3
 800b296:	4603      	mov	r3, r0
 800b298:	70fb      	strb	r3, [r7, #3]
 800b29a:	460b      	mov	r3, r1
 800b29c:	70bb      	strb	r3, [r7, #2]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	707b      	strb	r3, [r7, #1]
	type_fb_hsc fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800b2a2:	f7fd f8cd 	bl	8008440 <get_paramAddrTable>
 800b2a6:	6378      	str	r0, [r7, #52]	; 0x34

	fb.startParamIndex = pAddrTable->currentIndex;
 800b2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	737b      	strb	r3, [r7, #13]

	//input ports
	fb.fp.rst = createParameter(0);
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	f7fd f8f4 	bl	800849c <createParameter>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	613b      	str	r3, [r7, #16]
	fb.fp.ch1 = createParameter(ch1);
 800b2b8:	78fb      	ldrb	r3, [r7, #3]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fd f8ee 	bl	800849c <createParameter>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	617b      	str	r3, [r7, #20]
	fb.fp.ch2 = createParameter(ch2);
 800b2c4:	78bb      	ldrb	r3, [r7, #2]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fd f8e8 	bl	800849c <createParameter>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	61bb      	str	r3, [r7, #24]
	fb.fp.pf = createParameter(0);
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	f7fd f8e3 	bl	800849c <createParameter>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	61fb      	str	r3, [r7, #28]
	fb.fp.preset = createParameter(preset);
 800b2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fd f8dd 	bl	800849c <createParameter>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	623b      	str	r3, [r7, #32]
	fb.fp.mode = createParameter(mode);
 800b2e6:	787b      	ldrb	r3, [r7, #1]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fd f8d7 	bl	800849c <createParameter>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	627b      	str	r3, [r7, #36]	; 0x24

	//output ports
	fb.fp.out = createParameter(0);
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	f7fd f8d2 	bl	800849c <createParameter>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.val = createParameter(0);
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	f7fd f8cd 	bl	800849c <createParameter>
 800b302:	4603      	mov	r3, r0
 800b304:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.stat = createParameter(0);
 800b306:	2000      	movs	r0, #0
 800b308:	f7fd f8c8 	bl	800849c <createParameter>
 800b30c:	4603      	mov	r3, r0
 800b30e:	633b      	str	r3, [r7, #48]	; 0x30

	//internal parameters

	fb.fb_index = writeToFBTable(fb_hsc, fb.startParamIndex);
 800b310:	7b7b      	ldrb	r3, [r7, #13]
 800b312:	4619      	mov	r1, r3
 800b314:	480a      	ldr	r0, [pc, #40]	; (800b340 <create_fb_hsc+0xb8>)
 800b316:	f7fd f89d 	bl	8008454 <writeToFBTable>
 800b31a:	4603      	mov	r3, r0
 800b31c:	733b      	strb	r3, [r7, #12]

	return fb;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	461d      	mov	r5, r3
 800b322:	f107 040c 	add.w	r4, r7, #12
 800b326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b32a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b32c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b32e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b332:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	3738      	adds	r7, #56	; 0x38
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bdb0      	pop	{r4, r5, r7, pc}
 800b33e:	bf00      	nop
 800b340:	0800b189 	.word	0x0800b189

0800b344 <fb_number_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_number.h"

//output fb
uint8_t fb_number_parser(uint8_t* p){
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
	uint16_t value = (uint16_t) p[0] <<8 | p[1];
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	021b      	lsls	r3, r3, #8
 800b352:	b21a      	sxth	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3301      	adds	r3, #1
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	b21b      	sxth	r3, r3
 800b35c:	4313      	orrs	r3, r2
 800b35e:	b21b      	sxth	r3, r3
 800b360:	81fb      	strh	r3, [r7, #14]
	create_fb_number(value);
 800b362:	89fb      	ldrh	r3, [r7, #14]
 800b364:	4618      	mov	r0, r3
 800b366:	f000 f811 	bl	800b38c <create_fb_number>
	return 0;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <fb_number>:

void fb_number(uint8_t p){
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	4603      	mov	r3, r0
 800b37c:	71fb      	strb	r3, [r7, #7]
}
 800b37e:	bf00      	nop
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
	...

0800b38c <create_fb_number>:

type_fb_number create_fb_number(uint16_t value){
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	4603      	mov	r3, r0
 800b394:	80fb      	strh	r3, [r7, #6]
	type_fb_number fb;
	s_Param* pAddrTable = get_paramAddrTable();
 800b396:	f7fd f853 	bl	8008440 <get_paramAddrTable>
 800b39a:	6178      	str	r0, [r7, #20]

	fb.startParamIndex = pAddrTable->currentIndex;
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	737b      	strb	r3, [r7, #13]

	fb.value = createParameter(value);
 800b3a2:	88fb      	ldrh	r3, [r7, #6]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fd f879 	bl	800849c <createParameter>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	81fb      	strh	r3, [r7, #14]

	fb.fb_index = writeToFBTable(fb_number, fb.startParamIndex);
 800b3b0:	7b7b      	ldrb	r3, [r7, #13]
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4808      	ldr	r0, [pc, #32]	; (800b3d8 <create_fb_number+0x4c>)
 800b3b6:	f7fd f84d 	bl	8008454 <writeToFBTable>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	733b      	strb	r3, [r7, #12]
	return fb;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	613b      	str	r3, [r7, #16]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	8a3a      	ldrh	r2, [r7, #16]
 800b3c6:	f362 030f 	bfi	r3, r2, #0, #16
 800b3ca:	8a7a      	ldrh	r2, [r7, #18]
 800b3cc:	f362 431f 	bfi	r3, r2, #16, #16
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3718      	adds	r7, #24
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	0800b375 	.word	0x0800b375

0800b3dc <fb_rmhr_parser>:
#include "mcCore.h"
#include "modbus_slave.h"
#include <fb_rmhr.h>

//cyclic event fb
uint8_t fb_rmhr_parser(uint8_t* p){
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b08a      	sub	sp, #40	; 0x28
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	61f8      	str	r0, [r7, #28]
	uint8_t reg = p[0];
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t mode = p[1];
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	785b      	ldrb	r3, [r3, #1]
 800b3f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_rmhr(reg, mode);
 800b3f4:	463b      	mov	r3, r7
 800b3f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b3fa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 f852 	bl	800b4a8 <create_fb_rmhr>
	return 0;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3728      	adds	r7, #40	; 0x28
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <fb_rmhr>:

void fb_rmhr(uint8_t p){
 800b40e:	b580      	push	{r7, lr}
 800b410:	b088      	sub	sp, #32
 800b412:	af00      	add	r7, sp, #0
 800b414:	4603      	mov	r3, r0
 800b416:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800b418:	f7fd f812 	bl	8008440 <get_paramAddrTable>
 800b41c:	61f8      	str	r0, [r7, #28]
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	69fa      	ldr	r2, [r7, #28]
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	69fa      	ldr	r2, [r7, #28]
 800b430:	4413      	add	r3, r2
 800b432:	3304      	adds	r3, #4
 800b434:	61bb      	str	r3, [r7, #24]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+1]];
 800b436:	79fb      	ldrb	r3, [r7, #7]
 800b438:	3301      	adds	r3, #1
 800b43a:	69fa      	ldr	r2, [r7, #28]
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4413      	add	r3, r2
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	69fa      	ldr	r2, [r7, #28]
 800b44a:	4413      	add	r3, r2
 800b44c:	3304      	adds	r3, #4
 800b44e:	617b      	str	r3, [r7, #20]
	uint32_t* dout = &pAddrTable->value[pAddrTable->addr[p+2]];
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	3302      	adds	r3, #2
 800b454:	69fa      	ldr	r2, [r7, #28]
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	69fa      	ldr	r2, [r7, #28]
 800b464:	4413      	add	r3, r2
 800b466:	3304      	adds	r3, #4
 800b468:	613b      	str	r3, [r7, #16]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 800b46a:	79fb      	ldrb	r3, [r7, #7]
 800b46c:	3303      	adds	r3, #3
 800b46e:	69fa      	ldr	r2, [r7, #28]
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	69fa      	ldr	r2, [r7, #28]
 800b47e:	4413      	add	r3, r2
 800b480:	3304      	adds	r3, #4
 800b482:	60fb      	str	r3, [r7, #12]

	uint16_t* modbus_holding_reg = get_Modbus_Buf_Holding_Registers_40001();
 800b484:	f7fd fa8a 	bl	800899c <get_Modbus_Buf_Holding_Registers_40001>
 800b488:	4603      	mov	r3, r0
 800b48a:	60bb      	str	r3, [r7, #8]

	*dout = modbus_holding_reg[*reg];
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	005b      	lsls	r3, r3, #1
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	4413      	add	r3, r2
 800b496:	881b      	ldrh	r3, [r3, #0]
 800b498:	461a      	mov	r2, r3
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	601a      	str	r2, [r3, #0]
}
 800b49e:	bf00      	nop
 800b4a0:	3720      	adds	r7, #32
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
	...

0800b4a8 <create_fb_rmhr>:

type_fb_rmhr create_fb_rmhr(uint8_t reg, uint8_t mode){
 800b4a8:	b5b0      	push	{r4, r5, r7, lr}
 800b4aa:	b088      	sub	sp, #32
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	70fb      	strb	r3, [r7, #3]
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	70bb      	strb	r3, [r7, #2]
	type_fb_rmhr fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800b4b8:	f7fc ffc2 	bl	8008440 <get_paramAddrTable>
 800b4bc:	61f8      	str	r0, [r7, #28]
	//uint8_t* p_modbus_slave_addr = get_MODBUS_SLAVE_ADDR();
	//if(addr > 1) *p_modbus_slave_addr = addr; //addr is set to 1 default, if something comes greater than 1, than new addr set to this new value

	fb.startParamIndex = pAddrTable->currentIndex;
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	727b      	strb	r3, [r7, #9]

	fb.fp.reg = createParameter(reg);
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fc ffe8 	bl	800849c <createParameter>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	60fb      	str	r3, [r7, #12]
	fb.fp.mode = createParameter(mode);
 800b4d0:	78bb      	ldrb	r3, [r7, #2]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fc ffe2 	bl	800849c <createParameter>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	613b      	str	r3, [r7, #16]
	fb.fp.dout = createParameter(0);
 800b4dc:	2000      	movs	r0, #0
 800b4de:	f7fc ffdd 	bl	800849c <createParameter>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	617b      	str	r3, [r7, #20]
	fb.fp.stat = createParameter(0);
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	f7fc ffd8 	bl	800849c <createParameter>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	61bb      	str	r3, [r7, #24]

	fb.fb_index = writeToFBTable(fb_rmhr, fb.startParamIndex);
 800b4f0:	7a7b      	ldrb	r3, [r7, #9]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4808      	ldr	r0, [pc, #32]	; (800b518 <create_fb_rmhr+0x70>)
 800b4f6:	f7fc ffad 	bl	8008454 <writeToFBTable>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	723b      	strb	r3, [r7, #8]

	return fb;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	461d      	mov	r5, r3
 800b502:	f107 0408 	add.w	r4, r7, #8
 800b506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	602b      	str	r3, [r5, #0]
}
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	3720      	adds	r7, #32
 800b512:	46bd      	mov	sp, r7
 800b514:	bdb0      	pop	{r4, r5, r7, pc}
 800b516:	bf00      	nop
 800b518:	0800b40f 	.word	0x0800b40f

0800b51c <fb_step_parser>:
#define FB_STEP_ST_WAIT 0
#define FB_STEP_ST_ACTIVE 1
#define FB_STEP_ST_CHECK 2

//cyclic event fb
uint8_t fb_step_parser(uint8_t* p){
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b08c      	sub	sp, #48	; 0x30
 800b520:	af00      	add	r7, sp, #0
 800b522:	62f8      	str	r0, [r7, #44]	; 0x2c
	create_fb_step(p[0], p[1]);
 800b524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b526:	7819      	ldrb	r1, [r3, #0]
 800b528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52a:	3301      	adds	r3, #1
 800b52c:	781a      	ldrb	r2, [r3, #0]
 800b52e:	463b      	mov	r3, r7
 800b530:	4618      	mov	r0, r3
 800b532:	f000 f8ad 	bl	800b690 <create_fb_step>
	return 0;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3730      	adds	r7, #48	; 0x30
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <fb_step>:

void fb_step(uint8_t p){
 800b540:	b580      	push	{r7, lr}
 800b542:	b08c      	sub	sp, #48	; 0x30
 800b544:	af00      	add	r7, sp, #0
 800b546:	4603      	mov	r3, r0
 800b548:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800b54a:	f7fc ff79 	bl	8008440 <get_paramAddrTable>
 800b54e:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t* tk_in1 = &pAddrTable->value[pAddrTable->addr[p]];
 800b550:	79fb      	ldrb	r3, [r7, #7]
 800b552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b562:	4413      	add	r3, r2
 800b564:	3304      	adds	r3, #4
 800b566:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t* tk_in2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800b568:	79fb      	ldrb	r3, [r7, #7]
 800b56a:	3301      	adds	r3, #1
 800b56c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b57c:	4413      	add	r3, r2
 800b57e:	3304      	adds	r3, #4
 800b580:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t* tr_in = &pAddrTable->value[pAddrTable->addr[p+2]];
 800b582:	79fb      	ldrb	r3, [r7, #7]
 800b584:	3302      	adds	r3, #2
 800b586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	4413      	add	r3, r2
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b596:	4413      	add	r3, r2
 800b598:	3304      	adds	r3, #4
 800b59a:	623b      	str	r3, [r7, #32]
	uint32_t* param = &pAddrTable->value[pAddrTable->addr[p+3]];
 800b59c:	79fb      	ldrb	r3, [r7, #7]
 800b59e:	3303      	adds	r3, #3
 800b5a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	4413      	add	r3, r2
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5b0:	4413      	add	r3, r2
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	61fb      	str	r3, [r7, #28]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+4]];
 800b5b6:	79fb      	ldrb	r3, [r7, #7]
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4413      	add	r3, r2
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5ca:	4413      	add	r3, r2
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	61bb      	str	r3, [r7, #24]
	uint32_t* tk_out = &pAddrTable->value[pAddrTable->addr[p+5]];
 800b5d0:	79fb      	ldrb	r3, [r7, #7]
 800b5d2:	3305      	adds	r3, #5
 800b5d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4413      	add	r3, r2
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5e4:	4413      	add	r3, r2
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	617b      	str	r3, [r7, #20]
	uint32_t* obv_out = &pAddrTable->value[pAddrTable->addr[p+6]];
 800b5ea:	79fb      	ldrb	r3, [r7, #7]
 800b5ec:	3306      	adds	r3, #6
 800b5ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5fe:	4413      	add	r3, r2
 800b600:	3304      	adds	r3, #4
 800b602:	613b      	str	r3, [r7, #16]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+7]];
 800b604:	79fb      	ldrb	r3, [r7, #7]
 800b606:	3307      	adds	r3, #7
 800b608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	4413      	add	r3, r2
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b618:	4413      	add	r3, r2
 800b61a:	3304      	adds	r3, #4
 800b61c:	60fb      	str	r3, [r7, #12]

	//function block algorithm
	//function block algorithm
	switch(*state){
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b02      	cmp	r3, #2
 800b624:	d021      	beq.n	800b66a <fb_step+0x12a>
 800b626:	2b02      	cmp	r3, #2
 800b628:	d82d      	bhi.n	800b686 <fb_step+0x146>
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d002      	beq.n	800b634 <fb_step+0xf4>
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d014      	beq.n	800b65c <fb_step+0x11c>
			* state = FB_STEP_ST_WAIT; //switch to active state
		}
		break;

	}
}
 800b632:	e028      	b.n	800b686 <fb_step+0x146>
		* tk_out = 0;
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	2200      	movs	r2, #0
 800b638:	601a      	str	r2, [r3, #0]
		* obv_out = 0;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	2200      	movs	r2, #0
 800b63e:	601a      	str	r2, [r3, #0]
		if(* tk_in1 > 0 | * tk_in2 > 0){
 800b640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4313      	orrs	r3, r2
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d018      	beq.n	800b680 <fb_step+0x140>
			* obv_out = 1;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	2201      	movs	r2, #1
 800b652:	601a      	str	r2, [r3, #0]
			* state = FB_STEP_ST_ACTIVE; //switch to active state
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2201      	movs	r2, #1
 800b658:	601a      	str	r2, [r3, #0]
		break;
 800b65a:	e011      	b.n	800b680 <fb_step+0x140>
		* obv_out = 1;
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	2201      	movs	r2, #1
 800b660:	601a      	str	r2, [r3, #0]
		* state = FB_STEP_ST_CHECK; //switch to active state
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2202      	movs	r2, #2
 800b666:	601a      	str	r2, [r3, #0]
		break;
 800b668:	e00d      	b.n	800b686 <fb_step+0x146>
		if(* tr_in > 0){
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d008      	beq.n	800b684 <fb_step+0x144>
			* tk_out = 1;
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2201      	movs	r2, #1
 800b676:	601a      	str	r2, [r3, #0]
			* state = FB_STEP_ST_WAIT; //switch to active state
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	601a      	str	r2, [r3, #0]
		break;
 800b67e:	e001      	b.n	800b684 <fb_step+0x144>
		break;
 800b680:	bf00      	nop
 800b682:	e000      	b.n	800b686 <fb_step+0x146>
		break;
 800b684:	bf00      	nop
}
 800b686:	bf00      	nop
 800b688:	3730      	adds	r7, #48	; 0x30
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
	...

0800b690 <create_fb_step>:

type_fb_step create_fb_step(uint8_t param, uint8_t mode){
 800b690:	b5b0      	push	{r4, r5, r7, lr}
 800b692:	b08c      	sub	sp, #48	; 0x30
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	70fb      	strb	r3, [r7, #3]
 800b69c:	4613      	mov	r3, r2
 800b69e:	70bb      	strb	r3, [r7, #2]
	type_fb_step fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800b6a0:	f7fc fece 	bl	8008440 <get_paramAddrTable>
 800b6a4:	62f8      	str	r0, [r7, #44]	; 0x2c

	fb.startParamIndex = pAddrTable->currentIndex;
 800b6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	727b      	strb	r3, [r7, #9]

	fb.fp.tk_in1 = createParameter(0);
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	f7fc fef5 	bl	800849c <createParameter>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	60fb      	str	r3, [r7, #12]
	fb.fp.tk_in2 = createParameter(0);
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	f7fc fef0 	bl	800849c <createParameter>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	613b      	str	r3, [r7, #16]
	fb.fp.tr_in = createParameter(0);
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	f7fc feeb 	bl	800849c <createParameter>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	617b      	str	r3, [r7, #20]
	fb.fp.param = createParameter(param);
 800b6ca:	78fb      	ldrb	r3, [r7, #3]
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fc fee5 	bl	800849c <createParameter>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	61bb      	str	r3, [r7, #24]
	fb.fp.mode = createParameter(mode);
 800b6d6:	78bb      	ldrb	r3, [r7, #2]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fc fedf 	bl	800849c <createParameter>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	61fb      	str	r3, [r7, #28]
	fb.fp.tk_out = createParameter(0);
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	f7fc feda 	bl	800849c <createParameter>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	623b      	str	r3, [r7, #32]
	fb.fp.obv_out = createParameter(0);
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	f7fc fed5 	bl	800849c <createParameter>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.state = createParameter(param); //first state will have token initially
 800b6f6:	78fb      	ldrb	r3, [r7, #3]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fc fecf 	bl	800849c <createParameter>
 800b6fe:	4603      	mov	r3, r0
 800b700:	62bb      	str	r3, [r7, #40]	; 0x28

	fb.fb_index = writeToFBTable(fb_step, fb.startParamIndex);
 800b702:	7a7b      	ldrb	r3, [r7, #9]
 800b704:	4619      	mov	r1, r3
 800b706:	4809      	ldr	r0, [pc, #36]	; (800b72c <create_fb_step+0x9c>)
 800b708:	f7fc fea4 	bl	8008454 <writeToFBTable>
 800b70c:	4603      	mov	r3, r0
 800b70e:	723b      	strb	r3, [r7, #8]

	return fb;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	461d      	mov	r5, r3
 800b714:	f107 0408 	add.w	r4, r7, #8
 800b718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b71a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b71c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b71e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	602b      	str	r3, [r5, #0]
}
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	3730      	adds	r7, #48	; 0x30
 800b728:	46bd      	mov	sp, r7
 800b72a:	bdb0      	pop	{r4, r5, r7, pc}
 800b72c:	0800b541 	.word	0x0800b541

0800b730 <fb_timer_tp_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_timer_tp.h"

//cyclic event fb
uint8_t fb_timer_tp_parser(uint8_t* p){
 800b730:	b580      	push	{r7, lr}
 800b732:	b08c      	sub	sp, #48	; 0x30
 800b734:	af00      	add	r7, sp, #0
 800b736:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t period = (uint32_t) p[0] << 24 | p[1] << 16 | p[2] <<8 | p[3];
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	061b      	lsls	r3, r3, #24
 800b73e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b740:	3201      	adds	r2, #1
 800b742:	7812      	ldrb	r2, [r2, #0]
 800b744:	0412      	lsls	r2, r2, #16
 800b746:	4313      	orrs	r3, r2
 800b748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b74a:	3202      	adds	r2, #2
 800b74c:	7812      	ldrb	r2, [r2, #0]
 800b74e:	0212      	lsls	r2, r2, #8
 800b750:	4313      	orrs	r3, r2
 800b752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b754:	3203      	adds	r2, #3
 800b756:	7812      	ldrb	r2, [r2, #0]
 800b758:	4313      	orrs	r3, r2
 800b75a:	62fb      	str	r3, [r7, #44]	; 0x2c
	create_fb_timer_tp(period);
 800b75c:	463b      	mov	r3, r7
 800b75e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b760:	4618      	mov	r0, r3
 800b762:	f000 f8c9 	bl	800b8f8 <create_fb_timer_tp>
	return 0;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3730      	adds	r7, #48	; 0x30
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <fb_timer_tp>:

void fb_timer_tp(uint8_t p){
 800b770:	b580      	push	{r7, lr}
 800b772:	b08c      	sub	sp, #48	; 0x30
 800b774:	af00      	add	r7, sp, #0
 800b776:	4603      	mov	r3, r0
 800b778:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800b77a:	f7fc fe61 	bl	8008440 <get_paramAddrTable>
 800b77e:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t delta = 0, tick = 0;
 800b780:	2300      	movs	r3, #0
 800b782:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b784:	2300      	movs	r3, #0
 800b786:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t* et = &pAddrTable->value[pAddrTable->addr[p]];
 800b788:	79fb      	ldrb	r3, [r7, #7]
 800b78a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4413      	add	r3, r2
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b79a:	4413      	add	r3, r2
 800b79c:	3304      	adds	r3, #4
 800b79e:	623b      	str	r3, [r7, #32]
	uint32_t* in = &pAddrTable->value[pAddrTable->addr[p+1]];
 800b7a0:	79fb      	ldrb	r3, [r7, #7]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4413      	add	r3, r2
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7b4:	4413      	add	r3, r2
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	61fb      	str	r3, [r7, #28]
	uint32_t* pt = &pAddrTable->value[pAddrTable->addr[p+2]];
 800b7ba:	79fb      	ldrb	r3, [r7, #7]
 800b7bc:	3302      	adds	r3, #2
 800b7be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4413      	add	r3, r2
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7ce:	4413      	add	r3, r2
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	61bb      	str	r3, [r7, #24]
	uint32_t* q = &pAddrTable->value[pAddrTable->addr[p+3]];
 800b7d4:	79fb      	ldrb	r3, [r7, #7]
 800b7d6:	3303      	adds	r3, #3
 800b7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4413      	add	r3, r2
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7e8:	4413      	add	r3, r2
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	617b      	str	r3, [r7, #20]
	uint32_t* inold = &pAddrTable->value[pAddrTable->addr[p+4]];
 800b7ee:	79fb      	ldrb	r3, [r7, #7]
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4413      	add	r3, r2
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b802:	4413      	add	r3, r2
 800b804:	3304      	adds	r3, #4
 800b806:	613b      	str	r3, [r7, #16]
	uint32_t* counter = &pAddrTable->value[pAddrTable->addr[p+5]];
 800b808:	79fb      	ldrb	r3, [r7, #7]
 800b80a:	3305      	adds	r3, #5
 800b80c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b81c:	4413      	add	r3, r2
 800b81e:	3304      	adds	r3, #4
 800b820:	60fb      	str	r3, [r7, #12]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+6]];
 800b822:	79fb      	ldrb	r3, [r7, #7]
 800b824:	3306      	adds	r3, #6
 800b826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4413      	add	r3, r2
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b836:	4413      	add	r3, r2
 800b838:	3304      	adds	r3, #4
 800b83a:	60bb      	str	r3, [r7, #8]

	tick = hal_get_tick();
 800b83c:	f7f4 ffe2 	bl	8000804 <hal_get_tick>
 800b840:	4603      	mov	r3, r0
 800b842:	627b      	str	r3, [r7, #36]	; 0x24

	switch(*state){
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d002      	beq.n	800b852 <fb_timer_tp+0xe2>
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d02e      	beq.n	800b8ae <fb_timer_tp+0x13e>
		if(delta > *pt){
			*state = 0;
		}
		break;
	}
}
 800b850:	e04d      	b.n	800b8ee <fb_timer_tp+0x17e>
		*q = 0;
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	2200      	movs	r2, #0
 800b856:	601a      	str	r2, [r3, #0]
		if(*in == 0) {
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d106      	bne.n	800b86e <fb_timer_tp+0xfe>
			*et = 0;
 800b860:	6a3b      	ldr	r3, [r7, #32]
 800b862:	2200      	movs	r2, #0
 800b864:	601a      	str	r2, [r3, #0]
			*inold = 0;
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]
		break;
 800b86c:	e03c      	b.n	800b8e8 <fb_timer_tp+0x178>
		else if(*inold == 0 & *in==1) //0->1 transition
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	bf0c      	ite	eq
 800b876:	2301      	moveq	r3, #1
 800b878:	2300      	movne	r3, #0
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b01      	cmp	r3, #1
 800b882:	bf0c      	ite	eq
 800b884:	2301      	moveq	r3, #1
 800b886:	2300      	movne	r3, #0
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	4013      	ands	r3, r2
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d02a      	beq.n	800b8e8 <fb_timer_tp+0x178>
			*inold = *in;
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	601a      	str	r2, [r3, #0]
			*counter = tick;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b89e:	601a      	str	r2, [r3, #0]
			*q = 1;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	601a      	str	r2, [r3, #0]
			*state = 1; //active state
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	601a      	str	r2, [r3, #0]
		break;
 800b8ac:	e01c      	b.n	800b8e8 <fb_timer_tp+0x178>
		if(tick >= *counter){
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d305      	bcc.n	800b8c4 <fb_timer_tp+0x154>
			delta = tick - *counter;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8c2:	e005      	b.n	800b8d0 <fb_timer_tp+0x160>
			delta = tick + ((0xFFFFFFFF) - *counter);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		*et = delta;
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
 800b8d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8d4:	601a      	str	r2, [r3, #0]
		if(delta > *pt){
 800b8d6:	69bb      	ldr	r3, [r7, #24]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d905      	bls.n	800b8ec <fb_timer_tp+0x17c>
			*state = 0;
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	601a      	str	r2, [r3, #0]
		break;
 800b8e6:	e001      	b.n	800b8ec <fb_timer_tp+0x17c>
		break;
 800b8e8:	bf00      	nop
 800b8ea:	e000      	b.n	800b8ee <fb_timer_tp+0x17e>
		break;
 800b8ec:	bf00      	nop
}
 800b8ee:	bf00      	nop
 800b8f0:	3730      	adds	r7, #48	; 0x30
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <create_fb_timer_tp>:

type_fb_timer_tp create_fb_timer_tp(uint32_t pt){
 800b8f8:	b5b0      	push	{r4, r5, r7, lr}
 800b8fa:	b08c      	sub	sp, #48	; 0x30
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
	type_fb_timer_tp fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800b902:	f7fc fd9d 	bl	8008440 <get_paramAddrTable>
 800b906:	62f8      	str	r0, [r7, #44]	; 0x2c

	fb.startParamIndex = pAddrTable->currentIndex;
 800b908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	737b      	strb	r3, [r7, #13]

	fb.fp.et = createParameter(0);
 800b90e:	2000      	movs	r0, #0
 800b910:	f7fc fdc4 	bl	800849c <createParameter>
 800b914:	4603      	mov	r3, r0
 800b916:	61fb      	str	r3, [r7, #28]
	fb.fp.in = createParameter(0);
 800b918:	2000      	movs	r0, #0
 800b91a:	f7fc fdbf 	bl	800849c <createParameter>
 800b91e:	4603      	mov	r3, r0
 800b920:	613b      	str	r3, [r7, #16]
	fb.fp.pt = createParameter(pt);
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	4618      	mov	r0, r3
 800b926:	f7fc fdb9 	bl	800849c <createParameter>
 800b92a:	4603      	mov	r3, r0
 800b92c:	617b      	str	r3, [r7, #20]
	fb.fp.q = createParameter(0);
 800b92e:	2000      	movs	r0, #0
 800b930:	f7fc fdb4 	bl	800849c <createParameter>
 800b934:	4603      	mov	r3, r0
 800b936:	61bb      	str	r3, [r7, #24]
	fb.fp.inold = createParameter(0);
 800b938:	2000      	movs	r0, #0
 800b93a:	f7fc fdaf 	bl	800849c <createParameter>
 800b93e:	4603      	mov	r3, r0
 800b940:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.counter = createParameter(0);
 800b942:	2000      	movs	r0, #0
 800b944:	f7fc fdaa 	bl	800849c <createParameter>
 800b948:	4603      	mov	r3, r0
 800b94a:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.state = createParameter(0);
 800b94c:	2000      	movs	r0, #0
 800b94e:	f7fc fda5 	bl	800849c <createParameter>
 800b952:	4603      	mov	r3, r0
 800b954:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_timer_tp, fb.startParamIndex);
 800b956:	7b7b      	ldrb	r3, [r7, #13]
 800b958:	4619      	mov	r1, r3
 800b95a:	4809      	ldr	r0, [pc, #36]	; (800b980 <create_fb_timer_tp+0x88>)
 800b95c:	f7fc fd7a 	bl	8008454 <writeToFBTable>
 800b960:	4603      	mov	r3, r0
 800b962:	733b      	strb	r3, [r7, #12]

	return fb;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	461d      	mov	r5, r3
 800b968:	f107 040c 	add.w	r4, r7, #12
 800b96c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b96e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b970:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b974:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	3730      	adds	r7, #48	; 0x30
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bdb0      	pop	{r4, r5, r7, pc}
 800b980:	0800b771 	.word	0x0800b771

0800b984 <fb_wmhr_parser>:
#include "mcCore.h"
#include "modbus_slave.h"
#include <fb_wmhr.h>

//cyclic event fb
uint8_t fb_wmhr_parser(uint8_t* p){
 800b984:	b580      	push	{r7, lr}
 800b986:	b08c      	sub	sp, #48	; 0x30
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t reg = p[0];
 800b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t mode = p[1];
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	785b      	ldrb	r3, [r3, #1]
 800b998:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	create_fb_wmhr(reg, mode);
 800b99c:	463b      	mov	r3, r7
 800b99e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b9a2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 f892 	bl	800bad0 <create_fb_wmhr>
	return 0;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3730      	adds	r7, #48	; 0x30
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <fb_wmhr>:

void fb_wmhr(uint8_t p){
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b08a      	sub	sp, #40	; 0x28
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	4603      	mov	r3, r0
 800b9be:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800b9c0:	f7fc fd3e 	bl	8008440 <get_paramAddrTable>
 800b9c4:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 800b9c6:	79fb      	ldrb	r3, [r7, #7]
 800b9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4413      	add	r3, r2
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d8:	4413      	add	r3, r2
 800b9da:	3304      	adds	r3, #4
 800b9dc:	623b      	str	r3, [r7, #32]
	uint32_t* din = &pAddrTable->value[pAddrTable->addr[p+1]];
 800b9de:	79fb      	ldrb	r3, [r7, #7]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9f2:	4413      	add	r3, r2
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	61fb      	str	r3, [r7, #28]
	uint32_t* wren = &pAddrTable->value[pAddrTable->addr[p+2]];
 800b9f8:	79fb      	ldrb	r3, [r7, #7]
 800b9fa:	3302      	adds	r3, #2
 800b9fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	4413      	add	r3, r2
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba0c:	4413      	add	r3, r2
 800ba0e:	3304      	adds	r3, #4
 800ba10:	61bb      	str	r3, [r7, #24]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+3]];
 800ba12:	79fb      	ldrb	r3, [r7, #7]
 800ba14:	3303      	adds	r3, #3
 800ba16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	4413      	add	r3, r2
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba26:	4413      	add	r3, r2
 800ba28:	3304      	adds	r3, #4
 800ba2a:	617b      	str	r3, [r7, #20]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 800ba2c:	79fb      	ldrb	r3, [r7, #7]
 800ba2e:	3304      	adds	r3, #4
 800ba30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba40:	4413      	add	r3, r2
 800ba42:	3304      	adds	r3, #4
 800ba44:	613b      	str	r3, [r7, #16]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+5]];
 800ba46:	79fb      	ldrb	r3, [r7, #7]
 800ba48:	3305      	adds	r3, #5
 800ba4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba5a:	4413      	add	r3, r2
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	60fb      	str	r3, [r7, #12]

	uint16_t* modbus_holding_reg = get_Modbus_Buf_Holding_Registers_40001();
 800ba60:	f7fc ff9c 	bl	800899c <get_Modbus_Buf_Holding_Registers_40001>
 800ba64:	4603      	mov	r3, r0
 800ba66:	60bb      	str	r3, [r7, #8]

	//detech rising edge of wren and then write to register
	switch(*state){
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d016      	beq.n	800ba9e <fb_wmhr+0xe8>
 800ba70:	2b02      	cmp	r3, #2
 800ba72:	d821      	bhi.n	800bab8 <fb_wmhr+0x102>
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <fb_wmhr+0xc8>
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d008      	beq.n	800ba8e <fb_wmhr+0xd8>
 800ba7c:	e01c      	b.n	800bab8 <fb_wmhr+0x102>
		case 0:
			if(*wren == 0) *state = 1;
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d11c      	bne.n	800bac0 <fb_wmhr+0x10a>
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	601a      	str	r2, [r3, #0]
			break;
 800ba8c:	e018      	b.n	800bac0 <fb_wmhr+0x10a>
		case 1:
			if(*wren == 1) *state = 2;
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d116      	bne.n	800bac4 <fb_wmhr+0x10e>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2202      	movs	r2, #2
 800ba9a:	601a      	str	r2, [r3, #0]
			break;
 800ba9c:	e012      	b.n	800bac4 <fb_wmhr+0x10e>

		case 2:
			//write to register
			modbus_holding_reg[*reg] = *din;
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	6819      	ldr	r1, [r3, #0]
 800baa2:	6a3b      	ldr	r3, [r7, #32]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	005b      	lsls	r3, r3, #1
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	4413      	add	r3, r2
 800baac:	b28a      	uxth	r2, r1
 800baae:	801a      	strh	r2, [r3, #0]
			*state = 0;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	601a      	str	r2, [r3, #0]
			break;
 800bab6:	e006      	b.n	800bac6 <fb_wmhr+0x110>
		default:
			*state = 0;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	601a      	str	r2, [r3, #0]
	}
}
 800babe:	e002      	b.n	800bac6 <fb_wmhr+0x110>
			break;
 800bac0:	bf00      	nop
 800bac2:	e000      	b.n	800bac6 <fb_wmhr+0x110>
			break;
 800bac4:	bf00      	nop
}
 800bac6:	bf00      	nop
 800bac8:	3728      	adds	r7, #40	; 0x28
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
	...

0800bad0 <create_fb_wmhr>:

type_fb_wmhr create_fb_wmhr(uint8_t reg, uint8_t mode){
 800bad0:	b5b0      	push	{r4, r5, r7, lr}
 800bad2:	b08a      	sub	sp, #40	; 0x28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	460b      	mov	r3, r1
 800bada:	70fb      	strb	r3, [r7, #3]
 800badc:	4613      	mov	r3, r2
 800bade:	70bb      	strb	r3, [r7, #2]
	type_fb_wmhr fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800bae0:	f7fc fcae 	bl	8008440 <get_paramAddrTable>
 800bae4:	6278      	str	r0, [r7, #36]	; 0x24
	//uint8_t* p_modbus_slave_addr = get_MODBUS_SLAVE_ADDR();
	//if(addr > 1) *p_modbus_slave_addr = addr; //addr is set to 1 default, if something comes greater than 1, than new addr set to this new value

	fb.startParamIndex = pAddrTable->currentIndex;
 800bae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	727b      	strb	r3, [r7, #9]

	fb.fp.reg = createParameter(reg);
 800baec:	78fb      	ldrb	r3, [r7, #3]
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fc fcd4 	bl	800849c <createParameter>
 800baf4:	4603      	mov	r3, r0
 800baf6:	60fb      	str	r3, [r7, #12]
	fb.fp.din = createParameter(0);
 800baf8:	2000      	movs	r0, #0
 800bafa:	f7fc fccf 	bl	800849c <createParameter>
 800bafe:	4603      	mov	r3, r0
 800bb00:	613b      	str	r3, [r7, #16]
	fb.fp.wren = createParameter(0);
 800bb02:	2000      	movs	r0, #0
 800bb04:	f7fc fcca 	bl	800849c <createParameter>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode);
 800bb0c:	78bb      	ldrb	r3, [r7, #2]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fc fcc4 	bl	800849c <createParameter>
 800bb14:	4603      	mov	r3, r0
 800bb16:	61bb      	str	r3, [r7, #24]
	fb.fp.stat = createParameter(0);
 800bb18:	2000      	movs	r0, #0
 800bb1a:	f7fc fcbf 	bl	800849c <createParameter>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	61fb      	str	r3, [r7, #28]

	//internal
	fb.fp.state = createParameter(0);
 800bb22:	2000      	movs	r0, #0
 800bb24:	f7fc fcba 	bl	800849c <createParameter>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_wmhr, fb.startParamIndex);
 800bb2c:	7a7b      	ldrb	r3, [r7, #9]
 800bb2e:	4619      	mov	r1, r3
 800bb30:	4809      	ldr	r0, [pc, #36]	; (800bb58 <create_fb_wmhr+0x88>)
 800bb32:	f7fc fc8f 	bl	8008454 <writeToFBTable>
 800bb36:	4603      	mov	r3, r0
 800bb38:	723b      	strb	r3, [r7, #8]

	return fb;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	461d      	mov	r5, r3
 800bb3e:	f107 0408 	add.w	r4, r7, #8
 800bb42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb46:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800bb4a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	3728      	adds	r7, #40	; 0x28
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bdb0      	pop	{r4, r5, r7, pc}
 800bb56:	bf00      	nop
 800bb58:	0800b9b7 	.word	0x0800b9b7

0800bb5c <memory_buf_init>:

// The hidden definition of our memory buffer structure


mbuf_handle_t memory_buf_init(MBUF_DATA_T* buffer, mbuf_size_t size, memory_type_t type)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	460b      	mov	r3, r1
 800bb66:	807b      	strh	r3, [r7, #2]
 800bb68:	4613      	mov	r3, r2
 800bb6a:	707b      	strb	r3, [r7, #1]
	assert(buffer && size);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d002      	beq.n	800bb78 <memory_buf_init+0x1c>
 800bb72:	887b      	ldrh	r3, [r7, #2]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d105      	bne.n	800bb84 <memory_buf_init+0x28>
 800bb78:	4b18      	ldr	r3, [pc, #96]	; (800bbdc <memory_buf_init+0x80>)
 800bb7a:	4a19      	ldr	r2, [pc, #100]	; (800bbe0 <memory_buf_init+0x84>)
 800bb7c:	2110      	movs	r1, #16
 800bb7e:	4819      	ldr	r0, [pc, #100]	; (800bbe4 <memory_buf_init+0x88>)
 800bb80:	f000 f8ee 	bl	800bd60 <__assert_func>

	mbuf_handle_t mbuf = malloc(sizeof(memory_buf_t));
 800bb84:	200c      	movs	r0, #12
 800bb86:	f000 f95f 	bl	800be48 <malloc>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	60fb      	str	r3, [r7, #12]
	assert(mbuf);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d105      	bne.n	800bba0 <memory_buf_init+0x44>
 800bb94:	4b14      	ldr	r3, [pc, #80]	; (800bbe8 <memory_buf_init+0x8c>)
 800bb96:	4a12      	ldr	r2, [pc, #72]	; (800bbe0 <memory_buf_init+0x84>)
 800bb98:	2113      	movs	r1, #19
 800bb9a:	4812      	ldr	r0, [pc, #72]	; (800bbe4 <memory_buf_init+0x88>)
 800bb9c:	f000 f8e0 	bl	800bd60 <__assert_func>

	mbuf->memory_type = type;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	787a      	ldrb	r2, [r7, #1]
 800bba4:	72da      	strb	r2, [r3, #11]
	mbuf->buffer = buffer;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	601a      	str	r2, [r3, #0]
	mbuf->max = size;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	887a      	ldrh	r2, [r7, #2]
 800bbb0:	811a      	strh	r2, [r3, #8]
	memory_buf_reset(mbuf);
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f000 f81c 	bl	800bbf0 <memory_buf_reset>

	assert(memory_buf_empty(mbuf));
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f000 f839 	bl	800bc30 <memory_buf_empty>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d105      	bne.n	800bbd0 <memory_buf_init+0x74>
 800bbc4:	4b09      	ldr	r3, [pc, #36]	; (800bbec <memory_buf_init+0x90>)
 800bbc6:	4a06      	ldr	r2, [pc, #24]	; (800bbe0 <memory_buf_init+0x84>)
 800bbc8:	211a      	movs	r1, #26
 800bbca:	4806      	ldr	r0, [pc, #24]	; (800bbe4 <memory_buf_init+0x88>)
 800bbcc:	f000 f8c8 	bl	800bd60 <__assert_func>

	return mbuf;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	0800ce18 	.word	0x0800ce18
 800bbe0:	0800d89c 	.word	0x0800d89c
 800bbe4:	0800ce28 	.word	0x0800ce28
 800bbe8:	0800ce44 	.word	0x0800ce44
 800bbec:	0800ce4c 	.word	0x0800ce4c

0800bbf0 <memory_buf_reset>:

void memory_buf_reset(mbuf_handle_t mbuf)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
    assert(mbuf);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d105      	bne.n	800bc0a <memory_buf_reset+0x1a>
 800bbfe:	4b09      	ldr	r3, [pc, #36]	; (800bc24 <memory_buf_reset+0x34>)
 800bc00:	4a09      	ldr	r2, [pc, #36]	; (800bc28 <memory_buf_reset+0x38>)
 800bc02:	2121      	movs	r1, #33	; 0x21
 800bc04:	4809      	ldr	r0, [pc, #36]	; (800bc2c <memory_buf_reset+0x3c>)
 800bc06:	f000 f8ab 	bl	800bd60 <__assert_func>

    mbuf->head = 0;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	809a      	strh	r2, [r3, #4]
    mbuf->tail = 0;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	80da      	strh	r2, [r3, #6]
    mbuf->full = 0;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	729a      	strb	r2, [r3, #10]
}
 800bc1c:	bf00      	nop
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	0800ce44 	.word	0x0800ce44
 800bc28:	0800d8ac 	.word	0x0800d8ac
 800bc2c:	0800ce28 	.word	0x0800ce28

0800bc30 <memory_buf_empty>:
	assert(mbuf);
	free(mbuf);
}

uint8_t memory_buf_empty(mbuf_handle_t mbuf)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	assert(mbuf);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d105      	bne.n	800bc4a <memory_buf_empty+0x1a>
 800bc3e:	4b0c      	ldr	r3, [pc, #48]	; (800bc70 <memory_buf_empty+0x40>)
 800bc40:	4a0c      	ldr	r2, [pc, #48]	; (800bc74 <memory_buf_empty+0x44>)
 800bc42:	2137      	movs	r1, #55	; 0x37
 800bc44:	480c      	ldr	r0, [pc, #48]	; (800bc78 <memory_buf_empty+0x48>)
 800bc46:	f000 f88b 	bl	800bd60 <__assert_func>

	return (!mbuf->full && (mbuf->head == mbuf->tail));
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	7a9b      	ldrb	r3, [r3, #10]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d107      	bne.n	800bc62 <memory_buf_empty+0x32>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	889a      	ldrh	r2, [r3, #4]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	88db      	ldrh	r3, [r3, #6]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d101      	bne.n	800bc62 <memory_buf_empty+0x32>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e000      	b.n	800bc64 <memory_buf_empty+0x34>
 800bc62:	2300      	movs	r3, #0
 800bc64:	b2db      	uxtb	r3, r3
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3708      	adds	r7, #8
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	0800ce44 	.word	0x0800ce44
 800bc74:	0800d8c0 	.word	0x0800d8c0
 800bc78:	0800ce28 	.word	0x0800ce28

0800bc7c <advance_pointer>:

	return size;
}

static void advance_pointer(mbuf_handle_t mbuf)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
	assert(mbuf);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d105      	bne.n	800bc96 <advance_pointer+0x1a>
 800bc8a:	4b1e      	ldr	r3, [pc, #120]	; (800bd04 <advance_pointer+0x88>)
 800bc8c:	4a1e      	ldr	r2, [pc, #120]	; (800bd08 <advance_pointer+0x8c>)
 800bc8e:	215a      	movs	r1, #90	; 0x5a
 800bc90:	481e      	ldr	r0, [pc, #120]	; (800bd0c <advance_pointer+0x90>)
 800bc92:	f000 f865 	bl	800bd60 <__assert_func>

	if(mbuf->memory_type == MEM_TYPE_FLAT_FIFO){
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	7adb      	ldrb	r3, [r3, #11]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d02d      	beq.n	800bcfa <advance_pointer+0x7e>

	}

	else{ //MEM_TYPE_CYCLIC_FIFO
		if(mbuf->full)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	7a9b      	ldrb	r3, [r3, #10]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00e      	beq.n	800bcc4 <advance_pointer+0x48>
		{
			if (++(mbuf->tail) == mbuf->max)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	88db      	ldrh	r3, [r3, #6]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	80da      	strh	r2, [r3, #6]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	88da      	ldrh	r2, [r3, #6]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	891b      	ldrh	r3, [r3, #8]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d102      	bne.n	800bcc4 <advance_pointer+0x48>
			{
				mbuf->tail = 0;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	80da      	strh	r2, [r3, #6]
			}
		}

		if (++(mbuf->head) == mbuf->max) //head is inceremented here
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	889b      	ldrh	r3, [r3, #4]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	809a      	strh	r2, [r3, #4]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	889a      	ldrh	r2, [r3, #4]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	891b      	ldrh	r3, [r3, #8]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d102      	bne.n	800bce2 <advance_pointer+0x66>
		{
			mbuf->head = 0;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	809a      	strh	r2, [r3, #4]
		}
		mbuf->full = (mbuf->head == mbuf->tail);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	889a      	ldrh	r2, [r3, #4]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	88db      	ldrh	r3, [r3, #6]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	bf0c      	ite	eq
 800bcee:	2301      	moveq	r3, #1
 800bcf0:	2300      	movne	r3, #0
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	729a      	strb	r2, [r3, #10]
	}
}
 800bcfa:	bf00      	nop
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	0800ce44 	.word	0x0800ce44
 800bd08:	0800d8d4 	.word	0x0800d8d4
 800bd0c:	0800ce28 	.word	0x0800ce28

0800bd10 <memory_buf_put>:
		}
	}
}

void memory_buf_put(mbuf_handle_t mbuf, MBUF_DATA_T data)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	70fb      	strb	r3, [r7, #3]
	assert(mbuf && mbuf->buffer);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d003      	beq.n	800bd2a <memory_buf_put+0x1a>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d105      	bne.n	800bd36 <memory_buf_put+0x26>
 800bd2a:	4b0a      	ldr	r3, [pc, #40]	; (800bd54 <memory_buf_put+0x44>)
 800bd2c:	4a0a      	ldr	r2, [pc, #40]	; (800bd58 <memory_buf_put+0x48>)
 800bd2e:	2184      	movs	r1, #132	; 0x84
 800bd30:	480a      	ldr	r0, [pc, #40]	; (800bd5c <memory_buf_put+0x4c>)
 800bd32:	f000 f815 	bl	800bd60 <__assert_func>

    mbuf->buffer[mbuf->head] = data;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	8892      	ldrh	r2, [r2, #4]
 800bd3e:	4413      	add	r3, r2
 800bd40:	78fa      	ldrb	r2, [r7, #3]
 800bd42:	701a      	strb	r2, [r3, #0]

    advance_pointer(mbuf);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f7ff ff99 	bl	800bc7c <advance_pointer>
}
 800bd4a:	bf00      	nop
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	0800ce64 	.word	0x0800ce64
 800bd58:	0800d8e4 	.word	0x0800d8e4
 800bd5c:	0800ce28 	.word	0x0800ce28

0800bd60 <__assert_func>:
 800bd60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd62:	4614      	mov	r4, r2
 800bd64:	461a      	mov	r2, r3
 800bd66:	4b09      	ldr	r3, [pc, #36]	; (800bd8c <__assert_func+0x2c>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4605      	mov	r5, r0
 800bd6c:	68d8      	ldr	r0, [r3, #12]
 800bd6e:	b14c      	cbz	r4, 800bd84 <__assert_func+0x24>
 800bd70:	4b07      	ldr	r3, [pc, #28]	; (800bd90 <__assert_func+0x30>)
 800bd72:	9100      	str	r1, [sp, #0]
 800bd74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd78:	4906      	ldr	r1, [pc, #24]	; (800bd94 <__assert_func+0x34>)
 800bd7a:	462b      	mov	r3, r5
 800bd7c:	f000 f814 	bl	800bda8 <fiprintf>
 800bd80:	f000 fd1c 	bl	800c7bc <abort>
 800bd84:	4b04      	ldr	r3, [pc, #16]	; (800bd98 <__assert_func+0x38>)
 800bd86:	461c      	mov	r4, r3
 800bd88:	e7f3      	b.n	800bd72 <__assert_func+0x12>
 800bd8a:	bf00      	nop
 800bd8c:	200000a0 	.word	0x200000a0
 800bd90:	0800d8f3 	.word	0x0800d8f3
 800bd94:	0800d900 	.word	0x0800d900
 800bd98:	0800d92e 	.word	0x0800d92e

0800bd9c <__errno>:
 800bd9c:	4b01      	ldr	r3, [pc, #4]	; (800bda4 <__errno+0x8>)
 800bd9e:	6818      	ldr	r0, [r3, #0]
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	200000a0 	.word	0x200000a0

0800bda8 <fiprintf>:
 800bda8:	b40e      	push	{r1, r2, r3}
 800bdaa:	b503      	push	{r0, r1, lr}
 800bdac:	4601      	mov	r1, r0
 800bdae:	ab03      	add	r3, sp, #12
 800bdb0:	4805      	ldr	r0, [pc, #20]	; (800bdc8 <fiprintf+0x20>)
 800bdb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb6:	6800      	ldr	r0, [r0, #0]
 800bdb8:	9301      	str	r3, [sp, #4]
 800bdba:	f000 f929 	bl	800c010 <_vfiprintf_r>
 800bdbe:	b002      	add	sp, #8
 800bdc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdc4:	b003      	add	sp, #12
 800bdc6:	4770      	bx	lr
 800bdc8:	200000a0 	.word	0x200000a0

0800bdcc <__libc_init_array>:
 800bdcc:	b570      	push	{r4, r5, r6, lr}
 800bdce:	4d0d      	ldr	r5, [pc, #52]	; (800be04 <__libc_init_array+0x38>)
 800bdd0:	4c0d      	ldr	r4, [pc, #52]	; (800be08 <__libc_init_array+0x3c>)
 800bdd2:	1b64      	subs	r4, r4, r5
 800bdd4:	10a4      	asrs	r4, r4, #2
 800bdd6:	2600      	movs	r6, #0
 800bdd8:	42a6      	cmp	r6, r4
 800bdda:	d109      	bne.n	800bdf0 <__libc_init_array+0x24>
 800bddc:	4d0b      	ldr	r5, [pc, #44]	; (800be0c <__libc_init_array+0x40>)
 800bdde:	4c0c      	ldr	r4, [pc, #48]	; (800be10 <__libc_init_array+0x44>)
 800bde0:	f001 f80e 	bl	800ce00 <_init>
 800bde4:	1b64      	subs	r4, r4, r5
 800bde6:	10a4      	asrs	r4, r4, #2
 800bde8:	2600      	movs	r6, #0
 800bdea:	42a6      	cmp	r6, r4
 800bdec:	d105      	bne.n	800bdfa <__libc_init_array+0x2e>
 800bdee:	bd70      	pop	{r4, r5, r6, pc}
 800bdf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdf4:	4798      	blx	r3
 800bdf6:	3601      	adds	r6, #1
 800bdf8:	e7ee      	b.n	800bdd8 <__libc_init_array+0xc>
 800bdfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdfe:	4798      	blx	r3
 800be00:	3601      	adds	r6, #1
 800be02:	e7f2      	b.n	800bdea <__libc_init_array+0x1e>
 800be04:	0800d9f4 	.word	0x0800d9f4
 800be08:	0800d9f4 	.word	0x0800d9f4
 800be0c:	0800d9f4 	.word	0x0800d9f4
 800be10:	0800d9f8 	.word	0x0800d9f8

0800be14 <__itoa>:
 800be14:	1e93      	subs	r3, r2, #2
 800be16:	2b22      	cmp	r3, #34	; 0x22
 800be18:	b510      	push	{r4, lr}
 800be1a:	460c      	mov	r4, r1
 800be1c:	d904      	bls.n	800be28 <__itoa+0x14>
 800be1e:	2300      	movs	r3, #0
 800be20:	700b      	strb	r3, [r1, #0]
 800be22:	461c      	mov	r4, r3
 800be24:	4620      	mov	r0, r4
 800be26:	bd10      	pop	{r4, pc}
 800be28:	2a0a      	cmp	r2, #10
 800be2a:	d109      	bne.n	800be40 <__itoa+0x2c>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	da07      	bge.n	800be40 <__itoa+0x2c>
 800be30:	232d      	movs	r3, #45	; 0x2d
 800be32:	700b      	strb	r3, [r1, #0]
 800be34:	4240      	negs	r0, r0
 800be36:	2101      	movs	r1, #1
 800be38:	4421      	add	r1, r4
 800be3a:	f000 fbbd 	bl	800c5b8 <__utoa>
 800be3e:	e7f1      	b.n	800be24 <__itoa+0x10>
 800be40:	2100      	movs	r1, #0
 800be42:	e7f9      	b.n	800be38 <__itoa+0x24>

0800be44 <itoa>:
 800be44:	f7ff bfe6 	b.w	800be14 <__itoa>

0800be48 <malloc>:
 800be48:	4b02      	ldr	r3, [pc, #8]	; (800be54 <malloc+0xc>)
 800be4a:	4601      	mov	r1, r0
 800be4c:	6818      	ldr	r0, [r3, #0]
 800be4e:	f000 b85b 	b.w	800bf08 <_malloc_r>
 800be52:	bf00      	nop
 800be54:	200000a0 	.word	0x200000a0

0800be58 <memset>:
 800be58:	4402      	add	r2, r0
 800be5a:	4603      	mov	r3, r0
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d100      	bne.n	800be62 <memset+0xa>
 800be60:	4770      	bx	lr
 800be62:	f803 1b01 	strb.w	r1, [r3], #1
 800be66:	e7f9      	b.n	800be5c <memset+0x4>

0800be68 <_free_r>:
 800be68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be6a:	2900      	cmp	r1, #0
 800be6c:	d048      	beq.n	800bf00 <_free_r+0x98>
 800be6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be72:	9001      	str	r0, [sp, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	f1a1 0404 	sub.w	r4, r1, #4
 800be7a:	bfb8      	it	lt
 800be7c:	18e4      	addlt	r4, r4, r3
 800be7e:	f000 fec3 	bl	800cc08 <__malloc_lock>
 800be82:	4a20      	ldr	r2, [pc, #128]	; (800bf04 <_free_r+0x9c>)
 800be84:	9801      	ldr	r0, [sp, #4]
 800be86:	6813      	ldr	r3, [r2, #0]
 800be88:	4615      	mov	r5, r2
 800be8a:	b933      	cbnz	r3, 800be9a <_free_r+0x32>
 800be8c:	6063      	str	r3, [r4, #4]
 800be8e:	6014      	str	r4, [r2, #0]
 800be90:	b003      	add	sp, #12
 800be92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be96:	f000 bebd 	b.w	800cc14 <__malloc_unlock>
 800be9a:	42a3      	cmp	r3, r4
 800be9c:	d90b      	bls.n	800beb6 <_free_r+0x4e>
 800be9e:	6821      	ldr	r1, [r4, #0]
 800bea0:	1862      	adds	r2, r4, r1
 800bea2:	4293      	cmp	r3, r2
 800bea4:	bf04      	itt	eq
 800bea6:	681a      	ldreq	r2, [r3, #0]
 800bea8:	685b      	ldreq	r3, [r3, #4]
 800beaa:	6063      	str	r3, [r4, #4]
 800beac:	bf04      	itt	eq
 800beae:	1852      	addeq	r2, r2, r1
 800beb0:	6022      	streq	r2, [r4, #0]
 800beb2:	602c      	str	r4, [r5, #0]
 800beb4:	e7ec      	b.n	800be90 <_free_r+0x28>
 800beb6:	461a      	mov	r2, r3
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	b10b      	cbz	r3, 800bec0 <_free_r+0x58>
 800bebc:	42a3      	cmp	r3, r4
 800bebe:	d9fa      	bls.n	800beb6 <_free_r+0x4e>
 800bec0:	6811      	ldr	r1, [r2, #0]
 800bec2:	1855      	adds	r5, r2, r1
 800bec4:	42a5      	cmp	r5, r4
 800bec6:	d10b      	bne.n	800bee0 <_free_r+0x78>
 800bec8:	6824      	ldr	r4, [r4, #0]
 800beca:	4421      	add	r1, r4
 800becc:	1854      	adds	r4, r2, r1
 800bece:	42a3      	cmp	r3, r4
 800bed0:	6011      	str	r1, [r2, #0]
 800bed2:	d1dd      	bne.n	800be90 <_free_r+0x28>
 800bed4:	681c      	ldr	r4, [r3, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	6053      	str	r3, [r2, #4]
 800beda:	4421      	add	r1, r4
 800bedc:	6011      	str	r1, [r2, #0]
 800bede:	e7d7      	b.n	800be90 <_free_r+0x28>
 800bee0:	d902      	bls.n	800bee8 <_free_r+0x80>
 800bee2:	230c      	movs	r3, #12
 800bee4:	6003      	str	r3, [r0, #0]
 800bee6:	e7d3      	b.n	800be90 <_free_r+0x28>
 800bee8:	6825      	ldr	r5, [r4, #0]
 800beea:	1961      	adds	r1, r4, r5
 800beec:	428b      	cmp	r3, r1
 800beee:	bf04      	itt	eq
 800bef0:	6819      	ldreq	r1, [r3, #0]
 800bef2:	685b      	ldreq	r3, [r3, #4]
 800bef4:	6063      	str	r3, [r4, #4]
 800bef6:	bf04      	itt	eq
 800bef8:	1949      	addeq	r1, r1, r5
 800befa:	6021      	streq	r1, [r4, #0]
 800befc:	6054      	str	r4, [r2, #4]
 800befe:	e7c7      	b.n	800be90 <_free_r+0x28>
 800bf00:	b003      	add	sp, #12
 800bf02:	bd30      	pop	{r4, r5, pc}
 800bf04:	20001e14 	.word	0x20001e14

0800bf08 <_malloc_r>:
 800bf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0a:	1ccd      	adds	r5, r1, #3
 800bf0c:	f025 0503 	bic.w	r5, r5, #3
 800bf10:	3508      	adds	r5, #8
 800bf12:	2d0c      	cmp	r5, #12
 800bf14:	bf38      	it	cc
 800bf16:	250c      	movcc	r5, #12
 800bf18:	2d00      	cmp	r5, #0
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	db01      	blt.n	800bf22 <_malloc_r+0x1a>
 800bf1e:	42a9      	cmp	r1, r5
 800bf20:	d903      	bls.n	800bf2a <_malloc_r+0x22>
 800bf22:	230c      	movs	r3, #12
 800bf24:	6033      	str	r3, [r6, #0]
 800bf26:	2000      	movs	r0, #0
 800bf28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf2a:	f000 fe6d 	bl	800cc08 <__malloc_lock>
 800bf2e:	4921      	ldr	r1, [pc, #132]	; (800bfb4 <_malloc_r+0xac>)
 800bf30:	680a      	ldr	r2, [r1, #0]
 800bf32:	4614      	mov	r4, r2
 800bf34:	b99c      	cbnz	r4, 800bf5e <_malloc_r+0x56>
 800bf36:	4f20      	ldr	r7, [pc, #128]	; (800bfb8 <_malloc_r+0xb0>)
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	b923      	cbnz	r3, 800bf46 <_malloc_r+0x3e>
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f000 fb2a 	bl	800c598 <_sbrk_r>
 800bf44:	6038      	str	r0, [r7, #0]
 800bf46:	4629      	mov	r1, r5
 800bf48:	4630      	mov	r0, r6
 800bf4a:	f000 fb25 	bl	800c598 <_sbrk_r>
 800bf4e:	1c43      	adds	r3, r0, #1
 800bf50:	d123      	bne.n	800bf9a <_malloc_r+0x92>
 800bf52:	230c      	movs	r3, #12
 800bf54:	6033      	str	r3, [r6, #0]
 800bf56:	4630      	mov	r0, r6
 800bf58:	f000 fe5c 	bl	800cc14 <__malloc_unlock>
 800bf5c:	e7e3      	b.n	800bf26 <_malloc_r+0x1e>
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	1b5b      	subs	r3, r3, r5
 800bf62:	d417      	bmi.n	800bf94 <_malloc_r+0x8c>
 800bf64:	2b0b      	cmp	r3, #11
 800bf66:	d903      	bls.n	800bf70 <_malloc_r+0x68>
 800bf68:	6023      	str	r3, [r4, #0]
 800bf6a:	441c      	add	r4, r3
 800bf6c:	6025      	str	r5, [r4, #0]
 800bf6e:	e004      	b.n	800bf7a <_malloc_r+0x72>
 800bf70:	6863      	ldr	r3, [r4, #4]
 800bf72:	42a2      	cmp	r2, r4
 800bf74:	bf0c      	ite	eq
 800bf76:	600b      	streq	r3, [r1, #0]
 800bf78:	6053      	strne	r3, [r2, #4]
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	f000 fe4a 	bl	800cc14 <__malloc_unlock>
 800bf80:	f104 000b 	add.w	r0, r4, #11
 800bf84:	1d23      	adds	r3, r4, #4
 800bf86:	f020 0007 	bic.w	r0, r0, #7
 800bf8a:	1ac2      	subs	r2, r0, r3
 800bf8c:	d0cc      	beq.n	800bf28 <_malloc_r+0x20>
 800bf8e:	1a1b      	subs	r3, r3, r0
 800bf90:	50a3      	str	r3, [r4, r2]
 800bf92:	e7c9      	b.n	800bf28 <_malloc_r+0x20>
 800bf94:	4622      	mov	r2, r4
 800bf96:	6864      	ldr	r4, [r4, #4]
 800bf98:	e7cc      	b.n	800bf34 <_malloc_r+0x2c>
 800bf9a:	1cc4      	adds	r4, r0, #3
 800bf9c:	f024 0403 	bic.w	r4, r4, #3
 800bfa0:	42a0      	cmp	r0, r4
 800bfa2:	d0e3      	beq.n	800bf6c <_malloc_r+0x64>
 800bfa4:	1a21      	subs	r1, r4, r0
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	f000 faf6 	bl	800c598 <_sbrk_r>
 800bfac:	3001      	adds	r0, #1
 800bfae:	d1dd      	bne.n	800bf6c <_malloc_r+0x64>
 800bfb0:	e7cf      	b.n	800bf52 <_malloc_r+0x4a>
 800bfb2:	bf00      	nop
 800bfb4:	20001e14 	.word	0x20001e14
 800bfb8:	20001e18 	.word	0x20001e18

0800bfbc <__sfputc_r>:
 800bfbc:	6893      	ldr	r3, [r2, #8]
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	b410      	push	{r4}
 800bfc4:	6093      	str	r3, [r2, #8]
 800bfc6:	da08      	bge.n	800bfda <__sfputc_r+0x1e>
 800bfc8:	6994      	ldr	r4, [r2, #24]
 800bfca:	42a3      	cmp	r3, r4
 800bfcc:	db01      	blt.n	800bfd2 <__sfputc_r+0x16>
 800bfce:	290a      	cmp	r1, #10
 800bfd0:	d103      	bne.n	800bfda <__sfputc_r+0x1e>
 800bfd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfd6:	f000 bb31 	b.w	800c63c <__swbuf_r>
 800bfda:	6813      	ldr	r3, [r2, #0]
 800bfdc:	1c58      	adds	r0, r3, #1
 800bfde:	6010      	str	r0, [r2, #0]
 800bfe0:	7019      	strb	r1, [r3, #0]
 800bfe2:	4608      	mov	r0, r1
 800bfe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfe8:	4770      	bx	lr

0800bfea <__sfputs_r>:
 800bfea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfec:	4606      	mov	r6, r0
 800bfee:	460f      	mov	r7, r1
 800bff0:	4614      	mov	r4, r2
 800bff2:	18d5      	adds	r5, r2, r3
 800bff4:	42ac      	cmp	r4, r5
 800bff6:	d101      	bne.n	800bffc <__sfputs_r+0x12>
 800bff8:	2000      	movs	r0, #0
 800bffa:	e007      	b.n	800c00c <__sfputs_r+0x22>
 800bffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c000:	463a      	mov	r2, r7
 800c002:	4630      	mov	r0, r6
 800c004:	f7ff ffda 	bl	800bfbc <__sfputc_r>
 800c008:	1c43      	adds	r3, r0, #1
 800c00a:	d1f3      	bne.n	800bff4 <__sfputs_r+0xa>
 800c00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c010 <_vfiprintf_r>:
 800c010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	460d      	mov	r5, r1
 800c016:	b09d      	sub	sp, #116	; 0x74
 800c018:	4614      	mov	r4, r2
 800c01a:	4698      	mov	r8, r3
 800c01c:	4606      	mov	r6, r0
 800c01e:	b118      	cbz	r0, 800c028 <_vfiprintf_r+0x18>
 800c020:	6983      	ldr	r3, [r0, #24]
 800c022:	b90b      	cbnz	r3, 800c028 <_vfiprintf_r+0x18>
 800c024:	f000 fcec 	bl	800ca00 <__sinit>
 800c028:	4b89      	ldr	r3, [pc, #548]	; (800c250 <_vfiprintf_r+0x240>)
 800c02a:	429d      	cmp	r5, r3
 800c02c:	d11b      	bne.n	800c066 <_vfiprintf_r+0x56>
 800c02e:	6875      	ldr	r5, [r6, #4]
 800c030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c032:	07d9      	lsls	r1, r3, #31
 800c034:	d405      	bmi.n	800c042 <_vfiprintf_r+0x32>
 800c036:	89ab      	ldrh	r3, [r5, #12]
 800c038:	059a      	lsls	r2, r3, #22
 800c03a:	d402      	bmi.n	800c042 <_vfiprintf_r+0x32>
 800c03c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c03e:	f000 fd7d 	bl	800cb3c <__retarget_lock_acquire_recursive>
 800c042:	89ab      	ldrh	r3, [r5, #12]
 800c044:	071b      	lsls	r3, r3, #28
 800c046:	d501      	bpl.n	800c04c <_vfiprintf_r+0x3c>
 800c048:	692b      	ldr	r3, [r5, #16]
 800c04a:	b9eb      	cbnz	r3, 800c088 <_vfiprintf_r+0x78>
 800c04c:	4629      	mov	r1, r5
 800c04e:	4630      	mov	r0, r6
 800c050:	f000 fb46 	bl	800c6e0 <__swsetup_r>
 800c054:	b1c0      	cbz	r0, 800c088 <_vfiprintf_r+0x78>
 800c056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c058:	07dc      	lsls	r4, r3, #31
 800c05a:	d50e      	bpl.n	800c07a <_vfiprintf_r+0x6a>
 800c05c:	f04f 30ff 	mov.w	r0, #4294967295
 800c060:	b01d      	add	sp, #116	; 0x74
 800c062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c066:	4b7b      	ldr	r3, [pc, #492]	; (800c254 <_vfiprintf_r+0x244>)
 800c068:	429d      	cmp	r5, r3
 800c06a:	d101      	bne.n	800c070 <_vfiprintf_r+0x60>
 800c06c:	68b5      	ldr	r5, [r6, #8]
 800c06e:	e7df      	b.n	800c030 <_vfiprintf_r+0x20>
 800c070:	4b79      	ldr	r3, [pc, #484]	; (800c258 <_vfiprintf_r+0x248>)
 800c072:	429d      	cmp	r5, r3
 800c074:	bf08      	it	eq
 800c076:	68f5      	ldreq	r5, [r6, #12]
 800c078:	e7da      	b.n	800c030 <_vfiprintf_r+0x20>
 800c07a:	89ab      	ldrh	r3, [r5, #12]
 800c07c:	0598      	lsls	r0, r3, #22
 800c07e:	d4ed      	bmi.n	800c05c <_vfiprintf_r+0x4c>
 800c080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c082:	f000 fd5c 	bl	800cb3e <__retarget_lock_release_recursive>
 800c086:	e7e9      	b.n	800c05c <_vfiprintf_r+0x4c>
 800c088:	2300      	movs	r3, #0
 800c08a:	9309      	str	r3, [sp, #36]	; 0x24
 800c08c:	2320      	movs	r3, #32
 800c08e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c092:	f8cd 800c 	str.w	r8, [sp, #12]
 800c096:	2330      	movs	r3, #48	; 0x30
 800c098:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c25c <_vfiprintf_r+0x24c>
 800c09c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0a0:	f04f 0901 	mov.w	r9, #1
 800c0a4:	4623      	mov	r3, r4
 800c0a6:	469a      	mov	sl, r3
 800c0a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0ac:	b10a      	cbz	r2, 800c0b2 <_vfiprintf_r+0xa2>
 800c0ae:	2a25      	cmp	r2, #37	; 0x25
 800c0b0:	d1f9      	bne.n	800c0a6 <_vfiprintf_r+0x96>
 800c0b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c0b6:	d00b      	beq.n	800c0d0 <_vfiprintf_r+0xc0>
 800c0b8:	465b      	mov	r3, fp
 800c0ba:	4622      	mov	r2, r4
 800c0bc:	4629      	mov	r1, r5
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7ff ff93 	bl	800bfea <__sfputs_r>
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	f000 80aa 	beq.w	800c21e <_vfiprintf_r+0x20e>
 800c0ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0cc:	445a      	add	r2, fp
 800c0ce:	9209      	str	r2, [sp, #36]	; 0x24
 800c0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f000 80a2 	beq.w	800c21e <_vfiprintf_r+0x20e>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0e4:	f10a 0a01 	add.w	sl, sl, #1
 800c0e8:	9304      	str	r3, [sp, #16]
 800c0ea:	9307      	str	r3, [sp, #28]
 800c0ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0f0:	931a      	str	r3, [sp, #104]	; 0x68
 800c0f2:	4654      	mov	r4, sl
 800c0f4:	2205      	movs	r2, #5
 800c0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0fa:	4858      	ldr	r0, [pc, #352]	; (800c25c <_vfiprintf_r+0x24c>)
 800c0fc:	f7f4 f8a0 	bl	8000240 <memchr>
 800c100:	9a04      	ldr	r2, [sp, #16]
 800c102:	b9d8      	cbnz	r0, 800c13c <_vfiprintf_r+0x12c>
 800c104:	06d1      	lsls	r1, r2, #27
 800c106:	bf44      	itt	mi
 800c108:	2320      	movmi	r3, #32
 800c10a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c10e:	0713      	lsls	r3, r2, #28
 800c110:	bf44      	itt	mi
 800c112:	232b      	movmi	r3, #43	; 0x2b
 800c114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c118:	f89a 3000 	ldrb.w	r3, [sl]
 800c11c:	2b2a      	cmp	r3, #42	; 0x2a
 800c11e:	d015      	beq.n	800c14c <_vfiprintf_r+0x13c>
 800c120:	9a07      	ldr	r2, [sp, #28]
 800c122:	4654      	mov	r4, sl
 800c124:	2000      	movs	r0, #0
 800c126:	f04f 0c0a 	mov.w	ip, #10
 800c12a:	4621      	mov	r1, r4
 800c12c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c130:	3b30      	subs	r3, #48	; 0x30
 800c132:	2b09      	cmp	r3, #9
 800c134:	d94e      	bls.n	800c1d4 <_vfiprintf_r+0x1c4>
 800c136:	b1b0      	cbz	r0, 800c166 <_vfiprintf_r+0x156>
 800c138:	9207      	str	r2, [sp, #28]
 800c13a:	e014      	b.n	800c166 <_vfiprintf_r+0x156>
 800c13c:	eba0 0308 	sub.w	r3, r0, r8
 800c140:	fa09 f303 	lsl.w	r3, r9, r3
 800c144:	4313      	orrs	r3, r2
 800c146:	9304      	str	r3, [sp, #16]
 800c148:	46a2      	mov	sl, r4
 800c14a:	e7d2      	b.n	800c0f2 <_vfiprintf_r+0xe2>
 800c14c:	9b03      	ldr	r3, [sp, #12]
 800c14e:	1d19      	adds	r1, r3, #4
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	9103      	str	r1, [sp, #12]
 800c154:	2b00      	cmp	r3, #0
 800c156:	bfbb      	ittet	lt
 800c158:	425b      	neglt	r3, r3
 800c15a:	f042 0202 	orrlt.w	r2, r2, #2
 800c15e:	9307      	strge	r3, [sp, #28]
 800c160:	9307      	strlt	r3, [sp, #28]
 800c162:	bfb8      	it	lt
 800c164:	9204      	strlt	r2, [sp, #16]
 800c166:	7823      	ldrb	r3, [r4, #0]
 800c168:	2b2e      	cmp	r3, #46	; 0x2e
 800c16a:	d10c      	bne.n	800c186 <_vfiprintf_r+0x176>
 800c16c:	7863      	ldrb	r3, [r4, #1]
 800c16e:	2b2a      	cmp	r3, #42	; 0x2a
 800c170:	d135      	bne.n	800c1de <_vfiprintf_r+0x1ce>
 800c172:	9b03      	ldr	r3, [sp, #12]
 800c174:	1d1a      	adds	r2, r3, #4
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	9203      	str	r2, [sp, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	bfb8      	it	lt
 800c17e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c182:	3402      	adds	r4, #2
 800c184:	9305      	str	r3, [sp, #20]
 800c186:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c26c <_vfiprintf_r+0x25c>
 800c18a:	7821      	ldrb	r1, [r4, #0]
 800c18c:	2203      	movs	r2, #3
 800c18e:	4650      	mov	r0, sl
 800c190:	f7f4 f856 	bl	8000240 <memchr>
 800c194:	b140      	cbz	r0, 800c1a8 <_vfiprintf_r+0x198>
 800c196:	2340      	movs	r3, #64	; 0x40
 800c198:	eba0 000a 	sub.w	r0, r0, sl
 800c19c:	fa03 f000 	lsl.w	r0, r3, r0
 800c1a0:	9b04      	ldr	r3, [sp, #16]
 800c1a2:	4303      	orrs	r3, r0
 800c1a4:	3401      	adds	r4, #1
 800c1a6:	9304      	str	r3, [sp, #16]
 800c1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ac:	482c      	ldr	r0, [pc, #176]	; (800c260 <_vfiprintf_r+0x250>)
 800c1ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1b2:	2206      	movs	r2, #6
 800c1b4:	f7f4 f844 	bl	8000240 <memchr>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d03f      	beq.n	800c23c <_vfiprintf_r+0x22c>
 800c1bc:	4b29      	ldr	r3, [pc, #164]	; (800c264 <_vfiprintf_r+0x254>)
 800c1be:	bb1b      	cbnz	r3, 800c208 <_vfiprintf_r+0x1f8>
 800c1c0:	9b03      	ldr	r3, [sp, #12]
 800c1c2:	3307      	adds	r3, #7
 800c1c4:	f023 0307 	bic.w	r3, r3, #7
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	9303      	str	r3, [sp, #12]
 800c1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ce:	443b      	add	r3, r7
 800c1d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1d2:	e767      	b.n	800c0a4 <_vfiprintf_r+0x94>
 800c1d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1d8:	460c      	mov	r4, r1
 800c1da:	2001      	movs	r0, #1
 800c1dc:	e7a5      	b.n	800c12a <_vfiprintf_r+0x11a>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	3401      	adds	r4, #1
 800c1e2:	9305      	str	r3, [sp, #20]
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	f04f 0c0a 	mov.w	ip, #10
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1f0:	3a30      	subs	r2, #48	; 0x30
 800c1f2:	2a09      	cmp	r2, #9
 800c1f4:	d903      	bls.n	800c1fe <_vfiprintf_r+0x1ee>
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d0c5      	beq.n	800c186 <_vfiprintf_r+0x176>
 800c1fa:	9105      	str	r1, [sp, #20]
 800c1fc:	e7c3      	b.n	800c186 <_vfiprintf_r+0x176>
 800c1fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800c202:	4604      	mov	r4, r0
 800c204:	2301      	movs	r3, #1
 800c206:	e7f0      	b.n	800c1ea <_vfiprintf_r+0x1da>
 800c208:	ab03      	add	r3, sp, #12
 800c20a:	9300      	str	r3, [sp, #0]
 800c20c:	462a      	mov	r2, r5
 800c20e:	4b16      	ldr	r3, [pc, #88]	; (800c268 <_vfiprintf_r+0x258>)
 800c210:	a904      	add	r1, sp, #16
 800c212:	4630      	mov	r0, r6
 800c214:	f3af 8000 	nop.w
 800c218:	4607      	mov	r7, r0
 800c21a:	1c78      	adds	r0, r7, #1
 800c21c:	d1d6      	bne.n	800c1cc <_vfiprintf_r+0x1bc>
 800c21e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c220:	07d9      	lsls	r1, r3, #31
 800c222:	d405      	bmi.n	800c230 <_vfiprintf_r+0x220>
 800c224:	89ab      	ldrh	r3, [r5, #12]
 800c226:	059a      	lsls	r2, r3, #22
 800c228:	d402      	bmi.n	800c230 <_vfiprintf_r+0x220>
 800c22a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c22c:	f000 fc87 	bl	800cb3e <__retarget_lock_release_recursive>
 800c230:	89ab      	ldrh	r3, [r5, #12]
 800c232:	065b      	lsls	r3, r3, #25
 800c234:	f53f af12 	bmi.w	800c05c <_vfiprintf_r+0x4c>
 800c238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c23a:	e711      	b.n	800c060 <_vfiprintf_r+0x50>
 800c23c:	ab03      	add	r3, sp, #12
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	462a      	mov	r2, r5
 800c242:	4b09      	ldr	r3, [pc, #36]	; (800c268 <_vfiprintf_r+0x258>)
 800c244:	a904      	add	r1, sp, #16
 800c246:	4630      	mov	r0, r6
 800c248:	f000 f880 	bl	800c34c <_printf_i>
 800c24c:	e7e4      	b.n	800c218 <_vfiprintf_r+0x208>
 800c24e:	bf00      	nop
 800c250:	0800d9ac 	.word	0x0800d9ac
 800c254:	0800d9cc 	.word	0x0800d9cc
 800c258:	0800d98c 	.word	0x0800d98c
 800c25c:	0800d934 	.word	0x0800d934
 800c260:	0800d93e 	.word	0x0800d93e
 800c264:	00000000 	.word	0x00000000
 800c268:	0800bfeb 	.word	0x0800bfeb
 800c26c:	0800d93a 	.word	0x0800d93a

0800c270 <_printf_common>:
 800c270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c274:	4616      	mov	r6, r2
 800c276:	4699      	mov	r9, r3
 800c278:	688a      	ldr	r2, [r1, #8]
 800c27a:	690b      	ldr	r3, [r1, #16]
 800c27c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c280:	4293      	cmp	r3, r2
 800c282:	bfb8      	it	lt
 800c284:	4613      	movlt	r3, r2
 800c286:	6033      	str	r3, [r6, #0]
 800c288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c28c:	4607      	mov	r7, r0
 800c28e:	460c      	mov	r4, r1
 800c290:	b10a      	cbz	r2, 800c296 <_printf_common+0x26>
 800c292:	3301      	adds	r3, #1
 800c294:	6033      	str	r3, [r6, #0]
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	0699      	lsls	r1, r3, #26
 800c29a:	bf42      	ittt	mi
 800c29c:	6833      	ldrmi	r3, [r6, #0]
 800c29e:	3302      	addmi	r3, #2
 800c2a0:	6033      	strmi	r3, [r6, #0]
 800c2a2:	6825      	ldr	r5, [r4, #0]
 800c2a4:	f015 0506 	ands.w	r5, r5, #6
 800c2a8:	d106      	bne.n	800c2b8 <_printf_common+0x48>
 800c2aa:	f104 0a19 	add.w	sl, r4, #25
 800c2ae:	68e3      	ldr	r3, [r4, #12]
 800c2b0:	6832      	ldr	r2, [r6, #0]
 800c2b2:	1a9b      	subs	r3, r3, r2
 800c2b4:	42ab      	cmp	r3, r5
 800c2b6:	dc26      	bgt.n	800c306 <_printf_common+0x96>
 800c2b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2bc:	1e13      	subs	r3, r2, #0
 800c2be:	6822      	ldr	r2, [r4, #0]
 800c2c0:	bf18      	it	ne
 800c2c2:	2301      	movne	r3, #1
 800c2c4:	0692      	lsls	r2, r2, #26
 800c2c6:	d42b      	bmi.n	800c320 <_printf_common+0xb0>
 800c2c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2cc:	4649      	mov	r1, r9
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	47c0      	blx	r8
 800c2d2:	3001      	adds	r0, #1
 800c2d4:	d01e      	beq.n	800c314 <_printf_common+0xa4>
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	68e5      	ldr	r5, [r4, #12]
 800c2da:	6832      	ldr	r2, [r6, #0]
 800c2dc:	f003 0306 	and.w	r3, r3, #6
 800c2e0:	2b04      	cmp	r3, #4
 800c2e2:	bf08      	it	eq
 800c2e4:	1aad      	subeq	r5, r5, r2
 800c2e6:	68a3      	ldr	r3, [r4, #8]
 800c2e8:	6922      	ldr	r2, [r4, #16]
 800c2ea:	bf0c      	ite	eq
 800c2ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2f0:	2500      	movne	r5, #0
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	bfc4      	itt	gt
 800c2f6:	1a9b      	subgt	r3, r3, r2
 800c2f8:	18ed      	addgt	r5, r5, r3
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	341a      	adds	r4, #26
 800c2fe:	42b5      	cmp	r5, r6
 800c300:	d11a      	bne.n	800c338 <_printf_common+0xc8>
 800c302:	2000      	movs	r0, #0
 800c304:	e008      	b.n	800c318 <_printf_common+0xa8>
 800c306:	2301      	movs	r3, #1
 800c308:	4652      	mov	r2, sl
 800c30a:	4649      	mov	r1, r9
 800c30c:	4638      	mov	r0, r7
 800c30e:	47c0      	blx	r8
 800c310:	3001      	adds	r0, #1
 800c312:	d103      	bne.n	800c31c <_printf_common+0xac>
 800c314:	f04f 30ff 	mov.w	r0, #4294967295
 800c318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c31c:	3501      	adds	r5, #1
 800c31e:	e7c6      	b.n	800c2ae <_printf_common+0x3e>
 800c320:	18e1      	adds	r1, r4, r3
 800c322:	1c5a      	adds	r2, r3, #1
 800c324:	2030      	movs	r0, #48	; 0x30
 800c326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c32a:	4422      	add	r2, r4
 800c32c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c334:	3302      	adds	r3, #2
 800c336:	e7c7      	b.n	800c2c8 <_printf_common+0x58>
 800c338:	2301      	movs	r3, #1
 800c33a:	4622      	mov	r2, r4
 800c33c:	4649      	mov	r1, r9
 800c33e:	4638      	mov	r0, r7
 800c340:	47c0      	blx	r8
 800c342:	3001      	adds	r0, #1
 800c344:	d0e6      	beq.n	800c314 <_printf_common+0xa4>
 800c346:	3601      	adds	r6, #1
 800c348:	e7d9      	b.n	800c2fe <_printf_common+0x8e>
	...

0800c34c <_printf_i>:
 800c34c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c350:	460c      	mov	r4, r1
 800c352:	4691      	mov	r9, r2
 800c354:	7e27      	ldrb	r7, [r4, #24]
 800c356:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c358:	2f78      	cmp	r7, #120	; 0x78
 800c35a:	4680      	mov	r8, r0
 800c35c:	469a      	mov	sl, r3
 800c35e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c362:	d807      	bhi.n	800c374 <_printf_i+0x28>
 800c364:	2f62      	cmp	r7, #98	; 0x62
 800c366:	d80a      	bhi.n	800c37e <_printf_i+0x32>
 800c368:	2f00      	cmp	r7, #0
 800c36a:	f000 80d8 	beq.w	800c51e <_printf_i+0x1d2>
 800c36e:	2f58      	cmp	r7, #88	; 0x58
 800c370:	f000 80a3 	beq.w	800c4ba <_printf_i+0x16e>
 800c374:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c378:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c37c:	e03a      	b.n	800c3f4 <_printf_i+0xa8>
 800c37e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c382:	2b15      	cmp	r3, #21
 800c384:	d8f6      	bhi.n	800c374 <_printf_i+0x28>
 800c386:	a001      	add	r0, pc, #4	; (adr r0, 800c38c <_printf_i+0x40>)
 800c388:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c38c:	0800c3e5 	.word	0x0800c3e5
 800c390:	0800c3f9 	.word	0x0800c3f9
 800c394:	0800c375 	.word	0x0800c375
 800c398:	0800c375 	.word	0x0800c375
 800c39c:	0800c375 	.word	0x0800c375
 800c3a0:	0800c375 	.word	0x0800c375
 800c3a4:	0800c3f9 	.word	0x0800c3f9
 800c3a8:	0800c375 	.word	0x0800c375
 800c3ac:	0800c375 	.word	0x0800c375
 800c3b0:	0800c375 	.word	0x0800c375
 800c3b4:	0800c375 	.word	0x0800c375
 800c3b8:	0800c505 	.word	0x0800c505
 800c3bc:	0800c429 	.word	0x0800c429
 800c3c0:	0800c4e7 	.word	0x0800c4e7
 800c3c4:	0800c375 	.word	0x0800c375
 800c3c8:	0800c375 	.word	0x0800c375
 800c3cc:	0800c527 	.word	0x0800c527
 800c3d0:	0800c375 	.word	0x0800c375
 800c3d4:	0800c429 	.word	0x0800c429
 800c3d8:	0800c375 	.word	0x0800c375
 800c3dc:	0800c375 	.word	0x0800c375
 800c3e0:	0800c4ef 	.word	0x0800c4ef
 800c3e4:	680b      	ldr	r3, [r1, #0]
 800c3e6:	1d1a      	adds	r2, r3, #4
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	600a      	str	r2, [r1, #0]
 800c3ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c3f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e0a3      	b.n	800c540 <_printf_i+0x1f4>
 800c3f8:	6825      	ldr	r5, [r4, #0]
 800c3fa:	6808      	ldr	r0, [r1, #0]
 800c3fc:	062e      	lsls	r6, r5, #24
 800c3fe:	f100 0304 	add.w	r3, r0, #4
 800c402:	d50a      	bpl.n	800c41a <_printf_i+0xce>
 800c404:	6805      	ldr	r5, [r0, #0]
 800c406:	600b      	str	r3, [r1, #0]
 800c408:	2d00      	cmp	r5, #0
 800c40a:	da03      	bge.n	800c414 <_printf_i+0xc8>
 800c40c:	232d      	movs	r3, #45	; 0x2d
 800c40e:	426d      	negs	r5, r5
 800c410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c414:	485e      	ldr	r0, [pc, #376]	; (800c590 <_printf_i+0x244>)
 800c416:	230a      	movs	r3, #10
 800c418:	e019      	b.n	800c44e <_printf_i+0x102>
 800c41a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c41e:	6805      	ldr	r5, [r0, #0]
 800c420:	600b      	str	r3, [r1, #0]
 800c422:	bf18      	it	ne
 800c424:	b22d      	sxthne	r5, r5
 800c426:	e7ef      	b.n	800c408 <_printf_i+0xbc>
 800c428:	680b      	ldr	r3, [r1, #0]
 800c42a:	6825      	ldr	r5, [r4, #0]
 800c42c:	1d18      	adds	r0, r3, #4
 800c42e:	6008      	str	r0, [r1, #0]
 800c430:	0628      	lsls	r0, r5, #24
 800c432:	d501      	bpl.n	800c438 <_printf_i+0xec>
 800c434:	681d      	ldr	r5, [r3, #0]
 800c436:	e002      	b.n	800c43e <_printf_i+0xf2>
 800c438:	0669      	lsls	r1, r5, #25
 800c43a:	d5fb      	bpl.n	800c434 <_printf_i+0xe8>
 800c43c:	881d      	ldrh	r5, [r3, #0]
 800c43e:	4854      	ldr	r0, [pc, #336]	; (800c590 <_printf_i+0x244>)
 800c440:	2f6f      	cmp	r7, #111	; 0x6f
 800c442:	bf0c      	ite	eq
 800c444:	2308      	moveq	r3, #8
 800c446:	230a      	movne	r3, #10
 800c448:	2100      	movs	r1, #0
 800c44a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c44e:	6866      	ldr	r6, [r4, #4]
 800c450:	60a6      	str	r6, [r4, #8]
 800c452:	2e00      	cmp	r6, #0
 800c454:	bfa2      	ittt	ge
 800c456:	6821      	ldrge	r1, [r4, #0]
 800c458:	f021 0104 	bicge.w	r1, r1, #4
 800c45c:	6021      	strge	r1, [r4, #0]
 800c45e:	b90d      	cbnz	r5, 800c464 <_printf_i+0x118>
 800c460:	2e00      	cmp	r6, #0
 800c462:	d04d      	beq.n	800c500 <_printf_i+0x1b4>
 800c464:	4616      	mov	r6, r2
 800c466:	fbb5 f1f3 	udiv	r1, r5, r3
 800c46a:	fb03 5711 	mls	r7, r3, r1, r5
 800c46e:	5dc7      	ldrb	r7, [r0, r7]
 800c470:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c474:	462f      	mov	r7, r5
 800c476:	42bb      	cmp	r3, r7
 800c478:	460d      	mov	r5, r1
 800c47a:	d9f4      	bls.n	800c466 <_printf_i+0x11a>
 800c47c:	2b08      	cmp	r3, #8
 800c47e:	d10b      	bne.n	800c498 <_printf_i+0x14c>
 800c480:	6823      	ldr	r3, [r4, #0]
 800c482:	07df      	lsls	r7, r3, #31
 800c484:	d508      	bpl.n	800c498 <_printf_i+0x14c>
 800c486:	6923      	ldr	r3, [r4, #16]
 800c488:	6861      	ldr	r1, [r4, #4]
 800c48a:	4299      	cmp	r1, r3
 800c48c:	bfde      	ittt	le
 800c48e:	2330      	movle	r3, #48	; 0x30
 800c490:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c494:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c498:	1b92      	subs	r2, r2, r6
 800c49a:	6122      	str	r2, [r4, #16]
 800c49c:	f8cd a000 	str.w	sl, [sp]
 800c4a0:	464b      	mov	r3, r9
 800c4a2:	aa03      	add	r2, sp, #12
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	4640      	mov	r0, r8
 800c4a8:	f7ff fee2 	bl	800c270 <_printf_common>
 800c4ac:	3001      	adds	r0, #1
 800c4ae:	d14c      	bne.n	800c54a <_printf_i+0x1fe>
 800c4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b4:	b004      	add	sp, #16
 800c4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ba:	4835      	ldr	r0, [pc, #212]	; (800c590 <_printf_i+0x244>)
 800c4bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	680e      	ldr	r6, [r1, #0]
 800c4c4:	061f      	lsls	r7, r3, #24
 800c4c6:	f856 5b04 	ldr.w	r5, [r6], #4
 800c4ca:	600e      	str	r6, [r1, #0]
 800c4cc:	d514      	bpl.n	800c4f8 <_printf_i+0x1ac>
 800c4ce:	07d9      	lsls	r1, r3, #31
 800c4d0:	bf44      	itt	mi
 800c4d2:	f043 0320 	orrmi.w	r3, r3, #32
 800c4d6:	6023      	strmi	r3, [r4, #0]
 800c4d8:	b91d      	cbnz	r5, 800c4e2 <_printf_i+0x196>
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	f023 0320 	bic.w	r3, r3, #32
 800c4e0:	6023      	str	r3, [r4, #0]
 800c4e2:	2310      	movs	r3, #16
 800c4e4:	e7b0      	b.n	800c448 <_printf_i+0xfc>
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	f043 0320 	orr.w	r3, r3, #32
 800c4ec:	6023      	str	r3, [r4, #0]
 800c4ee:	2378      	movs	r3, #120	; 0x78
 800c4f0:	4828      	ldr	r0, [pc, #160]	; (800c594 <_printf_i+0x248>)
 800c4f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4f6:	e7e3      	b.n	800c4c0 <_printf_i+0x174>
 800c4f8:	065e      	lsls	r6, r3, #25
 800c4fa:	bf48      	it	mi
 800c4fc:	b2ad      	uxthmi	r5, r5
 800c4fe:	e7e6      	b.n	800c4ce <_printf_i+0x182>
 800c500:	4616      	mov	r6, r2
 800c502:	e7bb      	b.n	800c47c <_printf_i+0x130>
 800c504:	680b      	ldr	r3, [r1, #0]
 800c506:	6826      	ldr	r6, [r4, #0]
 800c508:	6960      	ldr	r0, [r4, #20]
 800c50a:	1d1d      	adds	r5, r3, #4
 800c50c:	600d      	str	r5, [r1, #0]
 800c50e:	0635      	lsls	r5, r6, #24
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	d501      	bpl.n	800c518 <_printf_i+0x1cc>
 800c514:	6018      	str	r0, [r3, #0]
 800c516:	e002      	b.n	800c51e <_printf_i+0x1d2>
 800c518:	0671      	lsls	r1, r6, #25
 800c51a:	d5fb      	bpl.n	800c514 <_printf_i+0x1c8>
 800c51c:	8018      	strh	r0, [r3, #0]
 800c51e:	2300      	movs	r3, #0
 800c520:	6123      	str	r3, [r4, #16]
 800c522:	4616      	mov	r6, r2
 800c524:	e7ba      	b.n	800c49c <_printf_i+0x150>
 800c526:	680b      	ldr	r3, [r1, #0]
 800c528:	1d1a      	adds	r2, r3, #4
 800c52a:	600a      	str	r2, [r1, #0]
 800c52c:	681e      	ldr	r6, [r3, #0]
 800c52e:	6862      	ldr	r2, [r4, #4]
 800c530:	2100      	movs	r1, #0
 800c532:	4630      	mov	r0, r6
 800c534:	f7f3 fe84 	bl	8000240 <memchr>
 800c538:	b108      	cbz	r0, 800c53e <_printf_i+0x1f2>
 800c53a:	1b80      	subs	r0, r0, r6
 800c53c:	6060      	str	r0, [r4, #4]
 800c53e:	6863      	ldr	r3, [r4, #4]
 800c540:	6123      	str	r3, [r4, #16]
 800c542:	2300      	movs	r3, #0
 800c544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c548:	e7a8      	b.n	800c49c <_printf_i+0x150>
 800c54a:	6923      	ldr	r3, [r4, #16]
 800c54c:	4632      	mov	r2, r6
 800c54e:	4649      	mov	r1, r9
 800c550:	4640      	mov	r0, r8
 800c552:	47d0      	blx	sl
 800c554:	3001      	adds	r0, #1
 800c556:	d0ab      	beq.n	800c4b0 <_printf_i+0x164>
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	079b      	lsls	r3, r3, #30
 800c55c:	d413      	bmi.n	800c586 <_printf_i+0x23a>
 800c55e:	68e0      	ldr	r0, [r4, #12]
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	4298      	cmp	r0, r3
 800c564:	bfb8      	it	lt
 800c566:	4618      	movlt	r0, r3
 800c568:	e7a4      	b.n	800c4b4 <_printf_i+0x168>
 800c56a:	2301      	movs	r3, #1
 800c56c:	4632      	mov	r2, r6
 800c56e:	4649      	mov	r1, r9
 800c570:	4640      	mov	r0, r8
 800c572:	47d0      	blx	sl
 800c574:	3001      	adds	r0, #1
 800c576:	d09b      	beq.n	800c4b0 <_printf_i+0x164>
 800c578:	3501      	adds	r5, #1
 800c57a:	68e3      	ldr	r3, [r4, #12]
 800c57c:	9903      	ldr	r1, [sp, #12]
 800c57e:	1a5b      	subs	r3, r3, r1
 800c580:	42ab      	cmp	r3, r5
 800c582:	dcf2      	bgt.n	800c56a <_printf_i+0x21e>
 800c584:	e7eb      	b.n	800c55e <_printf_i+0x212>
 800c586:	2500      	movs	r5, #0
 800c588:	f104 0619 	add.w	r6, r4, #25
 800c58c:	e7f5      	b.n	800c57a <_printf_i+0x22e>
 800c58e:	bf00      	nop
 800c590:	0800d945 	.word	0x0800d945
 800c594:	0800d956 	.word	0x0800d956

0800c598 <_sbrk_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4d06      	ldr	r5, [pc, #24]	; (800c5b4 <_sbrk_r+0x1c>)
 800c59c:	2300      	movs	r3, #0
 800c59e:	4604      	mov	r4, r0
 800c5a0:	4608      	mov	r0, r1
 800c5a2:	602b      	str	r3, [r5, #0]
 800c5a4:	f7f5 fd3a 	bl	800201c <_sbrk>
 800c5a8:	1c43      	adds	r3, r0, #1
 800c5aa:	d102      	bne.n	800c5b2 <_sbrk_r+0x1a>
 800c5ac:	682b      	ldr	r3, [r5, #0]
 800c5ae:	b103      	cbz	r3, 800c5b2 <_sbrk_r+0x1a>
 800c5b0:	6023      	str	r3, [r4, #0]
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
 800c5b4:	20002120 	.word	0x20002120

0800c5b8 <__utoa>:
 800c5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ba:	4c1f      	ldr	r4, [pc, #124]	; (800c638 <__utoa+0x80>)
 800c5bc:	b08b      	sub	sp, #44	; 0x2c
 800c5be:	4605      	mov	r5, r0
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	466e      	mov	r6, sp
 800c5c4:	f104 0c20 	add.w	ip, r4, #32
 800c5c8:	6820      	ldr	r0, [r4, #0]
 800c5ca:	6861      	ldr	r1, [r4, #4]
 800c5cc:	4637      	mov	r7, r6
 800c5ce:	c703      	stmia	r7!, {r0, r1}
 800c5d0:	3408      	adds	r4, #8
 800c5d2:	4564      	cmp	r4, ip
 800c5d4:	463e      	mov	r6, r7
 800c5d6:	d1f7      	bne.n	800c5c8 <__utoa+0x10>
 800c5d8:	7921      	ldrb	r1, [r4, #4]
 800c5da:	7139      	strb	r1, [r7, #4]
 800c5dc:	1e91      	subs	r1, r2, #2
 800c5de:	6820      	ldr	r0, [r4, #0]
 800c5e0:	6038      	str	r0, [r7, #0]
 800c5e2:	2922      	cmp	r1, #34	; 0x22
 800c5e4:	f04f 0100 	mov.w	r1, #0
 800c5e8:	d904      	bls.n	800c5f4 <__utoa+0x3c>
 800c5ea:	7019      	strb	r1, [r3, #0]
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	b00b      	add	sp, #44	; 0x2c
 800c5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5f4:	1e58      	subs	r0, r3, #1
 800c5f6:	4684      	mov	ip, r0
 800c5f8:	fbb5 f7f2 	udiv	r7, r5, r2
 800c5fc:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800c600:	fb02 5617 	mls	r6, r2, r7, r5
 800c604:	4476      	add	r6, lr
 800c606:	460c      	mov	r4, r1
 800c608:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c60c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c610:	462e      	mov	r6, r5
 800c612:	42b2      	cmp	r2, r6
 800c614:	f101 0101 	add.w	r1, r1, #1
 800c618:	463d      	mov	r5, r7
 800c61a:	d9ed      	bls.n	800c5f8 <__utoa+0x40>
 800c61c:	2200      	movs	r2, #0
 800c61e:	545a      	strb	r2, [r3, r1]
 800c620:	1919      	adds	r1, r3, r4
 800c622:	1aa5      	subs	r5, r4, r2
 800c624:	42aa      	cmp	r2, r5
 800c626:	dae2      	bge.n	800c5ee <__utoa+0x36>
 800c628:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c62c:	780e      	ldrb	r6, [r1, #0]
 800c62e:	7006      	strb	r6, [r0, #0]
 800c630:	3201      	adds	r2, #1
 800c632:	f801 5901 	strb.w	r5, [r1], #-1
 800c636:	e7f4      	b.n	800c622 <__utoa+0x6a>
 800c638:	0800d967 	.word	0x0800d967

0800c63c <__swbuf_r>:
 800c63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63e:	460e      	mov	r6, r1
 800c640:	4614      	mov	r4, r2
 800c642:	4605      	mov	r5, r0
 800c644:	b118      	cbz	r0, 800c64e <__swbuf_r+0x12>
 800c646:	6983      	ldr	r3, [r0, #24]
 800c648:	b90b      	cbnz	r3, 800c64e <__swbuf_r+0x12>
 800c64a:	f000 f9d9 	bl	800ca00 <__sinit>
 800c64e:	4b21      	ldr	r3, [pc, #132]	; (800c6d4 <__swbuf_r+0x98>)
 800c650:	429c      	cmp	r4, r3
 800c652:	d12b      	bne.n	800c6ac <__swbuf_r+0x70>
 800c654:	686c      	ldr	r4, [r5, #4]
 800c656:	69a3      	ldr	r3, [r4, #24]
 800c658:	60a3      	str	r3, [r4, #8]
 800c65a:	89a3      	ldrh	r3, [r4, #12]
 800c65c:	071a      	lsls	r2, r3, #28
 800c65e:	d52f      	bpl.n	800c6c0 <__swbuf_r+0x84>
 800c660:	6923      	ldr	r3, [r4, #16]
 800c662:	b36b      	cbz	r3, 800c6c0 <__swbuf_r+0x84>
 800c664:	6923      	ldr	r3, [r4, #16]
 800c666:	6820      	ldr	r0, [r4, #0]
 800c668:	1ac0      	subs	r0, r0, r3
 800c66a:	6963      	ldr	r3, [r4, #20]
 800c66c:	b2f6      	uxtb	r6, r6
 800c66e:	4283      	cmp	r3, r0
 800c670:	4637      	mov	r7, r6
 800c672:	dc04      	bgt.n	800c67e <__swbuf_r+0x42>
 800c674:	4621      	mov	r1, r4
 800c676:	4628      	mov	r0, r5
 800c678:	f000 f92e 	bl	800c8d8 <_fflush_r>
 800c67c:	bb30      	cbnz	r0, 800c6cc <__swbuf_r+0x90>
 800c67e:	68a3      	ldr	r3, [r4, #8]
 800c680:	3b01      	subs	r3, #1
 800c682:	60a3      	str	r3, [r4, #8]
 800c684:	6823      	ldr	r3, [r4, #0]
 800c686:	1c5a      	adds	r2, r3, #1
 800c688:	6022      	str	r2, [r4, #0]
 800c68a:	701e      	strb	r6, [r3, #0]
 800c68c:	6963      	ldr	r3, [r4, #20]
 800c68e:	3001      	adds	r0, #1
 800c690:	4283      	cmp	r3, r0
 800c692:	d004      	beq.n	800c69e <__swbuf_r+0x62>
 800c694:	89a3      	ldrh	r3, [r4, #12]
 800c696:	07db      	lsls	r3, r3, #31
 800c698:	d506      	bpl.n	800c6a8 <__swbuf_r+0x6c>
 800c69a:	2e0a      	cmp	r6, #10
 800c69c:	d104      	bne.n	800c6a8 <__swbuf_r+0x6c>
 800c69e:	4621      	mov	r1, r4
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	f000 f919 	bl	800c8d8 <_fflush_r>
 800c6a6:	b988      	cbnz	r0, 800c6cc <__swbuf_r+0x90>
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ac:	4b0a      	ldr	r3, [pc, #40]	; (800c6d8 <__swbuf_r+0x9c>)
 800c6ae:	429c      	cmp	r4, r3
 800c6b0:	d101      	bne.n	800c6b6 <__swbuf_r+0x7a>
 800c6b2:	68ac      	ldr	r4, [r5, #8]
 800c6b4:	e7cf      	b.n	800c656 <__swbuf_r+0x1a>
 800c6b6:	4b09      	ldr	r3, [pc, #36]	; (800c6dc <__swbuf_r+0xa0>)
 800c6b8:	429c      	cmp	r4, r3
 800c6ba:	bf08      	it	eq
 800c6bc:	68ec      	ldreq	r4, [r5, #12]
 800c6be:	e7ca      	b.n	800c656 <__swbuf_r+0x1a>
 800c6c0:	4621      	mov	r1, r4
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	f000 f80c 	bl	800c6e0 <__swsetup_r>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d0cb      	beq.n	800c664 <__swbuf_r+0x28>
 800c6cc:	f04f 37ff 	mov.w	r7, #4294967295
 800c6d0:	e7ea      	b.n	800c6a8 <__swbuf_r+0x6c>
 800c6d2:	bf00      	nop
 800c6d4:	0800d9ac 	.word	0x0800d9ac
 800c6d8:	0800d9cc 	.word	0x0800d9cc
 800c6dc:	0800d98c 	.word	0x0800d98c

0800c6e0 <__swsetup_r>:
 800c6e0:	4b32      	ldr	r3, [pc, #200]	; (800c7ac <__swsetup_r+0xcc>)
 800c6e2:	b570      	push	{r4, r5, r6, lr}
 800c6e4:	681d      	ldr	r5, [r3, #0]
 800c6e6:	4606      	mov	r6, r0
 800c6e8:	460c      	mov	r4, r1
 800c6ea:	b125      	cbz	r5, 800c6f6 <__swsetup_r+0x16>
 800c6ec:	69ab      	ldr	r3, [r5, #24]
 800c6ee:	b913      	cbnz	r3, 800c6f6 <__swsetup_r+0x16>
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	f000 f985 	bl	800ca00 <__sinit>
 800c6f6:	4b2e      	ldr	r3, [pc, #184]	; (800c7b0 <__swsetup_r+0xd0>)
 800c6f8:	429c      	cmp	r4, r3
 800c6fa:	d10f      	bne.n	800c71c <__swsetup_r+0x3c>
 800c6fc:	686c      	ldr	r4, [r5, #4]
 800c6fe:	89a3      	ldrh	r3, [r4, #12]
 800c700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c704:	0719      	lsls	r1, r3, #28
 800c706:	d42c      	bmi.n	800c762 <__swsetup_r+0x82>
 800c708:	06dd      	lsls	r5, r3, #27
 800c70a:	d411      	bmi.n	800c730 <__swsetup_r+0x50>
 800c70c:	2309      	movs	r3, #9
 800c70e:	6033      	str	r3, [r6, #0]
 800c710:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c714:	81a3      	strh	r3, [r4, #12]
 800c716:	f04f 30ff 	mov.w	r0, #4294967295
 800c71a:	e03e      	b.n	800c79a <__swsetup_r+0xba>
 800c71c:	4b25      	ldr	r3, [pc, #148]	; (800c7b4 <__swsetup_r+0xd4>)
 800c71e:	429c      	cmp	r4, r3
 800c720:	d101      	bne.n	800c726 <__swsetup_r+0x46>
 800c722:	68ac      	ldr	r4, [r5, #8]
 800c724:	e7eb      	b.n	800c6fe <__swsetup_r+0x1e>
 800c726:	4b24      	ldr	r3, [pc, #144]	; (800c7b8 <__swsetup_r+0xd8>)
 800c728:	429c      	cmp	r4, r3
 800c72a:	bf08      	it	eq
 800c72c:	68ec      	ldreq	r4, [r5, #12]
 800c72e:	e7e6      	b.n	800c6fe <__swsetup_r+0x1e>
 800c730:	0758      	lsls	r0, r3, #29
 800c732:	d512      	bpl.n	800c75a <__swsetup_r+0x7a>
 800c734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c736:	b141      	cbz	r1, 800c74a <__swsetup_r+0x6a>
 800c738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c73c:	4299      	cmp	r1, r3
 800c73e:	d002      	beq.n	800c746 <__swsetup_r+0x66>
 800c740:	4630      	mov	r0, r6
 800c742:	f7ff fb91 	bl	800be68 <_free_r>
 800c746:	2300      	movs	r3, #0
 800c748:	6363      	str	r3, [r4, #52]	; 0x34
 800c74a:	89a3      	ldrh	r3, [r4, #12]
 800c74c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c750:	81a3      	strh	r3, [r4, #12]
 800c752:	2300      	movs	r3, #0
 800c754:	6063      	str	r3, [r4, #4]
 800c756:	6923      	ldr	r3, [r4, #16]
 800c758:	6023      	str	r3, [r4, #0]
 800c75a:	89a3      	ldrh	r3, [r4, #12]
 800c75c:	f043 0308 	orr.w	r3, r3, #8
 800c760:	81a3      	strh	r3, [r4, #12]
 800c762:	6923      	ldr	r3, [r4, #16]
 800c764:	b94b      	cbnz	r3, 800c77a <__swsetup_r+0x9a>
 800c766:	89a3      	ldrh	r3, [r4, #12]
 800c768:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c770:	d003      	beq.n	800c77a <__swsetup_r+0x9a>
 800c772:	4621      	mov	r1, r4
 800c774:	4630      	mov	r0, r6
 800c776:	f000 fa07 	bl	800cb88 <__smakebuf_r>
 800c77a:	89a0      	ldrh	r0, [r4, #12]
 800c77c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c780:	f010 0301 	ands.w	r3, r0, #1
 800c784:	d00a      	beq.n	800c79c <__swsetup_r+0xbc>
 800c786:	2300      	movs	r3, #0
 800c788:	60a3      	str	r3, [r4, #8]
 800c78a:	6963      	ldr	r3, [r4, #20]
 800c78c:	425b      	negs	r3, r3
 800c78e:	61a3      	str	r3, [r4, #24]
 800c790:	6923      	ldr	r3, [r4, #16]
 800c792:	b943      	cbnz	r3, 800c7a6 <__swsetup_r+0xc6>
 800c794:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c798:	d1ba      	bne.n	800c710 <__swsetup_r+0x30>
 800c79a:	bd70      	pop	{r4, r5, r6, pc}
 800c79c:	0781      	lsls	r1, r0, #30
 800c79e:	bf58      	it	pl
 800c7a0:	6963      	ldrpl	r3, [r4, #20]
 800c7a2:	60a3      	str	r3, [r4, #8]
 800c7a4:	e7f4      	b.n	800c790 <__swsetup_r+0xb0>
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	e7f7      	b.n	800c79a <__swsetup_r+0xba>
 800c7aa:	bf00      	nop
 800c7ac:	200000a0 	.word	0x200000a0
 800c7b0:	0800d9ac 	.word	0x0800d9ac
 800c7b4:	0800d9cc 	.word	0x0800d9cc
 800c7b8:	0800d98c 	.word	0x0800d98c

0800c7bc <abort>:
 800c7bc:	b508      	push	{r3, lr}
 800c7be:	2006      	movs	r0, #6
 800c7c0:	f000 fa56 	bl	800cc70 <raise>
 800c7c4:	2001      	movs	r0, #1
 800c7c6:	f7f5 fbb1 	bl	8001f2c <_exit>
	...

0800c7cc <__sflush_r>:
 800c7cc:	898a      	ldrh	r2, [r1, #12]
 800c7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d2:	4605      	mov	r5, r0
 800c7d4:	0710      	lsls	r0, r2, #28
 800c7d6:	460c      	mov	r4, r1
 800c7d8:	d458      	bmi.n	800c88c <__sflush_r+0xc0>
 800c7da:	684b      	ldr	r3, [r1, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	dc05      	bgt.n	800c7ec <__sflush_r+0x20>
 800c7e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	dc02      	bgt.n	800c7ec <__sflush_r+0x20>
 800c7e6:	2000      	movs	r0, #0
 800c7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7ee:	2e00      	cmp	r6, #0
 800c7f0:	d0f9      	beq.n	800c7e6 <__sflush_r+0x1a>
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7f8:	682f      	ldr	r7, [r5, #0]
 800c7fa:	602b      	str	r3, [r5, #0]
 800c7fc:	d032      	beq.n	800c864 <__sflush_r+0x98>
 800c7fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c800:	89a3      	ldrh	r3, [r4, #12]
 800c802:	075a      	lsls	r2, r3, #29
 800c804:	d505      	bpl.n	800c812 <__sflush_r+0x46>
 800c806:	6863      	ldr	r3, [r4, #4]
 800c808:	1ac0      	subs	r0, r0, r3
 800c80a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c80c:	b10b      	cbz	r3, 800c812 <__sflush_r+0x46>
 800c80e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c810:	1ac0      	subs	r0, r0, r3
 800c812:	2300      	movs	r3, #0
 800c814:	4602      	mov	r2, r0
 800c816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c818:	6a21      	ldr	r1, [r4, #32]
 800c81a:	4628      	mov	r0, r5
 800c81c:	47b0      	blx	r6
 800c81e:	1c43      	adds	r3, r0, #1
 800c820:	89a3      	ldrh	r3, [r4, #12]
 800c822:	d106      	bne.n	800c832 <__sflush_r+0x66>
 800c824:	6829      	ldr	r1, [r5, #0]
 800c826:	291d      	cmp	r1, #29
 800c828:	d82c      	bhi.n	800c884 <__sflush_r+0xb8>
 800c82a:	4a2a      	ldr	r2, [pc, #168]	; (800c8d4 <__sflush_r+0x108>)
 800c82c:	40ca      	lsrs	r2, r1
 800c82e:	07d6      	lsls	r6, r2, #31
 800c830:	d528      	bpl.n	800c884 <__sflush_r+0xb8>
 800c832:	2200      	movs	r2, #0
 800c834:	6062      	str	r2, [r4, #4]
 800c836:	04d9      	lsls	r1, r3, #19
 800c838:	6922      	ldr	r2, [r4, #16]
 800c83a:	6022      	str	r2, [r4, #0]
 800c83c:	d504      	bpl.n	800c848 <__sflush_r+0x7c>
 800c83e:	1c42      	adds	r2, r0, #1
 800c840:	d101      	bne.n	800c846 <__sflush_r+0x7a>
 800c842:	682b      	ldr	r3, [r5, #0]
 800c844:	b903      	cbnz	r3, 800c848 <__sflush_r+0x7c>
 800c846:	6560      	str	r0, [r4, #84]	; 0x54
 800c848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c84a:	602f      	str	r7, [r5, #0]
 800c84c:	2900      	cmp	r1, #0
 800c84e:	d0ca      	beq.n	800c7e6 <__sflush_r+0x1a>
 800c850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c854:	4299      	cmp	r1, r3
 800c856:	d002      	beq.n	800c85e <__sflush_r+0x92>
 800c858:	4628      	mov	r0, r5
 800c85a:	f7ff fb05 	bl	800be68 <_free_r>
 800c85e:	2000      	movs	r0, #0
 800c860:	6360      	str	r0, [r4, #52]	; 0x34
 800c862:	e7c1      	b.n	800c7e8 <__sflush_r+0x1c>
 800c864:	6a21      	ldr	r1, [r4, #32]
 800c866:	2301      	movs	r3, #1
 800c868:	4628      	mov	r0, r5
 800c86a:	47b0      	blx	r6
 800c86c:	1c41      	adds	r1, r0, #1
 800c86e:	d1c7      	bne.n	800c800 <__sflush_r+0x34>
 800c870:	682b      	ldr	r3, [r5, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d0c4      	beq.n	800c800 <__sflush_r+0x34>
 800c876:	2b1d      	cmp	r3, #29
 800c878:	d001      	beq.n	800c87e <__sflush_r+0xb2>
 800c87a:	2b16      	cmp	r3, #22
 800c87c:	d101      	bne.n	800c882 <__sflush_r+0xb6>
 800c87e:	602f      	str	r7, [r5, #0]
 800c880:	e7b1      	b.n	800c7e6 <__sflush_r+0x1a>
 800c882:	89a3      	ldrh	r3, [r4, #12]
 800c884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c888:	81a3      	strh	r3, [r4, #12]
 800c88a:	e7ad      	b.n	800c7e8 <__sflush_r+0x1c>
 800c88c:	690f      	ldr	r7, [r1, #16]
 800c88e:	2f00      	cmp	r7, #0
 800c890:	d0a9      	beq.n	800c7e6 <__sflush_r+0x1a>
 800c892:	0793      	lsls	r3, r2, #30
 800c894:	680e      	ldr	r6, [r1, #0]
 800c896:	bf08      	it	eq
 800c898:	694b      	ldreq	r3, [r1, #20]
 800c89a:	600f      	str	r7, [r1, #0]
 800c89c:	bf18      	it	ne
 800c89e:	2300      	movne	r3, #0
 800c8a0:	eba6 0807 	sub.w	r8, r6, r7
 800c8a4:	608b      	str	r3, [r1, #8]
 800c8a6:	f1b8 0f00 	cmp.w	r8, #0
 800c8aa:	dd9c      	ble.n	800c7e6 <__sflush_r+0x1a>
 800c8ac:	6a21      	ldr	r1, [r4, #32]
 800c8ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8b0:	4643      	mov	r3, r8
 800c8b2:	463a      	mov	r2, r7
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	47b0      	blx	r6
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	dc06      	bgt.n	800c8ca <__sflush_r+0xfe>
 800c8bc:	89a3      	ldrh	r3, [r4, #12]
 800c8be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8c2:	81a3      	strh	r3, [r4, #12]
 800c8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c8:	e78e      	b.n	800c7e8 <__sflush_r+0x1c>
 800c8ca:	4407      	add	r7, r0
 800c8cc:	eba8 0800 	sub.w	r8, r8, r0
 800c8d0:	e7e9      	b.n	800c8a6 <__sflush_r+0xda>
 800c8d2:	bf00      	nop
 800c8d4:	20400001 	.word	0x20400001

0800c8d8 <_fflush_r>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	690b      	ldr	r3, [r1, #16]
 800c8dc:	4605      	mov	r5, r0
 800c8de:	460c      	mov	r4, r1
 800c8e0:	b913      	cbnz	r3, 800c8e8 <_fflush_r+0x10>
 800c8e2:	2500      	movs	r5, #0
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	bd38      	pop	{r3, r4, r5, pc}
 800c8e8:	b118      	cbz	r0, 800c8f2 <_fflush_r+0x1a>
 800c8ea:	6983      	ldr	r3, [r0, #24]
 800c8ec:	b90b      	cbnz	r3, 800c8f2 <_fflush_r+0x1a>
 800c8ee:	f000 f887 	bl	800ca00 <__sinit>
 800c8f2:	4b14      	ldr	r3, [pc, #80]	; (800c944 <_fflush_r+0x6c>)
 800c8f4:	429c      	cmp	r4, r3
 800c8f6:	d11b      	bne.n	800c930 <_fflush_r+0x58>
 800c8f8:	686c      	ldr	r4, [r5, #4]
 800c8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d0ef      	beq.n	800c8e2 <_fflush_r+0xa>
 800c902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c904:	07d0      	lsls	r0, r2, #31
 800c906:	d404      	bmi.n	800c912 <_fflush_r+0x3a>
 800c908:	0599      	lsls	r1, r3, #22
 800c90a:	d402      	bmi.n	800c912 <_fflush_r+0x3a>
 800c90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c90e:	f000 f915 	bl	800cb3c <__retarget_lock_acquire_recursive>
 800c912:	4628      	mov	r0, r5
 800c914:	4621      	mov	r1, r4
 800c916:	f7ff ff59 	bl	800c7cc <__sflush_r>
 800c91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c91c:	07da      	lsls	r2, r3, #31
 800c91e:	4605      	mov	r5, r0
 800c920:	d4e0      	bmi.n	800c8e4 <_fflush_r+0xc>
 800c922:	89a3      	ldrh	r3, [r4, #12]
 800c924:	059b      	lsls	r3, r3, #22
 800c926:	d4dd      	bmi.n	800c8e4 <_fflush_r+0xc>
 800c928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c92a:	f000 f908 	bl	800cb3e <__retarget_lock_release_recursive>
 800c92e:	e7d9      	b.n	800c8e4 <_fflush_r+0xc>
 800c930:	4b05      	ldr	r3, [pc, #20]	; (800c948 <_fflush_r+0x70>)
 800c932:	429c      	cmp	r4, r3
 800c934:	d101      	bne.n	800c93a <_fflush_r+0x62>
 800c936:	68ac      	ldr	r4, [r5, #8]
 800c938:	e7df      	b.n	800c8fa <_fflush_r+0x22>
 800c93a:	4b04      	ldr	r3, [pc, #16]	; (800c94c <_fflush_r+0x74>)
 800c93c:	429c      	cmp	r4, r3
 800c93e:	bf08      	it	eq
 800c940:	68ec      	ldreq	r4, [r5, #12]
 800c942:	e7da      	b.n	800c8fa <_fflush_r+0x22>
 800c944:	0800d9ac 	.word	0x0800d9ac
 800c948:	0800d9cc 	.word	0x0800d9cc
 800c94c:	0800d98c 	.word	0x0800d98c

0800c950 <std>:
 800c950:	2300      	movs	r3, #0
 800c952:	b510      	push	{r4, lr}
 800c954:	4604      	mov	r4, r0
 800c956:	e9c0 3300 	strd	r3, r3, [r0]
 800c95a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c95e:	6083      	str	r3, [r0, #8]
 800c960:	8181      	strh	r1, [r0, #12]
 800c962:	6643      	str	r3, [r0, #100]	; 0x64
 800c964:	81c2      	strh	r2, [r0, #14]
 800c966:	6183      	str	r3, [r0, #24]
 800c968:	4619      	mov	r1, r3
 800c96a:	2208      	movs	r2, #8
 800c96c:	305c      	adds	r0, #92	; 0x5c
 800c96e:	f7ff fa73 	bl	800be58 <memset>
 800c972:	4b05      	ldr	r3, [pc, #20]	; (800c988 <std+0x38>)
 800c974:	6263      	str	r3, [r4, #36]	; 0x24
 800c976:	4b05      	ldr	r3, [pc, #20]	; (800c98c <std+0x3c>)
 800c978:	62a3      	str	r3, [r4, #40]	; 0x28
 800c97a:	4b05      	ldr	r3, [pc, #20]	; (800c990 <std+0x40>)
 800c97c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c97e:	4b05      	ldr	r3, [pc, #20]	; (800c994 <std+0x44>)
 800c980:	6224      	str	r4, [r4, #32]
 800c982:	6323      	str	r3, [r4, #48]	; 0x30
 800c984:	bd10      	pop	{r4, pc}
 800c986:	bf00      	nop
 800c988:	0800cca9 	.word	0x0800cca9
 800c98c:	0800cccb 	.word	0x0800cccb
 800c990:	0800cd03 	.word	0x0800cd03
 800c994:	0800cd27 	.word	0x0800cd27

0800c998 <_cleanup_r>:
 800c998:	4901      	ldr	r1, [pc, #4]	; (800c9a0 <_cleanup_r+0x8>)
 800c99a:	f000 b8af 	b.w	800cafc <_fwalk_reent>
 800c99e:	bf00      	nop
 800c9a0:	0800c8d9 	.word	0x0800c8d9

0800c9a4 <__sfmoreglue>:
 800c9a4:	b570      	push	{r4, r5, r6, lr}
 800c9a6:	1e4a      	subs	r2, r1, #1
 800c9a8:	2568      	movs	r5, #104	; 0x68
 800c9aa:	4355      	muls	r5, r2
 800c9ac:	460e      	mov	r6, r1
 800c9ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c9b2:	f7ff faa9 	bl	800bf08 <_malloc_r>
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	b140      	cbz	r0, 800c9cc <__sfmoreglue+0x28>
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	e9c0 1600 	strd	r1, r6, [r0]
 800c9c0:	300c      	adds	r0, #12
 800c9c2:	60a0      	str	r0, [r4, #8]
 800c9c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c9c8:	f7ff fa46 	bl	800be58 <memset>
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	bd70      	pop	{r4, r5, r6, pc}

0800c9d0 <__sfp_lock_acquire>:
 800c9d0:	4801      	ldr	r0, [pc, #4]	; (800c9d8 <__sfp_lock_acquire+0x8>)
 800c9d2:	f000 b8b3 	b.w	800cb3c <__retarget_lock_acquire_recursive>
 800c9d6:	bf00      	nop
 800c9d8:	2000211c 	.word	0x2000211c

0800c9dc <__sfp_lock_release>:
 800c9dc:	4801      	ldr	r0, [pc, #4]	; (800c9e4 <__sfp_lock_release+0x8>)
 800c9de:	f000 b8ae 	b.w	800cb3e <__retarget_lock_release_recursive>
 800c9e2:	bf00      	nop
 800c9e4:	2000211c 	.word	0x2000211c

0800c9e8 <__sinit_lock_acquire>:
 800c9e8:	4801      	ldr	r0, [pc, #4]	; (800c9f0 <__sinit_lock_acquire+0x8>)
 800c9ea:	f000 b8a7 	b.w	800cb3c <__retarget_lock_acquire_recursive>
 800c9ee:	bf00      	nop
 800c9f0:	20002117 	.word	0x20002117

0800c9f4 <__sinit_lock_release>:
 800c9f4:	4801      	ldr	r0, [pc, #4]	; (800c9fc <__sinit_lock_release+0x8>)
 800c9f6:	f000 b8a2 	b.w	800cb3e <__retarget_lock_release_recursive>
 800c9fa:	bf00      	nop
 800c9fc:	20002117 	.word	0x20002117

0800ca00 <__sinit>:
 800ca00:	b510      	push	{r4, lr}
 800ca02:	4604      	mov	r4, r0
 800ca04:	f7ff fff0 	bl	800c9e8 <__sinit_lock_acquire>
 800ca08:	69a3      	ldr	r3, [r4, #24]
 800ca0a:	b11b      	cbz	r3, 800ca14 <__sinit+0x14>
 800ca0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca10:	f7ff bff0 	b.w	800c9f4 <__sinit_lock_release>
 800ca14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca18:	6523      	str	r3, [r4, #80]	; 0x50
 800ca1a:	4b13      	ldr	r3, [pc, #76]	; (800ca68 <__sinit+0x68>)
 800ca1c:	4a13      	ldr	r2, [pc, #76]	; (800ca6c <__sinit+0x6c>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca22:	42a3      	cmp	r3, r4
 800ca24:	bf04      	itt	eq
 800ca26:	2301      	moveq	r3, #1
 800ca28:	61a3      	streq	r3, [r4, #24]
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f000 f820 	bl	800ca70 <__sfp>
 800ca30:	6060      	str	r0, [r4, #4]
 800ca32:	4620      	mov	r0, r4
 800ca34:	f000 f81c 	bl	800ca70 <__sfp>
 800ca38:	60a0      	str	r0, [r4, #8]
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f000 f818 	bl	800ca70 <__sfp>
 800ca40:	2200      	movs	r2, #0
 800ca42:	60e0      	str	r0, [r4, #12]
 800ca44:	2104      	movs	r1, #4
 800ca46:	6860      	ldr	r0, [r4, #4]
 800ca48:	f7ff ff82 	bl	800c950 <std>
 800ca4c:	68a0      	ldr	r0, [r4, #8]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	2109      	movs	r1, #9
 800ca52:	f7ff ff7d 	bl	800c950 <std>
 800ca56:	68e0      	ldr	r0, [r4, #12]
 800ca58:	2202      	movs	r2, #2
 800ca5a:	2112      	movs	r1, #18
 800ca5c:	f7ff ff78 	bl	800c950 <std>
 800ca60:	2301      	movs	r3, #1
 800ca62:	61a3      	str	r3, [r4, #24]
 800ca64:	e7d2      	b.n	800ca0c <__sinit+0xc>
 800ca66:	bf00      	nop
 800ca68:	0800d930 	.word	0x0800d930
 800ca6c:	0800c999 	.word	0x0800c999

0800ca70 <__sfp>:
 800ca70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca72:	4607      	mov	r7, r0
 800ca74:	f7ff ffac 	bl	800c9d0 <__sfp_lock_acquire>
 800ca78:	4b1e      	ldr	r3, [pc, #120]	; (800caf4 <__sfp+0x84>)
 800ca7a:	681e      	ldr	r6, [r3, #0]
 800ca7c:	69b3      	ldr	r3, [r6, #24]
 800ca7e:	b913      	cbnz	r3, 800ca86 <__sfp+0x16>
 800ca80:	4630      	mov	r0, r6
 800ca82:	f7ff ffbd 	bl	800ca00 <__sinit>
 800ca86:	3648      	adds	r6, #72	; 0x48
 800ca88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	d503      	bpl.n	800ca98 <__sfp+0x28>
 800ca90:	6833      	ldr	r3, [r6, #0]
 800ca92:	b30b      	cbz	r3, 800cad8 <__sfp+0x68>
 800ca94:	6836      	ldr	r6, [r6, #0]
 800ca96:	e7f7      	b.n	800ca88 <__sfp+0x18>
 800ca98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ca9c:	b9d5      	cbnz	r5, 800cad4 <__sfp+0x64>
 800ca9e:	4b16      	ldr	r3, [pc, #88]	; (800caf8 <__sfp+0x88>)
 800caa0:	60e3      	str	r3, [r4, #12]
 800caa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800caa6:	6665      	str	r5, [r4, #100]	; 0x64
 800caa8:	f000 f847 	bl	800cb3a <__retarget_lock_init_recursive>
 800caac:	f7ff ff96 	bl	800c9dc <__sfp_lock_release>
 800cab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cab8:	6025      	str	r5, [r4, #0]
 800caba:	61a5      	str	r5, [r4, #24]
 800cabc:	2208      	movs	r2, #8
 800cabe:	4629      	mov	r1, r5
 800cac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cac4:	f7ff f9c8 	bl	800be58 <memset>
 800cac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cacc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cad0:	4620      	mov	r0, r4
 800cad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cad4:	3468      	adds	r4, #104	; 0x68
 800cad6:	e7d9      	b.n	800ca8c <__sfp+0x1c>
 800cad8:	2104      	movs	r1, #4
 800cada:	4638      	mov	r0, r7
 800cadc:	f7ff ff62 	bl	800c9a4 <__sfmoreglue>
 800cae0:	4604      	mov	r4, r0
 800cae2:	6030      	str	r0, [r6, #0]
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d1d5      	bne.n	800ca94 <__sfp+0x24>
 800cae8:	f7ff ff78 	bl	800c9dc <__sfp_lock_release>
 800caec:	230c      	movs	r3, #12
 800caee:	603b      	str	r3, [r7, #0]
 800caf0:	e7ee      	b.n	800cad0 <__sfp+0x60>
 800caf2:	bf00      	nop
 800caf4:	0800d930 	.word	0x0800d930
 800caf8:	ffff0001 	.word	0xffff0001

0800cafc <_fwalk_reent>:
 800cafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb00:	4606      	mov	r6, r0
 800cb02:	4688      	mov	r8, r1
 800cb04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb08:	2700      	movs	r7, #0
 800cb0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb0e:	f1b9 0901 	subs.w	r9, r9, #1
 800cb12:	d505      	bpl.n	800cb20 <_fwalk_reent+0x24>
 800cb14:	6824      	ldr	r4, [r4, #0]
 800cb16:	2c00      	cmp	r4, #0
 800cb18:	d1f7      	bne.n	800cb0a <_fwalk_reent+0xe>
 800cb1a:	4638      	mov	r0, r7
 800cb1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb20:	89ab      	ldrh	r3, [r5, #12]
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d907      	bls.n	800cb36 <_fwalk_reent+0x3a>
 800cb26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	d003      	beq.n	800cb36 <_fwalk_reent+0x3a>
 800cb2e:	4629      	mov	r1, r5
 800cb30:	4630      	mov	r0, r6
 800cb32:	47c0      	blx	r8
 800cb34:	4307      	orrs	r7, r0
 800cb36:	3568      	adds	r5, #104	; 0x68
 800cb38:	e7e9      	b.n	800cb0e <_fwalk_reent+0x12>

0800cb3a <__retarget_lock_init_recursive>:
 800cb3a:	4770      	bx	lr

0800cb3c <__retarget_lock_acquire_recursive>:
 800cb3c:	4770      	bx	lr

0800cb3e <__retarget_lock_release_recursive>:
 800cb3e:	4770      	bx	lr

0800cb40 <__swhatbuf_r>:
 800cb40:	b570      	push	{r4, r5, r6, lr}
 800cb42:	460e      	mov	r6, r1
 800cb44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb48:	2900      	cmp	r1, #0
 800cb4a:	b096      	sub	sp, #88	; 0x58
 800cb4c:	4614      	mov	r4, r2
 800cb4e:	461d      	mov	r5, r3
 800cb50:	da07      	bge.n	800cb62 <__swhatbuf_r+0x22>
 800cb52:	2300      	movs	r3, #0
 800cb54:	602b      	str	r3, [r5, #0]
 800cb56:	89b3      	ldrh	r3, [r6, #12]
 800cb58:	061a      	lsls	r2, r3, #24
 800cb5a:	d410      	bmi.n	800cb7e <__swhatbuf_r+0x3e>
 800cb5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb60:	e00e      	b.n	800cb80 <__swhatbuf_r+0x40>
 800cb62:	466a      	mov	r2, sp
 800cb64:	f000 f906 	bl	800cd74 <_fstat_r>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	dbf2      	blt.n	800cb52 <__swhatbuf_r+0x12>
 800cb6c:	9a01      	ldr	r2, [sp, #4]
 800cb6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb76:	425a      	negs	r2, r3
 800cb78:	415a      	adcs	r2, r3
 800cb7a:	602a      	str	r2, [r5, #0]
 800cb7c:	e7ee      	b.n	800cb5c <__swhatbuf_r+0x1c>
 800cb7e:	2340      	movs	r3, #64	; 0x40
 800cb80:	2000      	movs	r0, #0
 800cb82:	6023      	str	r3, [r4, #0]
 800cb84:	b016      	add	sp, #88	; 0x58
 800cb86:	bd70      	pop	{r4, r5, r6, pc}

0800cb88 <__smakebuf_r>:
 800cb88:	898b      	ldrh	r3, [r1, #12]
 800cb8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb8c:	079d      	lsls	r5, r3, #30
 800cb8e:	4606      	mov	r6, r0
 800cb90:	460c      	mov	r4, r1
 800cb92:	d507      	bpl.n	800cba4 <__smakebuf_r+0x1c>
 800cb94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb98:	6023      	str	r3, [r4, #0]
 800cb9a:	6123      	str	r3, [r4, #16]
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	6163      	str	r3, [r4, #20]
 800cba0:	b002      	add	sp, #8
 800cba2:	bd70      	pop	{r4, r5, r6, pc}
 800cba4:	ab01      	add	r3, sp, #4
 800cba6:	466a      	mov	r2, sp
 800cba8:	f7ff ffca 	bl	800cb40 <__swhatbuf_r>
 800cbac:	9900      	ldr	r1, [sp, #0]
 800cbae:	4605      	mov	r5, r0
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	f7ff f9a9 	bl	800bf08 <_malloc_r>
 800cbb6:	b948      	cbnz	r0, 800cbcc <__smakebuf_r+0x44>
 800cbb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbbc:	059a      	lsls	r2, r3, #22
 800cbbe:	d4ef      	bmi.n	800cba0 <__smakebuf_r+0x18>
 800cbc0:	f023 0303 	bic.w	r3, r3, #3
 800cbc4:	f043 0302 	orr.w	r3, r3, #2
 800cbc8:	81a3      	strh	r3, [r4, #12]
 800cbca:	e7e3      	b.n	800cb94 <__smakebuf_r+0xc>
 800cbcc:	4b0d      	ldr	r3, [pc, #52]	; (800cc04 <__smakebuf_r+0x7c>)
 800cbce:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbd0:	89a3      	ldrh	r3, [r4, #12]
 800cbd2:	6020      	str	r0, [r4, #0]
 800cbd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbd8:	81a3      	strh	r3, [r4, #12]
 800cbda:	9b00      	ldr	r3, [sp, #0]
 800cbdc:	6163      	str	r3, [r4, #20]
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	6120      	str	r0, [r4, #16]
 800cbe2:	b15b      	cbz	r3, 800cbfc <__smakebuf_r+0x74>
 800cbe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbe8:	4630      	mov	r0, r6
 800cbea:	f000 f8d5 	bl	800cd98 <_isatty_r>
 800cbee:	b128      	cbz	r0, 800cbfc <__smakebuf_r+0x74>
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	f023 0303 	bic.w	r3, r3, #3
 800cbf6:	f043 0301 	orr.w	r3, r3, #1
 800cbfa:	81a3      	strh	r3, [r4, #12]
 800cbfc:	89a0      	ldrh	r0, [r4, #12]
 800cbfe:	4305      	orrs	r5, r0
 800cc00:	81a5      	strh	r5, [r4, #12]
 800cc02:	e7cd      	b.n	800cba0 <__smakebuf_r+0x18>
 800cc04:	0800c999 	.word	0x0800c999

0800cc08 <__malloc_lock>:
 800cc08:	4801      	ldr	r0, [pc, #4]	; (800cc10 <__malloc_lock+0x8>)
 800cc0a:	f7ff bf97 	b.w	800cb3c <__retarget_lock_acquire_recursive>
 800cc0e:	bf00      	nop
 800cc10:	20002118 	.word	0x20002118

0800cc14 <__malloc_unlock>:
 800cc14:	4801      	ldr	r0, [pc, #4]	; (800cc1c <__malloc_unlock+0x8>)
 800cc16:	f7ff bf92 	b.w	800cb3e <__retarget_lock_release_recursive>
 800cc1a:	bf00      	nop
 800cc1c:	20002118 	.word	0x20002118

0800cc20 <_raise_r>:
 800cc20:	291f      	cmp	r1, #31
 800cc22:	b538      	push	{r3, r4, r5, lr}
 800cc24:	4604      	mov	r4, r0
 800cc26:	460d      	mov	r5, r1
 800cc28:	d904      	bls.n	800cc34 <_raise_r+0x14>
 800cc2a:	2316      	movs	r3, #22
 800cc2c:	6003      	str	r3, [r0, #0]
 800cc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc32:	bd38      	pop	{r3, r4, r5, pc}
 800cc34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc36:	b112      	cbz	r2, 800cc3e <_raise_r+0x1e>
 800cc38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc3c:	b94b      	cbnz	r3, 800cc52 <_raise_r+0x32>
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f000 f830 	bl	800cca4 <_getpid_r>
 800cc44:	462a      	mov	r2, r5
 800cc46:	4601      	mov	r1, r0
 800cc48:	4620      	mov	r0, r4
 800cc4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc4e:	f000 b817 	b.w	800cc80 <_kill_r>
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d00a      	beq.n	800cc6c <_raise_r+0x4c>
 800cc56:	1c59      	adds	r1, r3, #1
 800cc58:	d103      	bne.n	800cc62 <_raise_r+0x42>
 800cc5a:	2316      	movs	r3, #22
 800cc5c:	6003      	str	r3, [r0, #0]
 800cc5e:	2001      	movs	r0, #1
 800cc60:	e7e7      	b.n	800cc32 <_raise_r+0x12>
 800cc62:	2400      	movs	r4, #0
 800cc64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc68:	4628      	mov	r0, r5
 800cc6a:	4798      	blx	r3
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	e7e0      	b.n	800cc32 <_raise_r+0x12>

0800cc70 <raise>:
 800cc70:	4b02      	ldr	r3, [pc, #8]	; (800cc7c <raise+0xc>)
 800cc72:	4601      	mov	r1, r0
 800cc74:	6818      	ldr	r0, [r3, #0]
 800cc76:	f7ff bfd3 	b.w	800cc20 <_raise_r>
 800cc7a:	bf00      	nop
 800cc7c:	200000a0 	.word	0x200000a0

0800cc80 <_kill_r>:
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	4d07      	ldr	r5, [pc, #28]	; (800cca0 <_kill_r+0x20>)
 800cc84:	2300      	movs	r3, #0
 800cc86:	4604      	mov	r4, r0
 800cc88:	4608      	mov	r0, r1
 800cc8a:	4611      	mov	r1, r2
 800cc8c:	602b      	str	r3, [r5, #0]
 800cc8e:	f7f5 f93d 	bl	8001f0c <_kill>
 800cc92:	1c43      	adds	r3, r0, #1
 800cc94:	d102      	bne.n	800cc9c <_kill_r+0x1c>
 800cc96:	682b      	ldr	r3, [r5, #0]
 800cc98:	b103      	cbz	r3, 800cc9c <_kill_r+0x1c>
 800cc9a:	6023      	str	r3, [r4, #0]
 800cc9c:	bd38      	pop	{r3, r4, r5, pc}
 800cc9e:	bf00      	nop
 800cca0:	20002120 	.word	0x20002120

0800cca4 <_getpid_r>:
 800cca4:	f7f5 b92a 	b.w	8001efc <_getpid>

0800cca8 <__sread>:
 800cca8:	b510      	push	{r4, lr}
 800ccaa:	460c      	mov	r4, r1
 800ccac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb0:	f000 f894 	bl	800cddc <_read_r>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	bfab      	itete	ge
 800ccb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ccba:	89a3      	ldrhlt	r3, [r4, #12]
 800ccbc:	181b      	addge	r3, r3, r0
 800ccbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ccc2:	bfac      	ite	ge
 800ccc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ccc6:	81a3      	strhlt	r3, [r4, #12]
 800ccc8:	bd10      	pop	{r4, pc}

0800ccca <__swrite>:
 800ccca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccce:	461f      	mov	r7, r3
 800ccd0:	898b      	ldrh	r3, [r1, #12]
 800ccd2:	05db      	lsls	r3, r3, #23
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	460c      	mov	r4, r1
 800ccd8:	4616      	mov	r6, r2
 800ccda:	d505      	bpl.n	800cce8 <__swrite+0x1e>
 800ccdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cce0:	2302      	movs	r3, #2
 800cce2:	2200      	movs	r2, #0
 800cce4:	f000 f868 	bl	800cdb8 <_lseek_r>
 800cce8:	89a3      	ldrh	r3, [r4, #12]
 800ccea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccf2:	81a3      	strh	r3, [r4, #12]
 800ccf4:	4632      	mov	r2, r6
 800ccf6:	463b      	mov	r3, r7
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfe:	f000 b817 	b.w	800cd30 <_write_r>

0800cd02 <__sseek>:
 800cd02:	b510      	push	{r4, lr}
 800cd04:	460c      	mov	r4, r1
 800cd06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd0a:	f000 f855 	bl	800cdb8 <_lseek_r>
 800cd0e:	1c43      	adds	r3, r0, #1
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	bf15      	itete	ne
 800cd14:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd1e:	81a3      	strheq	r3, [r4, #12]
 800cd20:	bf18      	it	ne
 800cd22:	81a3      	strhne	r3, [r4, #12]
 800cd24:	bd10      	pop	{r4, pc}

0800cd26 <__sclose>:
 800cd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd2a:	f000 b813 	b.w	800cd54 <_close_r>
	...

0800cd30 <_write_r>:
 800cd30:	b538      	push	{r3, r4, r5, lr}
 800cd32:	4d07      	ldr	r5, [pc, #28]	; (800cd50 <_write_r+0x20>)
 800cd34:	4604      	mov	r4, r0
 800cd36:	4608      	mov	r0, r1
 800cd38:	4611      	mov	r1, r2
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	602a      	str	r2, [r5, #0]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	f7f5 f91b 	bl	8001f7a <_write>
 800cd44:	1c43      	adds	r3, r0, #1
 800cd46:	d102      	bne.n	800cd4e <_write_r+0x1e>
 800cd48:	682b      	ldr	r3, [r5, #0]
 800cd4a:	b103      	cbz	r3, 800cd4e <_write_r+0x1e>
 800cd4c:	6023      	str	r3, [r4, #0]
 800cd4e:	bd38      	pop	{r3, r4, r5, pc}
 800cd50:	20002120 	.word	0x20002120

0800cd54 <_close_r>:
 800cd54:	b538      	push	{r3, r4, r5, lr}
 800cd56:	4d06      	ldr	r5, [pc, #24]	; (800cd70 <_close_r+0x1c>)
 800cd58:	2300      	movs	r3, #0
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	4608      	mov	r0, r1
 800cd5e:	602b      	str	r3, [r5, #0]
 800cd60:	f7f5 f927 	bl	8001fb2 <_close>
 800cd64:	1c43      	adds	r3, r0, #1
 800cd66:	d102      	bne.n	800cd6e <_close_r+0x1a>
 800cd68:	682b      	ldr	r3, [r5, #0]
 800cd6a:	b103      	cbz	r3, 800cd6e <_close_r+0x1a>
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	bd38      	pop	{r3, r4, r5, pc}
 800cd70:	20002120 	.word	0x20002120

0800cd74 <_fstat_r>:
 800cd74:	b538      	push	{r3, r4, r5, lr}
 800cd76:	4d07      	ldr	r5, [pc, #28]	; (800cd94 <_fstat_r+0x20>)
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	4608      	mov	r0, r1
 800cd7e:	4611      	mov	r1, r2
 800cd80:	602b      	str	r3, [r5, #0]
 800cd82:	f7f5 f922 	bl	8001fca <_fstat>
 800cd86:	1c43      	adds	r3, r0, #1
 800cd88:	d102      	bne.n	800cd90 <_fstat_r+0x1c>
 800cd8a:	682b      	ldr	r3, [r5, #0]
 800cd8c:	b103      	cbz	r3, 800cd90 <_fstat_r+0x1c>
 800cd8e:	6023      	str	r3, [r4, #0]
 800cd90:	bd38      	pop	{r3, r4, r5, pc}
 800cd92:	bf00      	nop
 800cd94:	20002120 	.word	0x20002120

0800cd98 <_isatty_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4d06      	ldr	r5, [pc, #24]	; (800cdb4 <_isatty_r+0x1c>)
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	4604      	mov	r4, r0
 800cda0:	4608      	mov	r0, r1
 800cda2:	602b      	str	r3, [r5, #0]
 800cda4:	f7f5 f921 	bl	8001fea <_isatty>
 800cda8:	1c43      	adds	r3, r0, #1
 800cdaa:	d102      	bne.n	800cdb2 <_isatty_r+0x1a>
 800cdac:	682b      	ldr	r3, [r5, #0]
 800cdae:	b103      	cbz	r3, 800cdb2 <_isatty_r+0x1a>
 800cdb0:	6023      	str	r3, [r4, #0]
 800cdb2:	bd38      	pop	{r3, r4, r5, pc}
 800cdb4:	20002120 	.word	0x20002120

0800cdb8 <_lseek_r>:
 800cdb8:	b538      	push	{r3, r4, r5, lr}
 800cdba:	4d07      	ldr	r5, [pc, #28]	; (800cdd8 <_lseek_r+0x20>)
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	4608      	mov	r0, r1
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	602a      	str	r2, [r5, #0]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	f7f5 f91a 	bl	8002000 <_lseek>
 800cdcc:	1c43      	adds	r3, r0, #1
 800cdce:	d102      	bne.n	800cdd6 <_lseek_r+0x1e>
 800cdd0:	682b      	ldr	r3, [r5, #0]
 800cdd2:	b103      	cbz	r3, 800cdd6 <_lseek_r+0x1e>
 800cdd4:	6023      	str	r3, [r4, #0]
 800cdd6:	bd38      	pop	{r3, r4, r5, pc}
 800cdd8:	20002120 	.word	0x20002120

0800cddc <_read_r>:
 800cddc:	b538      	push	{r3, r4, r5, lr}
 800cdde:	4d07      	ldr	r5, [pc, #28]	; (800cdfc <_read_r+0x20>)
 800cde0:	4604      	mov	r4, r0
 800cde2:	4608      	mov	r0, r1
 800cde4:	4611      	mov	r1, r2
 800cde6:	2200      	movs	r2, #0
 800cde8:	602a      	str	r2, [r5, #0]
 800cdea:	461a      	mov	r2, r3
 800cdec:	f7f5 f8a8 	bl	8001f40 <_read>
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d102      	bne.n	800cdfa <_read_r+0x1e>
 800cdf4:	682b      	ldr	r3, [r5, #0]
 800cdf6:	b103      	cbz	r3, 800cdfa <_read_r+0x1e>
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	bd38      	pop	{r3, r4, r5, pc}
 800cdfc:	20002120 	.word	0x20002120

0800ce00 <_init>:
 800ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce02:	bf00      	nop
 800ce04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce06:	bc08      	pop	{r3}
 800ce08:	469e      	mov	lr, r3
 800ce0a:	4770      	bx	lr

0800ce0c <_fini>:
 800ce0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0e:	bf00      	nop
 800ce10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce12:	bc08      	pop	{r3}
 800ce14:	469e      	mov	lr, r3
 800ce16:	4770      	bx	lr
